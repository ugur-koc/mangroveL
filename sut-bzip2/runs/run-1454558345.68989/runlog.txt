===< 29451 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
5053d5052
< #include <stdlib.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
5053d5052
< #include <string.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
5054d5053
< #include <errno.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
5069d5068
< #   include <sys/times.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
5118d5117
< #   include <fcntl.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5031d5030
< #   ifdef __DJGPP__
5043d5041
< #   endif
6672,6674d6669
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5031,5044d5030
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6672d6657
< #  ifndef __DJGPP__
6674d6658
< #  endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1220,1222c1220
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
811,819c811
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1091,1101c1091
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
1152,1179c1152
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1273,1280c1273
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
1526c1526
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_balanced :: curly2 >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct ; 
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct ;
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct ;
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;;
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) ;
(80.6 %, 39819 bytes)
1025,1080c1025
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1046,1073c1046
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) ;
(81.1 %, 38643 bytes)
1135,1187c1135
< {
<    Int32   n;
<    EState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
---
> ;
1219,1230c1219
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
(81.9 %, 37137 bytes)
1167,1178c1167
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
1183,1198c1183
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
(82.0 %, 36897 bytes)
1172,1187c1172
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1199,1231c1199
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.2 %, 36536 bytes)
1184,1216c1184
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
1238,1250c1238
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
(82.7 %, 35523 bytes)
1206,1218c1206
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
1223,1238c1223
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
(82.8 %, 35296 bytes)
1211,1226c1211
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1237,1245c1237
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1260,1297c1260
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.0 %, 34941 bytes)
1222,1230c1222
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1245,1282c1245
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1292,1322c1292
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1310,1321c1310
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.3 %, 34129 bytes)
1255,1285c1255
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1273,1284c1273
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.6 %, 33556 bytes)
1265,1268c1265
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> ;
1279,1311c1279
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(83.7 %, 33447 bytes)
1276,1308c1276
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1319,1360c1319
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(84.1 %, 32584 bytes)
1287,1328c1287
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1333,1346c1333
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(84.5 %, 31734 bytes)
1292,1305c1292
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1314,1335c1314
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
(84.6 %, 31528 bytes)
1301,1322c1301
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1331,1343c1331
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
1359,1399c1359
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
(84.7 %, 31285 bytes)
1347,1387c1347
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
1398,1437c1398
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
(85.2 %, 30281 bytes)
1358,1397c1358
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
1389,1392c1389
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm.avail_out > 0) ; else ;      
(85.7 %, 29363 bytes)
1368,1370c1368
< {
<    return BZ_VERSION;
< }
---
> ;
1389,1391c1389
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
(85.7 %, 29339 bytes)
1387,1389c1387
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
1396,1398c1396
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
(85.7 %, 29292 bytes)
1394,1396c1394
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
1401,1410c1401
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
(85.7 %, 29245 bytes)
1399,1408c1399
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
1405,1407c1405
<    } else {
<       return -1;
<    }
---
>    } else ;
(85.7 %, 29220 bytes)
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
1411,1420c1411
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
(85.8 %, 29198 bytes)
1409,1418c1409
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
1413,1415c1413
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK);else{
(85.8 %, 29074 bytes)
1414,1417c1414
< {
<    
<    return 0;
< }
---
> ;
1422,1436c1422
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
(85.8 %, 29055 bytes)
1419,1433c1419
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1424,1429c1424
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
(86.0 %, 28760 bytes)
1424,1441c1424
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;;
1445,1451c1445
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
---
> ;
1733c1733
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1735c1735
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
(86.0 %, 28646 bytes)
1727c1727
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1729c1729
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
===< pass_balanced :: curly3 >===
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] ;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
(86.1 %, 28523 bytes)
833,901c833
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
915,968c915
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
(87.8 %, 24993 bytes)
847,900c847
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
1354,1371c1354
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
(89.1 %, 22249 bytes)
1301,1318c1301
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
1604c1604
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
(89.3 %, 21940 bytes)
1587c1587
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21904 bytes)
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21876 bytes)
===< pass_clang :: callexpr-to-value >===
1279c1279
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(89.3 %, 21849 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(89.4 %, 21821 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,717c716
< static
< Int32 incs[14] ;
---
> 
(89.4 %, 21787 bytes)
716,717c716
< static
< Int32 incs[14] ;
---
> 
833c833
< UInt32 BZ2_crc32Table[256] ;
---
> 
(89.4 %, 21764 bytes)
832c832
< UInt32 BZ2_crc32Table[256] ;
---
> 
846c846
< Int32 BZ2_rNums[512] ;
---
> 
(89.4 %, 21736 bytes)
846c846
< Int32 BZ2_rNums[512] ;
---
> 
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
(89.4 %, 21714 bytes)
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
1178c1178
<    Int32   n, ret;
---
>    Int32   n;
(89.4 %, 21712 bytes)
1178c1178
<    Int32    ret;
---
>    
1300c1300
< static char *bzerrorstrings[] ;
---
> 
(89.4 %, 21699 bytes)
1300c1300
< static char *bzerrorstrings[] ;
---
> 
1391c1391
< Int32   verbosity;
---
> 
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(89.4 %, 21668 bytes)
1391c1391
< Int32   verbosity;
---
> 
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(89.4 %, 21650 bytes)
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(89.4 %, 21635 bytes)
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(89.4 %, 21625 bytes)
1392c1392
< Bool      deleteOutputOnInterrupt;
---
> 
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(89.5 %, 21591 bytes)
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(89.5 %, 21576 bytes)
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(89.5 %, 21561 bytes)
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(89.5 %, 21547 bytes)
1393c1393
< Bool       noisy;
---
> 
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(89.5 %, 21530 bytes)
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(89.5 %, 21517 bytes)
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(89.5 %, 21499 bytes)
1394c1394
< Int32     blockSize100k;
---
> 
1395c1395
< Int32   exitValue;
---
> 
(89.5 %, 21475 bytes)
1395c1395
< Int32   exitValue;
---
> 
1407c1407
< Int32   opMode;
---
> 
(89.5 %, 21457 bytes)
1407c1407
< Int32   opMode;
---
> 
1408c1408
< Int32   srcMode;
---
> 
(89.5 %, 21442 bytes)
1408c1408
< Int32   srcMode;
---
> 
1412c1412
< Int32   longestFileName;
---
> 
(89.5 %, 21426 bytes)
1412c1412
< Int32   longestFileName;
---
> 
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
(89.6 %, 21402 bytes)
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
(89.6 %, 21371 bytes)
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
(89.6 %, 21340 bytes)
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
1416c1416
< Char    *progName;
---
> 
(89.6 %, 21309 bytes)
1416c1416
< Char    *progName;
---
> 
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(89.6 %, 21291 bytes)
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
(89.6 %, 21253 bytes)
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
1419c1419
< Int32   workFactor;
---
> 
(89.6 %, 21221 bytes)
1419c1419
< Int32   workFactor;
---
> 
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(89.7 %, 21202 bytes)
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
1585,1586c1585
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21166 bytes)
1584,1585c1584
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
1586,1587c1586
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21128 bytes)
1585,1586c1585
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21088 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_clang :: aggregate-to-scalar >===
1179a1180
>    Bool bzf_3;
1186c1187
<    if (bzf->writing)
---
>    if (bzf_3)
1179a1180
>    unsigned int bzf_4_5;
1192c1193
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
(89.7 %, 21096 bytes)
1179a1180
>    unsigned int bzf_4_5;
1193c1194
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
1179a1180
>    char *bzf_4_4;
1194c1195
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
(89.7 %, 21109 bytes)
1179a1180
>    char *bzf_4_4;
1195c1196
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
(89.7 %, 21116 bytes)
===< pass_clang :: simple-inliner >===
===< pass_clang :: reduce-pointer-level >===
32c32
<       char *next_in;
---
>       char next_in;
37c37
<       char *next_out;
---
>       char next_out;
(89.7 %, 21115 bytes)
37c37
<       char *next_out;
---
>       char next_out;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
(89.7 %, 21114 bytes)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
368c368
<       UInt32*  arr1;
---
>       UInt32  arr1;
(89.7 %, 21113 bytes)
368c368
<       UInt32*  arr1;
---
>       UInt32  arr1;
369c369
<       UInt32*  arr2;
---
>       UInt32  arr2;
(89.7 %, 21112 bytes)
369c369
<       UInt32*  arr2;
---
>       UInt32  arr2;
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab;
(89.7 %, 21111 bytes)
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab;
374c374
<       UInt32*  ptr;
---
>       UInt32  ptr;
(89.7 %, 21110 bytes)
374c374
<       UInt32*  ptr;
---
>       UInt32  ptr;
375c375
<       UChar*   block;
---
>       UChar   block;
(89.7 %, 21109 bytes)
375c375
<       UChar*   block;
---
>       UChar   block;
376c376
<       UInt16*  mtfv;
---
>       UInt16  mtfv;
377c377
<       UChar*   zbits;
---
>       UChar   zbits;
(89.7 %, 21108 bytes)
376c376
<       UInt16*  mtfv;
---
>       UInt16  mtfv;
377c377
<       UChar*   zbits;
---
>       UChar   zbits;
(89.7 %, 21107 bytes)
377c377
<       UChar*   zbits;
---
>       UChar   zbits;
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
(89.7 %, 21106 bytes)
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
(89.7 %, 21105 bytes)
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
537c537
<       UInt16   *ll16;
---
>       UInt16   ll16;
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
(89.7 %, 21104 bytes)
537c537
<       UInt16   *ll16;
---
>       UInt16   ll16;
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
(89.7 %, 21103 bytes)
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
(89.7 %, 21102 bytes)
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
587c587
<       Int32*   save_gBase;
---
>       Int32   save_gBase;
(89.7 %, 21101 bytes)
587c587
<       Int32*   save_gBase;
---
>       Int32   save_gBase;
588c588
<       Int32*   save_gPerm;
---
>       Int32   save_gPerm;
(89.7 %, 21100 bytes)
588c588
<       Int32*   save_gPerm;
---
>       Int32   save_gPerm;
1099c1099
<       FILE*     handle;
---
>       FILE     handle;
(89.7 %, 21099 bytes)
1099c1099
<       FILE*     handle;
---
>       FILE     handle;
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1180c1180
<    char *bzf_4_4;
---
>    char bzf_4_4;
1196c1196
<    bzf_4_4 = buf;
---
>    bzf_4_4 = *buf;
(89.7 %, 21098 bytes)
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1180c1180
<    char *bzf_4_4;
---
>    char bzf_4_4;
1196c1196
<    bzf_4_4 = buf;
---
>    bzf_4_4 = *buf;
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: remove-unresolved-base >===
===< pass_unifdef :: 0 >===
1356d1355
< #if BZ_UNIX
1376,1377d1374
< #endif 
< 
1558,1572d1554
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
1356,1381d1355
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
1558,1572d1531
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
(89.7 %, 21045 bytes)
===< pass_ints :: a >===
94c94
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(89.7 %, 21044 bytes)
94c94
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
194c194
<       int        fd,
---
>       int        d,
(89.7 %, 21043 bytes)
94c94
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
194c194
<       int        fd,
---
>       int        d,
(89.7 %, 21042 bytes)
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(89.7 %, 21041 bytes)
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
(89.7 %, 21040 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(89.7 %, 21039 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
(89.7 %, 21038 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(89.7 %, 21037 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(89.7 %, 21036 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
(89.7 %, 21035 bytes)
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
(89.7 %, 21034 bytes)
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(89.7 %, 21033 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(89.7 %, 21032 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(89.7 %, 21031 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(89.7 %, 21030 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(89.7 %, 21029 bytes)
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(89.7 %, 21028 bytes)
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(89.7 %, 21027 bytes)
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(89.7 %, 21026 bytes)
395c395
<       Bool     inUse[56];
---
>       Bool     inUse[6];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(89.7 %, 21025 bytes)
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(89.7 %, 21024 bytes)
396c396
<       UChar    unseqToSeq[56];
---
>       UChar    unseqToSeq[6];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(89.7 %, 21023 bytes)
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(89.7 %, 21022 bytes)
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
(89.7 %, 21021 bytes)
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(89.7 %, 21020 bytes)
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(89.7 %, 21019 bytes)
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
(89.7 %, 21018 bytes)
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(89.7 %, 21017 bytes)
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(89.7 %, 21016 bytes)
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
(89.7 %, 21015 bytes)
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(89.7 %, 21014 bytes)
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
(89.7 %, 21013 bytes)
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
(89.7 %, 21012 bytes)
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(89.7 %, 21011 bytes)
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
(89.7 %, 21010 bytes)
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
(89.7 %, 21009 bytes)
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(89.7 %, 21008 bytes)
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
(89.7 %, 21007 bytes)
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(89.7 %, 21006 bytes)
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(89.8 %, 21005 bytes)
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
(89.8 %, 21004 bytes)
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(89.8 %, 21003 bytes)
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(89.8 %, 21002 bytes)
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(89.8 %, 21001 bytes)
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
(89.8 %, 21000 bytes)
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
(89.8 %, 20999 bytes)
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
(89.8 %, 20998 bytes)
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
(89.8 %, 20997 bytes)
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(89.8 %, 20996 bytes)
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(89.8 %, 20995 bytes)
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
(89.8 %, 20994 bytes)
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
(89.8 %, 20993 bytes)
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(89.8 %, 20992 bytes)
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(89.8 %, 20991 bytes)
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
(89.8 %, 20990 bytes)
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(89.8 %, 20989 bytes)
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
(89.8 %, 20988 bytes)
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(89.8 %, 20987 bytes)
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(89.8 %, 20986 bytes)
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(89.8 %, 20985 bytes)
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(89.8 %, 20984 bytes)
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
(89.8 %, 20983 bytes)
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(89.8 %, 20982 bytes)
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(89.8 %, 20981 bytes)
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(89.8 %, 20980 bytes)
528c528
<       Int32    unzftab[56];
---
>       Int32    unzftab[6];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(89.8 %, 20979 bytes)
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(89.8 %, 20978 bytes)
530c530
<       Int32    cftab[57];
---
>       Int32    cftab[7];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(89.8 %, 20977 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(89.8 %, 20976 bytes)
531c531
<       Int32    cftabCopy[57];
---
>       Int32    cftabCopy[7];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(89.8 %, 20975 bytes)
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
(89.8 %, 20974 bytes)
548c548
<       Bool     inUse[56];
---
>       Bool     inUse[6];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
(89.8 %, 20973 bytes)
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
(89.8 %, 20972 bytes)
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(89.8 %, 20971 bytes)
550c550
<       UChar    seqToUnseq[56];
---
>       UChar    seqToUnseq[6];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(89.8 %, 20970 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(89.8 %, 20969 bytes)
554c554
<       Int32    mtfbase[56 / MTFL_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(89.8 %, 20968 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(89.8 %, 20967 bytes)
597c597
< #define BZ_GET_FAST(ccc)                     \
---
> #define BZ_GET_FAST(cc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(89.8 %, 20966 bytes)
597c597
< #define BZ_GET_FAST(cc)                     \
---
> #define BZ_GET_FAST(c)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(89.8 %, 20965 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
(89.8 %, 20964 bytes)
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xff);           \
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xf);           \
(89.8 %, 20963 bytes)
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xff);           \
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xf);           \
(89.8 %, 20962 bytes)
599c599
<     c = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xf);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(89.8 %, 20961 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(89.8 %, 20960 bytes)
602c602
< #define BZ_GET_FAST_C(ccc)                   \
---
> #define BZ_GET_FAST_C(cc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
(89.8 %, 20959 bytes)
602c602
< #define BZ_GET_FAST_C(cc)                   \
---
> #define BZ_GET_FAST_C(c)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(89.8 %, 20958 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
(89.8 %, 20957 bytes)
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xff);            \
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xf);            \
(89.8 %, 20956 bytes)
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xff);            \
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xf);            \
(89.8 %, 20955 bytes)
604c604
<     c = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
(89.8 %, 20954 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
(89.8 %, 20953 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
(89.8 %, 20952 bytes)
619c619
< #define BZ_GET_SMALL(ccc)                            \
---
> #define BZ_GET_SMALL(cc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(89.8 %, 20951 bytes)
619c619
< #define BZ_GET_SMALL(cc)                            \
---
> #define BZ_GET_SMALL(c)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(89.8 %, 20950 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(89.8 %, 20949 bytes)
620c620
<       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(89.8 %, 20948 bytes)
620c620
<       cc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(89.8 %, 20947 bytes)
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(89.8 %, 20946 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(89.8 %, 20945 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   00
---
> #define FALLBACK_QSORT_STACK_SIZE   0
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
(89.8 %, 20944 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(89.8 %, 20943 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(89.8 %, 20942 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
(89.8 %, 20941 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(89.8 %, 20940 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0xf)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(89.8 %, 20939 bytes)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
(89.8 %, 20938 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
(89.8 %, 20937 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 00
---
> #define MAIN_QSORT_STACK_SIZE 0
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
(89.8 %, 20936 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
(89.8 %, 20935 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(89.8 %, 20934 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(89.8 %, 20933 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(89.8 %, 20932 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(89.8 %, 20931 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(89.8 %, 20930 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(89.8 %, 20929 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x0)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(89.8 %, 20928 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(89.8 %, 20927 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(89.8 %, 20926 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(89.8 %, 20925 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(89.8 %, 20924 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(89.8 %, 20923 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xff)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(89.8 %, 20922 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xf)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(89.8 %, 20921 bytes)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1255c1255
<                  int fd,             
---
>                  int d,             
(89.8 %, 20920 bytes)
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1255c1255
<                  int fd,             
---
>                  int d,             
1271c1271
<                ( int fd,
---
>                ( int d,
(89.8 %, 20919 bytes)
1094c1094
< #define BZ_SETERR(ee)                    \
---
> #define BZ_SETERR(e)                    \
1255c1255
<                  int fd,             
---
>                  int d,             
1271c1271
<                ( int fd,
---
>                ( int d,
(89.8 %, 20918 bytes)
1255c1255
<                  int fd,             
---
>                  int d,             
1271c1271
<                ( int fd,
---
>                ( int d,
(89.8 %, 20917 bytes)
1271c1271
<                ( int fd,
---
>                ( int d,
1371c1371
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
(89.8 %, 20916 bytes)
1371c1371
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
1410c1410
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
1606c1606
<    Cell;
---
>    ell;
(89.8 %, 20915 bytes)
1410c1410
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
1606c1606
<    Cell;
---
>    ell;
(89.8 %, 20914 bytes)
1410c1410
< #define FILE_NAME_LEN 034
---
> #define FILE_NAME_LEN 04
1606c1606
<    Cell;
---
>    ell;
(89.8 %, 20913 bytes)
1410c1410
< #define FILE_NAME_LEN 04
---
> #define FILE_NAME_LEN 4
1606c1606
<    Cell;
---
>    ell;
(89.8 %, 20912 bytes)
1606c1606
<    Cell;
---
>    ell;
(89.8 %, 20911 bytes)
===< pass_ints :: c >===
===< pass_ints :: e >===
1606c1606
<    ell;
---
>    e;
(89.8 %, 20909 bytes)
===< pass_clex :: rm-toks-15 >===
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
(89.9 %, 20797 bytes)
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> ##define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> ##define BZ_SEQUENCE_ERROR    (-1)
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define define BZ_SEQUENCE_ERROR    (-1)
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_RUN_OK            BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define 1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_FLUSH_OK          )
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_FINISH_OK         (-2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> -2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define )
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_STREAM_END        #define BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> define BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    -3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    (3)
(89.9 %, 20728 bytes)
14,16c14
< #define BZ_SEQUENCE_ERROR    -3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_SEQUENCE_ERROR    5)
14,16c14
< #define BZ_SEQUENCE_ERROR    -3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_SEQUENCE_ERROR    -)
14,17c14
< #define BZ_SEQUENCE_ERROR    -3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_SEQUENCE_ERROR    -3#define BZ_IO_ERROR          (-6)
(89.9 %, 20659 bytes)
14,16c14
< #define BZ_SEQUENCE_ERROR    5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_SEQUENCE_ERROR    )
14,17c14
< #define BZ_SEQUENCE_ERROR    5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_SEQUENCE_ERROR    5#define BZ_OUTBUFF_FULL      (-8)
(90.0 %, 20590 bytes)
14,18c14
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define BZ_SEQUENCE_ERROR    typedef 
15,19c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> struct {
15,19c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #{
15,20c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
---
> #define char next_in;
15,20c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
---
> #define BZ_OUTBUFF_FULL      next_in;
15,20c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
---
> #define BZ_OUTBUFF_FULL      (;
15,21c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
---
> #define BZ_OUTBUFF_FULL      (-unsigned int avail_in;
15,21c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
---
> #define BZ_OUTBUFF_FULL      (-8int avail_in;
16,21c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
---
> avail_in;
16,21c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
---
> #;
16,22c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define unsigned int total_in_lo32;
16,22c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      int total_in_lo32;
16,22c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (total_in_lo32;
16,22c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-;
16,23c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
> #define BZ_CONFIG_ERROR      (-9unsigned int total_in_hi32;
18,23c18
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
> int total_in_hi32;
19,23c19
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    total_in_hi32;
19,23c19
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct ;
20,24d19
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
20,24d19
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
(90.0 %, 20472 bytes)
20,24d19
<       char next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
20,25c20
<       char next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *state;
(90.1 %, 20350 bytes)
20,22c20
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int);
20,22c20
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int);
20,22c20
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *);
21,22d20
< 
<       void *(*bzalloc)(void *,int,int);
22d21
<       void *(*bzalloc)(void *,int,int);
(90.1 %, 20309 bytes)
20,22c20
<       void *state;
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void *state*opaque;
21,22c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       opaque;
21,22c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void ;
21,23c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (} 
21,24c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bz_stream;
21,24c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree;
21,28c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)#include <stdio.h>
21,28c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(include <stdio.h>
21,28c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void <stdio.h>
21,28c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *stdio.h>
21,28c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,.h>
21,28c21
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void h>
(90.1 %, 20265 bytes)
21,29c21
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void func) func
22,29c22
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    ) func
23,29c23
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func
23,30c23
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
>    bz_stream#   define BZ_EXTERN extern
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #BZ_EXTERN extern
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include extern
27,35c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
27,35c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdioint BZ_API(BZ2_bzCompressInit) ( 
27,35c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.BZ_API(BZ2_bzCompressInit) ( 
27,35c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.h(BZ2_bzCompressInit) ( 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ2_bzCompressInit) ( 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   ) ( 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define ( 
29,36c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_APIbz_stream* strm, 
29,36c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(* strm, 
29,36c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(funcstrm, 
29,36c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(func) , 
30,37c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> int        blockSize100k, 
30,37c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   blockSize100k, 
30,37c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define , 
30,38c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> #   define BZ_EXTERN int        verbosity, 
35,38c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> verbosity, 
35,38c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN , 
35,39c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int int        workFactor 
35,39c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int BZ_APIworkFactor 
35,40c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API();
35,40c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit;
35,42c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
36,42c36
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int BZ_API(BZ2_bzCompress) ( 
36,42c36
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_streamBZ_API(BZ2_bzCompress) ( 
36,42c36
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* (BZ2_bzCompress) ( 
36,42c36
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* strmBZ2_bzCompress) ( 
37,42c37
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       ) ( 
37,42c37
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        ( 
(90.2 %, 20124 bytes)
37,41d36
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
37,41d36
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
(90.2 %, 20035 bytes)
35,41c35
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(int BZ_API(BZ2_bzDecompressInit) ( 
35,41c35
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
37,41c37
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> (BZ2_bzDecompressInit) ( 
37,41c37
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ2_bzDecompressInit) ( 
37,41c37
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int ) ( 
(90.3 %, 19945 bytes)
35,39c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> BZ_EXTERN int BZ_API();
35,41c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_APIBZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
35,41c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(int BZ_API(BZ2_bzDecompress) ( 
35,41c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInitBZ_API(BZ2_bzDecompress) ( 
35,41c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) (BZ2_bzDecompress) ( 
36,41c36
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       BZ2_bzDecompress) ( 
36,41c36
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream ) ( 
36,41c36
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *( 
(90.3 %, 19835 bytes)
35,41c35
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
37,41c37
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> (BZ2_bzDecompressEnd) ( 
(90.4 %, 19746 bytes)
35,45c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()void BZFILE;
35,45c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_APIBZFILE;
35,45c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(;
35,47c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEndBZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
35,47c35
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) BZFILE* BZ_API(BZ2_bzReadOpen) ( 
36,47c36
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       * BZ_API(BZ2_bzReadOpen) ( 
36,47c36
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream BZ_API(BZ2_bzReadOpen) ( 
36,47c36
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream *(BZ2_bzReadOpen) ( 
37,47c37
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    BZ2_bzReadOpen) ( 
37,47c37
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    )) ( 
43,47c43
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ( 
43,48c43
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #int*  bzerror,   
43,48c43
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define *  bzerror,   
43,48c43
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED bzerror,   
45,48c45
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> ,   
45,49c45
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef FILE* f, 
45,49c45
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void * f, 
45,49c45
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEf, 
47,49c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> , 
47,50c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN int   verbosity, 
47,50c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILEverbosity, 
47,50c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* , 
47,51c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_APIint   small,
47,51c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(small,
47,51c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen,
47,52c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) void* unused,    
48,52c48
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
48,52c48
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intunused,    
48,52c48
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  ,    
48,53c48
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int*  bzerrorint   nUnused 
49,53c49
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
49,54c49
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE);
49,54c49
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* ;
49,56c49
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       FILE* fBZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
50,56c50
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void BZ_API(BZ2_bzReadClose) ( 
50,56c50
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   BZ_API(BZ2_bzReadClose) ( 
50,56c50
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   verbosity(BZ2_bzReadClose) ( 
51,56c51
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       BZ2_bzReadClose) ( 
51,56c51
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   ) ( 
51,56c51
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   small( 
52,56d51
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
52,57c52
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void*    bzerror, 
52,57c52
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* bzerror, 
52,57c52
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* unused, 
53,57d52
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
53,58c53
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       int   * b 
54,58c54
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    b 
54,59c54
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
>    ));
56,59c56
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> ;
56,61c56
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
56,61c56
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void void BZ_API(BZ2_bzReadGetUnused) ( 
56,61c56
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ_API(BZ2_bzReadGetUnused) ( 
56,61c56
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API((BZ2_bzReadGetUnused) ( 
56,61c56
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadCloseBZ2_bzReadGetUnused) ( 
(90.4 %, 19659 bytes)
56,60c56
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> , 
58,61c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void**  unused,  
58,61c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN **  unused,  
58,61c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void *  unused,  
58,61c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIunused,  
58,61c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(,  
58,62c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedint*    nUnused 
58,62c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) *    nUnused 
59,62c59
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
59,63c59
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int);
59,63c59
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    ;
59,65c59
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    bzerrorBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
60,65c60
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int BZ_API(BZ2_bzRead) ( 
60,65c60
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILEBZ_API(BZ2_bzRead) ( 
60,65c60
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* (BZ2_bzRead) ( 
60,65c60
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* bBZ2_bzRead) ( 
61,65c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       ) ( 
61,65c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void( 
61,66c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void*int*    bzerror, 
61,66c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  *    bzerror, 
61,66c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  unusedbzerror, 
62,66c62
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       , 
62,67c62
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intBZFILE* b, 
62,67c62
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    * b, 
63,67c63
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    b, 
63,67c63
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    ), 
65,68c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> void*   buf, 
65,68c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN *   buf, 
65,68c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int buf, 
65,68c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API, 
65,69c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(int     len 
65,69c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadlen 
65,70c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) );
66,70c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
66,72c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       intBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
66,72c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
66,72c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    bzerror* BZ_API(BZ2_bzWriteOpen) ( 
67,72c67
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_API(BZ2_bzWriteOpen) ( 
67,72c67
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE(BZ2_bzWriteOpen) ( 
(90.4 %, 19578 bytes)
66,70c66
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    * f, 
66,70c66
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )f, 
68,70c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> , 
68,71c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN int   blockSize100k, 
68,71c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILEblockSize100k, 
68,71c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* , 
68,72c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIint   verbosity, 
68,72c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(verbosity, 
68,72c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
68,73c68
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   workFactor 
69,73c69
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
69,74c69
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int);
69,74c69
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  ;
69,76c69
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int*  bzerrorBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
70,76c70
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       void BZ_API(BZ2_bzWrite) ( 
70,76c70
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILEBZ_API(BZ2_bzWrite) ( 
70,76c70
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* (BZ2_bzWrite) ( 
70,76c70
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* fBZ2_bzWrite) ( 
71,76c71
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ) ( 
71,76c71
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ( 
71,77c71
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   blockSize100kint*    bzerror, 
72,77c72
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
72,77c72
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   bzerror, 
73,77d72
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
73,77d72
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
73,78c73
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   * b, 
74,78c74
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    b, 
74,78c74
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    ), 
76,79c76
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> void*   buf, 
76,79c76
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN *   buf, 
76,79c76
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void buf, 
76,79c76
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API, 
76,80c76
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(int     len 
76,80c76
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(BZ2_bzWritelen 
76,81c76
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) );
77,81c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
77,83c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       intBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
77,83c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    void BZ_API(BZ2_bzWriteClose) ( 
77,83c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    bzerrorBZ_API(BZ2_bzWriteClose) ( 
78,83c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       (BZ2_bzWriteClose) ( 
78,83c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILEBZ2_bzWriteClose) ( 
78,83c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* ) ( 
78,83c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* b( 
(90.5 %, 19497 bytes)
77,81c77
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    b, 
77,81c77
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    ), 
79,82c79
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> int           abandon, 
79,82c79
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN abandon, 
79,82c79
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void , 
79,83c79
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_APIunsigned int* nbytes_in, 
79,83c79
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(int* nbytes_in, 
79,83c79
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose* nbytes_in, 
79,83c79
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) nbytes_in, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
80,84c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       intunsigned int* nbytes_out 
80,84c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          int* nbytes_out 
80,84c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerror* nbytes_out 
81,84c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
81,85c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE);
81,85c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       ;
81,87c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZFILE*       bBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
82,87c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
82,87c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           BZ_API(BZ2_bzWriteClose64) ( 
82,87c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandon(BZ2_bzWriteClose64) ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ2_bzWriteClose64) ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned ) ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int( 
83,88c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* int*          bzerror, 
83,88c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* nbytes_in*          bzerror, 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       bzerror, 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned , 
84,89c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned intBZFILE*       b, 
84,89c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int* *       b, 
85,89c85
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    b, 
85,89c85
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    ), 
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> int           abandon, 
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN abandon, 
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void , 
87,91c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_APIunsigned int* nbytes_in_lo32, 
87,91c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(int* nbytes_in_lo32, 
87,91c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64* nbytes_in_lo32, 
87,91c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) nbytes_in_lo32, 
88,91c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
88,92c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       intunsigned int* nbytes_in_hi32, 
88,92c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          int* nbytes_in_hi32, 
88,92c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerror* nbytes_in_hi32, 
89,92c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
89,92c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE, 
89,93c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       unsigned int* nbytes_out_lo32, 
89,93c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       bint* nbytes_out_lo32, 
90,93c90
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
90,93c90
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           nbytes_out_lo32, 
91,93d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
91,93d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
91,93d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
91,93d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
91,93d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
91,95c91
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_lo32);
92,95c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
92,100c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
92,100c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intint BZ_API(BZ2_bzBuffToBuffCompress) ( 
92,100c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_API(BZ2_bzBuffToBuffCompress) ( 
92,100c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32(BZ2_bzBuffToBuffCompress) ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ2_bzBuffToBuffCompress) ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned ) ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int( 
93,101c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* char*         dest, 
93,101c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* nbytes_out_lo32*         dest, 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       dest, 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned , 
94,102c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned intunsigned int* destLen,
94,102c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* int* destLen,
95,102c95
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    * destLen,
95,102c95
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )destLen,
100,102c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> ,
100,103c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN char*         source, 
100,103c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int *         source, 
100,103c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIsource, 
100,103c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(, 
100,104c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressunsigned int  sourceLen,
100,104c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) int  sourceLen,
101,104c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
101,104c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
101,105c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
101,105c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         destblockSize100k, 
102,105c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
102,106c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
102,106c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned intverbosity, 
102,106c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* , 
102,107c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int* destLenint           workFactor 
103,107c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
103,108c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char);
103,108c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         ;
103,110c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       char*         sourceBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
104,110c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
104,110c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffDecompress) ( 
104,110c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  (BZ2_bzBuffToBuffDecompress) ( 
104,110c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ2_bzBuffToBuffDecompress) ( 
105,110c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
105,110c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
105,111c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           blockSize100kchar*         dest, 
106,111c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       *         dest, 
106,111c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           dest, 
107,111d106
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
107,111d106
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
107,112c107
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           int* destLen,
108,112c108
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    * destLen,
108,112c108
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )destLen,
110,112c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> ,
110,113c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN char*         source, 
110,113c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int *         source, 
110,113c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIsource, 
110,113c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(, 
110,114c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int  sourceLen,
110,114c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int  sourceLen,
111,114c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
111,114c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
111,115c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
111,115c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         destsmall, 
112,115c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
112,116c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int           verbosity 
112,116c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned intverbosity 
112,117c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* );
112,117c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* destLen;
113,122c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
113,122c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       charconst char * BZ_API(BZ2_bzlibVersion) (
113,122c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         char * BZ_API(BZ2_bzlibVersion) (
113,122c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         source* BZ_API(BZ2_bzlibVersion) (
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ_API(BZ2_bzlibVersion) (
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned (BZ2_bzlibVersion) (
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ2_bzlibVersion) (
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen) (
115,122c115
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       (
115,123c115
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
---
>       int           void
115,124c115
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           small);
116,124c116
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       ;
116,126c116
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
117,126c117
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZFILE * BZ_API(BZ2_bzopen) (
117,126c117
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )* BZ_API(BZ2_bzopen) (
122,126c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_API(BZ2_bzopen) (
122,126c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN (BZ2_bzopen) (
122,126c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const BZ2_bzopen) (
122,126c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char ) (
122,126c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * (
122,127c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_APIconst char *path,
122,127c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(char *path,
122,127c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion*path,
122,127c122
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) path,
123,127c123
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       ,
124,128c124
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
>    const char *mode
124,128c124
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
>    )char *mode
126,128c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> *mode
126,128c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN mode
126,129c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE );
126,129c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * ;
126,131c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
126,131c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZFILE * BZ_API(BZ2_bzdopen) (
126,131c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen* BZ_API(BZ2_bzdopen) (
126,131c126
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) BZ_API(BZ2_bzdopen) (
127,131c127
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       (BZ2_bzdopen) (
127,131c127
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const BZ2_bzdopen) (
127,131c127
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char ) (
127,131c127
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *(
127,132c127
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
---
>       const char *pathint        d,
128,132c128
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
---
>       d,
128,132c128
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
---
>       const ,
128,133c128
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>       const char const char *mode
128,133c128
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>       const char *char *mode
129,133c129
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>    *mode
129,133c129
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>    )mode
131,134c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
---
> );
131,134c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
---
> BZ_EXTERN ;
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE BZ_EXTERN int BZ_API(BZ2_bzread) (
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * int BZ_API(BZ2_bzread) (
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_API(BZ2_bzread) (
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API((BZ2_bzread) (
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopenBZ2_bzread) (
(90.5 %, 19419 bytes)
131,135c131
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN , 
133,136c133
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> int len 
133,136c133
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN len 
133,137c133
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int );
133,137c133
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API;
133,139c133
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ_EXTERN int BZ_API(BZ2_bzwrite) (
133,139c133
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzreadint BZ_API(BZ2_bzwrite) (
133,139c133
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) BZ_API(BZ2_bzwrite) (
134,139c134
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       (BZ2_bzwrite) (
134,139c134
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILEBZ2_bzwrite) (
134,139c134
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* ) (
134,139c134
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* b(
135,139d134
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
(90.6 %, 19349 bytes)
133,137c133
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API, 
135,138c135
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> int     len 
135,138c135
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN len 
135,139c135
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int );
135,139c135
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API;
135,141c135
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ_EXTERN int BZ_API(BZ2_bzflush) (
135,141c135
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwriteint BZ_API(BZ2_bzflush) (
135,141c135
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) BZ_API(BZ2_bzflush) (
136,141c136
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       (BZ2_bzflush) (
136,141c136
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILEBZ2_bzflush) (
136,141c136
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* ) (
136,141c136
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* b(
(90.6 %, 19272 bytes)
135,141c135
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_APIBZ_API(BZ2_bzclose) (
137,141c137
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> (BZ2_bzclose) (
137,141c137
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN BZ2_bzclose) (
137,141c137
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int ) (
137,141c137
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(
137,142c137
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZFILE* b
137,142c137
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush* b
137,142c137
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) b
138,143c138
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
>       );
138,143c138
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
>       BZFILE;
138,145c138
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>       BZFILE* BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
139,145c139
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>    const char * BZ_API(BZ2_bzerror) (
139,145c139
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>    )char * BZ_API(BZ2_bzerror) (
141,145c141
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> * BZ_API(BZ2_bzerror) (
141,145c141
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN BZ_API(BZ2_bzerror) (
141,145c141
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void (BZ2_bzerror) (
(90.6 %, 19199 bytes)
138,141d137
<       );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
138,142c138
<       );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
>       )*errnum
140,142c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> errnum
140,143c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN );
140,143c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const ;
140,153c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char #define _BZLIB_PRIVATE_H
140,153c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char * define _BZLIB_PRIVATE_H
140,153c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char * BZ_API_BZLIB_PRIVATE_H
140,155c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(#include <stdlib.h>
140,155c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerrorinclude <stdlib.h>
140,155c140
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) <stdlib.h>
141,155c141
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       stdlib.h>
(90.7 %, 19127 bytes)
140,159c140
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> BZ_EXTERN const typedef char            Char;
150,159c150
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
150,159c150
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #Char;
150,159c150
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define ;
152,159d151
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
152,160c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #unsigned char   Bool;
152,160c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include char   Bool;
152,160c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <Bool;
152,160c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib;
152,161c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.typedef unsigned char   UChar;
152,161c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.hunsigned char   UChar;
157,161c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
157,161c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #UChar;
157,161c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define ;
157,162c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> #define BZ_VERSION  typedef int             Int32;
159,162c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
159,162c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
159,162c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            ;
159,163c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef char            Chartypedef unsigned int    UInt32;
160,163c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
160,163c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int    UInt32;
160,163c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned UInt32;
160,163c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   ;
160,164c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Booltypedef short           Int16;
161,164c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> short           Int16;
161,164c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef Int16;
161,164c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned ;
161,165c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   typedef unsigned short  UInt16;
161,165c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   UCharunsigned short  UInt16;
162,165c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> short  UInt16;
162,165c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef UInt16;
162,165c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             ;
162,167c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef int             Int32#define True  ((Bool)1)
163,167c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
163,167c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef True  ((Bool)1)
163,167c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned ((Bool)1)
163,167c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    (Bool)1)
163,167c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32Bool)1)
164,167c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> )1)
164,167c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef 1)
164,167c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           )
164,168c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef short           Int16#define False ((Bool)0)
165,168c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> define False ((Bool)0)
165,168c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef False ((Bool)0)
165,168c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned ((Bool)0)
165,168c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  (Bool)0)
165,168c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16Bool)0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> )0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )
167,170c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  #define __inline__  
167,170c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  (define __inline__  
167,170c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((__inline__  
167,172c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ((Boolextern void BZ2_bz__AssertH__fail ( int errcode );
167,172c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ((Bool)void BZ2_bz__AssertH__fail ( int errcode );
167,172c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ((Bool)1BZ2_bz__AssertH__fail ( int errcode );
168,172c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> ( int errcode );
168,172c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #int errcode );
168,172c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define errcode );
168,172c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False );
168,172c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False (;
(90.7 %, 19046 bytes)
168,171c168
< #define False );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define False cond,msg) \
168,171c168
< #define False );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define False ),msg) \
169,171c169
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> msg) \
(90.7 %, 18991 bytes)
168,171c168
< #define False cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define False ,zf)
168,171c168
< #define False cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define False condzf)
(90.8 %, 18935 bytes)
168,170c168
< #define False ,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define False ,zf,za1)
168,170c168
< #define False ,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define False ,zf,za1)
(90.8 %, 18886 bytes)
168,169c168
< #define False ,zf,za1)
< #define VPrintf2(zf,za1,za2) \
---
> #define False \
168,170c168
< #define False ,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define False ,fprintf(stderr,zf,za1,za2)
168,170c168
< #define False ,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define False ,zf(stderr,zf,za1,za2)
(90.8 %, 18848 bytes)
168,170c168
< #define False \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define False zf,za1,za2,za3) \
169,170c169
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    ,za1,za2,za3) \
(90.8 %, 18799 bytes)
168,169c168
< #define False zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define False za1,za2,za3)
168,169c168
< #define False zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define False zf,za2,za3)
(90.8 %, 18760 bytes)
168,169c168
< #define False za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define False ,za3,za4) \
168,169c168
< #define False za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define False za1za3,za4) \
(90.9 %, 18720 bytes)
168,169c168
< #define False ,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define False ,za3,za4)
168,169c168
< #define False ,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define False ,za3,za4)
(90.9 %, 18680 bytes)
168,169c168
< #define False ,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define False za3,za4,za5) \
168,169c168
< #define False ,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define False ,,za4,za5) \
(90.9 %, 18642 bytes)
168,169c168
< #define False za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define False za2,za3,za4,za5)
168,169c168
< #define False za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define False za3,za3,za4,za5)
(90.9 %, 18602 bytes)
168,171c168
< #define False za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False strm->bzalloc)(strm->opaque,(nnn),1)
168,171c168
< #define False za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False za2->bzalloc)(strm->opaque,(nnn),1)
(90.9 %, 18561 bytes)
168,169c168
< #define False strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define False #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
168,169c168
< #define False strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define False strmdefine BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
(91.0 %, 18524 bytes)
168c168
< #define False #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define False ,(ppp))
168c168
< #define False #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define False #(ppp))
168c168
< #define False #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define False #define ppp))
(91.0 %, 18476 bytes)
168,175c168
< #define False ,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x2   
< #define BZ_HDR_Z 0xa   
< #define BZ_HDR_h 0x8   
---
> #define False BZ_HDR_h 0x8   
168,175c168
< #define False ,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x2   
< #define BZ_HDR_Z 0xa   
< #define BZ_HDR_h 0x8   
---
> #define False ,0x8   
(91.0 %, 18408 bytes)
168,176c168
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define False define BZ_RUNA 0
168,176c168
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define False BZ_HDR_h BZ_RUNA 0
169,176c169
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> 0
169,177c169
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> ##define BZ_RUNB 1
169,177c169
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define define BZ_RUNB 1
169,177c169
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define BZ_HDR_0 BZ_RUNB 1
173,177c173
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> 1
173,179c173
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> ##define BZ_N_GROUPS 6
173,179c173
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define define BZ_N_GROUPS 6
173,179c173
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE BZ_N_GROUPS 6
174,179c174
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> 6
174,180c174
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> ##define BZ_G_SIZE   50
174,180c174
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define define BZ_G_SIZE   50
174,180c174
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_CODE_LEN    BZ_G_SIZE   50
176,180c176
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> 50
176,181c176
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> ##define BZ_N_ITERS  4
176,181c176
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define define BZ_N_ITERS  4
176,181c176
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNA BZ_N_ITERS  4
177,181c177
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> 4
177,183c177
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> ##define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
177,183c177
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
177,183c177
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_RUNB BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
179,183c179
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> (2 + (0 / BZ_G_SIZE))
179,183c179
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #2 + (0 / BZ_G_SIZE))
179,183c179
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define + (0 / BZ_G_SIZE))
179,183c179
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_N_GROUPS (0 / BZ_G_SIZE))
180,183c180
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> 0 / BZ_G_SIZE))
180,183c180
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #/ BZ_G_SIZE))
180,183c180
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_G_SIZE))
180,183c180
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_G_SIZE   ))
181,183c181
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> )
181,191c181
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> ##define BZ_RAND_DECLS                          \
181,191c181
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define define BZ_RAND_DECLS                          \
181,191c181
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_N_ITERS  BZ_RAND_DECLS                          \
183,191c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> \
183,192c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #Int32 rNToGo;                               \
183,192c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define rNToGo;                               \
183,192c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS ;                               \
183,192c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (\
183,193c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 Int32 rTPos                                 \
183,193c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + rTPos                                 \
183,193c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (\
183,195c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (0 #define BZ_RAND_INIT_MASK                      \
183,195c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (0 / define BZ_RAND_INIT_MASK                      \
183,195c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZEBZ_RAND_INIT_MASK                      \
183,195c183
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE)\
191,196c191
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> s->rNToGo = 0;                              \
191,196c191
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #->rNToGo = 0;                              \
191,196c191
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define rNToGo = 0;                              \
191,196c191
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_DECLS                          = 0;                              \
192,196c192
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    0;                              \
192,196c192
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 ;                              \
192,196c192
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo\
192,197c192
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rNToGo;                               s->rTPos  = 0                               \
193,197c193
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    ->rTPos  = 0                               \
193,197c193
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos  = 0                               \
193,197c193
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos                                 = 0                               \
195,197c195
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> 0                               \
195,197c195
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #\
195,199c195
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
195,199c195
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_INIT_MASK                      define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
(91.1 %, 18264 bytes)
195,197c195
< #\
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #0)
197c197
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> )
197,199c197
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
---
> ##define BZ_RAND_UPD_MASK                       \
197,199c197
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
---
> #define define BZ_RAND_UPD_MASK                       \
197,199c197
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
---
> #define BZ_RAND_MASK BZ_RAND_UPD_MASK                       \
(91.1 %, 18222 bytes)
197,199c197
< #define define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
---
> #define --;
197,199c197
< #define define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
---
> #define define ;
197,207c197
< #define define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define define BZ_RAND_UPD_MASK                       #define BZ_INITIALISE_CRC(crcVar)              \
(91.2 %, 18099 bytes)
197,211c197
< #define define ;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
205,211c205
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
205,211c205
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #BZ_UPDATE_CRC(crcVar,cha)              \
205,211c205
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define (crcVar,cha)              \
205,211c205
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_INITIALISE_CRCcrcVar,cha)              \
(91.2 %, 17988 bytes)
197,205c197
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define BZ_M_RUNNING   2
197,205c197
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define #2
197,206c197
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define #define BZ_M_FLUSHING  3
(91.3 %, 17900 bytes)
197,202c197
< #define define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define define define BZ_S_INPUT     2
197,202c197
< #define define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define define BZ_M_RUNNING   BZ_S_INPUT     2
198,202c198
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> 2
(91.3 %, 17806 bytes)
197,202c197
< #define define define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
197,202c197
< #define define define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define define define define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
197,202c197
< #define define define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define define define BZ_S_INPUT     BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
(91.4 %, 17718 bytes)
197,207c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define bz_stream strm;
197,207c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define #strm;
197,207c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define #define ;
197,211c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
---
> #define define #define BZ_N_OVERSHOOT Int32    mode;
197,211c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
---
> #define define #define BZ_N_OVERSHOOT (mode;
197,211c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX ;
197,212c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + Int32    state;
197,212c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT state;
197,212c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + ;
197,215c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL UInt32   avail_in_expect;
197,215c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + avail_in_expect;
197,215c197
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2;
204,218c204
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
---
> UInt32  arr1;
205,218c205
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
---
>    arr1;
205,218c205
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
---
>    struct ;
207,218d206
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
207,219c207
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
---
>       bz_stream arr2;
(91.4 %, 17570 bytes)
207,213d206
<       UInt32  arr2;
<       UInt32  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       UChar   block;
207,214c207
<       UInt32  arr2;
<       UInt32  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       UChar   block;
<       UInt16  mtfv;
---
>       UInt32  mtfv;
(91.5 %, 17458 bytes)
207,215d206
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
207,216c207
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
---
>       UInt16  ;
(91.6 %, 17317 bytes)
207,216c207
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       nInUse;
208,216d207
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
210,216d209
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
(91.6 %, 17178 bytes)
208,212d207
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
208,212d207
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
(91.7 %, 17092 bytes)
208,216d207
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
208,216d207
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
(91.7 %, 16950 bytes)
207,213c207
<       BZ_RAND_DECLS;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       BZ_RAND_DECLS[BZ_MAX_SELECTORS];
208,213c208
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       BZ_MAX_SELECTORS];
208,213c208
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    ];
209,213d208
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
(91.8 %, 16816 bytes)
207,210c207
<       BZ_RAND_DECLS[BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
207,210c207
<       BZ_RAND_DECLS[BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
208,210d207
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(91.8 %, 16713 bytes)
207,209c207
<       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
207,209c207
<       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(91.9 %, 16612 bytes)
207,209c207
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       BZ_RAND_DECLS;
207,211c207
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>       BZ_RAND_DECLS[}
207,212c207
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>       BZ_RAND_DECLS[BZ_N_GROUPSEState;
207,212c207
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>       BZ_RAND_DECLS[BZ_N_GROUPS];
207,220c207
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][;
207,222c207
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE;
207,232c207
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]#define BZ_X_IDLE        1
209,232c209
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       define BZ_X_IDLE        1
209,232c209
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       UInt32   BZ_X_IDLE        1
(91.9 %, 16526 bytes)
207,233c207
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>       BZ_RAND_DECLSdefine BZ_X_MAGIC_1     0
209,233c209
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    BZ_X_MAGIC_1     0
210,233c210
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    0
210,234c210
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
>    EState#define BZ_X_MAGIC_2     1
218,234c218
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> define BZ_X_MAGIC_2     1
220,234c220
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> BZ_X_MAGIC_2     1
230,234c230
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> 1
230,235c230
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> ##define BZ_X_MAGIC_3     2
230,235c230
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> #define define BZ_X_MAGIC_3     2
230,235c230
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> #define BZ_X_IDLE        BZ_X_MAGIC_3     2
(92.0 %, 16424 bytes)
230,234c230
< #define define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
---
> #define #define BZ_X_BLKHDR_3    6
230,234c230
< #define define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
---
> #define define define BZ_X_BLKHDR_3    6
230,234c230
< #define define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
---
> #define define BZ_X_MAGIC_3     BZ_X_BLKHDR_3    6
(92.0 %, 16323 bytes)
230,234c230
< #define define define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
---
> #define define #define BZ_X_BCRC_1      0
230,234c230
< #define define define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
---
> #define define define define BZ_X_BCRC_1      0
(92.1 %, 16216 bytes)
230,233c230
< #define define #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
---
> #define define 3
230,234c230
< #define define #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
---
> #define define ##define BZ_X_RANDBIT     4
230,234c230
< #define define #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
---
> #define define #define define BZ_X_RANDBIT     4
(92.1 %, 16110 bytes)
230,234c230
< #define define 3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
---
> #define define BZ_X_ORIGPTR_3   7
231,234c231
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
---
> 7
231,235c231
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
---
> ##define BZ_X_MAPPING_1   8
231,235c231
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
---
> #define define BZ_X_MAPPING_1   8
(92.2 %, 16019 bytes)
230,234c230
< #define define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
---
> #define define define BZ_X_SELECTOR_2  1
230,234c230
< #define define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
---
> #define define BZ_X_ORIGPTR_3   BZ_X_SELECTOR_2  1
(92.2 %, 15918 bytes)
230,234c230
< #define define define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
---
> #define define #define BZ_X_CODING_3    5
230,234c230
< #define define define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
---
> #define define define define BZ_X_CODING_3    5
230,234c230
< #define define define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
---
> #define define define BZ_X_SELECTOR_2  BZ_X_CODING_3    5
(92.3 %, 15811 bytes)
230,233c230
< #define define #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
---
> #define define 8
230,234c230
< #define define #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
---
> #define define ##define BZ_X_MTF_4       9
230,234c230
< #define define #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
---
> #define define #define define BZ_X_MTF_4       9
230,234c230
< #define define #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
---
> #define define #define BZ_X_CODING_3    BZ_X_MTF_4       9
(92.3 %, 15705 bytes)
230,234c230
< #define define 8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
---
> #define define BZ_X_ENDHDR_2    2
231,234c231
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
---
> 2
231,235c231
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
---
> ##define BZ_X_ENDHDR_3    3
231,235c231
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
---
> #define define BZ_X_ENDHDR_3    3
(92.4 %, 15614 bytes)
230,234c230
< #define define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
---
> #define define define BZ_X_ENDHDR_6    6
230,234c230
< #define define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
---
> #define define BZ_X_ENDHDR_2    BZ_X_ENDHDR_6    6
(92.4 %, 15513 bytes)
230,234c230
< #define define define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> #define define #define BZ_X_CCRC_4      0
230,234c230
< #define define define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> #define define define define BZ_X_CCRC_4      0
(92.5 %, 15406 bytes)
230,246c230
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define bz_stream strm;
230,246c230
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define #strm;
230,246c230
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define #define ;
230,249c230
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
---
> #define define #define BZ_X_CCRC_4      Int32    state;
236,249c236
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
---
> state;
236,249c236
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
---
> #;
236,252c236
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define UChar    state_out_ch;
236,252c236
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define MTFA_SIZE state_out_ch;
237,252c237
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> ;
237,253c237
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #Int32    state_out_len;
237,253c237
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define state_out_len;
237,253c237
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define MTFL_SIZE ;
243,254c243
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
> Bool     blockRandomised;
244,254c244
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    blockRandomised;
244,254c244
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    struct ;
246,254d245
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
246,255c246
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_stream ;
246,258c246
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bz_stream strmUInt32   bsBuff;
(92.6 %, 15255 bytes)
246,255c246
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       currBlockNo;
247,255d246
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
249,255d248
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
249,256c249
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       UInt32   verbosity;
(92.6 %, 15103 bytes)
246,253c246
<       BZ_RAND_DECLS;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
---
>       BZ_RAND_DECLS[6];
247,253c247
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
---
>       6];
247,253c247
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
---
>       Int32    ];
248,253d247
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
(92.7 %, 14981 bytes)
246,249c246
<       BZ_RAND_DECLS[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
---
>       BZ_RAND_DECLS[7];
246,249c246
<       BZ_RAND_DECLS[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
---
>       BZ_RAND_DECLS[7];
247,249d246
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
(92.7 %, 14899 bytes)
246,256c246
<       BZ_RAND_DECLS[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       BZ_RAND_DECLS;
246,257c246
<       BZ_RAND_DECLS[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       BZ_RAND_DECLS[UInt32   storedCombinedCRC;
246,257c246
<       BZ_RAND_DECLS[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       BZ_RAND_DECLS[7storedCombinedCRC;
247,257d246
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
(92.8 %, 14781 bytes)
246,253c246
<       BZ_RAND_DECLS;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       BZ_RAND_DECLS[6];
247,253c247
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       6];
247,253c247
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       UInt32   ];
248,253d247
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
(92.9 %, 14621 bytes)
246,248c246
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
---
>       BZ_RAND_DECLS;
246,251c246
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       BZ_RAND_DECLS[UChar    mtfa   [MTFA_SIZE];
246,251c246
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       BZ_RAND_DECLS[6mtfa   [MTFA_SIZE];
246,251c246
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       BZ_RAND_DECLS[6][MTFA_SIZE];
(92.9 %, 14561 bytes)
246,251c246
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       BZ_RAND_DECLSUChar    selector   [BZ_MAX_SELECTORS];
249,251c249
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       selector   [BZ_MAX_SELECTORS];
249,251c249
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    [BZ_MAX_SELECTORS];
249,251c249
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   BZ_MAX_SELECTORS];
249,251c249
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [];
249,251c249
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE;
249,252c249
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE]UChar    selectorMtf[BZ_MAX_SELECTORS];
250,252c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       selectorMtf[BZ_MAX_SELECTORS];
250,252c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    [BZ_MAX_SELECTORS];
250,252c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbaseBZ_MAX_SELECTORS];
250,252c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[];
250,252c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[6 ;
250,253c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
250,253c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZElen  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
250,253c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
251,253c251
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
251,253c251
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ][BZ_MAX_ALPHA_SIZE];
251,253c251
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_ALPHA_SIZE];
(93.0 %, 14447 bytes)
250,252c250
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
250,253c250
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
250,253c250
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPSbase   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
250,253c250
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(93.0 %, 14358 bytes)
250,252c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
251,252c251
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_MAX_ALPHA_SIZE];
251,252c251
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    ];
251,252c251
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    base   ;
(93.0 %, 14265 bytes)
250,255c250
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
---
>       Int32    mtfbase[6 / MTFL_SIZE];
250,256c250
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[6 / MTFL_SIZE][Int32    save_t;
250,256c250
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZEsave_t;
251,256d250
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
(93.1 %, 14155 bytes)
251,255d250
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
251,255d250
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
251,255d250
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
(93.2 %, 14015 bytes)
251,255d250
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
251,255d250
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
(93.2 %, 13868 bytes)
250,255c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
---
>       Int32    mtfbase[6 / MTFL_SIZE]; 
251,255d250
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
251,255d250
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
(93.3 %, 13747 bytes)
250,255c250
<       Int32    mtfbase[6 / MTFL_SIZE]; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
---
>       Int32    mtfbase[6 / MTFL_SIZE];
251,255d250
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
(93.4 %, 13614 bytes)
250,261c250
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       Int32    mtfbase[6 / MTFL_SIZE])                     \
251,261c251
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       \
251,262c251
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   s->tPos = s->tt[s->tPos];                 \
251,262c251
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   save_gBase->tPos = s->tt[s->tPos];                 \
252,262c252
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       tPos = s->tt[s->tPos];                 \
252,262c252
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   = s->tt[s->tPos];                 \
252,262c252
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   save_gPerms->tt[s->tPos];                 \
254,262c254
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    ->tt[s->tPos];                 \
255,262c255
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    tt[s->tPos];                 \
255,262c255
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DState[s->tPos];                 \
261,262c261
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> s->tPos];                 \
261,262c261
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #->tPos];                 \
261,262c261
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define tPos];                 \
261,262c261
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST];                 \
(93.4 %, 13554 bytes)
261,262c261
< #define tPos];                 \
<     c = (UChar)(s->tPos & 0xf);           \
---
> #define );           \
261,262c261
< #define tPos];                 \
<     c = (UChar)(s->tPos & 0xf);           \
---
> #define tPos;           \
261,262c261
< #define tPos];                 \
<     c = (UChar)(s->tPos & 0xf);           \
---
> #define tPos]\
(93.4 %, 13503 bytes)
261,265c261
< #define tPos;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define tPosc_tPos = c_tt[c_tPos];                    \
261,265c261
< #define tPos;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define tPos;           = c_tt[c_tPos];                    \
(93.5 %, 13420 bytes)
261,262c261
< #define tPosc_tPos = c_tt[c_tPos];                    \
<     c = (UChar)(c_tPos & 0xf);            \
---
> #define tPosc_tPos 0xf);            \
261,262c261
< #define tPosc_tPos = c_tt[c_tPos];                    \
<     c = (UChar)(c_tPos & 0xf);            \
---
> #define tPosc_tPos = );            \
(93.5 %, 13358 bytes)
261,264c261
< #define tPosc_tPos 0xf);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
---
> #define tPosc_tPos )                                          \
261,264c261
< #define tPosc_tPos 0xf);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
---
> #define tPosc_tPos 0xf\
(93.5 %, 13301 bytes)
261,265c261
< #define tPosc_tPos )                                          \
<    
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
261,265c261
< #define tPosc_tPos )                                          \
<    
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos )                                          s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(93.6 %, 13188 bytes)
261c261
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
261c261
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
261c261
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos (si) << 2) & 0x4)) & 0xF)
(93.6 %, 13164 bytes)
261,263c261
< #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define tPosc_tPos define SET_LL(i,n)                          \
261,263c261
< #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define tPosc_tPos (SET_LL(i,n)                          \
(93.6 %, 13136 bytes)
261,265c261
< #define tPosc_tPos define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define tPosc_tPos (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
261,265c261
< #define tPosc_tPos define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define tPosc_tPos define ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(93.6 %, 13062 bytes)
261c261
< #define tPosc_tPos (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define tPosc_tPos (i) << 6))
261c261
< #define tPosc_tPos (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define tPosc_tPos (i) << 6))
(93.6 %, 13030 bytes)
261,264c261
< #define tPosc_tPos (i) << 6))
< 
< #define BZ_GET_SMALL(c)                            \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define tPosc_tPos = BZ2_indexIntoF ( s->tPos, s->cftab );    \
261,264c261
< #define tPosc_tPos (i) << 6))
< 
< #define BZ_GET_SMALL(c)                            \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define tPosc_tPos (BZ2_indexIntoF ( s->tPos, s->cftab );    \
(93.7 %, 12957 bytes)
261,262c261
< #define tPosc_tPos = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
---
> #define tPosc_tPos tPos = GET_LL(s->tPos);
261,262c261
< #define tPosc_tPos = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
---
> #define tPosc_tPos = = GET_LL(s->tPos);
(93.7 %, 12903 bytes)
261,269c261
< #define tPosc_tPos tPos = GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
> #define tPosc_tPos );
261,269c261
< #define tPosc_tPos tPos = GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
> #define tPosc_tPos tPos ;
261,298c261
< #define tPosc_tPos tPos = GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
---
> #define tPosc_tPos tPos = #define fswap(zz1, zz2) \
(93.7 %, 12834 bytes)
261,293c261
< #define tPosc_tPos );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos zzp1, zzp2, zzn)       \
261,293c261
< #define tPosc_tPos );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos ), zzp2, zzn)       \
(93.8 %, 12757 bytes)
261,265c261
< #define tPosc_tPos zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ((a) < (b)) ? (a) : (b)
261,265c261
< #define tPosc_tPos zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos zzp1(a) < (b)) ? (a) : (b)
261,265c261
< #define tPosc_tPos zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos zzp1, a) < (b)) ? (a) : (b)
(93.8 %, 12711 bytes)
261c261
< #define tPosc_tPos ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos b)
261c261
< #define tPosc_tPos ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ()
(93.8 %, 12690 bytes)
261,265c261
< #define tPosc_tPos b)
< 
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> #define tPosc_tPos ,hz) 
261,265c261
< #define tPosc_tPos b)
< 
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> #define tPosc_tPos bhz) 
263,265c263
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> ) 
263,267c263
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> ##define FALLBACK_QSORT_SMALL_THRESH 0
(93.8 %, 12648 bytes)
261,270c261
< #define tPosc_tPos ,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
---
> #define tPosc_tPos undef fpush
261,270c261
< #define tPosc_tPos ,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
---
> #define tPosc_tPos ,fpush
261,271c261
< #define tPosc_tPos ,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define tPosc_tPos ,hz#undef fpop
(93.9 %, 12548 bytes)
261,266c261
< #define tPosc_tPos undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
261,266c261
< #define tPosc_tPos undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
(93.9 %, 12461 bytes)
261,267c261
< #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define tPosc_tPos ] |= (1 << ((zz) & 1))
261,267c261
< #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define tPosc_tPos undef |= (1 << ((zz) & 1))
(94.0 %, 12383 bytes)
261,262c261
< #define tPosc_tPos ] |= (1 << ((zz) & 1))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define tPosc_tPos CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
261,262c261
< #define tPosc_tPos ] |= (1 << ((zz) & 1))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define tPosc_tPos ] (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
261,262c261
< #define tPosc_tPos ] |= (1 << ((zz) & 1))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define tPosc_tPos ] |= zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(94.0 %, 12348 bytes)
261c261
< #define tPosc_tPos CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define tPosc_tPos 1 << ((zz) & 1))
261c261
< #define tPosc_tPos CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define tPosc_tPos CLEAR_BH<< ((zz) & 1))
(94.0 %, 12312 bytes)
261,262c261
< #define tPosc_tPos 1 << ((zz) & 1))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
261,262c261
< #define tPosc_tPos 1 << ((zz) & 1))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define tPosc_tPos 1 (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(94.0 %, 12272 bytes)
261c261
< #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define tPosc_tPos (zz) & 1)))
261c261
< #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define tPosc_tPos )  zz) & 1)))
261c261
< #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define tPosc_tPos )  () & 1)))
(94.0 %, 12242 bytes)
261,262c261
< #define tPosc_tPos (zz) & 1)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define tPosc_tPos [(zz) >> 5]
261,262c261
< #define tPosc_tPos (zz) & 1)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define tPosc_tPos ((zz) >> 5]
(94.0 %, 12199 bytes)
261,262c261
< #define tPosc_tPos [(zz) >> 5]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define tPosc_tPos zz) & 0xf)
261,262c261
< #define tPosc_tPos [(zz) >> 5]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define tPosc_tPos [) & 0xf)
(94.1 %, 12159 bytes)
261,268c261
< #define tPosc_tPos zz) & 0xf)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #define tPosc_tPos undef      WORD_BH
261,268c261
< #define tPosc_tPos zz) & 0xf)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #define tPosc_tPos zzWORD_BH
(94.1 %, 12084 bytes)
261,288c261
< #define tPosc_tPos undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos define mvswap(zzp1, zzp2, zzn)       \
261,288c261
< #define tPosc_tPos undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos undef      mvswap(zzp1, zzp2, zzn)       \
(94.1 %, 11991 bytes)
261,266c261
< #define tPosc_tPos define mvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ,b) ((a) < (b)) ? (a) : (b)
261,266c261
< #define tPosc_tPos define mvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos define b) ((a) < (b)) ? (a) : (b)
(94.2 %, 11934 bytes)
261c261
< #define tPosc_tPos ,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ) : (b)
261c261
< #define tPosc_tPos ,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ,: (b)
(94.2 %, 11914 bytes)
261,265c261
< #define tPosc_tPos ) : (b)
< 
< #define mpush(lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
---
> #define tPosc_tPos #define mpop(lz,hz,dz) 
261,265c261
< #define tPosc_tPos ) : (b)
< 
< #define mpush(lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
---
> #define tPosc_tPos ) define mpop(lz,hz,dz) 
(94.2 %, 11879 bytes)
261,264c261
< #define tPosc_tPos #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos ) (nextHi[az]-nextLo[az])
261,264c261
< #define tPosc_tPos #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos #(nextHi[az]-nextLo[az])
261,264c261
< #define tPosc_tPos #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos #define nextHi[az]-nextLo[az])
(94.2 %, 11833 bytes)
261,263c261
< #define tPosc_tPos ) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define tPosc_tPos (az,bz)                                        \
261,263c261
< #define tPosc_tPos ) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define tPosc_tPos ) az,bz)                                        \
261,263c261
< #define tPosc_tPos ) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define tPosc_tPos ) (,bz)                                        \
(94.2 %, 11789 bytes)
261,266c261
< #define tPosc_tPos (az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 0
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define tPosc_tPos + BZ_N_QSORT)
261,266c261
< #define tPosc_tPos (az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 0
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define tPosc_tPos (BZ_N_QSORT)
(94.3 %, 11656 bytes)
261,268c261
< #define tPosc_tPos + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
---
> #define tPosc_tPos mpush
261,269c261
< #define tPosc_tPos + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
---
> #define tPosc_tPos + #undef mpop
(94.4 %, 11573 bytes)
261,266c261
< #define tPosc_tPos mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> #define tPosc_tPos MAIN_QSORT_SMALL_THRESH
262,266d261
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
(94.4 %, 11502 bytes)
261,269c261
< #define tPosc_tPos MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos [((b)+1) << 8] - ftab[(b) << 8])
262,269c262
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> ((b)+1) << 8] - ftab[(b) << 8])
262,269c262
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #(b)+1) << 8] - ftab[(b) << 8])
262,269c262
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef b)+1) << 8] - ftab[(b) << 8])
(94.4 %, 11389 bytes)
261c261
< #define tPosc_tPos [((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos b) << 8])
261c261
< #define tPosc_tPos [((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos [) << 8])
(94.5 %, 11366 bytes)
261,263c261
< #define tPosc_tPos b) << 8])
< #define SETMASK (1 << 1)
< #define CLEARMASK (~(SETMASK))
---
> #define tPosc_tPos define CLEARMASK (~(SETMASK))
261,263c261
< #define tPosc_tPos b) << 8])
< #define SETMASK (1 << 1)
< #define CLEARMASK (~(SETMASK))
---
> #define tPosc_tPos bCLEARMASK (~(SETMASK))
261,263c261
< #define tPosc_tPos b) << 8])
< #define SETMASK (1 << 1)
< #define CLEARMASK (~(SETMASK))
---
> #define tPosc_tPos b) (~(SETMASK))
(94.5 %, 11330 bytes)
261,267c261
< #define tPosc_tPos define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define tPosc_tPos undef CLEARMASK
261,267c261
< #define tPosc_tPos define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define tPosc_tPos define CLEARMASK
(94.5 %, 11266 bytes)
261,281c261
< #define tPosc_tPos undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define tPosc_tPos #define DEPTHOF(zz1)   ((zz1) & 0xf)
261,281c261
< #define tPosc_tPos undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define tPosc_tPos undef define DEPTHOF(zz1)   ((zz1) & 0xf)
(94.5 %, 11195 bytes)
261,262c261
< #define tPosc_tPos #define DEPTHOF(zz1)   ((zz1) & 0xf)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
261,262c261
< #define tPosc_tPos #define DEPTHOF(zz1)   ((zz1) & 0xf)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos #(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
(94.6 %, 11150 bytes)
261c261
< #define tPosc_tPos MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos (zz2) : (zz3))
261c261
< #define tPosc_tPos MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos MYMAXzz2) : (zz3))
(94.6 %, 11118 bytes)
261,263c261
< #define tPosc_tPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define tPosc_tPos )                           \
261,263c261
< #define tPosc_tPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define tPosc_tPos (\
261,264c261
< #define tPosc_tPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define tPosc_tPos (zz2(WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
(94.6 %, 11076 bytes)
261,263c261
< #define tPosc_tPos )                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
261,263c261
< #define tPosc_tPos )                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos )                           1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
(94.6 %, 10987 bytes)
261c261
< #define tPosc_tPos (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos )
261,263c261
< #define tPosc_tPos (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
---
> #define tPosc_tPos (#define UPHEAP(z)                                     \
(94.7 %, 10950 bytes)
261,334c261
< #define tPosc_tPos )
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define tPosc_tPos #define bsNEEDW(nz)                           \
263,334c263
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
263,334c263
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #bsNEEDW(nz)                           \
263,334c263
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define (nz)                           \
263,334c263
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define UPHEAPnz)                           \
(94.7 %, 10766 bytes)
261,284c261
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< ;
---
> #define tPosc_tPos ;
261,288c261
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< ;
< 
< 
< 
< static
---
> #define tPosc_tPos #static
(94.8 %, 10661 bytes)
261,272c261
< #define tPosc_tPos ;
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
---
> #define tPosc_tPos define BZ_GREATER_ICOST 5
265,272c265
< static
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
---
> BZ_GREATER_ICOST 5
266,272c266
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
---
> 5
266,296c266
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> void #define RETURN(rrr)                               \
266,296c266
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> void generateMTFValues define RETURN(rrr)                               \
266,296c266
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> void generateMTFValues ( RETURN(rrr)                               \
266,296c266
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> void generateMTFValues ( EState(rrr)                               \
266,296c266
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> void generateMTFValues ( EState* rrr)                               \
(94.8 %, 10579 bytes)
261,288c261
< #define tPosc_tPos define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define tPosc_tPos lll,vvv,nnn)                     \
261,288c261
< #define tPosc_tPos define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define tPosc_tPos define ,vvv,nnn)                     \
(94.9 %, 10455 bytes)
261,262c261
< #define tPosc_tPos lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define tPosc_tPos ;                      \
261,262c261
< #define tPosc_tPos lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define tPosc_tPos lll\
(94.9 %, 10393 bytes)
261,265c261
< #define tPosc_tPos ;                      \
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define tPosc_tPos GET_BITS(lll,uuu,8)
261,265c261
< #define tPosc_tPos ;                      \
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define tPosc_tPos ;                      (lll,uuu,8)
262,265c262
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
>    lll,uuu,8)
(95.0 %, 10295 bytes)
261,263c261
< #define tPosc_tPos GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define tPosc_tPos )                          \
261,263c261
< #define tPosc_tPos GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define tPosc_tPos GET_BITS\
(95.0 %, 10251 bytes)
261,265c261
< #define tPosc_tPos )                          \
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define tPosc_tPos ,label2,lval)           \
261,265c261
< #define tPosc_tPos )                          \
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define tPosc_tPos )                          label2,lval)           \
262,265c262
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>    ,lval)           \
(95.0 %, 10171 bytes)
261,285c261
< #define tPosc_tPos ,label2,lval)           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
---
> #define tPosc_tPos BZ2_bz__AssertH__fail ( int errcode )
261,285c261
< #define tPosc_tPos ,label2,lval)           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
---
> #define tPosc_tPos ,( int errcode )
(95.1 %, 10082 bytes)
261,273c261
< #define tPosc_tPos BZ2_bz__AssertH__fail ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define tPosc_tPos * default_bzalloc ( void* opaque, Int32 items, Int32 size )
261,273c261
< #define tPosc_tPos BZ2_bz__AssertH__fail ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define tPosc_tPos BZ2_bz__AssertH__fail default_bzalloc ( void* opaque, Int32 items, Int32 size )
(95.1 %, 9990 bytes)
261,265c261
< #define tPosc_tPos * default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> #define tPosc_tPos void default_bzfree ( void* opaque, void* addr )
261,265c261
< #define tPosc_tPos * default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> #define tPosc_tPos * default_bzfree ( void* opaque, void* addr )
261,265c261
< #define tPosc_tPos * default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> #define tPosc_tPos * default_bzalloc ( void* opaque, void* addr )
(95.2 %, 9920 bytes)
261,267c261
< #define tPosc_tPos void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> #define tPosc_tPos ( EState* s )
261,267c261
< #define tPosc_tPos void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> #define tPosc_tPos void EState* s )
(95.2 %, 9836 bytes)
261,271c261
< #define tPosc_tPos ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
---
> #define tPosc_tPos static
261,272c261
< #define tPosc_tPos ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
> #define tPosc_tPos ( Bool isempty_RL ( EState* s )
261,272c261
< #define tPosc_tPos ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
> #define tPosc_tPos ( EStateisempty_RL ( EState* s )
(95.2 %, 9779 bytes)
261,268c261
< #define tPosc_tPos static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> #define tPosc_tPos bz_stream* strm, 
262,268c262
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> * strm, 
262,268c262
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> Bool strm, 
262,268c262
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> Bool isempty_RL , 
262,269c262
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ( int        blockSize100k,
262,269c262
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ( EStateblockSize100k,
262,269c262
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ( EState* ,
(95.3 %, 9669 bytes)
262,277c262
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> Bool isempty_RL ( ,zchh0)               \
262,277c262
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> Bool isempty_RL ( int        zchh0)               \
262,277c262
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> Bool isempty_RL ( int        blockSize100k)               \
263,277c263
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>                      \
263,290c263
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>                      int        static
263,291c263
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>                      int        verbosityBool handle_compress ( bz_stream* strm )
264,291c264
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>                      handle_compress ( bz_stream* strm )
264,291c264
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>                      int        ( bz_stream* strm )
264,291c264
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>                      int        workFactor bz_stream* strm )
265,291c265
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> * strm )
277,291c277
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> strm )
277,291c277
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> #)
277,292c277
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
---
> #define ;
277,296c277
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCKint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
277,296c277
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
277,296c277
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs(BZ2_bzCompress) ( bz_stream *strm, int action )
277,296c277
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,BZ2_bzCompress) ( bz_stream *strm, int action )
(95.3 %, 9577 bytes)
277,282c277
< #define ADD_CHAR_TO_BLOCKint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
277,282c277
< #define ADD_CHAR_TO_BLOCKint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> #define ADD_CHAR_TO_BLOCKint BZ_APIBZ2_bzCompressEnd)  ( bz_stream *strm )
277,282c277
< #define ADD_CHAR_TO_BLOCKint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> #define ADD_CHAR_TO_BLOCKint BZ_API()  ( bz_stream *strm )
(95.4 %, 9507 bytes)
277,287c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> #define ADD_CHAR_TO_BLOCKint bz_stream* strm, 
277,287c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> #define ADD_CHAR_TO_BLOCKint (* strm, 
277,287c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEndstrm, 
277,287c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  , 
277,288c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( int        verbosity,
277,288c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream verbosity,
277,288c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *,
277,289c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm int        small )
278,289c278
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> small )
286,289c286
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> )
286,290c286
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
---
> int ;
(95.4 %, 9353 bytes)
277,294c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm unRLE_obuf_to_output_SMALL ( DState* s )
277,294c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm int        ( DState* s )
277,294c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm int        small DState* s )
(95.5 %, 9255 bytes)
277,282c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm strm )
277,282c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm unRLE_obuf_to_output_SMALL )
(95.5 %, 9167 bytes)
277,290c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
277,290c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm strm BZ_SETERR(e)                    \
(95.6 %, 9093 bytes)
277,283c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm BZ_MAX_UNUSED];
277,283c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define ];
277,283c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR;
277,284c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(Int32     bufN;
277,284c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(ebufN;
277,284c277
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    ;
280,285c280
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
> Bool      writing;
281,285c281
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    writing;
281,285c281
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    struct ;
282,285d281
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
282,286c282
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE     strm;
(95.6 %, 8987 bytes)
282,294c282
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
282,294c282
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ2_bzWriteOpen) 
282,294c282
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm) 
283,295c283
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
283,295c283
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     int*  bzerror,      
283,295c283
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr*  bzerror,      
284,295c284
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       bzerror,      
284,295c284
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      ,      
284,296c284
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Bool      initialisedOkFILE* f, 
285,296c285
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    * f, 
286,296c286
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    f, 
286,296c286
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile, 
294,297c294
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> int   blockSize100k, 
294,297c294
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILEblockSize100k, 
294,297c294
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* , 
294,298c294
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_APIint   verbosity,
294,298c294
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(verbosity,
294,298c294
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpen,
295,299c295
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     int   workFactor )
295,299c295
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( workFactor )
295,299c295
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int)
295,300c295
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                     ( int*  ;
295,305c295
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                     ( int*  bzerrorvoid BZ_API(BZ2_bzWrite)
296,305c296
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       BZ_API(BZ2_bzWrite)
296,305c296
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILE(BZ2_bzWrite)
296,305c296
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILE* BZ2_bzWrite)
296,305c296
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILE* f)
297,306c297
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       ( int*    bzerror, 
297,306c297
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   int*    bzerror, 
297,306c297
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   blockSize100k*    bzerror, 
298,306c298
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       bzerror, 
298,306c298
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   , 
298,307c298
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   verbosityBZFILE* b, 
299,307c299
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       * b, 
299,307c299
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   b, 
299,307c299
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   workFactor , 
300,308c300
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void*   buf, 
305,308c305
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> *   buf, 
305,308c305
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void buf, 
305,308c305
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API, 
305,309c305
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void BZ_API(int     len )
305,309c305
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void BZ_API(BZ2_bzWritelen )
306,309c306
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              )
306,310c306
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>              ( ;
306,314c306
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>              ( intvoid BZ_API(BZ2_bzWriteClose)
306,314c306
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>              ( int*    BZ_API(BZ2_bzWriteClose)
306,314c306
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>              ( int*    bzerror(BZ2_bzWriteClose)
307,314c307
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZ2_bzWriteClose)
307,314c307
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE)
307,315c307
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                BZFILE* ( int*          bzerror, 
307,315c307
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                BZFILE* bint*          bzerror, 
308,315c308
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                *          bzerror, 
308,315c308
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                voidbzerror, 
308,315c308
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                void*   , 
308,316c308
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                void*   bufBZFILE*       b, 
309,316c309
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                *       b, 
309,316c309
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     b, 
309,316c309
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     len , 
310,317c310
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
314,317c314
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> abandon,
314,317c314
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void ,
314,318c314
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_APIunsigned int* nbytes_in,
314,318c314
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(int* nbytes_in,
314,318c314
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose* nbytes_in,
315,318c315
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   nbytes_in,
(95.7 %, 8871 bytes)
309,316c309
<                int     len , 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                int     len void BZ_API(BZ2_bzWriteClose64)
310,316c310
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     BZ_API(BZ2_bzWriteClose64)
310,316c310
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     int           (BZ2_bzWriteClose64)
310,316c310
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     int           abandonBZ2_bzWriteClose64)
311,316c311
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     )
311,317c311
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned ( int*          bzerror, 
311,317c311
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned intint*          bzerror, 
311,317c311
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* *          bzerror, 
311,317c311
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_inbzerror, 
312,317c312
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     , 
312,318c312
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned BZFILE*       b, 
312,318c312
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int*       b, 
312,318c312
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* b, 
312,318c312
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_out , 
313,319c313
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
316,319c316
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> abandon,
316,319c316
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void ,
316,320c316
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_APIunsigned int* nbytes_in_lo32,
316,320c316
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(int* nbytes_in_lo32,
316,320c316
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64* nbytes_in_lo32,
317,320c317
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   nbytes_in_lo32,
317,320c317
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( ,
317,321c317
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( intunsigned int* nbytes_in_hi32,
317,321c317
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          int* nbytes_in_hi32,
317,321c317
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerror* nbytes_in_hi32,
318,321c318
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
318,321c318
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE,
318,322c318
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       unsigned int* nbytes_out_lo32,
318,322c318
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       bint* nbytes_out_lo32,
319,322c319
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
319,322c319
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           nbytes_out_lo32,
320,322d319
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
320,322d319
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
320,322d319
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
320,322d319
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
320,322d319
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
320,323c320
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32)
321,324c321
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     ;
321,328c321
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned BZFILE* BZ_API(BZ2_bzReadOpen) 
321,328c321
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZ_API(BZ2_bzReadOpen) 
321,328c321
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZ_API(BZ2_bzReadOpen) 
321,328c321
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_in_hi32(BZ2_bzReadOpen) 
322,328c322
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     BZ2_bzReadOpen) 
322,328c322
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned ) 
322,329c322
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int( int*  bzerror, 
322,329c322
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* int*  bzerror, 
322,329c322
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_lo32*  bzerror, 
323,329c323
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     bzerror, 
323,329c323
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned , 
323,330c323
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned intFILE* f, 
323,330c323
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* * f, 
323,330c323
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* nbytes_out_hi32 f, 
324,330c324
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> , 
328,331c328
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> int   verbosity,
328,331c328
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILEverbosity,
328,331c328
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* ,
328,332c328
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_APIint   small,
328,332c328
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(small,
328,332c328
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(BZ2_bzReadOpen,
329,333c329
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    void* unused,
329,333c329
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( * unused,
329,333c329
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intunused,
329,333c329
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  ,
329,334c329
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    ( int*  bzerrorint   nUnused )
330,334c330
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
330,334c330
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE)
330,335c330
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      FILE* ;
330,339c330
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      FILE* fvoid BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
331,339c331
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
331,339c331
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
331,339c331
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   verbosityBZ2_bzReadClose) ( int *bzerror, BZFILE *b )
332,339c332
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      ) ( int *bzerror, BZFILE *b )
332,339c332
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   ( int *bzerror, BZFILE *b )
332,339c332
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   smallint *bzerror, BZFILE *b )
333,339c333
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      *bzerror, BZFILE *b )
333,339c333
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      voidbzerror, BZFILE *b )
333,339c333
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      void* , BZFILE *b )
333,339c333
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      void* unusedBZFILE *b )
334,339c334
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      *b )
334,339c334
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   b )
339,343d338
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
(95.7 %, 8803 bytes)
334,341c334
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      int   b, 
334,341c334
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      int   b , 
335,342c335
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void*   buf, 
339,342c339
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> *   buf, 
339,342c339
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int buf, 
339,342c339
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API, 
339,343c339
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int BZ_API(int     len )
339,343c339
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int BZ_API(BZ2_bzReadlen )
340,343c340
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            )
340,344c340
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( {
340,346c340
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( intbzFile* bzf = (bzFile*)b;
340,346c340
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    * bzf = (bzFile*)b;
340,346c340
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzf = (bzFile*)b;
341,346c341
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              = (bzFile*)b;
341,346c341
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE(bzFile*)b;
341,346c341
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzFile*)b;
341,346c341
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b*)b;
342,346c342
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              )b;
342,346c342
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              voidb;
342,346c342
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   ;
342,347c342
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>              void*   bufchar *bzf_4_4;
343,347c343
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>              *bzf_4_4;
343,347c343
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>              int     bzf_4_4;
343,347c343
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>              int     len ;
344,348c344
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
> unsigned int bzf_4_5;
346,348c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    int bzf_4_5;
346,348c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    bzFilebzf_4_5;
346,348c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    bzFile* ;
346,349c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
---
>    bzFile* bzf Bool bzf_3;
346,349c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
---
>    bzFile* bzf = bzf_3;
346,349c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
---
>    bzFile* bzf = (;
346,351c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = (bzFileBZ_SETERR(BZ_OK);
346,351c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = (bzFile*(BZ_OK);
346,351c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = (bzFile*)BZ_OK);
346,351c346
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = (bzFile*)b);
347,351c347
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
347,353c347
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    char if (bzf == NULL || buf == NULL || len < 0)
347,353c347
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    char *(bzf == NULL || buf == NULL || len < 0)
347,353c347
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    char *bzf_4_4bzf == NULL || buf == NULL || len < 0)
348,353c348
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    == NULL || buf == NULL || len < 0)
348,353c348
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    unsigned NULL || buf == NULL || len < 0)
348,353c348
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    unsigned int || buf == NULL || len < 0)
348,353c348
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    unsigned int bzf_4_5buf == NULL || len < 0)
349,353c349
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    == NULL || len < 0)
349,353c349
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    Bool NULL || len < 0)
349,353c349
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    Bool bzf_3|| len < 0)
351,353c351
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    len < 0)
351,353c351
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR< 0)
351,353c351
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(0)
351,353c351
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK)
(95.7 %, 8751 bytes)
351,360c351
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
---
>    BZ_SETERR(bzf_4_5 = len;
351,360c351
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
---
>    BZ_SETERR(0= len;
352,360c352
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
---
>       len;
354,360c354
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
---
>    ;
354,361c354
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
---
>    if bzf_4_4 = buf;
354,361c354
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
---
>    if (= buf;
354,361c354
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
---
>    if (bzf_3buf;
357,362d356
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
< 
(95.8 %, 8689 bytes)
354,364c354
<    ;
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    (BZ2_bzReadGetUnused) 
355,364c355
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ2_bzReadGetUnused) 
355,364c355
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf_4_4 ) 
355,365c355
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf_4_4 = ( int*    bzerror, 
355,365c355
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf_4_4 = bufint*    bzerror, 
357,365c357
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    *    bzerror, 
357,365c357
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while bzerror, 
357,365c357
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (, 
357,366c357
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    while (TrueBZFILE* b, 
359,366c359
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    * b, 
359,366c359
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return b, 
359,366c359
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0, 
360,367c360
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void**  unused, 
364,367c364
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> **  unused, 
364,367c364
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void *  unused, 
364,367c364
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_APIunused, 
364,367c364
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(, 
364,368c364
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
> void BZ_API(BZ2_bzReadGetUnusedint*    nUnused )
365,368c365
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      *    nUnused )
365,368c365
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( nUnused )
365,368c365
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int)
365,369c365
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                      ( int*    ;
365,377c365
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                      ( int*    bzerrorint BZ_API(BZ2_bzBuffToBuffCompress) 
366,377c366
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ_API(BZ2_bzBuffToBuffCompress) 
366,377c366
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILE(BZ2_bzBuffToBuffCompress) 
366,377c366
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILE* BZ2_bzBuffToBuffCompress) 
366,377c366
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILE* b) 
367,378c367
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        ( char*         dest, 
367,378c367
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        voidchar*         dest, 
367,378c367
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void**         dest, 
367,378c367
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void**  dest, 
368,378d367
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
368,379c368
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        unsigned int* destLen,
368,379c368
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        intint* destLen,
368,379c368
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    * destLen,
368,379c368
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    nUnused destLen,
369,379c369
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> ,
377,380c377
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> char*         source, 
377,380c377
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int *         source, 
377,380c377
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIsource, 
377,380c377
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(, 
377,381c377
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressunsigned int  sourceLen,
378,381c378
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          int  sourceLen,
378,381c378
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( sourceLen,
378,381c378
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char,
378,382c378
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         int           blockSize100k, 
378,382c378
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         destblockSize100k, 
379,382c379
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
379,383c379
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
379,383c379
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned intverbosity, 
379,383c379
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* , 
379,384c379
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int* destLenint           workFactor )
380,384c380
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
380,384c380
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char)
380,385c380
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            char*         ;
380,389c380
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            char*         sourceint BZ_API(BZ2_bzBuffToBuffDecompress) 
381,389c381
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            BZ_API(BZ2_bzBuffToBuffDecompress) 
381,389c381
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            unsigned (BZ2_bzBuffToBuffDecompress) 
381,389c381
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            unsigned int  BZ2_bzBuffToBuffDecompress) 
381,389c381
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            unsigned int  sourceLen) 
382,389d381
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
382,390c382
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           char*         dest, 
382,390c382
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           blockSize100k*         dest, 
383,390c383
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            dest, 
383,390c383
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           , 
383,391c383
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           verbosityunsigned int* destLen,
384,391c384
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
384,391c384
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           * destLen,
384,391c384
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           workFactor destLen,
385,391c385
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> ,
389,392c389
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> char*         source, 
389,392c389
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int *         source, 
389,392c389
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIsource, 
389,392c389
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(, 
389,393c389
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int  sourceLen,
390,393c390
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            int  sourceLen,
390,393c390
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( sourceLen,
390,393c390
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char,
390,394c390
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         int           small,
390,394c390
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         destsmall,
391,394c391
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
391,395c391
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
391,395c391
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned intverbosity )
391,395c391
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* )
391,396c391
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned int* destLen;
392,405c392
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              const char * BZ_API(BZ2_bzlibVersion)(void)
392,405c392
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              charchar * BZ_API(BZ2_bzlibVersion)(void)
392,405c392
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              char*         * BZ_API(BZ2_bzlibVersion)(void)
392,405c392
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              char*         sourceBZ_API(BZ2_bzlibVersion)(void)
393,405c393
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              (BZ2_bzlibVersion)(void)
393,405c393
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned BZ2_bzlibVersion)(void)
393,405c393
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  )(void)
393,405c393
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  sourceLen(void)
394,405c394
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              void)
394,405c394
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           )
394,406c394
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
---
>                              int           small;
395,411c395
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
---
>                              static
395,412c395
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              int           BZFILE * bzopen_or_bzdopen
395,412c395
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              int           verbosity * bzopen_or_bzdopen
396,412c396
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> bzopen_or_bzdopen
405,413c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> ( const char *path,   
405,413c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const const char *path,   
405,413c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const char char *path,   
405,413c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const char * *path,   
405,413c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const char * BZ_APIpath,   
405,413c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const char * BZ_API(,   
405,414c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
---
> const char * BZ_API(BZ2_bzlibVersionint d,             
405,414c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
---
> const char * BZ_API(BZ2_bzlibVersion)d,             
405,414c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
---
> const char * BZ_API(BZ2_bzlibVersion)(,             
405,415c405
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> const char * BZ_API(BZ2_bzlibVersion)(voidconst char *mode,
406,415c406
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> char *mode,
411,415c411
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> *mode,
412,415c412
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> mode,
412,415c412
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> BZFILE ,
412,416c412
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
> BZFILE * int open_mode)      
413,416c413
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
>                open_mode)      
413,416c413
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( )      
413,417c413
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
>                ( const ;
413,422c413
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char BZFILE * BZ_API(BZ2_bzopen)
413,422c413
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char ** BZ_API(BZ2_bzopen)
413,422c413
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char *pathBZ_API(BZ2_bzopen)
414,422c414
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  (BZ2_bzopen)
414,422c414
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int BZ2_bzopen)
(95.8 %, 8566 bytes)
413,421c413
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
>                ( char *mode )
414,421c414
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> *mode )
419,421c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> mode )
419,421c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE )
419,422c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< ;
---
> BZFILE * ;
419,426c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZFILE * BZ_API(BZ2_bzdopen)
419,426c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API(* BZ_API(BZ2_bzdopen)
419,426c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API(BZ2_bzopenBZ_API(BZ2_bzdopen)
(95.9 %, 8466 bytes)
413,420c413
<                ( char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int d,
<                  const char *mode )
---
>                ( const char *mode )
413,420c413
<                ( char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int d,
<                  const char *mode )
---
>                ( char char *mode )
413,420c413
<                ( char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int d,
<                  const char *mode )
---
>                ( char **mode )
(95.9 %, 8378 bytes)
413,418c413
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( , void* buf, int len )
413,418c413
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const void* buf, int len )
413,418c413
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const char * buf, int len )
413,418c413
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const char *buf, int len )
413,418c413
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const char *mode , int len )
414,418c414
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int len )
418c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> len )
418c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int )
418,419c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API{
418,420c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(int bzerr, nread;
418,420c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzreadbzerr, nread;
418,420c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) , nread;
418,420c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (nread;
418,420c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b(((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void(bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf*)b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, )b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int b)->lastErr == BZ_STREAM_END) return 0;
418,421c418
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )->lastErr == BZ_STREAM_END) return 0;
419,421c419
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> ->lastErr == BZ_STREAM_END) return 0;
420,421c420
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    lastErr == BZ_STREAM_END) return 0;
420,421c420
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int == BZ_STREAM_END) return 0;
420,421c420
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerrBZ_STREAM_END) return 0;
420,421c420
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, ) return 0;
420,421c420
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nreadreturn 0;
421c421
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    0;
421c421
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ;
421,422c421
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (nread = 0;
421,422c421
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if ((= 0;
421,422c421
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((0;
421,422c421
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile;
421,423c421
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
(95.9 %, 8327 bytes)
421,423c421
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
421,423c421
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0; else ;
422,423c422
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    else ;
422,423c422
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread ;
422,424c422
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    nread = }
422,428c422
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    nread = 0int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr ) (BZFILE* b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == (BZFILE* b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK BZFILE* b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || * b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr b, void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == , void* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDvoid* buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) * buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; buf, int len )
423,428c423
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else , int len )
424,428c424
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int len )
428c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> len )
428c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int )
428,429c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
---
> int BZ_API;
428,433c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(int BZ_API(BZ2_bzflush) (BZFILE *b)
428,433c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwriteBZ_API(BZ2_bzflush) (BZFILE *b)
428,433c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZ2_bzflush) (BZFILE *b)
428,433c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZ2_bzflush) (BZFILE *b)
428,433c428
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE) (BZFILE *b)
(96.0 %, 8280 bytes)
428,437c428
< int BZ_API;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_APIBZ2_bzclose) (BZFILE* b)
432,437c432
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> ) (BZFILE* b)
432,437c432
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int (BZFILE* b)
432,437c432
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_APIBZFILE* b)
432,437c432
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(* b)
432,437c432
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflushb)
(96.0 %, 8218 bytes)
432,441c432
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> int BZ_API(, int *errnum)
432,441c432
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> int BZ_API(* int *errnum)
432,441c432
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> int BZ_API(* b*errnum)
433,441c433
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> errnum)
441c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> )
441,442c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
---
> const ;
441,471c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char #define BZ_UNIX      1
441,471c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * define BZ_UNIX      1
441,471c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * BZ_APIBZ_UNIX      1
441,471c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * BZ_API(1
441,474c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_API(BZ2_bzerror#define BZ_LCCWIN32  0
441,474c441
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_API(BZ2_bzerror) define BZ_LCCWIN32  0
(96.0 %, 8166 bytes)
441,479c441
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> const >
470,479d469
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
470,479d469
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
(96.1 %, 8093 bytes)
470,473c470
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> ERROR_IF_NOT_ZERO(i)  
470,473c470
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #(i)  
470,473c470
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #include i)  
470,473c470
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #include <)  
470,474c470
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno#define ERROR_IF_MINUS_ONE(i) 
470,474c470
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno.define ERROR_IF_MINUS_ONE(i) 
470,474c470
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno.hERROR_IF_MINUS_ONE(i) 
472,474c472
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> (i) 
472,474c472
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #i) 
472,474c472
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ) 
472,480c472
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define ERROR_IF_EOF#   include <fcntl.h>
472,480c472
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define ERROR_IF_EOF(include <fcntl.h>
472,480c472
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define ERROR_IF_EOF(i<fcntl.h>
473,480c473
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> fcntl.h>
473,480c473
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #.h>
473,480c473
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define h>
(96.1 %, 8015 bytes)
472,475c472
< #define ERROR_IF_EOF#   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #define ERROR_IF_EOFdefine PATH_SEP    '/'
472,475c472
< #define ERROR_IF_EOF#   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #define ERROR_IF_EOF#   PATH_SEP    '/'
472,475c472
< #define ERROR_IF_EOF#   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #define ERROR_IF_EOF#   include '/'
(96.1 %, 7966 bytes)
472,476c472
< #define ERROR_IF_EOFdefine PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> #define ERROR_IF_EOFdefine define MY_S_ISDIR  S_ISDIR
472,476c472
< #define ERROR_IF_EOFdefine PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> #define ERROR_IF_EOFdefine PATH_SEP    MY_S_ISDIR  S_ISDIR
(96.2 %, 7858 bytes)
472,475c472
< #define ERROR_IF_EOFdefine define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #define ERROR_IF_EOFdefine ((root), (name))
472,475c472
< #define ERROR_IF_EOFdefine define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #define ERROR_IF_EOFdefine define (root), (name))
(96.2 %, 7768 bytes)
472,474c472
< #define ERROR_IF_EOFdefine ((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> #define ERROR_IF_EOFdefine name) \
472,474c472
< #define ERROR_IF_EOFdefine ((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> #define ERROR_IF_EOFdefine () \
472,474c472
< #define ERROR_IF_EOFdefine ((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> #define ERROR_IF_EOFdefine ((\
(96.2 %, 7721 bytes)
472,475c472
< #define ERROR_IF_EOFdefine name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(d) 
---
> #define ERROR_IF_EOFdefine #   define SET_BINARY_MODE(d) 
472,475c472
< #define ERROR_IF_EOFdefine name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(d) 
---
> #define ERROR_IF_EOFdefine namedefine SET_BINARY_MODE(d) 
(96.3 %, 7674 bytes)
472,481c472
< #define ERROR_IF_EOFdefine #   define SET_BINARY_MODE(d) 
< 
< #      define NORETURN 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #define ERROR_IF_EOFdefine )1)
472,481c472
< #define ERROR_IF_EOFdefine #   define SET_BINARY_MODE(d) 
< 
< #      define NORETURN 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #define ERROR_IF_EOFdefine #   1)
(96.3 %, 7553 bytes)
472,476c472
< #define ERROR_IF_EOFdefine )1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
---
> #define ERROR_IF_EOFdefine ;
472,490c472
< #define ERROR_IF_EOFdefine )1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #define ERROR_IF_EOFdefine )#define SM_I2O           1
472,490c472
< #define ERROR_IF_EOFdefine )1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #define ERROR_IF_EOFdefine )1define SM_I2O           1
473,490c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> SM_I2O           1
473,490c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #1
473,491c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define #define SM_F2O           2
473,491c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define False define SM_F2O           2
473,491c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define False (SM_F2O           2
473,491c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define False ((2
473,492c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False ((Bool#define SM_F2F           3
473,492c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False ((Bool)define SM_F2F           3
473,492c473
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False ((Bool)0SM_F2F           3
476,492c476
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> 3
476,495c476
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef #define OM_Z             1
476,495c476
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int define OM_Z             1
476,495c476
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int IntNativeOM_Z             1
490,495c490
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> 1
490,496c490
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> ##define OM_UNZ           2
490,496c490
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define define OM_UNZ           2
490,496c490
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define SM_I2O           OM_UNZ           2
(96.4 %, 7450 bytes)
490,653c490
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define #define BZ_N_SUFFIX_PAIRS 4
490,653c490
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define define define BZ_N_SUFFIX_PAIRS 4
490,653c490
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define define OM_UNZ           BZ_N_SUFFIX_PAIRS 4
(96.5 %, 7191 bytes)
490,549c490
< #define define define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    e;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define define strcmp(aa->name, (s))==0)
490,549c490
< #define define define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    e;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define define define (aa->name, (s))==0)
(96.6 %, 7060 bytes)
490,492c490
< #define define strcmp(aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define define ( IntNative argc, Char *argv[] )
490,492c490
< #define define strcmp(aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define define strcmpIntNative argc, Char *argv[] )
490,492c490
< #define define strcmp(aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define define strcmp(argc, Char *argv[] )
(96.6 %, 7018 bytes)
490,496c490
< #define define ( IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define define 
\ No newline at end of file
490,496c490
< #define define ( IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define define ( 
\ No newline at end of file
(96.6 %, 6978 bytes)
===< pass_clex :: rm-toks-13 >===
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                #define BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    )
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
---
> define BZ_SEQUENCE_ERROR    )
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
---
> #BZ_SEQUENCE_ERROR    )
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
---
> #define )
11,15c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_FLUSH_OK          #define BZ_OUTBUFF_FULL      (-8)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
---
> define BZ_OUTBUFF_FULL      (-8)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
---
> #BZ_OUTBUFF_FULL      (-8)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define (-8)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_FINISH_OK         -8)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
---
> 8)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
---
> #)
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define #define BZ_CONFIG_ERROR      (-9)
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        define BZ_CONFIG_ERROR      (-9)
14,16c14
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> BZ_CONFIG_ERROR      (-9)
14,16c14
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #(-9)
14,16c14
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define -9)
14,16c14
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_SEQUENCE_ERROR    9)
15,16c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> )
15,18c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #typedef 
15,19c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define struct {
15,19c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_OUTBUFF_FULL      {
15,20c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       void *state;
---
> #define BZ_OUTBUFF_FULL      (void *state;
15,20c15
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       void *state;
---
> #define BZ_OUTBUFF_FULL      (-*state;
(96.6 %, 6911 bytes)
14,21c14
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
<       void ;
<    } 
<    bz_stream;
---
> #define BZ_SEQUENCE_ERROR    ;
14,25c14
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_SEQUENCE_ERROR    9#include <stdio.h>
16,25c16
< typedef 
<    struct {
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> include <stdio.h>
17,25c17
<    struct {
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    <stdio.h>
17,25c17
<    struct {
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    struct stdio.h>
18,25c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
18,25c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void h>
18,25c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *>
18,27c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *state#   define BZ_API(func) func
19,27c19
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       define BZ_API(func) func
19,27c19
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void BZ_API(func) func
20,27c20
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
21,27c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func) func
21,27c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func
25,28c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> ##   define BZ_EXTERN extern
25,28c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include define BZ_EXTERN extern
25,28c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <BZ_EXTERN extern
25,28c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioextern
25,33c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #include <stdio.BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
25,33c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #include <stdio.hint BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   ()BZ_API(BZ2_bzDecompressEnd) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define )BZ_API(BZ2_bzDecompressEnd) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_APIBZ_API(BZ2_bzDecompressEnd) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API((BZ2_bzDecompressEnd) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API(funcBZ2_bzDecompressEnd) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API(func) ) ( 
28,33c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> ( 
28,34c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   bz_stream *strm 
28,34c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   define *strm 
28,34c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   define BZ_EXTERN strm 
33,35c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> );
33,35c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN ;
33,41c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int #define BZ_MAX_UNUSED 0
33,41c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int BZ_APIdefine BZ_MAX_UNUSED 0
33,41c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int BZ_API(BZ_MAX_UNUSED 0
33,41c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int BZ_API()0
33,43c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_APItypedef void BZFILE;
33,43c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(void BZFILE;
33,43c33
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEndBZFILE;
(96.7 %, 6841 bytes)
33,43c33
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN (BZ2_bzReadOpen) ( 
39,43c39
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
39,43c39
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #) ( 
39,43c39
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ( 
39,44c39
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED int*  bzerror,   
41,44c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
41,44c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef bzerror,   
41,44c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void ,   
41,45c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEFILE* f, 
43,45c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> * f, 
43,45c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN f, 
43,45c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
43,46c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* int   verbosity, 
43,46c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIverbosity, 
43,46c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
43,47c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenint   small,
43,47c43
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) small,
44,47c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
44,48c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intvoid* unused,    
44,48c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  * unused,    
44,48c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorunused,    
45,48c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
45,49c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILEint   nUnused 
45,49c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* nUnused 
45,50c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* f);
46,50c46
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
46,52c46
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       int   ;
46,54c46
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   verbosityBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
47,54c47
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void BZ_API(BZ2_bzReadGetUnused) ( 
47,54c47
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_API(BZ2_bzReadGetUnused) ( 
47,54c47
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   small(BZ2_bzReadGetUnused) ( 
48,54c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ2_bzReadGetUnused) ( 
48,54c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void) ( 
48,54c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* ( 
48,55c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       void* unusedint*    bzerror, 
49,55c49
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
49,55c49
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int   bzerror, 
50,55c50
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    , 
50,56c50
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
52,56c52
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
54,56c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
54,56c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
54,57c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void void**  unused,  
54,57c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API**  unused,  
54,57c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(*  unused,  
54,57c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedunused,  
54,57c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ,  
55,57d54
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
55,57d54
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
55,57d54
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
55,59c55
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    bzerror);
56,59c56
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
56,61c56
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILEBZ_EXTERN int BZ_API(BZ2_bzReadlen 
56,61c56
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* int BZ_API(BZ2_bzReadlen 
56,61c56
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* bBZ_API(BZ2_bzReadlen 
57,61c57
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       (BZ2_bzReadlen 
57,61c57
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       voidBZ2_bzReadlen 
57,62c57
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void*);
57,62c57
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  ;
57,64c57
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void**  unusedBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
58,64c58
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
58,64c58
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int* BZ_API(BZ2_bzWriteOpen) ( 
58,64c58
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZ_API(BZ2_bzWriteOpen) ( 
59,64c59
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
59,64c59
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
61,64c61
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
61,64c61
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
61,65c61
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int int*  bzerror,      
61,65c61
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API*  bzerror,      
61,65c61
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API(bzerror,      
62,65c62
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ,      
62,66c62
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )FILE* f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> * f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* int   blockSize100k, 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIblockSize100k, 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity, 
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) verbosity, 
65,68c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
65,69c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       intint   workFactor 
65,69c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  workFactor 
65,70c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  bzerror);
66,70c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
66,72c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILEBZ_EXTERN void BZ_API(BZ2_bzWritelen 
66,72c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* void BZ_API(BZ2_bzWritelen 
66,72c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* fBZ_API(BZ2_bzWritelen 
67,72c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       (BZ2_bzWritelen 
67,72c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   BZ2_bzWritelen 
67,73c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   blockSize100k);
68,73c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       ;
68,75c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
68,75c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   verbosityvoid BZ_API(BZ2_bzWriteClose) ( 
69,75c69
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_API(BZ2_bzWriteClose) ( 
69,75c69
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   (BZ2_bzWriteClose) ( 
70,75c70
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ2_bzWriteClose) ( 
70,75c70
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )) ( 
72,75c72
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
72,76c72
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
72,76c72
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
72,76c72
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
72,76c72
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
73,77c73
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
73,77c73
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
75,77c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
75,77c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
75,79c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in, 
75,79c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) int* nbytes_in, 
76,79c76
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
76,79c76
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intnbytes_in, 
76,79c76
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          , 
76,80c76
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerrorunsigned int* nbytes_out 
77,80c77
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
(96.7 %, 6748 bytes)
76,80c76
<       int*          , 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int*          ( 
77,80d76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
77,81c77
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
(96.7 %, 6664 bytes)
77,80c77
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
77,80c77
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intnbytes_in_lo32, 
77,80c77
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          , 
77,81c77
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerrorunsigned int* nbytes_in_hi32, 
78,81c78
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
(96.8 %, 6566 bytes)
77,80c77
<       int*          , 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int*          * nbytes_out_hi32
78,80c78
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
78,81c78
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
(96.8 %, 6470 bytes)
77,84c77
<       int*          * nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       int*          dest, 
77,84c77
<       int*          * nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       int*          * , 
78,85c78
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
(96.9 %, 6372 bytes)
77,80c77
<       int*          dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int*          sourceLen,
77,80c77
<       int*          dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int*          dest,
78,80d77
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
(96.9 %, 6287 bytes)
77,83c77
<       int*          sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int*          int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
77,83c77
<       int*          sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int*          sourceLenBZ_API(BZ2_bzBuffToBuffDecompress) ( 
78,83c78
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
78,83c78
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
78,83c78
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100k) ( 
79,83c79
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
79,84c79
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           char*         dest, 
79,84c79
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbosity*         dest, 
80,84c80
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       dest, 
80,84c80
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           , 
81,85c81
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
81,85c81
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
83,85c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
83,85c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
83,85c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
83,86c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
83,86c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
83,86c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
83,86c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) , 
84,86d83
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
84,87c84
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
84,87c84
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
84,87c84
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
85,87d84
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
85,88c85
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned small, 
85,88c85
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int, 
85,89c85
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* int           verbosity 
85,89c85
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* destLenverbosity 
86,90c86
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       );
86,90c86
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       char;
86,95c86
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
86,95c86
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         sourceconst char * BZ_API(BZ2_bzlibVersion) (
87,95c87
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char * BZ_API(BZ2_bzlibVersion) (
87,95c87
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned * BZ_API(BZ2_bzlibVersion) (
87,95c87
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ_API(BZ2_bzlibVersion) (
87,95c87
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen(BZ2_bzlibVersion) (
88,95c88
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ2_bzlibVersion) (
88,95c88
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           ) (
88,95c88
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           small(
89,95d88
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
89,97c89
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           );
90,97c90
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>    ;
90,99c90
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
95,99c95
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZFILE * BZ_API(BZ2_bzopen) (
(97.0 %, 6202 bytes)
89,92c89
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           path,
89,92c89
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           ),
91,93c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> const char *mode
91,93c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN char *mode
91,93c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE *mode
91,93c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * mode
91,94c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API);
91,94c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(;
91,96c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenBZ_EXTERN ;
91,96c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
92,98c92
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       BZ_EXTERN int BZ_API;
92,98c92
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const int BZ_API;
92,98c92
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const char BZ_API;
92,98c92
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const char *;
92,100c92
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const char *pathBZ_EXTERN int BZ_API;
93,100c93
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       int BZ_API;
93,100c93
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const BZ_API;
(97.0 %, 6136 bytes)
91,97c91
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) BZ2_bzflush) (
93,97c93
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> ) (
93,97c93
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN (
93,98c93
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       );
---
> BZ_EXTERN int );
95,99d94
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       );
< 
95,99d94
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       );
< 
(97.0 %, 6067 bytes)
93,107c93
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN int BZ_API>
95,111d94
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
95,112c95
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN define BZ_VERSION  "1.0.2, 30-Dec-2001"
95,112c95
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const BZ_VERSION  "1.0.2, 30-Dec-2001"
105,112c105
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> "1.0.2, 30-Dec-2001"
105,114c105
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #typedef char            Char;
105,114c105
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define char            Char;
107,114c107
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
(97.1 %, 5990 bytes)
95,98d94
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
95,99c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #unsigned char   UChar;
95,99c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define char   UChar;
95,99c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  UChar;
97,99c97
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
97,100c97
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
97,100c97
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            int             Int32;
97,100c97
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            CharInt32;
98,100c98
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> ;
98,101c98
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef typedef unsigned int    UInt32;
98,101c98
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned unsigned int    UInt32;
98,101c98
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   int    UInt32;
98,101c98
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   BoolUInt32;
99,101c99
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> ;
99,102c99
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef typedef short           Int16;
99,102c99
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned short           Int16;
99,102c99
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Int16;
100,102d99
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
100,102d99
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
100,102d99
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
100,103c100
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             short  UInt16;
100,103c100
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32UInt16;
101,103c101
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> ;
101,105c101
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef #define True  ((Bool)1)
101,105c101
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned define True  ((Bool)1)
101,105c101
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    True  ((Bool)1)
101,105c101
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32((Bool)1)
102,105c102
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> (Bool)1)
102,105c102
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef Bool)1)
102,105c102
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           )1)
(97.1 %, 5897 bytes)
101,104c101
< ;
< 
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
---
> BZ_HDR_h 0x8   
103,104c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
---
> 0x8   
103,105c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> ##define BZ_HDR_0 0x0   
103,105c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> #define define BZ_HDR_0 0x0   
103,105c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> #define True  BZ_HDR_0 0x0   
103,105c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> #define True  (0x0   
103,109c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define True  ((#define BZ_MAX_ALPHA_SIZE 8
103,109c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define True  ((Booldefine BZ_MAX_ALPHA_SIZE 8
103,109c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define True  ((Bool)BZ_MAX_ALPHA_SIZE 8
103,109c103
< #define True  ((Bool)1)
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define True  ((Bool)18
104,109d103
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
104,109d103
< #define False BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
(97.2 %, 5810 bytes)
104,109c104
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> define BZ_N_GROUPS 6
104,109c104
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #BZ_N_GROUPS 6
104,109c104
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define 6
104,110c104
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
106,110c106
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   50
106,110c106
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #BZ_G_SIZE   50
106,110c106
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define 50
106,111c106
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNA #define BZ_N_ITERS  4
(97.2 %, 5748 bytes)
104,107c104
< #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
104,107c104
< #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_CODE_LEN    #(0 / BZ_G_SIZE))
104,107c104
< #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_CODE_LEN    #define 0 / BZ_G_SIZE))
(97.2 %, 5674 bytes)
104,113c104
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    ;                               \
104,113c104
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + \
104,114c104
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (Int32 rTPos                                 \
104,114c104
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (0 rTPos                                 \
104,114c104
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (0 / \
104,116c104
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE#\
104,116c104
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE)\
112,117d111
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
112,117d111
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
112,117d111
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
112,118c112
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_RAND_DECLS                          #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
113,118c113
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>    define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
113,118c113
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>    Int32 BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
113,118c113
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>    Int32 rNToGo(BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
113,118c113
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>    Int32 rNToGo;                               BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
114,118c114
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>    + BZ_N_QSORT + BZ_N_SHELL + 2)
114,118c114
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>    Int32 BZ_N_QSORT + BZ_N_SHELL + 2)
114,118c114
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>    Int32 rTPos                                 + BZ_N_SHELL + 2)
116,118c116
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_SHELL + 2)
116,118c116
< #\
< 
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ 2)
118c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> 2)
118c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #)
118,125c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #define typedef
118,126c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define struct {
118,126c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define #{
118,128c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define define #define BZ_RAND_DECLS;
118,128c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define define #define BZ_N_OVERSHOOT ;
118,130c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
---
> #define define #define BZ_N_OVERSHOOT (}
118,131c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX EState;
118,131c118
< #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
---
> #define define #define BZ_N_OVERSHOOT (BZ_N_RADIX + ;
(97.3 %, 5574 bytes)
118,145c118
< #define define #define BZ_N_OVERSHOOT (}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define define #define BZ_N_OVERSHOOT (define MTFA_SIZE 4096
119,145c119
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>    MTFA_SIZE 4096
119,145c119
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>    EState4096
127,145d126
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
129,146c129
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 6
139,146c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> MTFL_SIZE 6
139,146c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #6
139,152c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
---
> #define typedef
139,153c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define struct {
139,153c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define #{
139,155c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define define #define BZ_RAND_DECLS;
139,155c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define define #define BZ_X_CCRC_4      ;
145,158c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> UChar    mtfa   [MTFA_SIZE];
145,158c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #mtfa   [MTFA_SIZE];
145,158c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #define [MTFA_SIZE];
145,158c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #define MTFA_SIZE MTFA_SIZE];
146,158c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> ];
146,158c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #;
146,159c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
> #define Int32    mtfbase[6 / MTFL_SIZE];
146,159c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
> #define MTFL_SIZE mtfbase[6 / MTFL_SIZE];
152,159c152
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
> [6 / MTFL_SIZE];
153,159c153
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>    6 / MTFL_SIZE];
153,159c153
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>    struct / MTFL_SIZE];
155,159c155
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       MTFL_SIZE];
155,159c155
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       BZ_RAND_DECLS];
158,159c158
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       ;
158,160c158
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
---
>       UChar    Int32   save_gBase;
158,160c158
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
---
>       UChar    mtfa   save_gBase;
158,160c158
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
---
>       UChar    mtfa   [;
158,161c158
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
>       UChar    mtfa   [MTFA_SIZEInt32   save_gPerm;
158,161c158
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
>       UChar    mtfa   [MTFA_SIZE]save_gPerm;
159,161c159
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
>       ;
(97.3 %, 5508 bytes)
158,169c158
<       ;
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
---
>       static
159,170c159
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
---
>       Bool isempty_RL ( int        blockSize100k,
159,170c159
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
---
>       Int32   isempty_RL ( int        blockSize100k,
159,170c159
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
---
>       Int32   save_gBase( int        blockSize100k,
160,170c160
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
---
>       int        blockSize100k,
160,170c160
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
---
>       Int32   blockSize100k,
160,170c160
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
---
>       Int32   save_gPerm,
162,171c162
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
---
>    int        verbosity,
163,171c163
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
---
>    verbosity,
163,171c163
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
---
>    DState,
169,172c169
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int        workFactor )
169,172c169
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> #workFactor )
169,172c169
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> #define )
169,173c169
< #define tPosc_tPos static
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
---
> #define tPosc_tPos ;
170,184d169
< Bool isempty_RL ( int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(97.4 %, 5369 bytes)
169,181c169
< #define tPosc_tPos ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
---
> #define tPosc_tPos (e)                    \
181c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
---
> e)                    \
181c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
---
> #)                    \
181c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
---
> #define \
181,184c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
---
> #define ADD_CHAR_TO_BLOCKint typedef 
181,185c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
> #define ADD_CHAR_TO_BLOCKint (struct {
181,185c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd{
181,186c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  bz_stream strm;
181,186c181
< #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( bz_stream *strm define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
---
> #define ADD_CHAR_TO_BLOCKint (BZ2_bzCompressEnd)  ( strm;
(97.4 %, 5272 bytes)
169,176c169
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
> #define tPosc_tPos Bool      initialisedOk;
169,176c169
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
> #define tPosc_tPos (initialisedOk;
169,176c169
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
> #define tPosc_tPos (e;
169,177c169
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
> #define tPosc_tPos (e)                    }
172,178c172
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> bzFile;
173,178c173
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>    ;
173,186c173
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    struct BZFILE* BZ_API(BZ2_bzWriteOpen) 
174,186c174
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
174,186c174
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ_API(BZ2_bzWriteOpen) 
174,186c174
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm(BZ2_bzWriteOpen) 
175,186c175
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ2_bzWriteOpen) 
175,186c175
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     ) 
175,187c175
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr( int*  bzerror,      
176,187c176
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int*  bzerror,      
176,187c176
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      *  bzerror,      
176,187c176
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOkbzerror,      
177,187c177
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
178,188c178
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    FILE* f, 
178,188c178
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile* f, 
186,188c186
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> f, 
186,188c186
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE, 
186,189c186
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
186,189c186
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIblockSize100k, 
186,189c186
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(, 
186,190c186
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity,
187,190c187
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     verbosity,
187,190c187
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( ,
187,191c187
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intint   workFactor )
187,191c187
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  workFactor )
187,191c187
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerror)
188,192c188
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
188,197c188
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILEvoid BZ_API(BZ2_bzWrite)
188,197c188
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILE* BZ_API(BZ2_bzWrite)
188,197c188
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILE* f(BZ2_bzWrite)
189,197c189
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       BZ2_bzWrite)
189,197c189
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   )
189,198c189
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   blockSize100k( int*    bzerror, 
190,198c190
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int*    bzerror, 
190,198c190
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   *    bzerror, 
190,198c190
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   verbositybzerror, 
191,198c191
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       , 
191,199c191
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   BZFILE* b, 
191,199c191
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   workFactor * b, 
192,199c192
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
197,199c197
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> , 
197,200c197
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void void*   buf, 
197,200c197
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API*   buf, 
197,200c197
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(buf, 
197,200c197
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWrite, 
198,201c198
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len , 
---
>              int     len , 
198,201c198
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len , 
---
>              ( len , 
198,201c198
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len , 
---
>              ( int, 
198,202c198
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len , 
<                     int           abandon,
---
>              ( int*    int           abandon,
198,202c198
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len , 
<                     int           abandon,
---
>              ( int*    bzerrorabandon,
(97.5 %, 5174 bytes)
198,201c198
<              ( int, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>              ( int)
199,202c199
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     ;
199,205c199
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     int           void BZ_API(BZ2_bzWriteClose64)
199,205c199
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     int           abandonBZ_API(BZ2_bzWriteClose64)
200,205c200
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     (BZ2_bzWriteClose64)
200,205c200
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned BZ2_bzWriteClose64)
200,205c200
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int)
200,206c200
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* ( int*          bzerror, 
(97.5 %, 5038 bytes)
198,204c198
<              ( int)
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>              ( int*       b, 
199,204c199
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
202,204c202
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
202,205c202
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
202,205c202
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
202,205c202
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
202,206c202
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32,
203,206c203
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   int* nbytes_in_lo32,
(97.6 %, 4930 bytes)
198,201c198
<              ( int*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>              ( int* nbytes_in_hi32,
198,201c198
<              ( int*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>              ( int*       nbytes_in_hi32,
(97.7 %, 4793 bytes)
198,201c198
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>              ( int;
198,205c198
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>              ( int* BZFILE* BZ_API(BZ2_bzReadOpen) 
198,205c198
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>              ( int* nbytes_in_hi32* BZ_API(BZ2_bzReadOpen) 
199,205c199
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     BZ_API(BZ2_bzReadOpen) 
199,205c199
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned (BZ2_bzReadOpen) 
199,205c199
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned intBZ2_bzReadOpen) 
199,205c199
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* ) 
199,206c199
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_lo32( int*  bzerror, 
200,206c200
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
200,206c200
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned *  bzerror, 
(97.7 %, 4703 bytes)
200,203c200
<                     int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                     ,
200,204c200
<                     int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                     intvoid* unused,
200,204c200
<                     int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                     int*  * unused,
200,204c200
<                     int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                     int*  bzerrorunused,
(97.8 %, 4565 bytes)
200,207c200
<                     int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                     int*  int*    bzerror, 
200,207c200
<                     int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                     int*  * *    bzerror, 
200,207c200
<                     int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                     int*  * unusedbzerror, 
201,207c201
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      , 
201,208c201
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      int   BZFILE* b, 
201,208c201
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      int   b * b, 
202,208c202
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
206,208c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> , 
206,209c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int void*   buf, 
206,209c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API*   buf, 
206,209c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(buf, 
206,209c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzRead, 
207,210c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            int     len )
207,210c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( len )
207,210c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int)
207,211c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    {
207,213c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzFile* bzf = (bzFile*)b;
208,213c208
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              * bzf = (bzFile*)b;
208,213c208
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILEbzf = (bzFile*)b;
208,213c208
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* = (bzFile*)b;
208,213c208
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b(bzFile*)b;
209,213c209
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzFile*)b;
209,213c209
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*)b;
209,213c209
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   )b;
209,213c209
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufb;
210,213c210
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              ;
210,214c210
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>              int     char *bzf_4_4;
210,214c210
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>              int     len *bzf_4_4;
211,214c211
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
> bzf_4_4;
213,214c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>    ;
213,215c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    bzFileunsigned int bzf_4_5;
213,215c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    bzFile* int bzf_4_5;
213,215c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    bzFile* bzf bzf_4_5;
213,215c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
---
>    bzFile* bzf = ;
213,216c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
---
>    bzFile* bzf = (Bool bzf_3;
213,216c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
---
>    bzFile* bzf = (bzFilebzf_3;
213,216c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
---
>    bzFile* bzf = (bzFile*;
213,218c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
---
>    bzFile* bzf = (bzFile*)BZ_SETERR(0)
213,218c213
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
---
>    bzFile* bzf = (bzFile*)b(0)
214,218c214
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
---
>    0)
214,218c214
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
---
>    char )
214,219c214
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
<       ;
---
>    char *;
215,221d214
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
<       ;
< 
<    ;
215,221d214
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
<       ;
< 
<    ;
215,222c215
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(0)
<       ;
< 
<    ;
<    bzf_4_4 = buf;
---
>    unsigned = buf;
(97.8 %, 4494 bytes)
214,224c214
<    char *bzf_4_4;
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    char *bzf_4_4void BZ_API(BZ2_bzReadGetUnused) 
215,224c215
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_API(BZ2_bzReadGetUnused) 
215,224c215
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf_4_4 (BZ2_bzReadGetUnused) 
215,224c215
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf_4_4 = BZ2_bzReadGetUnused) 
215,224c215
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf_4_4 = buf) 
217,225c217
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
217,225c217
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while int*    bzerror, 
217,225c217
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (*    bzerror, 
217,225c217
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (Truebzerror, 
219,225c219
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    , 
219,226c219
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return BZFILE* b, 
219,226c219
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0* b, 
220,226c220
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
224,226c224
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
224,227c224
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void void**  unused, 
224,227c224
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API**  unused, 
224,227c224
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(*  unused, 
224,227c224
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedunused, 
225,227c225
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      , 
225,228c225
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
225,228c225
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
225,228c225
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
225,228c225
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror)
226,229c226
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        ;
226,237c226
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILEint BZ_API(BZ2_bzBuffToBuffCompress) 
226,237c226
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILE* BZ_API(BZ2_bzBuffToBuffCompress) 
226,237c226
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILE* b(BZ2_bzBuffToBuffCompress) 
227,237c227
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ2_bzBuffToBuffCompress) 
227,237c227
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void) 
227,238c227
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void*( char*         dest, 
227,238c227
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void**  char*         dest, 
227,238c227
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void**  unused*         dest, 
228,238c228
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        dest, 
228,238c228
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int, 
228,239c228
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    unsigned int* destLen,
228,239c228
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    nUnused int* destLen,
229,239c229
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
237,239c237
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> destLen,
237,239c237
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int ,
237,240c237
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIchar*         source, 
237,240c237
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(*         source, 
237,240c237
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresssource, 
238,240c238
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          , 
238,241c238
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( unsigned int  sourceLen,
238,241c238
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charint  sourceLen,
238,241c238
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         sourceLen,
(97.9 %, 4346 bytes)
238,242c238
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                          ( ;
238,246c238
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          ( unsigned int BZ_API(BZ2_bzBuffToBuffDecompress) 
238,246c238
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          ( unsigned int  BZ_API(BZ2_bzBuffToBuffDecompress) 
238,246c238
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          ( unsigned int  sourceLen(BZ2_bzBuffToBuffDecompress) 
239,246c239
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            BZ2_bzBuffToBuffDecompress) 
239,246c239
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           ) 
239,247c239
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           blockSize100k( char*         dest, 
240,247c240
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            char*         dest, 
240,247c240
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           *         dest, 
240,247c240
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           verbositydest, 
241,247c241
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            , 
241,248c241
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           unsigned int* destLen,
241,248c241
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           workFactor int* destLen,
242,248c242
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
246,248c246
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> destLen,
246,248c246
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int ,
246,249c246
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIchar*         source, 
246,249c246
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(*         source, 
246,249c246
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
247,249c247
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            , 
247,250c247
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( unsigned int  sourceLen,
247,250c247
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charint  sourceLen,
247,250c247
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         sourceLen,
247,250c247
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         dest,
248,250d247
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
248,251c248
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned small,
248,251c248
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int,
248,252c248
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* int           verbosity )
248,252c248
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenverbosity )
249,252c249
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
249,253c249
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              char;
249,262c249
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              char*         const char * BZ_API(BZ2_bzlibVersion)(void)
249,262c249
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              char*         sourcechar * BZ_API(BZ2_bzlibVersion)(void)
250,262c250
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              * BZ_API(BZ2_bzlibVersion)(void)
250,262c250
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned BZ_API(BZ2_bzlibVersion)(void)
250,262c250
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  (BZ2_bzlibVersion)(void)
250,262c250
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  sourceLenBZ2_bzlibVersion)(void)
251,262c251
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              )(void)
251,262c251
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           (void)
251,262c251
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           smallvoid)
252,262c252
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              )
252,263c252
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
---
>                              int           ;
252,268c252
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
---
>                              int           verbosity static
253,268d252
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
262,269c262
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> * bzopen_or_bzdopen
262,269c262
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> const bzopen_or_bzdopen
262,270c262
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *mode )
---
> const char ( const char *mode )
(97.9 %, 4282 bytes)
262,268c262
< * bzopen_or_bzdopen
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> ) (BZFILE* b, void* buf, int len )
262,268c262
< * bzopen_or_bzdopen
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * (BZFILE* b, void* buf, int len )
263,268c263
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                BZFILE* b, void* buf, int len )
263,268c263
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( * b, void* buf, int len )
263,268c263
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const b, void* buf, int len )
263,268c263
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const char , void* buf, int len )
263,268c263
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const char *void* buf, int len )
263,268c263
<                ( const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( const char *mode * buf, int len )
264,268c264
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
268c268
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , int len )
268c268
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int int len )
268c268
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
(97.9 %, 4232 bytes)
263,265c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                ( const nread;
263,265c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                ( const b;
263,266c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
>                ( const b, 0;
263,266c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
>                ( const b, void;
263,267c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>                ( const b, void* nread = 0;
263,267c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>                ( const b, void* buf= 0;
263,267c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>                ( const b, void* buf, 0;
263,267c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>                ( const b, void* buf, int ;
263,268c263
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>                ( const b, void* buf, int len if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
264,268c264
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
265,268c265
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
265,268c265
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
265,268c265
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrBZ_OK || bzerr == BZ_STREAM_END) ; else ;
265,268c265
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, || bzerr == BZ_STREAM_END) ; else ;
265,268c265
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nreadbzerr == BZ_STREAM_END) ; else ;
266,268c266
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_STREAM_END) ; else ;
266,268c266
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0BZ_STREAM_END) ; else ;
267,268c267
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
267,268c267
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread ; else ;
267,268c267
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = else ;
268d267
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
268,269c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    }
268,273c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
---
>    if int BZ_API;
268,273c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
---
>    if (BZ_API;
268,273c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
---
>    if (bzerr ;
268,277c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == int BZ_API(* b)
268,277c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK BZ_API(* b)
268,277c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || (* b)
268,277c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr * b)
268,277c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr == b)
268,277c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
268,278c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ;
268,286c268
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; const ;
269,286d268
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
269,314d268
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
273,315c273
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
> include <errno.h>
273,315c273
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
> int <errno.h>
273,315c273
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
> int BZ_APIerrno.h>
277,315c277
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
> .h>
277,315c277
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
> int h>
277,315c277
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
> int BZ_API>
277,317c277
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
---
> int BZ_API(#define ERROR_IF_EOFdefine )1)
277,317c277
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
---
> int BZ_API(* define ERROR_IF_EOFdefine )1)
277,317c277
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
---
> int BZ_API(* bERROR_IF_EOFdefine )1)
278,317c278
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
---
> )1)
286,317c286
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
---
> 1)
286,317c286
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
---
> const )
315,317d314
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
315,317d314
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
315,318c315
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine )1)
< #define False ((Bool)0)
---
> #include False ((Bool)0)
(98.0 %, 4181 bytes)
315,331d314
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
315,331d314
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(98.0 %, 4119 bytes)
315d314
< #define define 
\ No newline at end of file
315c315
< #define define 
\ No newline at end of file
---
> #
\ No newline at end of file
(98.0 %, 4104 bytes)
===< pass_clex :: rm-toks-9 >===
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define 2
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_OK                #define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_RUN_OK            #define BZ_STREAM_END        4
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define 4
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #define BZ_FLUSH_OK          #define BZ_SEQUENCE_ERROR    9)
12,14c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> define BZ_SEQUENCE_ERROR    9)
12,14c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #BZ_SEQUENCE_ERROR    9)
12,14c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #define 9)
12,14c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #define BZ_FINISH_OK         )
13,15d12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
< 
13,17c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
---
> #struct {
13,17c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
---
> #define {
13,18c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
---
> #define BZ_STREAM_END        void *state;
14,18c14
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
---
> *state;
14,18c14
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
---
> #state;
14,18c14
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
---
> #define ;
14,19c14
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
<       void ;
---
> #define BZ_SEQUENCE_ERROR    void ;
14,19c14
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    struct {
<       void *state;
<       void ;
---
> #define BZ_SEQUENCE_ERROR    9;
16,20c16
< typedef 
<    struct {
<       void *state;
<       void ;
<    } 
---
> } 
17,20d16
<    struct {
<       void *state;
<       void ;
<    } 
17,21c17
<    struct {
<       void *state;
<       void ;
<    } 
<    bz_stream;
---
>    struct ;
18,25c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       #include <stdio.h>
18,25c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void include <stdio.h>
18,25c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *<stdio.h>
18,25c18
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *statestdio.h>
19,25c19
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
19,25c19
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void h>
20,25c20
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
(98.0 %, 4054 bytes)
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    #   define BZ_API(func) func
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamdefine BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdiofunc
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.#   define BZ_EXTERN extern
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hdefine BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   extern
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_EXTERN ;
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_API;
23,35c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(#define BZ_MAX_UNUSED 0
23,35c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(funcdefine BZ_MAX_UNUSED 0
23,35c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(func) BZ_MAX_UNUSED 0
24,35c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> 0
24,37c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   typedef void BZFILE;
24,37c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define void BZFILE;
24,37c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN BZFILE;
29,37c29
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> ;
29,39c29
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #* BZ_API(BZ2_bzReadOpen) ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_API(BZ2_bzReadOpen) ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED (BZ2_bzReadOpen) ( 
37,39c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
37,39c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef ) ( 
37,39c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void ( 
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILEint*  bzerror,   
39,40c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
39,40c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN bzerror,   
39,40c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE,   
39,41c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* FILE* f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API* f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen, 
39,42c39
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) int   verbosity, 
40,42c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       verbosity, 
40,42c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int, 
40,43c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  int   small,
40,43c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerrorsmall,
(98.0 %, 4002 bytes)
40,43c40
<       int, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       intnUnused 
41,44c41
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
41,44c41
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
41,46c41
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       int   small;
42,48c42
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
42,48c42
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       voidvoid BZ_API(BZ2_bzReadGetUnused) ( 
42,48c42
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* BZ_API(BZ2_bzReadGetUnused) ( 
42,48c42
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unused(BZ2_bzReadGetUnused) ( 
43,48c43
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ2_bzReadGetUnused) ( 
43,48c43
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   ) ( 
44,48c44
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    ( 
44,49c44
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    )int*    bzerror, 
46,49c46
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> *    bzerror, 
48,49c48
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> bzerror, 
48,49c48
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
48,50c48
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZFILE* b, 
48,50c48
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API* b, 
48,50c48
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(b, 
48,50c48
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused, 
48,51c48
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) void**  unused,  
49,51c49
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
49,51c49
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*  unused,  
49,51c49
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    unused,  
49,51c49
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror,  
50,51d49
<       BZFILE* b, 
<       void**  unused,  
50,52c50
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE*    nUnused 
50,52c50
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* nUnused 
50,53c50
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b);
51,53c51
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
51,55c51
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       voidBZ_EXTERN int BZ_API(BZ2_bzReadlen 
51,55c51
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void*int BZ_API(BZ2_bzReadlen 
51,55c51
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void**  BZ_API(BZ2_bzReadlen 
51,55c51
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void**  unused(BZ2_bzReadlen 
52,55c52
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZ2_bzReadlen 
52,56c52
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       int);
52,56c52
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       int*    ;
53,58c53
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
53,58c53
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
55,58c55
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen) ( 
55,58c55
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWriteOpen) ( 
55,58c55
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int (BZ2_bzWriteOpen) ( 
55,58c55
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzWriteOpen) ( 
55,58c55
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZ_API() ( 
56,58c56
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    ( 
56,59c56
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    )int*  bzerror,      
58,59c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> *  bzerror,      
58,59c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN bzerror,      
58,59c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE,      
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* FILE* f, 
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API* f, 
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(f, 
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
58,61c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   blockSize100k, 
59,61c59
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       blockSize100k, 
59,61c59
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int, 
59,62c59
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
59,62c59
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
60,62c60
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
60,63c60
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEint   workFactor 
60,63c60
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* workFactor 
60,64c60
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f);
61,64c61
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
61,66c61
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWritelen 
61,66c61
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   blockSize100kvoid BZ_API(BZ2_bzWritelen 
62,66c62
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       BZ_API(BZ2_bzWritelen 
62,66c62
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   (BZ2_bzWritelen 
62,66c62
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   verbosityBZ2_bzWritelen 
63,67c63
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       );
63,67c63
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   ;
64,69c64
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
64,69c64
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )void BZ_API(BZ2_bzWriteClose) ( 
66,69c66
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_API(BZ2_bzWriteClose) ( 
66,69c66
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN (BZ2_bzWriteClose) ( 
66,69c66
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose) ( 
(98.1 %, 3942 bytes)
66,68c66
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          , 
<       int*          sourceLen,
---
> *          sourceLen,
66,68c66
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          , 
<       int*          sourceLen,
---
> BZ_APIsourceLen,
66,68c66
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          , 
<       int*          sourceLen,
---
> BZ_API(,
66,69c66
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          , 
<       int*          sourceLen,
<       int           blockSize100k, 
---
> BZ_API(BZ2_bzWriteCloseint           blockSize100k, 
66,69c66
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          , 
<       int*          sourceLen,
<       int           blockSize100k, 
---
> BZ_API(BZ2_bzWriteClose) blockSize100k, 
67,69c67
<       int*          , 
<       int*          sourceLen,
<       int           blockSize100k, 
---
>       , 
67,70c67
<       int*          , 
<       int*          sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       intint           verbosity, 
67,70c67
<       int*          , 
<       int*          sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int*          verbosity, 
68,70c68
<       int*          sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
68,71c68
<       int*          sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       intint           workFactor 
68,71c68
<       int*          sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       int*          workFactor 
(98.1 %, 3852 bytes)
67,71c67
<       int*          verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int*          (BZ2_bzBuffToBuffDecompress) ( 
67,71c67
<       int*          verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int*          verbosityBZ2_bzBuffToBuffDecompress) ( 
68,71c68
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
68,71c68
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
69,72c69
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    char*         dest, 
69,72c69
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    )*         dest, 
71,72c71
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> dest, 
71,72c71
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN , 
71,73c71
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int unsigned int* destLen,
71,73c71
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIint* destLen,
71,73c71
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(* destLen,
71,73c71
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
71,73c71
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ,
72,73d71
<       char*         dest, 
<       unsigned int* destLen,
72,73d71
<       char*         dest, 
<       unsigned int* destLen,
72,73d71
<       char*         dest, 
<       unsigned int* destLen,
73,74d72
<       unsigned int* destLen,
<       char*         source, 
73,74d72
<       unsigned int* destLen,
<       char*         source, 
73,74d72
<       unsigned int* destLen,
<       char*         source, 
73,75c73
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
73,75c73
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
73,76c73
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLenint           small, 
74,76c74
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       small, 
74,76c74
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char, 
74,77c74
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         int           );
74,77c74
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         source);
75,77c75
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       ;
75,79c75
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       unsigned BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
75,79c75
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       unsigned int  BZFILE * BZ_API(BZ2_bzopen) ;
75,79c75
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       unsigned int  sourceLen* BZ_API(BZ2_bzopen) ;
76,79c76
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       BZ_API(BZ2_bzopen) ;
76,79c76
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       int           (BZ2_bzopen) ;
76,79c76
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       int           smallBZ2_bzopen) ;
77,79c77
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       ) ;
77,79c77
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
---
>       int           ;
77,81c77
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
<          
< BZ_EXTERN int BZ_API;
---
>       int           )BZ_EXTERN int BZ_API;
79,81c79
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
<          
< BZ_EXTERN int BZ_API;
---
> int BZ_API;
79,81c79
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
<          
< BZ_EXTERN int BZ_API;
---
> BZ_EXTERN BZ_API;
(98.1 %, 3792 bytes)
79,83c79
< int BZ_API;
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
79,83c79
< int BZ_API;
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> int ;
(98.2 %, 3713 bytes)
79,81c79
< Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
79,81c79
< Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> CharUChar;
80,81c80
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
80,82c80
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
80,82c80
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned int             Int32;
80,82c80
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Int32;
81,82d80
< typedef unsigned char   UChar;
< typedef int             Int32;
81,82d80
< typedef unsigned char   UChar;
< typedef int             Int32;
81,85c81
< typedef unsigned char   UChar;
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> typedef #define True  ((Bool)1)
81,85c81
< typedef unsigned char   UChar;
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> typedef unsigned define True  ((Bool)1)
81,85c81
< typedef unsigned char   UChar;
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   True  ((Bool)1)
81,85c81
< typedef unsigned char   UChar;
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   UChar((Bool)1)
82,85c82
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> (Bool)1)
82,85c82
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> typedef Bool)1)
82,85c82
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> typedef int             )1)
82,85c82
< typedef int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> typedef int             Int321)
83,85c83
< ;
< 
< #define True  ((Bool)1)
---
> )
85d84
< #define True  ((Bool)1)
85d84
< #define True  ((Bool)1)
85d84
< #define True  ((Bool)1)
85,86c85
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  + (0 / BZ_G_SIZE))
85,86c85
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((0 / BZ_G_SIZE))
85,86c85
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((0 / BZ_G_SIZE))
85,86c85
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((Bool/ BZ_G_SIZE))
85,86c85
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((Bool)BZ_G_SIZE))
85,86c85
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((Bool)1))
86c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> )
86,94c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> ##define BZ_RAND_DECLS                          \
86,94c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define define BZ_RAND_DECLS                          \
86,94c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_CODE_LEN    BZ_RAND_DECLS                          \
86,94c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_CODE_LEN    + \
86,95c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + (Int32 rNToGo;                               \
86,95c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + (0 rNToGo;                               \
86,95c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + (0 / ;                               \
86,95c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE\
86,96c86
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE)Int32 rTPos                                 \
94,96c94
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> rTPos                                 \
94,96c94
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #\
94,98c94
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define #\
95,98d94
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
95,100c95
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (}
---
>    #define define #define BZ_N_OVERSHOOT (}
95,100c95
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (}
---
>    Int32 define define #define BZ_N_OVERSHOOT (}
95,100c95
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (}
---
>    Int32 rNToGodefine #define BZ_N_OVERSHOOT (}
95,100c95
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (}
---
>    Int32 rNToGo;                               #define BZ_N_OVERSHOOT (}
96,100c96
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (}
---
>    define BZ_N_OVERSHOOT (}
96,100c96
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (}
---
>    Int32 BZ_N_OVERSHOOT (}
96,100c96
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_N_OVERSHOOT (}
---
>    Int32 rTPos                                 (}
(98.2 %, 3611 bytes)
94,97c94
< #define BZ_RAND_DECLS                          \
< 
< #define define #define BZ_N_OVERSHOOT (}
<    EState;
---
> #define BZ_RAND_DECLS                          EState;
96,97c96
< #define define #define BZ_N_OVERSHOOT (}
<    EState;
---
> ;
96,105c96
< #define define #define BZ_N_OVERSHOOT (}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
> #;
96,107c96
< #define define #define BZ_N_OVERSHOOT (}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
> #define ;
96,117c96
< #define define #define BZ_N_OVERSHOOT (}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> #define define #define define #define BZ_X_CCRC_4      0
(98.3 %, 3561 bytes)
96,116c96
< ;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> 0
104,121d103
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
106,122c106
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
116,122c116
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
116,122c116
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #4096
(98.3 %, 3500 bytes)
104,112c104
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
104,112c104
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
104,114c104
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define BZ_RAND_DECLS;
104,114c104
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define MTFA_SIZE ;
105,117c105
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       ;
---
> ;
105,118c105
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       ;
<       Int32   save_gBase;
---
> #Int32   save_gBase;
105,118c105
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       ;
<       Int32   save_gBase;
---
> #define save_gBase;
105,118c105
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       ;
<       Int32   save_gBase;
---
> #define MTFL_SIZE ;
(98.3 %, 3441 bytes)
104,111c104
< struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       ;
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
> save_gPerm;
104,111c104
< struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       ;
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
> struct ;
106,113c106
<       BZ_RAND_DECLS;
< 
<       
<       ;
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
---
>       }
106,114c106
<       BZ_RAND_DECLS;
< 
<       
<       ;
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
---
>       BZ_RAND_DECLSDState;
110,114d109
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
110,120c110
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
>       #define tPosc_tPos (e)                    \
110,120c110
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
>       Int32   define tPosc_tPos (e)                    \
110,120c110
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
>       Int32   save_gBasetPosc_tPos (e)                    \
111,120c111
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
>       (e)                    \
111,120c111
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
>       Int32   e)                    \
111,120c111
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
>       Int32   save_gPerm)                    \
(98.4 %, 3354 bytes)
106,113c106
<       }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
>       \
107,116c107
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
---
>    typedef 
107,117c107
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
---
>    DStatestruct {
113,117c113
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
---
> {
113,118c113
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
---
> #bz_stream strm;
113,118c113
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
---
> #define strm;
113,118c113
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
---
> #define tPosc_tPos ;
113,119c113
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
---
> #define tPosc_tPos (Int32     lastErr;
113,119c113
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
---
> #define tPosc_tPos (elastErr;
113,119c113
< #define tPosc_tPos (e)                    \
< 
< 
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
---
> #define tPosc_tPos (e)                    ;
116,120c116
< typedef 
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
> Bool      initialisedOk;
117,120c117
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>    initialisedOk;
117,120c117
<    struct {
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>    struct ;
118,121c118
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
118,122c118
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bz_stream bzFile;
119,122d118
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
119,130c119
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
119,130c119
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     * BZ_API(BZ2_bzWriteOpen) 
119,130c119
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErrBZ_API(BZ2_bzWriteOpen) 
120,130c120
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
120,130c120
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      BZ2_bzWriteOpen) 
(98.4 %, 3279 bytes)
118,128c118
<       }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
119,128c119
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    int*  bzerror,      
119,128c119
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFile*  bzerror,      
127,128c127
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> bzerror,      
127,128c127
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE,      
127,129c127
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* FILE* f, 
127,129c127
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API* f, 
127,129c127
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(f, 
127,129c127
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen, 
128,130c128
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     int   blockSize100k, 
128,130c128
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( blockSize100k, 
128,130c128
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int, 
128,131c128
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  int   verbosity,
128,131c128
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorverbosity,
129,131c129
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       ,
129,132c129
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEint   workFactor )
129,132c129
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* workFactor )
129,132c129
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* f)
130,133c130
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
130,138c130
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   void BZ_API(BZ2_bzWrite)
130,138c130
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   blockSize100kBZ_API(BZ2_bzWrite)
131,138c131
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       (BZ2_bzWrite)
131,138c131
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   BZ2_bzWrite)
131,138c131
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   verbosity)
132,139c132
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
---
>                       ( int* nbytes_in_hi32,
132,139c132
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
---
>                       int   int* nbytes_in_hi32,
132,139c132
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
---
>                       int   workFactor * nbytes_in_hi32,
133,139c133
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
---
> nbytes_in_hi32,
138,139c138
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
---
> ,
138,140c138
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
> void unsigned int* nbytes_out_lo32,
138,140c138
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
> void BZ_APIint* nbytes_out_lo32,
138,140c138
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
> void BZ_API(* nbytes_out_lo32,
138,140c138
< void BZ_API(BZ2_bzWrite)
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
> void BZ_API(BZ2_bzWritenbytes_out_lo32,
139,140c139
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>              ,
139,141c139
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     int*  * unused,
---
>              ( int*  * unused,
139,141c139
<              ( int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     int*  * unused,
---
>              ( int*  * unused,
(98.4 %, 3187 bytes)
139,145c139
<              ( int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( int BZ_API(BZ2_bzRead) 
139,145c139
<              ( int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( intBZ_API(BZ2_bzRead) 
139,145c139
<              ( int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( int*  (BZ2_bzRead) 
139,145c139
<              ( int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( int*  * BZ2_bzRead) 
139,145c139
<              ( int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( int*  * unused) 
140,146c140
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      ( int*    bzerror, 
140,146c140
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      int   int*    bzerror, 
140,146c140
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      int   b *    bzerror, 
141,146c141
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> bzerror, 
145,146c145
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> , 
145,147c145
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZFILE* b, 
145,147c145
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API* b, 
145,147c145
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(b, 
145,147c145
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzRead, 
146,148c146
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            void*   buf, 
146,148c146
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( *   buf, 
146,148c146
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intbuf, 
146,148c146
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    , 
146,149c146
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerrorint     len )
147,149c147
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              len )
147,149c147
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE)
147,150c147
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE* {
147,152c147
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bbzFile* bzf = (bzFile*)b;
148,152c148
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              * bzf = (bzFile*)b;
148,152c148
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              voidbzf = (bzFile*)b;
148,152c148
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   = (bzFile*)b;
148,152c148
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   buf(bzFile*)b;
149,152c149
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzFile*)b;
149,152c149
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     *)b;
149,152c149
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     len )b;
150,152c150
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
> b;
152c152
<    bzFile* bzf = (bzFile*)b;
---
>    ;
152,153c152
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>    bzFilechar *bzf_4_4;
152,153c152
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
---
>    bzFile* *bzf_4_4;
(98.5 %, 3163 bytes)
152,155d151
<    ;
<    char *bzf_4_4;
<    bzf_4_4 = buf;
< 
153,156c153
<    char *bzf_4_4;
<    bzf_4_4 = buf;
< 
<    while (True) 
---
>    (True) 
153,156c153
<    char *bzf_4_4;
<    bzf_4_4 = buf;
< 
<    while (True) 
---
>    char True) 
153,156c153
<    char *bzf_4_4;
<    bzf_4_4 = buf;
< 
<    while (True) 
---
>    char *) 
153,158c153
<    char *bzf_4_4;
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    char *bzf_4_4return 0; 
154,158c154
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    0; 
(98.5 %, 3121 bytes)
152,159c152
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_API(BZ2_bzReadGetUnused) 
152,159c152
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while (BZ2_bzReadGetUnused) 
152,159c152
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while (BZ2_bzReadGetUnused) 
153,159d152
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
154,160c154
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
154,160c154
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return int*    bzerror, 
154,160c154
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return 0*    bzerror, 
155,160c155
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> bzerror, 
159,160c159
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> , 
159,161c159
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZFILE* b, 
159,161c159
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API* b, 
159,161c159
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(b, 
159,161c159
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
160,162c160
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      void**  unused, 
160,162c160
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( **  unused, 
160,162c160
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*  unused, 
160,162c160
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    unused, 
161,162d160
<                        BZFILE* b, 
<                        void**  unused, 
161,162d160
<                        BZFILE* b, 
<                        void**  unused, 
161,163c161
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE*    nUnused )
161,163c161
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* nUnused )
161,163c161
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b)
162,164c162
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        ;
162,172c162
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        voidint BZ_API(BZ2_bzBuffToBuffCompress) 
162,172c162
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*BZ_API(BZ2_bzBuffToBuffCompress) 
162,172c162
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  (BZ2_bzBuffToBuffCompress) 
162,172c162
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedBZ2_bzBuffToBuffCompress) 
163,172c163
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        ) 
163,173c163
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
---
>                        int( unsigned int  sourceLen,
163,173c163
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
---
>                        int*    unsigned int  sourceLen,
163,173c163
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
---
>                        int*    nUnused int  sourceLen,
164,173c164
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
---
> sourceLen,
172,173c172
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
---
> ,
172,174c172
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
---
> int int           blockSize100k, 
172,174c172
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
---
> int BZ_APIblockSize100k, 
172,174c172
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
---
> int BZ_API(, 
172,175c172
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
> int BZ_API(BZ2_bzBuffToBuffCompressint           verbosity, 
173,175c173
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                          verbosity, 
173,175c173
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                          ( , 
173,176c173
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          ( unsigned int           workFactor )
173,176c173
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          ( unsigned int  workFactor )
173,176c173
<                          ( unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          ( unsigned int  sourceLen)
(98.6 %, 2968 bytes)
173,179c173
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                          ( unsigned ( char*         dest, 
173,179c173
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                          ( unsigned int           char*         dest, 
173,179c173
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                          ( unsigned int           workFactor *         dest, 
174,179c174
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> dest, 
178,179c178
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> , 
178,180c178
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int unsigned int* destLen,
178,180c178
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_APIint* destLen,
178,180c178
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(* destLen,
178,180c178
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
179,180c179
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ,
179,181c179
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
179,181c179
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
179,181c179
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
180,181d179
<                              unsigned int* destLen,
<                              char*         source, 
180,181d179
<                              unsigned int* destLen,
<                              char*         source, 
180,181d179
<                              unsigned int* destLen,
<                              char*         source, 
180,182c180
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intsourceLen,
180,182c180
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* ,
180,183c180
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* destLenint           small,
181,183c181
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              small,
181,183c181
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char,
181,184c181
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         int           verbosity )
181,184c181
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceverbosity )
182,184c182
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
182,185c182
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned ;
182,194c182
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              unsigned int  * bzopen_or_bzdopen
182,194c182
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              unsigned int  sourceLenbzopen_or_bzdopen
183,195c183
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
>                              ( const b, void* buf, int len )
183,195c183
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
>                              int           const b, void* buf, int len )
183,195c183
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
>                              int           smallb, void* buf, int len )
184,195c184
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
>                              , void* buf, int len )
184,195c184
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
>                              int           void* buf, int len )
184,195c184
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
>                              int           verbosity * buf, int len )
185,195c185
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
> buf, int len )
194,195c194
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
> , int len )
194,195c194
< * bzopen_or_bzdopen
<                ( const b, void* buf, int len )
---
> * int len )
195c195
<                ( const b, void* buf, int len )
---
>                len )
195c195
<                ( const b, void* buf, int len )
---
>                ( )
195,196c195
<                ( const b, void* buf, int len )
< {
---
>                ( const {
195,197c195
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                ( const bint bzerr, nread;
195,197c195
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                ( const b, bzerr, nread;
195,197c195
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                ( const b, void, nread;
195,197c195
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                ( const b, void* nread;
195,197c195
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                ( const b, void* buf;
195,198c195
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
>                ( const b, void* buf, 0;
195,198c195
<                ( const b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
>                ( const b, void* buf, int ;
(98.6 %, 2940 bytes)
195,199c195
<                ( )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>                ( nread = 0;
196,199c196
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> = 0;
197d196
<    int bzerr, nread;
199d197
<    nread = 0;
197,199c197
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int ;
197,200c197
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrif (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
197,200c197
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
197,200c197
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nreadbzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
198,200c198
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
198,200c198
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0BZ_OK || bzerr == BZ_STREAM_END) ; else ;
199,200c199
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    || bzerr == BZ_STREAM_END) ; else ;
199,200c199
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread bzerr == BZ_STREAM_END) ; else ;
199,200c199
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = == BZ_STREAM_END) ; else ;
199,200c199
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = 0BZ_STREAM_END) ; else ;
200c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
200c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ; else ;
200c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (else ;
200c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ;
200,201c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == }
200,205c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
---
>    if (bzerr == BZ_OK int BZ_API;
200,205c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
---
>    if (bzerr == BZ_OK || BZ_API;
200,205c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
---
>    if (bzerr == BZ_OK || bzerr ;
200,209c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr == int BZ_API(* b)
200,209c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDBZ_API(* b)
200,209c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) (* b)
200,209c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; * b)
200,209c200
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else b)
201,209c201
< }
< 
< 
< 
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
---
> )
205,209d204
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
205,218c205
< int BZ_API;
< 
< 
< 
< int BZ_API(* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
---
> int const ;
(98.6 %, 2909 bytes)
205,241d204
< ;
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
213,241d212
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
213,241c213
< const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> const 
\ No newline at end of file
(98.6 %, 2864 bytes)
===< pass_clex :: rm-toks-6 >===
9,10c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> BZ_RUN_OK            1
9,10c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #1
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define #define BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_OK                define BZ_FLUSH_OK          2
10,11c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> BZ_FLUSH_OK          2
10,11c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #2
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define #define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_RUN_OK            define BZ_FINISH_OK         3
(98.6 %, 2805 bytes)
10,11d9
< #2
< #define BZ_FINISH_OK         3
11,12c11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> BZ_STREAM_END        4
11,12c11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #4
11,13c11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #define #define BZ_SEQUENCE_ERROR    9)
11,13c11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #define BZ_FINISH_OK         define BZ_SEQUENCE_ERROR    9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> BZ_SEQUENCE_ERROR    9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #define )
(98.6 %, 2771 bytes)
10,11c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #9)
10,11c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
---
> #define )
10,13c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
---
> #define BZ_STREAM_END        typedef 
11,14c11
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    bz_stream;
---
> bz_stream;
11,14c11
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    bz_stream;
---
> #;
11,18c11
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
11,18c11
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_SEQUENCE_ERROR    include <stdio.h>
11,18c11
< #define BZ_SEQUENCE_ERROR    9)
< 
< typedef 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_SEQUENCE_ERROR    9<stdio.h>
13,18c13
< typedef 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> stdio.h>
14,18c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
14,18c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streamh>
18c18
< #include <stdio.h>
---
> >
18,20c18
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
(98.7 %, 2726 bytes)
11,15c11
< bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> .h>
11,15c11
< bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> bz_streamh>
15c15
< #include <stdio.h>
---
> >
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include define BZ_API(func) func
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <BZ_API(func) func
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio(func) func
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func) func
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.h) func
17c17
< #   define BZ_API(func) func
---
> func
17,18c17
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   #   define BZ_EXTERN extern
17,18c17
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define define BZ_EXTERN extern
17,18c17
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIBZ_EXTERN extern
17,18c17
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(extern
17,23c17
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_API(funcBZ_EXTERN ;
17,23c17
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_API(func) ;
18,28d17
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
18,29c18
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_MAX_UNUSED 0
18,29c18
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_MAX_UNUSED 0
18,29c18
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_EXTERN 0
23,30d22
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
23,31c23
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN void BZFILE;
29,31c29
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZFILE;
29,31c29
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #;
29,33c29
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
29,33c29
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZFILE* BZ_API(BZ2_bzReadOpen) ( 
31,33c31
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
31,33c31
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZ_API(BZ2_bzReadOpen) ( 
31,33c31
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void (BZ2_bzReadOpen) ( 
(98.7 %, 2684 bytes)
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZ_API(BZ2_bzReadOpen) ( 
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void (BZ2_bzReadOpen) ( 
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILEBZ2_bzReadOpen) ( 
25c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ) ( 
25c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN ( 
25,26c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int, 
---
> BZ_EXTERN BZFILEint, 
25,26c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int, 
---
> BZ_EXTERN BZFILE* , 
25,27c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_APIint   small,
25,27c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(small,
25,27c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen,
25,28c25
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int, 
<       int   small,
<       void* unused,    
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) void* unused,    
26,28c26
<       int, 
<       int   small,
<       void* unused,    
---
>       * unused,    
26,28c26
<       int, 
<       int   small,
<       void* unused,    
---
>       intunused,    
27,28c27
<       int   small,
<       void* unused,    
---
>       ,    
27,29c27
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
27,29c27
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   smallnUnused 
28,30c28
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
28,30c28
<       void* unused,    
<       int   nUnused 
<    );
---
>       void;
28,32c28
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       void* ;
28,34c28
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unusedBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
29,34c29
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void BZ_API(BZ2_bzReadGetUnused) ( 
29,34c29
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_API(BZ2_bzReadGetUnused) ( 
30,34c30
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    (BZ2_bzReadGetUnused) ( 
(98.7 %, 2646 bytes)
28,32c28
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    (BZ2_bzReadGetUnused) ( 
28,32c28
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )BZ2_bzReadGetUnused) ( 
30,32c30
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ) ( 
32c32
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) * b, 
33,34c33
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
33,34c33
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
33,35c33
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    void**  unused,  
33,35c33
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror**  unused,  
34,35c34
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
34,35c34
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILEunused,  
34,35c34
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* ,  
34,36c34
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bint*    nUnused 
35,36c35
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
35,36c35
<       void**  unused,  
<       int*    nUnused 
---
>       voidnUnused 
35,37c35
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void*);
35,37c35
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  ;
35,39c35
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void**  unusedBZ_EXTERN int BZ_API(BZ2_bzReadlen 
36,39c36
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       int BZ_API(BZ2_bzReadlen 
36,39c36
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       intBZ_API(BZ2_bzReadlen 
36,39c36
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       int*    (BZ2_bzReadlen 
37,39c37
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>    BZ2_bzReadlen 
37,40c37
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>    ));
39,40c39
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
> ;
39,42c39
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
39,42c39
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
39,42c39
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZ_API* BZ_API(BZ2_bzWriteOpen) ( 
39,42c39
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZ_API(BZ_API(BZ2_bzWriteOpen) ( 
40,42c40
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
40,42c40
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
(98.7 %, 2606 bytes)
39,41c39
< ;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ2_bzWriteOpen) ( 
41c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
41c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
41,42c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEint*  bzerror,      
41,42c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* *  bzerror,      
41,42c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,      
41,42c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(,      
41,43c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
41,43c41
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) * f, 
42,43c42
<       int*  bzerror,      
<       FILE* f, 
---
>       f, 
42,43c42
<       int*  bzerror,      
<       FILE* f, 
---
>       int, 
42,44c42
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  int   blockSize100k, 
42,44c42
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerrorblockSize100k, 
43,44c43
<       FILE* f, 
<       int   blockSize100k, 
---
>       , 
43,45c43
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILEint   verbosity, 
43,45c43
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* verbosity, 
44,45d43
<       int   blockSize100k, 
<       int   verbosity, 
44,45d43
<       int   blockSize100k, 
<       int   verbosity, 
44,45d43
<       int   blockSize100k, 
<       int   verbosity, 
44,47c44
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   blockSize100k);
45,47c45
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
45,49c45
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
---
>       int   BZ_API(BZ2_bzWriteClose) ( 
45,49c45
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
---
>       int   verbosity(BZ2_bzWriteClose) ( 
46,49c46
<       int   workFactor 
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ2_bzWriteClose) ( 
46,49c46
<       int   workFactor 
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
---
>       int   ) ( 
47,49c47
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
---
>    ( 
47,50c47
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          verbosity, 
---
>    )int*          verbosity, 
49,50c49
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          verbosity, 
---
> *          verbosity, 
49,50c49
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          verbosity, 
---
> BZ_APIverbosity, 
49,50c49
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          verbosity, 
---
> BZ_API(, 
49,51c49
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          verbosity, 
<       int           workFactor 
---
> BZ_API(BZ2_bzWriteCloseint           workFactor 
49,51c49
< BZ_API(BZ2_bzWriteClose) ( 
<       int*          verbosity, 
<       int           workFactor 
---
> BZ_API(BZ2_bzWriteClose) workFactor 
50,52c50
<       int*          verbosity, 
<       int           workFactor 
<    );
---
>       );
50,52c50
<       int*          verbosity, 
<       int           workFactor 
<    );
---
>       int;
50,54c50
<       int*          verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int*          BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
50,54c50
<       int*          verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int*          verbosityint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
51,54c51
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
51,54c51
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
52,54c52
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    BZ2_bzBuffToBuffDecompress) ( 
52,54c52
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )) ( 
(98.8 %, 2545 bytes)
50,52c50
<       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ2_bzBuffToBuffDecompress) ( 
50,52c50
<       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       )) ( 
52c52
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ( 
52,53c52
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
52,53c52
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
52,53c52
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
52,53c52
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
52,54c52
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
52,54c52
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int* destLen,
53,54c53
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
53,54c53
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
53,54c53
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
53,55c53
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
54,55c54
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
54,55c54
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
54,55c54
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
54,56c54
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
54,56c54
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
55,56c55
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
55,56c55
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
55,57c55
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
55,57c55
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         sourcesmall, 
56,57c56
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
56,58c56
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int           );
56,58c56
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  );
56,58c56
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  sourceLen;
57,60c57
<       int           small, 
<       int           );
< 
< Char;
---
>       Char;
57,60c57
<       int           small, 
<       int           );
< 
< Char;
---
>       int           ;
57,61c57
<       int           small, 
<       int           );
< 
< Char;
< typedef unsigned char   Bool;
---
>       int           smalltypedef unsigned char   Bool;
58,61c58
<       int           );
< 
< Char;
< typedef unsigned char   Bool;
---
>       unsigned char   Bool;
58,61c58
<       int           );
< 
< Char;
< typedef unsigned char   Bool;
---
>       int           char   Bool;
58,61c58
<       int           );
< 
< Char;
< typedef unsigned char   Bool;
---
>       int           )Bool;
60,61c60
< Char;
< typedef unsigned char   Bool;
---
> ;
60,62c60
< Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> Chartypedef unsigned char   UChar;
61,62c61
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
61,62c61
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char   UChar;
61,62c61
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned UChar;
61,62c61
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned char   ;
61,63c61
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Booltypedef int             Int32;
62,63c62
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
62,63c62
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
(98.8 %, 2506 bytes)
62,65c62
< int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> True  ((Bool)1)
62,65c62
< int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> int             ((Bool)1)
62,65c62
< int             Int32;
< ;
< 
< #define True  ((Bool)1)
---
> int             Int32(Bool)1)
63,65c63
< ;
< 
< #define True  ((Bool)1)
---
> Bool)1)
65c65
< #define True  ((Bool)1)
---
> )1)
65c65
< #define True  ((Bool)1)
---
> #1)
65c65
< #define True  ((Bool)1)
---
> #define )
65,66c65
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
65,66c65
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  (define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
65,66c65
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
65,66c65
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((Bool+ (0 / BZ_G_SIZE))
65,66c65
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((Bool)(0 / BZ_G_SIZE))
65,66c65
< #define True  ((Bool)1)
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define True  ((Bool)10 / BZ_G_SIZE))
66c66
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> / BZ_G_SIZE))
66c66
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #BZ_G_SIZE))
66c66
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define ))
66c66
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_CODE_LEN    )
66,74c66
< #define BZ_MAX_CODE_LEN    + (0 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_CODE_LEN    + #define BZ_RAND_DECLS                          \
(98.8 %, 2489 bytes)
66,84c66
< #define BZ_MAX_CODE_LEN    )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< struct {
---
> #define BZ_MAX_CODE_LEN    struct {
74,84c74
< #define BZ_RAND_DECLS                          \
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< struct {
---
> {
74,86c74
< #define BZ_RAND_DECLS                          \
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< struct {
<       
<       }
---
> #}
74,87c74
< #define BZ_RAND_DECLS                          \
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< struct {
<       
<       }
<    DState;
---
> #define DState;
74,87c74
< #define BZ_RAND_DECLS                          \
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< struct {
<       
<       }
<    DState;
---
> #define BZ_RAND_DECLS                          ;
(98.8 %, 2411 bytes)
74,80c74
< #define DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
> #define e)                    \
74,80c74
< #define DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos (e)                    \
---
> #define DState)                    \
(98.8 %, 2378 bytes)
74,79c74
< #define e)                    \
< 
< 
< typedef 
<    struct {
<       }
---
> #define }
74,80c74
< #define e)                    \
< 
< 
< typedef 
<    struct {
<       }
<    bzFile;
---
> #define ebzFile;
74,80c74
< #define e)                    \
< 
< 
< typedef 
<    struct {
<       }
<    bzFile;
---
> #define e)                    ;
(98.9 %, 2321 bytes)
74,82c74
< #define ebzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> #define ebzFile) 
82,83c82
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ( int*  bzerror,      
82,83c82
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILEint*  bzerror,      
82,83c82
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* *  bzerror,      
82,83c82
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_APIbzerror,      
82,83c82
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(,      
82,84c82
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
83,84c83
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     * f, 
83,84c83
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( f, 
83,84c83
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int, 
83,85c83
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  int   blockSize100k, 
83,85c83
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerrorblockSize100k, 
84,85c84
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       , 
84,86c84
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILEint   verbosity,
84,86c84
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* verbosity,
84,86c84
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* f,
85,86d84
<                       int   blockSize100k, 
<                       int   verbosity,
85,86d84
<                       int   blockSize100k, 
<                       int   verbosity,
85,87c85
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   blockSize100k)
86,88c86
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
86,93c86
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   void BZ_API(BZ2_bzWrite)
86,93c86
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   verbosityBZ_API(BZ2_bzWrite)
87,93c87
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       (BZ2_bzWrite)
87,93c87
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   BZ2_bzWrite)
88,93d87
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
88,94c88
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*  * unused,
---
> ( int*  * unused,
93,94c93
< void BZ_API(BZ2_bzWrite)
<              ( int*  * unused,
---
> int*  * unused,
93,94c93
< void BZ_API(BZ2_bzWrite)
<              ( int*  * unused,
---
> void *  * unused,
93,94c93
< void BZ_API(BZ2_bzWrite)
<              ( int*  * unused,
---
> void BZ_API* unused,
93,94c93
< void BZ_API(BZ2_bzWrite)
<              ( int*  * unused,
---
> void BZ_API(unused,
93,94c93
< void BZ_API(BZ2_bzWrite)
<              ( int*  * unused,
---
> void BZ_API(BZ2_bzWrite,
94,95c94
<              ( int*  * unused,
<                      int   b )
---
>              int   b )
94,95c94
<              ( int*  * unused,
<                      int   b )
---
>              ( b )
94,95c94
<              ( int*  * unused,
<                      int   b )
---
>              ( int)
94,96c94
<              ( int*  * unused,
<                      int   b )
< ;
---
>              ( int*  ;
94,100c94
<              ( int*  * unused,
<                      int   b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( int*  * int BZ_API(BZ2_bzRead) 
(98.9 %, 2279 bytes)
94,99c94
<              ( int)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( int) 
95,100c95
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
99,100c99
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int*    bzerror, 
99,100c99
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int *    bzerror, 
99,100c99
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_APIbzerror, 
99,100c99
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(, 
99,101c99
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzReadBZFILE* b, 
100,101c100
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            * b, 
100,101c100
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( b, 
100,101c100
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int, 
100,102c100
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    void*   buf, 
100,102c100
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerror*   buf, 
101,102c101
<              BZFILE* b, 
<              void*   buf, 
---
>              buf, 
101,102c101
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE, 
101,103c101
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* int     len )
101,103c101
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* blen )
102,103c102
<              void*   buf, 
<              int     len )
---
>              )
102,104c102
<              void*   buf, 
<              int     len )
< {
---
>              void{
102,106c102
<              void*   buf, 
<              int     len )
< {
<    
<    while (True) 
---
>              void*   while (True) 
102,106c102
<              void*   buf, 
<              int     len )
< {
<    
<    while (True) 
---
>              void*   buf(True) 
103,106c103
<              int     len )
< {
<    
<    while (True) 
---
>              True) 
103,106c103
<              int     len )
< {
<    
<    while (True) 
---
>              int     ) 
103,108c103
<              int     len )
< {
<    
<    while (True) 
< 
<    return 0; 
---
>              int     len return 0; 
(98.9 %, 2228 bytes)
101,106c101
<              BZFILE* blen )
< {
<    
<    while (True) 
< 
<    return 0; 
---
>              BZFILE* blen return 0; 
102,106c102
< {
<    
<    while (True) 
< 
<    return 0; 
---
> 0; 
104,106c104
<    while (True) 
< 
<    return 0; 
---
>    ; 
104,107c104
<    while (True) 
< 
<    return 0; 
< }
---
>    while }
104,111c104
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while (void BZ_API(BZ2_bzReadGetUnused) 
104,111c104
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while (TrueBZ_API(BZ2_bzReadGetUnused) 
106,111c106
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    (BZ2_bzReadGetUnused) 
106,111c106
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    return BZ2_bzReadGetUnused) 
106,111c106
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    return 0) 
107,112c107
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
111,112c111
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
(98.9 %, 2202 bytes)
104,109c104
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    ) 
105,110c105
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
109,110c109
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
109,110c109
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void *    bzerror, 
109,110c109
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_APIbzerror, 
109,110c109
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(, 
109,111c109
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
110,111c110
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      * b, 
110,111c110
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( b, 
110,111c110
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int, 
110,112c110
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    void**  unused, 
110,112c110
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror**  unused, 
111,112c111
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        *  unused, 
111,112c111
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILEunused, 
111,112c111
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
111,113c111
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bint*    nUnused )
112,113c112
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
112,113c112
<                        void**  unused, 
<                        int*    nUnused )
---
>                        voidnUnused )
112,113c112
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*)
112,114c112
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        void**  ;
112,122c112
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedint BZ_API(BZ2_bzBuffToBuffCompress) 
113,122c113
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ_API(BZ2_bzBuffToBuffCompress) 
113,122c113
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int(BZ2_bzBuffToBuffCompress) 
113,122c113
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    BZ2_bzBuffToBuffCompress) 
113,122c113
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    nUnused ) 
114,123c114
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int           workFactor )
---
> ( unsigned int           workFactor )
122,123c122
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int           workFactor )
---
> unsigned int           workFactor )
122,123c122
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int           workFactor )
---
> int int           workFactor )
122,123c122
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int           workFactor )
---
> int BZ_APIworkFactor )
122,123c122
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int           workFactor )
---
> int BZ_API()
122,124c122
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( unsigned int           workFactor )
< ;
---
> int BZ_API(BZ2_bzBuffToBuffCompress;
123,128c123
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          int BZ_API(BZ2_bzBuffToBuffDecompress) 
123,128c123
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          ( BZ_API(BZ2_bzBuffToBuffDecompress) 
123,128c123
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          ( unsigned (BZ2_bzBuffToBuffDecompress) 
123,128c123
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          ( unsigned int           BZ2_bzBuffToBuffDecompress) 
123,128c123
<                          ( unsigned int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                          ( unsigned int           workFactor ) 
124,129c124
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
(99.0 %, 2114 bytes)
122,127c122
< int BZ_API()
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API() 
123,128c123
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
127,128c127
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
127,128c127
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int *         dest, 
127,128c127
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_APIdest, 
127,128c127
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(, 
127,129c127
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
128,129c128
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
128,129c128
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( * destLen,
128,129c128
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( chardestLen,
128,129c128
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         ,
128,130c128
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destchar*         source, 
129,130c129
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              *         source, 
129,130c129
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned source, 
129,130c129
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int, 
129,131c129
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* unsigned int  sourceLen,
129,131c129
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLenint  sourceLen,
130,131c130
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
130,131c130
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char,
130,132c130
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         int           small,
130,132c130
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         sourcesmall,
131,132c131
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
131,133c131
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
131,133c131
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  verbosity )
131,133c131
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  sourceLen)
132,134c132
<                              int           small,
<                              int           verbosity )
< ;
---
>                              ;
132,143c132
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              int           * bzopen_or_bzdopen
132,143c132
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              int           smallbzopen_or_bzdopen
133,144c133
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              ( )
133,144c133
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              int           )
133,145c133
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
---
>                              int           verbosity {
134,146c134
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr, nread;
---
> int bzerr, nread;
143,146c143
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr, nread;
---
> bzerr, nread;
143,146c143
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr, nread;
---
> * , nread;
144,146c144
<                ( )
< {
<    int bzerr, nread;
---
>                nread;
144,146c144
<                ( )
< {
<    int bzerr, nread;
---
>                ( ;
145,147c145
< {
<    int bzerr, nread;
<    0;
---
> 0;
146,147c146
<    int bzerr, nread;
<    0;
---
>    ;
146,148c146
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int nread = 0;
146,148c146
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int bzerr= 0;
146,148c146
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int bzerr, 0;
147,148d146
<    0;
<    nread = 0;
147,148d146
<    0;
<    nread = 0;
(99.0 %, 2094 bytes)
146,147c146
<    int bzerr, nread;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread|| bzerr == BZ_STREAM_END) ; else ;
147c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_STREAM_END) ; else ;
147c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if == BZ_STREAM_END) ; else ;
147c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_STREAM_END) ; else ;
147c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ) ; else ;
147c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == ; else ;
147c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_OK else ;
147c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_OK || ;
147,148c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == BZ_OK || bzerr }
147,151c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
147,151c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
147,151c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
147,151c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
147,151c147
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
148,151d147
< }
< 
< 
< 
===< pass_clex :: rm-toks-2 >===
9c9
< #define BZ_OK                0
---
> BZ_OK                0
9c9
< #define BZ_OK                0
---
> #0
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
---
> #define #define BZ_STREAM_END        4
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
---
> #define BZ_OK                define BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
> BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
> #4
10,11c10
< #define BZ_STREAM_END        4
< bz_stream;
---
> #define bz_stream;
10,11c10
< #define BZ_STREAM_END        4
< bz_stream;
---
> #define BZ_STREAM_END        ;
11,14d10
< bz_stream;
< 
< 
< 
11,15c11
< bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> bz_streaminclude <stdio.h>
15c15
< #include <stdio.h>
---
> <stdio.h>
15c15
< #include <stdio.h>
---
> #stdio.h>
15c15
< #include <stdio.h>
---
> #include .h>
15c15
< #include <stdio.h>
---
> #include <h>
15c15
< #include <stdio.h>
---
> #include <stdio>
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.#   define BZ_API(func) func
(99.0 %, 2080 bytes)
11c11
< #include <stdio.h>
---
> <stdio.h>
11c11
< #include <stdio.h>
---
> #stdio.h>
11c11
< #include <stdio.h>
---
> #include .h>
11c11
< #include <stdio.h>
---
> #include <h>
11c11
< #include <stdio.h>
---
> #include <stdio>
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.#   define BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.hdefine BZ_API(func) func
13c13
< #   define BZ_API(func) func
---
> BZ_API(func) func
13c13
< #   define BZ_API(func) func
---
> #   (func) func
13c13
< #   define BZ_API(func) func
---
> #   define func) func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API) func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API(func
13,14c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func#   define BZ_EXTERN extern
13,14c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func) define BZ_EXTERN extern
14c14
< #   define BZ_EXTERN extern
---
> BZ_EXTERN extern
14c14
< #   define BZ_EXTERN extern
---
> #   extern
14,19c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   define typedef void BZFILE;
14,19c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN void BZFILE;
19c19
< typedef void BZFILE;
---
> BZFILE;
19c19
< typedef void BZFILE;
---
> typedef ;
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILEBZFILE* BZ_API(BZ2_bzReadOpen) ( 
21c21
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
21c21
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzReadOpen) ( 
(99.0 %, 2064 bytes)
21c21
< * BZ_API(BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
21c21
< * BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ2_bzReadOpen) ( 
21c21
< * BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API) ( 
21c21
< * BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(( 
21,22c21
< * BZ_API(BZ2_bzReadOpen) ( 
<       int, 
---
> * BZ_API(BZ2_bzReadOpenint, 
21,22c21
< * BZ_API(BZ2_bzReadOpen) ( 
<       int, 
---
> * BZ_API(BZ2_bzReadOpen) , 
22d21
<       int, 
(99.0 %, 2056 bytes)
21c21
< (BZ2_bzReadOpen) ( 
---
> ) ( 
21c21
< (BZ2_bzReadOpen) ( 
---
> (( 
21,22c21
< (BZ2_bzReadOpen) ( 
<       int, 
---
> (BZ2_bzReadOpenint, 
21,22c21
< (BZ2_bzReadOpen) ( 
<       int, 
---
> (BZ2_bzReadOpen) , 
22d21
<       int, 
22,23c22
<       int, 
<       int   smallnUnused 
---
>       intsmallnUnused 
(99.0 %, 2044 bytes)
22,23c22
<       int   smallnUnused 
<    );
---
>       );
22,23c22
<       int   smallnUnused 
<    );
---
>       int   ;
23,25c23
<    );
< 
< ;
---
>    ;
23,27c23
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
25,27c25
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
(99.0 %, 2021 bytes)
22,24c22
<       );
< 
< ;
---
>       ;
22,26c22
<       );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
24,26c24
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
26c26
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_API(BZ2_bzReadGetUnused) ( 
26c26
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN (BZ2_bzReadGetUnused) ( 
26c26
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ2_bzReadGetUnused) ( 
26c26
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API) ( 
26c26
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(( 
26,27c26
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedint*    bzerror, 
26,27c26
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) *    bzerror, 
27c27
<       int*    bzerror, 
---
>       bzerror, 
(99.0 %, 2008 bytes)
24c24
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadGetUnused) ( 
24c24
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ2_bzReadGetUnused) ( 
24c24
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API) ( 
24c24
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(( 
24,25c24
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnusedint*    bzerror, 
24,25c24
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused) *    bzerror, 
25c25
<       int*    bzerror, 
---
>       bzerror, 
25c25
<       int*    bzerror, 
---
>       int, 
25,26c25
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
25,26c25
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror* b, 
26c26
<       BZFILE* b, 
---
>       b, 
26c26
<       BZFILE* b, 
---
>       BZFILE, 
26,27c26
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* void**  unused,  
26,27c26
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b**  unused,  
27c27
<       void**  unused,  
---
>       *  unused,  
27c27
<       void**  unused,  
---
>       voidunused,  
27c27
<       void**  unused,  
---
>       void*,  
27,28c27
<       void**  unused,  
<       int*    nUnused 
---
>       void**  int*    nUnused 
27,28c27
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused*    nUnused 
28c28
<       int*    nUnused 
---
>       nUnused 
28,29c28
<       int*    nUnused 
<    );
---
>       int);
28,29c28
<       int*    nUnused 
<    );
---
>       int*    ;
29,31c29
<    );
< 
< ;
---
>    ;
29,33c29
<    );
< 
< ;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
31,33c31
< ;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
33c33
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen) ( 
33c33
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWriteOpen) ( 
33c33
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE(BZ2_bzWriteOpen) ( 
33c33
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen) ( 
33c33
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API) ( 
33c33
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(( 
(99.0 %, 1995 bytes)
31c31
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_API(BZ2_bzWriteOpen) ( 
31c31
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE(BZ2_bzWriteOpen) ( 
31c31
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ2_bzWriteOpen) ( 
31c31
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ_API) ( 
31c31
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ_API(( 
31,32c31
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint*  bzerror,      
31,32c31
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) *  bzerror,      
32c32
<       int*  bzerror,      
---
>       bzerror,      
32c32
<       int*  bzerror,      
---
>       int,      
32,33c32
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  FILE* f, 
32,33c32
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror* f, 
33c33
<       FILE* f, 
---
>       f, 
33c33
<       FILE* f, 
---
>       FILE, 
33,34c33
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* int   blockSize100k, 
33,34c33
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* fblockSize100k, 
34c34
<       int   blockSize100k, 
---
>       , 
34,35c34
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   int   verbosity, 
34,35c34
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   blockSize100kverbosity, 
35c35
<       int   verbosity, 
---
>       , 
35,36c35
<       int   verbosity, 
<       int   workFactor 
---
>       int   int   workFactor 
35,36c35
<       int   verbosity, 
<       int   workFactor 
---
>       int   verbosityworkFactor 
36,37c36
<       int   workFactor 
<    );
---
>       );
36,37c36
<       int   workFactor 
<    );
---
>       int   ;
37,39c37
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ_API(BZ2_bzWriteClose) ( 
37,39c37
<    );
< 
< BZ_API(BZ2_bzWriteClose) ( 
---
>    )(BZ2_bzWriteClose) ( 
39c39
< BZ_API(BZ2_bzWriteClose) ( 
---
> BZ2_bzWriteClose) ( 
39c39
< BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_API) ( 
39c39
< BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_API(( 
39,40c39
< BZ_API(BZ2_bzWriteClose) ( 
<       );
---
> BZ_API(BZ2_bzWriteClose);
39,40c39
< BZ_API(BZ2_bzWriteClose) ( 
<       );
---
> BZ_API(BZ2_bzWriteClose) ;
(99.0 %, 1984 bytes)
39,41c39
< BZ_API(BZ2_bzWriteClose);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzWriteCloseBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
39,41c39
< BZ_API(BZ2_bzWriteClose);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzWriteClose)int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) ( 
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN (BZ2_bzBuffToBuffDecompress) ( 
(99.0 %, 1970 bytes)
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API) ( 
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(( 
41,42c41
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompresschar*         dest, 
41,42c41
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) *         dest, 
42c42
<       char*         dest, 
---
>       dest, 
42c42
<       char*         dest, 
---
>       char, 
42,43c42
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         unsigned int* destLen,
42,43c42
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destint* destLen,
43c43
<       unsigned int* destLen,
---
>       * destLen,
43c43
<       unsigned int* destLen,
---
>       unsigned destLen,
43c43
<       unsigned int* destLen,
---
>       unsigned int,
43,44c43
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* char*         source, 
43,44c43
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* destLen*         source, 
44c44
<       char*         source, 
---
>       source, 
44c44
<       char*         source, 
---
>       char, 
44,45c44
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
44,45c44
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceint  sourceLen,
45c45
<       unsigned int  sourceLen,
---
>       sourceLen,
45c45
<       unsigned int  sourceLen,
---
>       unsigned ,
45,46c45
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int  int           small, 
45,46c45
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int  sourceLensmall, 
46c46
<       int           small, 
---
>       , 
46,47c46
<       int           small, 
<       int           );
---
>       int           int           );
46,47c46
<       int           small, 
<       int           );
---
>       int           small);
47c47
<       int           );
---
>       ;
47,49c47
<       int           );
< 
< Char;
---
>       int           Char;
(99.0 %, 1956 bytes)
45,46c45
<       unsigned ,
<       int           small, 
---
>       unsigned small, 
46c46
<       int           small, 
---
>       , 
46,47c46
<       int           small, 
<       int           );
---
>       int           int           );
46,47c46
<       int           small, 
<       int           );
---
>       int           small);
47c47
<       int           );
---
>       ;
47,49c47
<       int           );
< 
< Char;
---
>       int           Char;
48,49d47
< 
< Char;
49d48
< Char;
(99.0 %, 1949 bytes)
47,48c47
<       int           );
< typedef unsigned char   Bool;
---
>       int           )unsigned char   Bool;
48c48
< typedef unsigned char   Bool;
---
> char   Bool;
48c48
< typedef unsigned char   Bool;
---
> typedef Bool;
(99.1 %, 1932 bytes)
48c48
< char   Bool;
---
> ;
48,49c48
< char   Bool;
< int             Int32;
---
> char   int             Int32;
48,49c48
< char   Bool;
< int             Int32;
---
> char   BoolInt32;
(99.1 %, 1921 bytes)
48,49c48
< ;
< int             Int32;
---
> Int32;
49c49
< int             Int32;
---
> ;
49,50c49
< int             Int32;
< ;
---
> int             ;
(99.1 %, 1903 bytes)
48d47
< Int32;
48,51c48
< Int32;
< ;
< 
< #define True  ((Bool)1)
---
> Int32#define True  ((Bool)1)
49,51c49
< ;
< 
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
51c51
< #define True  ((Bool)1)
---
> True  ((Bool)1)
51c51
< #define True  ((Bool)1)
---
> #((Bool)1)
51c51
< #define True  ((Bool)1)
---
> #define (Bool)1)
51c51
< #define True  ((Bool)1)
---
> #define True  Bool)1)
(99.1 %, 1896 bytes)
48,50c48
< ;
< 
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
50c50
< #define True  ((Bool)1)
---
> True  ((Bool)1)
50c50
< #define True  ((Bool)1)
---
> #((Bool)1)
50c50
< #define True  ((Bool)1)
---
> #define (Bool)1)
50c50
< #define True  ((Bool)1)
---
> #define True  Bool)1)
50c50
< #define True  ((Bool)1)
---
> #define True  ()1)
(99.1 %, 1894 bytes)
50c50
< #define True  Bool)1)
---
> #define True  1)
50c50
< #define True  Bool)1)
---
> #define True  Bool)
50,51c50
< #define True  Bool)1)
< #define BZ_MAX_CODE_LEN    )
---
> #define True  Bool)#define BZ_MAX_CODE_LEN    )
(99.1 %, 1889 bytes)
50,51c50
< #define True  1)
< #define BZ_MAX_CODE_LEN    )
---
> #define True  #define BZ_MAX_CODE_LEN    )
50,51c50
< #define True  1)
< #define BZ_MAX_CODE_LEN    )
---
> #define True  1define BZ_MAX_CODE_LEN    )
(99.1 %, 1886 bytes)
50c50
< #define True  #define BZ_MAX_CODE_LEN    )
---
> #define True  BZ_MAX_CODE_LEN    )
50c50
< #define True  #define BZ_MAX_CODE_LEN    )
---
> #define True  #)
(99.1 %, 1878 bytes)
50,58c50
< #define True  BZ_MAX_CODE_LEN    )
< 
< 
< 
< 
< 
< 
< 
< #define ebzFile;
---
> #define True  #define ebzFile;
50,58c50
< #define True  BZ_MAX_CODE_LEN    )
< 
< 
< 
< 
< 
< 
< 
< #define ebzFile;
---
> #define True  BZ_MAX_CODE_LEN    define ebzFile;
(99.1 %, 1850 bytes)
50c50
< #define True  #define ebzFile;
---
> #define True  ebzFile;
50c50
< #define True  #define ebzFile;
---
> #define True  #;
50,58c50
< #define True  #define ebzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> #define True  #define BZFILE* BZ_API(BZ2_bzWriteOpen) 
(99.1 %, 1842 bytes)
50,58c50
< #define True  ebzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> #define True  BZFILE* BZ_API(BZ2_bzWriteOpen) 
50,58c50
< #define True  ebzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> #define True  ebzFile* BZ_API(BZ2_bzWriteOpen) 
58c58
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZ_API(BZ2_bzWriteOpen) 
58c58
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE(BZ2_bzWriteOpen) 
58c58
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen) 
58c58
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API) 
58,59c58
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(( int*  bzerror,      
58,59c58
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint*  bzerror,      
59c59
<                     ( int*  bzerror,      
---
>                     *  bzerror,      
59c59
<                     ( int*  bzerror,      
---
>                     ( bzerror,      
59c59
<                     ( int*  bzerror,      
---
>                     ( int,      
59,60c59
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  FILE* f, 
59,60c59
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror* f, 
60c60
<                       FILE* f, 
---
>                       f, 
60c60
<                       FILE* f, 
---
>                       FILE, 
60,61c60
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* int   blockSize100k, 
60,61c60
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* fblockSize100k, 
61c61
<                       int   blockSize100k, 
---
>                       , 
61,62c61
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   int   verbosity,
61,62c61
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100kverbosity,
62c62
<                       int   verbosity,
---
>                       ,
62,63c62
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   int   workFactor )
62,63c62
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosityworkFactor )
63c63
<                       int   workFactor )
---
>                       )
63,64c63
<                       int   workFactor )
< ;
---
>                       int   ;
63,69c63
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   workFactor void BZ_API(BZ2_bzWrite)
64,69c64
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
> BZ_API(BZ2_bzWrite)
69c69
< void BZ_API(BZ2_bzWrite)
---
> (BZ2_bzWrite)
69c69
< void BZ_API(BZ2_bzWrite)
---
> void BZ2_bzWrite)
69c69
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API)
69,70c69
< void BZ_API(BZ2_bzWrite)
<              ( int)
---
> void BZ_API(( int)
69,70c69
< void BZ_API(BZ2_bzWrite)
<              ( int)
---
> void BZ_API(BZ2_bzWriteint)
70c70
<              ( int)
---
>              )
70,71c70
<              ( int)
< ;
---
>              ( ;
(99.1 %, 1831 bytes)
69c69
< (BZ2_bzWrite)
---
> )
69,70c69
< (BZ2_bzWrite)
<              ( int)
---
> (( int)
69,70c69
< (BZ2_bzWrite)
<              ( int)
---
> (BZ2_bzWriteint)
70c70
<              ( int)
---
>              )
70,71c70
<              ( int)
< ;
---
>              ( ;
70,75c70
<              ( int)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>              ( intint BZ_API(BZ2_bzRead) 
71,75c71
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
75c75
< int BZ_API(BZ2_bzRead) 
---
> (BZ2_bzRead) 
(99.1 %, 1814 bytes)
69,74c69
< (BZ2_bzWriteint)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> (BZ2_bzWriteintint BZ_API(BZ2_bzRead) 
70,74c70
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
74c74
< int BZ_API(BZ2_bzRead) 
---
> (BZ2_bzRead) 
74c74
< int BZ_API(BZ2_bzRead) 
---
> int BZ2_bzRead) 
74c74
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API) 
74,75c74
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(( int*    bzerror, 
74,75c74
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(BZ2_bzReadint*    bzerror, 
75c75
<            ( int*    bzerror, 
---
>            *    bzerror, 
75c75
<            ( int*    bzerror, 
---
>            ( bzerror, 
75c75
<            ( int*    bzerror, 
---
>            ( int, 
(99.1 %, 1804 bytes)
74c74
< (BZ2_bzRead) 
---
> ) 
74,75c74
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
> (( int*    bzerror, 
74,75c74
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
> (BZ2_bzReadint*    bzerror, 
75c75
<            ( int*    bzerror, 
---
>            *    bzerror, 
75c75
<            ( int*    bzerror, 
---
>            ( bzerror, 
75c75
<            ( int*    bzerror, 
---
>            ( int, 
75,76c75
<            ( int*    bzerror, 
<              BZFILE* blen )
---
>            ( int*    BZFILE* blen )
75,76c75
<            ( int*    bzerror, 
<              BZFILE* blen )
---
>            ( int*    bzerror* blen )
76c76
<              BZFILE* blen )
---
>              blen )
76c76
<              BZFILE* blen )
---
>              BZFILE)
76,77c76
<              BZFILE* blen )
< {
---
>              BZFILE* {
76,79c76
<              BZFILE* blen )
< {
<    
<    ; 
---
>              BZFILE* blen ; 
77,79d76
< {
<    
<    ; 
79,84c79
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
80,84c80
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
84c84
< void BZ_API(BZ2_bzReadGetUnused) 
---
> (BZ2_bzReadGetUnused) 
84c84
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
84c84
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API) 
84,85c84
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(( int*    bzerror, 
84,85c84
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnusedint*    bzerror, 
85c85
<                      ( int*    bzerror, 
---
>                      *    bzerror, 
85c85
<                      ( int*    bzerror, 
---
>                      ( bzerror, 
85c85
<                      ( int*    bzerror, 
---
>                      ( int, 
85,86c85
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    BZFILE* b, 
85,86c85
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror* b, 
86c86
<                        BZFILE* b, 
---
>                        b, 
86c86
<                        BZFILE* b, 
---
>                        BZFILE, 
86,87c86
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* void**  unused, 
86,87c86
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b**  unused, 
87c87
<                        void**  unused, 
---
>                        *  unused, 
87c87
<                        void**  unused, 
---
>                        voidunused, 
87c87
<                        void**  unused, 
---
>                        void*, 
87,88c87
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  int*    nUnused )
87,88c87
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused*    nUnused )
88c88
<                        int*    nUnused )
---
>                        nUnused )
88c88
<                        int*    nUnused )
---
>                        int)
88,89c88
<                        int*    nUnused )
< ;
---
>                        int*    ;
88,97c88
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API()
---
>                        int*    nUnused int BZ_API()
89,97c89
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API()
---
> BZ_API()
97c97
< int BZ_API()
---
> ()
97c97
< int BZ_API()
---
> int )
97,98c97
< int BZ_API()
< ;
---
> int BZ_API;
(99.1 %, 1791 bytes)
89c89
< BZ_API()
---
> )
89,90c89
< BZ_API()
< ;
---
> BZ_API;
89,94c89
< BZ_API()
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API(int BZ_API(BZ2_bzBuffToBuffDecompress) 
90,94c90
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) 
94c94
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> (BZ2_bzBuffToBuffDecompress) 
94c94
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ2_bzBuffToBuffDecompress) 
94c94
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API) 
94,95c94
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(( char*         dest, 
94,95c94
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresschar*         dest, 
95c95
<                            ( char*         dest, 
---
>                            *         dest, 
95c95
<                            ( char*         dest, 
---
>                            ( dest, 
95c95
<                            ( char*         dest, 
---
>                            ( char, 
95,96c95
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         unsigned int* destLen,
(99.1 %, 1781 bytes)
94c94
< (BZ2_bzBuffToBuffDecompress) 
---
> ) 
94,95c94
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (( char*         dest, 
94,95c94
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (BZ2_bzBuffToBuffDecompresschar*         dest, 
95c95
<                            ( char*         dest, 
---
>                            *         dest, 
95c95
<                            ( char*         dest, 
---
>                            ( dest, 
95c95
<                            ( char*         dest, 
---
>                            ( char, 
95,96c95
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         unsigned int* destLen,
95,96c95
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destint* destLen,
96c96
<                              unsigned int* destLen,
---
>                              * destLen,
96c96
<                              unsigned int* destLen,
---
>                              unsigned destLen,
96c96
<                              unsigned int* destLen,
---
>                              unsigned int,
96,97c96
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* char*         source, 
96,97c96
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* destLen*         source, 
97c97
<                              char*         source, 
---
>                              source, 
97c97
<                              char*         source, 
---
>                              char, 
97,98c97
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         unsigned int  sourceLen,
97,98c97
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         sourceint  sourceLen,
98c98
<                              unsigned int  sourceLen,
---
>                              sourceLen,
98c98
<                              unsigned int  sourceLen,
---
>                              unsigned ,
98,99c98
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  int           small,
98,99c98
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  sourceLensmall,
99c99
<                              int           small,
---
>                              ,
99,100c99
<                              int           small,
<                              int           verbosity )
---
>                              int           int           verbosity )
99,100c99
<                              int           small,
<                              int           verbosity )
---
>                              int           smallverbosity )
100c100
<                              int           verbosity )
---
>                              )
100,101c100
<                              int           verbosity )
< ;
---
>                              int           ;
(99.1 %, 1767 bytes)
98,99c98
<                              unsigned ,
<                              int           small,
---
>                              unsigned small,
99c99
<                              int           small,
---
>                              ,
99,100c99
<                              int           small,
<                              int           verbosity )
---
>                              int           int           verbosity )
99,100c99
<                              int           small,
<                              int           verbosity )
---
>                              int           smallverbosity )
100c100
<                              int           verbosity )
---
>                              )
100,101c100
<                              int           verbosity )
< ;
---
>                              int           ;
100,110c100
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              int           verbosity * bzopen_or_bzdopen
101,110c101
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
> bzopen_or_bzdopen
110,111c110
< * bzopen_or_bzdopen
<                ( )
---
> ( )
110,111c110
< * bzopen_or_bzdopen
<                ( )
---
> * )
111,112c111
<                ( )
< {
---
>                {
111,113c111
<                ( )
< {
<    int bzerr, nread;
---
>                ( int bzerr, nread;
112,113c112
< {
<    int bzerr, nread;
---
> bzerr, nread;
113c113
<    int bzerr, nread;
---
>    , nread;
113c113
<    int bzerr, nread;
---
>    int nread;
113c113
<    int bzerr, nread;
---
>    int bzerr;
113,114c113
<    int bzerr, nread;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
113,114c113
<    int bzerr, nread;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread(bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
(99.1 %, 1760 bytes)
113,114c113
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr(bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr || bzerr == BZ_STREAM_END) ; else ;
(99.1 %, 1751 bytes)
114c114
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_STREAM_END) ; else ;
114c114
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK == BZ_STREAM_END) ; else ;
114c114
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || BZ_STREAM_END) ; else ;
(99.1 %, 1742 bytes)
114c114
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_STREAM_END) ; else ;
114c114
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ) ; else ;
114c114
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == ; else ;
114c114
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_STREAM_ENDelse ;
114c114
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_STREAM_END) ;
114,115c114
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == BZ_STREAM_END) ; }
114,118c114
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
(99.2 %, 1735 bytes)
114,118c114
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
115,118d114
< }
< 
< 
< 
Termination check: size was 204936; now 1735
===< pass_include_includes :: 0 >===
===< pass_ternary :: c >===
===< pass_clang :: remove-namespace >===
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: param-to-local >===
75c75
<            ( int*    bzerror, 
---
>            (  
77a78
>    int * bzerror = 0;
75,76c75
<            ( int*    bzerror, 
<              BZFILE* blen )
---
>            ( int*    bzerror )
77a77
>    BZFILE * blen = 0;
(99.2 %, 1741 bytes)
76c76
<              BZFILE* blen )
---
>              void )
77a78
>    BZFILE * blen = 0;
(99.1 %, 1755 bytes)
===< pass_clang :: simple-inliner >===
===< pass_clang :: reduce-pointer-level >===
79c79
<    int * bzerror = 0;
---
>    int  bzerror = 0;
(99.1 %, 1754 bytes)
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: replace-undefined-function >===
===< pass_peep :: a >===
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
120a121
>  
\ No newline at end of file
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
120a116
>  
\ No newline at end of file
48c48
< ;
---
> 
120a121
>  
\ No newline at end of file
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
120a121
>  
\ No newline at end of file
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
120a116
>  
\ No newline at end of file
48c48
< ;
---
> 
120a121
>  
\ No newline at end of file
(99.1 %, 1754 bytes)
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
11c11
< #include <stdio.h>
---
> #include 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API func
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
19c19
< typedef void BZFILE;
---
> typedef void BZFILE
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
69c69
< (BZ2_bzWriteint)
---
> 
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
69c69
< (BZ2_bzWriteint)
---
> 
(99.2 %, 1738 bytes)
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
64c64
< ;
---
> 
(99.2 %, 1737 bytes)
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
21,22c21
< (BZ2_bzReadOpen) ( 
<       );
---
> (BZ2_bzReadOpen) ;
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
74c74
< (BZ2_bzRead) 
---
>  
77,82c77
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
70c70
< ;
---
> 
(99.2 %, 1727 bytes)
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
21c21
< (BZ2_bzReadOpen) ;
---
> (BZ2_bzReadOpen) 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
23c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API ( 
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
23,28c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
> void BZ_API(BZ2_bzReadGetUnused) ;
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
24c24
<       int*    bzerror, 
---
>       int*    bzerror 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
25c25
<       BZFILE* b, 
---
>       BZFILE* b 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
26c26
<       void**  unused,  
---
>       void**  unused  
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
28c28
<    );
---
>    )
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
30c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ_API ( 
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
30,36c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) ;
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
31c31
<       int*  bzerror,      
---
>       int*  bzerror      
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
32c32
<       FILE* f, 
---
>       FILE* f 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
33c33
<       int   blockSize100k, 
---
>       int   blockSize100k 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
34c34
<       int   verbosity, 
---
>       int   verbosity 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
36c36
<    );
---
>    )
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
38c38
< BZ_API(BZ2_bzWriteClose);
---
> BZ_API;
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
(99.2 %, 1709 bytes)
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
38c38
< BZ_API;
---
> BZ_API
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
40c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API ( 
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
40,46c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
> BZ_API(BZ2_bzBuffToBuffDecompress) ;
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
41c41
<       char*         dest, 
---
>       char*         dest 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
42c42
<       unsigned int* destLen,
---
>       unsigned int* destLen
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
43c43
<       char*         source, 
---
>       char*         source 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
44c44
<       unsigned ,
---
>       unsigned 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
45c45
<       int           small, 
---
>       int           small 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
46c46
<       int           );
---
>       int           )
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
49c49
< #define True  ebzFile;
---
> #define True  ebzFile
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
(99.2 %, 1708 bytes)
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
57c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
58,62c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
58c58
<                     ( int*  bzerror,      
---
>                     ( int*  bzerror      
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
59c59
<                       FILE* f, 
---
>                       FILE* f 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
60c60
<                       int   blockSize100k, 
---
>                       int   blockSize100k 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
61c61
<                       int   verbosity,
---
>                       int   verbosity
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
69c69
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
73c73
< (BZ2_bzRead) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
74,75c74
<            (  
<              void )
---
>            
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
76,81c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0;
<    
<    ; 
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
77c77
<    BZFILE * blen = 0;
---
>    BZFILE * blen = 0
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
78c78
<    int  bzerror = 0;
---
>    int  bzerror = 0
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
(99.2 %, 1707 bytes)
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
80c80
<    ; 
---
>     
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
85c85
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
86c86
<                      ( int*    bzerror, 
---
>                      ( int*    bzerror 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
87c87
<                        BZFILE* b, 
---
>                        BZFILE* b 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
88c88
<                        void**  unused, 
---
>                        void**  unused 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
90c90
< BZ_API()
---
> BZ_API
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
91c91
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
95c95
< (BZ2_bzBuffToBuffDecompress) 
---
>  
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
96,101c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                            
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
96c96
<                            ( char*         dest, 
---
>                            ( char*         dest 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
97c97
<                              unsigned int* destLen,
---
>                              unsigned int* destLen
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
98c98
<                              char*         source, 
---
>                              char*         source 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
99c99
<                              unsigned ,
---
>                              unsigned 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
100c100
<                              int           small,
---
>                              int           small
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
102c102
< ;
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
112c112
<                ( )
---
>                
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
113,116c113
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> 
114c114
<    int bzerr;
---
>    int bzerr
115c115
<    if (bzerr == BZ_STREAM_END) ;
---
>     ;
115c115
<    if (bzerr == BZ_STREAM_END) ;
---
>    if  ;
115c115
<    if (bzerr == BZ_STREAM_END) ;
---
>    if (bzerr == BZ_STREAM_END) 
===< pass_special :: b >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-14 >===
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> >
9,13c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
9,13c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define define BZ_API(func) func
9,13c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_OK                BZ_API(func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> (func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define ) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_STREAM_END        func
11,13d10
< #include <stdio.h>
< 
< #   define BZ_API(func) func
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <extern
11,19c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #include <stdiotypedef void BZFILE;
11,19c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #include <stdio.void BZFILE;
11,19c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #include <stdio.hBZFILE;
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   (BZ2_bzReadOpen) ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ2_bzReadOpen) ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_API) ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_API(;
13,23c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define BZ_API(funcvoid BZ_API(BZ2_bzReadGetUnused) ( 
13,23c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define BZ_API(func) BZ_API(BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define ) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define BZ_EXTERN ( 
19,24c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
19,24c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> typedef *    bzerror, 
19,24c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> typedef void bzerror, 
19,24c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> typedef void BZFILE, 
21,25c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
21,25c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> (* b, 
21,25c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> (BZ2_bzReadOpenb, 
21,25c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> (BZ2_bzReadOpen) , 
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void**  unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void **  unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API*  unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API(unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API(BZ2_bzReadGetUnused,  
23,27c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> void BZ_API(BZ2_bzReadGetUnused) int*    nUnused 
24,27c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
24,27c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       intnUnused 
24,28c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    );
24,28c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    bzerror;
25,30c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
25,30c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
25,30c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
25,30c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* b(BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*( 
26,31c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       void**  int*  bzerror,      
26,31c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       void**  unused*  bzerror,      
27,31c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       bzerror,      
27,31c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       int,      
27,32c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       int*    FILE* f, 
28,32c28
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    * f, 
28,32c28
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )f, 
30,32c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> , 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILEint   blockSize100k, 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILE* blockSize100k, 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILE* BZ_API, 
30,34c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZFILE* BZ_API(int   verbosity, 
30,34c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenverbosity, 
30,34c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) , 
31,34d30
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
31,35c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       intworkFactor 
31,36c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  );
31,36c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  bzerror;
32,38c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       BZ_API;
32,38c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       FILE;
32,40c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       FILE* BZ_API(BZ2_bzBuffToBuffDecompress) ( 
32,40c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       FILE* f(BZ2_bzBuffToBuffDecompress) ( 
33,40c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ2_bzBuffToBuffDecompress) ( 
33,40c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   ) ( 
33,40c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   blockSize100k( 
34,40d33
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
34,41c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int   *         dest, 
34,41c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int   verbositydest, 
35,41c35
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       , 
35,42c35
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int   unsigned int* destLen,
36,42c36
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    int* destLen,
36,42c36
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )* destLen,
38,42c38
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> destLen,
38,42c38
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_API,
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> char*         source, 
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_API*         source, 
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_API(source, 
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress, 
40,44c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
---
> BZ_API(BZ2_bzBuffToBuffDecompress) unsigned ,
41,44c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
---
>       ,
41,45c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       charint           small, 
41,45c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       char*         small, 
42,45d41
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
42,45d41
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
42,46c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       unsigned );
42,46c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       unsigned int;
42,49c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       unsigned int* #define True  ebzFile
42,49c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       unsigned int* destLendefine True  ebzFile
43,49c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       True  ebzFile
43,49c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       charebzFile
43,57c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       char*         BZFILE* BZ_API(BZ2_bzWriteOpen) 
43,57c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       char*         source* BZ_API(BZ2_bzWriteOpen) 
44,57c44
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ_API(BZ2_bzWriteOpen) 
44,57c44
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       unsigned (BZ2_bzWriteOpen) 
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ2_bzWriteOpen) 
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           ) 
45,58c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int           small( int*  bzerror,      
46,58c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int*  bzerror,      
46,58c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int           *  bzerror,      
46,58c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int           )bzerror,      
49,58c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ,      
49,59c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #FILE* f, 
49,59c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define * f, 
49,59c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define True  f, 
57,59c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> , 
57,60c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILEint   blockSize100k, 
57,60c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* blockSize100k, 
57,60c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API, 
57,61c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(int   verbosity,
57,61c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpenverbosity,
58,61c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ,
58,62c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int   workFactor )
58,62c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intworkFactor )
58,62c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  )
58,69c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
---
>                     ( int*  bzerror;
59,73c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       (BZ2_bzRead) 
59,73c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       FILEBZ2_bzRead) 
59,73c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       FILE* ) 
59,74c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
---
>                       FILE* f(  
60,75c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
---
>                       void )
60,75c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
---
>                       int   )
60,76c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
---
>                       int   blockSize100k{
61,77c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       BZFILE * blen = 0;
61,77c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   * blen = 0;
61,77c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   verbosityblen = 0;
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       = 0;
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   0;
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   workFactor ;
69,78c69
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> int  bzerror = 0
73,78c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> bzerror = 0
73,78c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> (= 0
73,78c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> (BZ2_bzRead0
74,80c74
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
---
>            ; 
75,81c75
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
---
>              }
75,85c75
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              void void BZ_API(BZ2_bzReadGetUnused) 
76,85c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    (BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE * ) 
77,86c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    BZFILE * blen ( int*    bzerror, 
77,86c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    BZFILE * blen = int*    bzerror, 
77,86c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    BZFILE * blen = 0*    bzerror, 
78,86c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzerror, 
78,86c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    int  , 
78,87c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    int  bzerror BZFILE* b, 
78,87c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    int  bzerror = * b, 
80,87c80
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    b, 
81,87c81
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void**  unused, 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void **  unused, 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API*  unused, 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(unused, 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      int*    nUnused )
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( *    nUnused )
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( intnUnused )
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    )
86,90c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                      ( int*    bzerrorBZ_API()
87,90c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        ()
87,90c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        BZFILE)
87,91c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
---
>                        BZFILE* ;
87,95c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        BZFILE* b(BZ2_bzBuffToBuffDecompress) 
88,95c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        BZ2_bzBuffToBuffDecompress) 
88,95c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        void) 
88,96c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        void*( char*         dest, 
88,96c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        void**  char*         dest, 
88,96c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        void**  unused*         dest, 
89,96c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        dest, 
89,96c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        int, 
89,97c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                        int*    unsigned int* destLen,
89,97c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                        int*    nUnused int* destLen,
90,97c90
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
90,97c90
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> BZ_APIdestLen,
90,97c90
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> BZ_API(,
91,98c91
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> char*         source, 
95,98c95
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> *         source, 
95,98c95
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> (source, 
95,98c95
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> (BZ2_bzBuffToBuffDecompress, 
96,99c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
---
>                            unsigned ,
96,99c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
---
>                            ( ,
96,100c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                            ( charint           small,
96,100c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                            ( char*         small,
96,100c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                            ( char*         dest,
97,100d96
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
97,101c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned verbosity )
97,101c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int)
97,102c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned int* ;
97,111c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              unsigned int* destLen* bzopen_or_bzdopen
98,111c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              bzopen_or_bzdopen
98,112c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              char( )
98,112c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              char*         )
98,113c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
---
>                              char*         source{
99,114c99
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              int bzerr;
99,114c99
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              unsigned bzerr;
100,114c100
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              ;
100,115c100
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           if (bzerr == BZ_STREAM_END) ;
100,115c100
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           small(bzerr == BZ_STREAM_END) ;
101,115c101
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              bzerr == BZ_STREAM_END) ;
101,115c101
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           == BZ_STREAM_END) ;
101,115c101
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           verbosity BZ_STREAM_END) ;
102,115c102
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> ) ;
111,115c111
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> ;
111,116c111
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
> * }
112,120c112
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                
\ No newline at end of file
112,120c112
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                ( 
\ No newline at end of file
113,120d112
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
114,120c114
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
114,120c114
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
114,120c114
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
116,120d115
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-13 >===
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> h>
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #>
9,13c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define #   define BZ_API(func) func
9,13c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_OK                define BZ_API(func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> BZ_API(func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #(func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_STREAM_END        ) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> ##   define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioextern
11,19c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #include <stdio.typedef void BZFILE;
11,19c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #include <stdio.hvoid BZFILE;
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> BZFILE;
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define (BZ2_bzReadOpen) ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_APIBZ2_bzReadOpen) ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_API() ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_API(func;
13,23c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define BZ_API(func) void BZ_API(BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_API(BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   (BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define BZ_EXTERN ) ( 
19,23c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
19,24c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> typedef int*    bzerror, 
19,24c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> typedef void *    bzerror, 
19,24c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> typedef void BZFILEbzerror, 
21,24c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> , 
21,25c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> (BZFILE* b, 
21,25c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> (BZ2_bzReadOpen* b, 
21,25c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> (BZ2_bzReadOpen) b, 
23,25c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> , 
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void void**  unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API**  unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API(*  unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API(BZ2_bzReadGetUnusedunused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API(BZ2_bzReadGetUnused) ,  
24,26d23
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
24,26d23
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
24,26d23
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
24,28c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    bzerror);
25,28c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
25,30c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILEBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
25,30c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* * BZ_API(BZ2_bzWriteOpen) ( 
25,30c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* bBZ_API(BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       (BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       voidBZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void**  ( 
26,31c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       void**  unusedint*  bzerror,      
27,31c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       *  bzerror,      
27,31c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       intbzerror,      
27,31c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       int*    ,      
28,32c28
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    FILE* f, 
28,32c28
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )* f, 
30,32c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> f, 
30,32c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZFILE, 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILE* BZ_APIblockSize100k, 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILE* BZ_API(, 
30,34c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity, 
30,34c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) verbosity, 
31,34c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
31,35c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       intint   workFactor 
31,35c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  workFactor 
31,36c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  bzerror);
32,36c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
32,38c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       FILEBZ_API;
32,38c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       FILE* ;
32,40c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       FILE* fBZ_API(BZ2_bzBuffToBuffDecompress) ( 
33,40c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
33,40c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   BZ2_bzBuffToBuffDecompress) ( 
33,40c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   blockSize100k) ( 
34,40c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
34,41c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int   char*         dest, 
34,41c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int   verbosity*         dest, 
35,41c35
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       dest, 
35,41c35
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int   , 
36,42c36
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
36,42c36
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
38,42c38
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
38,42c38
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_APIdestLen,
40,42c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> ,
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_APIchar*         source, 
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_API(*         source, 
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_API(BZ2_bzBuffToBuffDecompresssource, 
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) , 
41,43d40
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
41,44c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
---
>       char,
41,45c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       char*         int           small, 
41,45c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       char*         destsmall, 
42,45c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       , 
42,46c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       unsigned int           );
42,46c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       unsigned int);
42,46c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       unsigned int* ;
42,49c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       unsigned int* destLen#define True  ebzFile
43,49c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       define True  ebzFile
43,49c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       charTrue  ebzFile
43,49c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       char*         ebzFile
43,57c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       char*         sourceBZFILE* BZ_API(BZ2_bzWriteOpen) 
44,57c44
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
44,57c44
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       unsigned BZ_API(BZ2_bzWriteOpen) 
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           BZ2_bzWriteOpen) 
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           small) 
46,58c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
46,58c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int           int*  bzerror,      
46,58c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int           )*  bzerror,      
49,58c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> bzerror,      
49,58c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> #,      
49,59c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define FILE* f, 
49,59c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define True  * f, 
57,59c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> f, 
57,59c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE, 
57,60c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
57,60c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIblockSize100k, 
57,60c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(, 
57,61c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity,
58,61c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     verbosity,
58,61c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( ,
58,62c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intint   workFactor )
58,62c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  workFactor )
58,62c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerror)
59,69c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
---
>                       ;
59,73c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       FILE(BZ2_bzRead) 
59,73c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       FILE* BZ2_bzRead) 
59,73c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       FILE* f) 
60,74c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
---
>                       (  
60,75c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
---
>                       int   void )
60,75c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
---
>                       int   blockSize100k)
61,76c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
---
>                       {
61,77c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   BZFILE * blen = 0;
61,77c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   verbosity* blen = 0;
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       blen = 0;
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   = 0;
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   workFactor 0;
70,77d69
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
73,78c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> int  bzerror = 0
73,78c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> (bzerror = 0
73,78c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> (BZ2_bzRead= 0
74,78c74
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
>            0
75,80c75
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
---
>              ; 
75,81c75
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
---
>              void }
76,84d75
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_API(BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE (BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE * BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE * blen ) 
77,86c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    BZFILE * blen = ( int*    bzerror, 
77,86c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    BZFILE * blen = 0int*    bzerror, 
78,86c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    *    bzerror, 
78,86c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    int  bzerror, 
78,86c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    int  bzerror , 
78,87c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    int  bzerror = BZFILE* b, 
80,87c80
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    * b, 
81,87c81
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
85,87c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void void**  unused, 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API**  unused, 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(*  unused, 
85,88c85
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedunused, 
86,88c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      , 
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
86,89c86
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror)
87,90c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        BZ_API()
87,90c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        BZFILE()
87,90c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        BZFILE* )
87,91c87
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
---
>                        BZFILE* b;
88,95c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        (BZ2_bzBuffToBuffDecompress) 
88,95c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        voidBZ2_bzBuffToBuffDecompress) 
88,95c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        void*) 
88,96c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        void**  ( char*         dest, 
88,96c88
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        void**  unusedchar*         dest, 
89,96c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        *         dest, 
89,96c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        intdest, 
89,96c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        int*    , 
89,97c89
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                        int*    nUnused unsigned int* destLen,
90,97c90
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
90,97c90
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> BZ_API* destLen,
90,97c90
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> BZ_API(destLen,
91,97c91
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> ,
95,98c95
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> char*         source, 
95,98c95
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> (*         source, 
95,98c95
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> (BZ2_bzBuffToBuffDecompresssource, 
96,98c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            , 
96,99c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
---
>                            ( unsigned ,
96,99c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
---
>                            ( char,
96,100c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                            ( char*         int           small,
96,100c96
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                            ( char*         destsmall,
97,100c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                              ,
97,101c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
97,101c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned intverbosity )
97,101c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* )
97,102c97
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned int* destLen;
98,111c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              * bzopen_or_bzdopen
98,111c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              charbzopen_or_bzdopen
98,112c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              char*         ( )
98,112c98
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              char*         source)
99,113c99
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
---
>                              {
99,114c99
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              unsigned int bzerr;
100,114c100
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              bzerr;
100,114c100
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              int           ;
100,115c100
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           smallif (bzerr == BZ_STREAM_END) ;
101,115c101
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              (bzerr == BZ_STREAM_END) ;
101,115c101
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           bzerr == BZ_STREAM_END) ;
101,115c101
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           verbosity == BZ_STREAM_END) ;
102,115c102
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> BZ_STREAM_END) ;
111,115c111
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> ) ;
111,115c111
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> * ;
112,116c112
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
>                }
112,120c112
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                ( 
\ No newline at end of file
113,120d112
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
114,120c114
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
114,120c114
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
114,120c114
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
115,120c115
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
116,120d115
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-10 >===
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> <stdio.h>
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #stdio.h>
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define .h>
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_OK                h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> >
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define define BZ_API(func) func
10,13c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_STREAM_END        BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> (func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include ) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <func
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio#   define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hBZ_EXTERN extern
13,14c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> extern
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   typedef void BZFILE;
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   define void BZFILE;
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   define BZ_APIBZFILE;
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   define BZ_API(;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_API(func(BZ2_bzReadOpen) ;
13,21c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_API(func) BZ2_bzReadOpen) ;
14,21c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> ) ;
14,21c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   ;
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define void BZ_API(BZ2_bzReadGetUnused) ( 
14,23c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> #   define BZ_EXTERN BZ_API(BZ2_bzReadGetUnused) ( 
19,23c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadGetUnused) ( 
19,23c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef BZ2_bzReadGetUnused) ( 
19,23c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef void ) ( 
19,23c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef void BZFILE( 
21,24c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
21,24c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> (*    bzerror, 
21,24c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> (BZ2_bzReadOpenbzerror, 
21,24c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> (BZ2_bzReadOpen) , 
23,25c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
23,25c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> void * b, 
23,25c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> void BZ_APIb, 
23,25c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> void BZ_API(, 
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API(BZ2_bzReadGetUnusedvoid**  unused,  
23,26c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void BZ_API(BZ2_bzReadGetUnused) **  unused,  
24,26c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
24,26c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       intunused,  
24,26c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    ,  
24,27c24
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerrorint*    nUnused 
25,27c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
25,27c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILEnUnused 
25,28c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* );
25,28c25
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b;
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void* BZ_API(BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*BZ_API(BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void**  (BZ2_bzWriteOpen) ( 
26,30c26
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void**  unusedBZ2_bzWriteOpen) ( 
27,30c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       ) ( 
27,30c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int( 
27,31c27
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       int*    int*  bzerror,      
28,31c28
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    *  bzerror,      
28,31c28
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    )bzerror,      
30,31c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> ,      
30,32c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZFILEFILE* f, 
30,32c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZFILE* * f, 
30,32c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZFILE* BZ_APIf, 
30,32c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZFILE* BZ_API(, 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   blockSize100k, 
30,33c30
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) blockSize100k, 
31,33c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       , 
31,34c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       intint   verbosity, 
31,34c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  verbosity, 
31,34c31
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerror, 
32,34d31
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
32,35c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEworkFactor 
32,36c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* );
32,36c32
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f;
33,38c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       BZ_API;
33,38c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       int   ;
33,40c33
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   blockSize100kBZ_API(BZ2_bzBuffToBuffDecompress) ( 
34,40c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
34,40c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   BZ2_bzBuffToBuffDecompress) ( 
34,40c34
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   verbosity) ( 
35,40c35
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
35,41c35
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int   char*         dest, 
36,41c36
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    *         dest, 
36,41c36
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    )dest, 
38,41c38
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> , 
38,42c38
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_APIunsigned int* destLen,
40,42c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
40,42c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_API* destLen,
40,42c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_API(destLen,
40,42c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress,
40,43c40
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) char*         source, 
41,43c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
41,43c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charsource, 
41,43c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         , 
41,44c41
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
---
>       char*         destunsigned ,
42,44c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
---
>       ,
42,45c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       unsigned int           small, 
42,45c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       unsigned intsmall, 
42,45c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       unsigned int* , 
42,46c42
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       unsigned int* destLenint           );
43,46c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       );
43,46c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
---
>       char;
43,49c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       char*         #define True  ebzFile
43,49c43
<       char*         source, 
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       char*         sourcedefine True  ebzFile
44,49c44
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       True  ebzFile
44,49c44
<       unsigned ,
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       unsigned ebzFile
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           * BZ_API(BZ2_bzWriteOpen) 
45,57c45
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           smallBZ_API(BZ2_bzWriteOpen) 
46,57c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
46,57c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           BZ2_bzWriteOpen) 
46,57c46
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           )) 
49,58c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ( int*  bzerror,      
49,58c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> #int*  bzerror,      
49,58c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> #define *  bzerror,      
49,58c49
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> #define True  bzerror,      
57,58c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ,      
57,59c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILEFILE* f, 
57,59c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* * f, 
57,59c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_APIf, 
57,59c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(, 
57,60c57
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   blockSize100k, 
58,60c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     blockSize100k, 
58,60c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( , 
58,61c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intint   verbosity,
58,61c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  verbosity,
58,61c58
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerror,
59,61d58
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
59,62c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEworkFactor )
59,62c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* )
59,69c59
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
---
>                       FILE* f;
60,73c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       (BZ2_bzRead) 
60,73c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       int   BZ2_bzRead) 
60,73c60
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       int   blockSize100k) 
61,74c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
---
>                       (  
61,75c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
---
>                       int   void )
61,75c61
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
---
>                       int   verbosity)
62,76c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
---
>                       {
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   BZFILE * blen = 0;
62,77c62
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
>                       int   workFactor * blen = 0;
69,77c69
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
> blen = 0;
73,77c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
> = 0;
73,77c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
> (0;
73,77c73
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    BZFILE * blen = 0;
---
> (BZ2_bzRead;
74,78c74
<            (  
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
>            int  bzerror = 0
75,78c75
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
>              bzerror = 0
75,78c75
<              void )
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
>              void = 0
76,78c76
< {
<    BZFILE * blen = 0;
<    int  bzerror = 0
---
> 0
77,79d76
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
77,81c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
---
>    BZFILE }
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE * void BZ_API(BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE * blen BZ_API(BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE * blen = (BZ2_bzReadGetUnused) 
77,85c77
<    BZFILE * blen = 0;
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZFILE * blen = 0BZ2_bzReadGetUnused) 
78,85c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    ) 
78,86c78
<    int  bzerror = 0
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    int  ( int*    bzerror, 
(99.2 %, 1661 bytes)
77,83c77
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzerror, 
78,83c78
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> , 
82,84c82
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> BZFILE* b, 
82,84c82
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void * b, 
82,84c82
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_APIb, 
82,84c82
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(, 
82,85c82
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedvoid**  unused, 
83,85c83
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      **  unused, 
83,85c83
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( *  unused, 
83,85c83
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( intunused, 
83,85c83
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    , 
83,86c83
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerrorint*    nUnused )
84,86c84
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
84,86c84
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILEnUnused )
84,86c84
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* )
84,87c84
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        BZFILE* bBZ_API()
85,87c85
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        ()
85,87c85
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
---
>                        void)
85,88c85
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
---
>                        void*;
85,92c85
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        void**  (BZ2_bzBuffToBuffDecompress) 
85,92c85
<                        void**  unused, 
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        void**  unusedBZ2_bzBuffToBuffDecompress) 
86,92c86
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        ) 
86,93c86
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        int( char*         dest, 
86,93c86
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        int*    char*         dest, 
86,93c86
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        int*    nUnused *         dest, 
87,93c87
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> dest, 
87,93c87
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ_API, 
87,94c87
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> BZ_API(unsigned int* destLen,
88,94c88
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
92,94c92
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
92,94c92
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> (destLen,
92,94c92
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> (BZ2_bzBuffToBuffDecompress,
93,95c93
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            char*         source, 
93,95c93
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( *         source, 
93,95c93
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( charsource, 
93,95c93
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         , 
93,96c93
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
---
>                            ( char*         destunsigned ,
94,96c94
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
---
>                              ,
94,97c94
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                              unsigned int           small,
94,97c94
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                              unsigned intsmall,
94,97c94
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                              unsigned int* ,
94,98c94
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenint           verbosity )
95,98c95
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
95,98c95
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              char)
95,99c95
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              char*         ;
95,108c95
<                              char*         source, 
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              char*         source* bzopen_or_bzdopen
96,108c96
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              bzopen_or_bzdopen
96,109c96
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              unsigned ( )
97,109c97
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              )
97,110c97
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
---
>                              int           {
97,111c97
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              int           smallint bzerr;
98,111c98
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              bzerr;
98,111c98
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>                              int           ;
98,112c98
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                              int           verbosity if (bzerr == BZ_STREAM_END) ;
99,112c99
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> (bzerr == BZ_STREAM_END) ;
108,112c108
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> bzerr == BZ_STREAM_END) ;
108,112c108
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> * == BZ_STREAM_END) ;
109,112c109
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                BZ_STREAM_END) ;
109,112c109
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                ( ) ;
110,112c110
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> ;
111,113c111
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
---
>    }
111,117c111
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
111,117c111
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
112,117c112
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
112,117c112
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
112,117c112
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
112,117c112
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
112,117c112
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
112,117c112
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
112,117c112
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
113,117d112
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-5 >===
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
---
> #define 4
9,11c9
< #define BZ_OK                0
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_OK                #include <stdio.h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> include <stdio.h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #<stdio.h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define stdio.h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        .h>
11c11
< #include <stdio.h>
---
> h>
11c11
< #include <stdio.h>
---
> #>
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include #   define BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <define BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdioBZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.(func) func
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.hfunc) func
13c13
< #   define BZ_API(func) func
---
> ) func
13c13
< #   define BZ_API(func) func
---
> #   func
13,14c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define #   define BZ_EXTERN extern
13,14c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIdefine BZ_EXTERN extern
13,14c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(BZ_EXTERN extern
13,14c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(funcextern
13,19c13
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   define BZ_API(func) typedef void BZFILE;
14,19c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> void BZFILE;
14,19c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   BZFILE;
14,19c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
---
> #   define ;
14,21c14
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ_EXTERN (BZ2_bzReadOpen) ;
19,21c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> BZ2_bzReadOpen) ;
19,21c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> typedef ) ;
19,21c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
---
> typedef void ;
19,23c19
< typedef void BZFILE;
< 
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef void BZFILEvoid BZ_API(BZ2_bzReadGetUnused) ( 
21,23c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_API(BZ2_bzReadGetUnused) ( 
21,23c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ((BZ2_bzReadGetUnused) ( 
21,23c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
21,23c21
< (BZ2_bzReadOpen) ;
< 
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadOpen) ) ( 
23c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
23,24c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void int*    bzerror, 
23,24c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void BZ_API*    bzerror, 
23,24c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void BZ_API(bzerror, 
23,24c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
23,25c23
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnused) BZFILE* b, 
(99.2 %, 1644 bytes)
21,22c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> (BZ2_bzReadOpenBZ2_bzReadGetUnused, 
21,23c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> (BZ2_bzReadOpenBZ2_bzReadGetUnused) BZFILE* b, 
22,23c22
<       int*    bzerror, 
<       BZFILE* b, 
---
>       * b, 
22,23c22
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intb, 
22,23c22
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
22,24c22
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerrorvoid**  unused,  
23,24c23
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
23,24c23
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  unused,  
(99.2 %, 1619 bytes)
22,23c22
<       int*    , 
<       void**  unused,  
---
>       int*    ,  
23d22
<       void**  unused,  
(99.2 %, 1596 bytes)
22,24c22
<       int*    ,  
<       int*    nUnused 
<    );
---
>       int*    ;
23,26c23
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
23,26c23
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int* BZ_API(BZ2_bzWriteOpen) ( 
23,26c23
<       int*    nUnused 
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZ_API(BZ2_bzWriteOpen) ( 
24,26c24
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
24,26c24
<    );
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE( 
26,27c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZFILE* int*  bzerror,      
26,27c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZFILE* BZ_API*  bzerror,      
26,27c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZFILE* BZ_API(bzerror,      
26,27c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZFILE* BZ_API(BZ2_bzWriteOpen,      
26,28c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) FILE* f, 
27,28c27
<       int*  bzerror,      
<       FILE* f, 
---
>       * f, 
27,28c27
<       int*  bzerror,      
<       FILE* f, 
---
>       intf, 
27,28c27
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  , 
27,29c27
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerrorint   blockSize100k, 
28,29c28
<       FILE* f, 
<       int   blockSize100k, 
---
>       blockSize100k, 
28,29c28
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE, 
28,30c28
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* int   verbosity, 
28,30c28
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* fverbosity, 
29,30c29
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
29,31c29
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int   int   workFactor 
29,31c29
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int   blockSize100kworkFactor 
30,32c30
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
30,32c30
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   ;
30,34c30
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       int   verbosityBZ_API;
31,34c31
<       int   workFactor 
<    );
< 
< BZ_API;
---
>       ;
31,36c31
<       int   workFactor 
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
32,36c32
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    (BZ2_bzBuffToBuffDecompress) ( 
32,36c32
<    );
< 
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )BZ2_bzBuffToBuffDecompress) ( 
34,36c34
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
34,36c34
< BZ_API;
< 
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API( 
36,37c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> char*         dest, 
36,37c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API*         dest, 
36,37c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(dest, 
36,37c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress, 
36,38c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress) unsigned int* destLen,
37,38c37
<       char*         dest, 
<       unsigned int* destLen,
---
>       int* destLen,
37,38c37
<       char*         dest, 
<       unsigned int* destLen,
---
>       char* destLen,
37,38c37
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destLen,
37,38c37
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         dest,
38d37
<       unsigned int* destLen,
38,39c38
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned *         source, 
38,39c38
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned intsource, 
38,39c38
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* , 
38,40c38
<       unsigned int* destLen,
<       char*         source, 
<       unsigned ,
---
>       unsigned int* destLenunsigned ,
39,40c39
<       char*         source, 
<       unsigned ,
---
>       ,
39,41c39
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       charint           small, 
39,41c39
<       char*         source, 
<       unsigned ,
<       int           small, 
---
>       char*         small, 
40,41d39
<       unsigned ,
<       int           small, 
40,41d39
<       unsigned ,
<       int           small, 
40,42c40
<       unsigned ,
<       int           small, 
<       int           );
---
>       unsigned );
41,42c41
<       int           small, 
<       int           );
---
>       ;
41,45c41
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       int           #define True  ebzFile
41,45c41
<       int           small, 
<       int           );
< 
< 
< #define True  ebzFile
---
>       int           smalldefine True  ebzFile
42,45c42
<       int           );
< 
< 
< #define True  ebzFile
---
>       True  ebzFile
42,45c42
<       int           );
< 
< 
< #define True  ebzFile
---
>       int           ebzFile
42,53c42
<       int           );
< 
< 
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       int           )BZFILE* BZ_API(BZ2_bzWriteOpen) 
45,53c45
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
45,53c45
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> #BZ_API(BZ2_bzWriteOpen) 
45,53c45
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> #define (BZ2_bzWriteOpen) 
45,53c45
< #define True  ebzFile
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> #define True  BZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> ) 
53,54c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE( int*  bzerror,      
53,54c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* int*  bzerror,      
53,54c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API*  bzerror,      
53,54c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(bzerror,      
53,54c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(BZ2_bzWriteOpen,      
54,55c54
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     FILE* f, 
54,55c54
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( * f, 
54,55c54
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( intf, 
54,55c54
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  , 
54,56c54
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerrorint   blockSize100k, 
55,56c55
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       blockSize100k, 
55,56c55
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE, 
55,57c55
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* int   verbosity,
55,57c55
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* fverbosity,
56,57c56
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       ,
56,58c56
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   int   workFactor )
56,58c56
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   blockSize100kworkFactor )
57,58c57
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
57,65c57
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
---
>                       int   ;
57,69c57
<                       int   verbosity,
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       int   verbosity(BZ2_bzRead) 
58,69c58
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       BZ2_bzRead) 
58,69c58
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                       int   ) 
58,70c58
<                       int   workFactor )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
---
>                       int   workFactor (  
65,71c65
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            (  
<              void )
---
> void )
69,71c69
< (BZ2_bzRead) 
<            (  
<              void )
---
> )
69,72c69
< (BZ2_bzRead) 
<            (  
<              void )
< {
---
> ({
69,73c69
< (BZ2_bzRead) 
<            (  
<              void )
< {
<    ; 
---
> (BZ2_bzRead; 
70,74c70
<            (  
<              void )
< {
<    ; 
< }
---
>            }
71,78c71
<              void )
< {
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              void BZ_API(BZ2_bzReadGetUnused) 
71,78c71
<              void )
< {
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              void BZ_API(BZ2_bzReadGetUnused) 
72,78c72
< {
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> (BZ2_bzReadGetUnused) 
73,78c73
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ2_bzReadGetUnused) 
74,78c74
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> ) 
78,79c78
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
78,79c78
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void int*    bzerror, 
78,79c78
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API*    bzerror, 
78,79c78
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(bzerror, 
78,79c78
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
79,80c79
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      BZFILE* b, 
79,80c79
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( * b, 
79,80c79
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( intb, 
79,80c79
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
79,81c79
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerrorvoid**  unused, 
80,81c80
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        **  unused, 
80,81c80
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  unused, 
(99.2 %, 1554 bytes)
80d79
<                        void**  unused, 
80d79
<                        void**  unused, 
(99.3 %, 1514 bytes)
79,81c79
<                      ( int*    , 
<                        int*    nUnused )
< BZ_API()
---
>                      ( int*    BZ_API()
80,81c80
<                        int*    nUnused )
< BZ_API()
---
>                        ()
80,81c80
<                        int*    nUnused )
< BZ_API()
---
>                        int)
80,82c80
<                        int*    nUnused )
< BZ_API()
< ;
---
>                        int*    ;
80,86c80
<                        int*    nUnused )
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                        int*    nUnused (BZ2_bzBuffToBuffDecompress) 
81,86c81
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
81,86c81
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ_API) 
81,87c81
< BZ_API()
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ_API(( char*         dest, 
82,87c82
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
86,87c86
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> *         dest, 
(99.3 %, 1492 bytes)
80,86c80
<                        int)
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                        int( char*         dest, 
81,86c81
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
85,86c85
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> *         dest, 
85,86c85
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (dest, 
85,86c85
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (BZ2_bzBuffToBuffDecompress, 
86,87c86
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            unsigned int* destLen,
86,87c86
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( int* destLen,
86,87c86
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char* destLen,
86,87c86
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destLen,
86,87c86
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest,
87d86
<                              unsigned int* destLen,
87,88c87
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned *         source, 
87,88c87
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned intsource, 
87,88c87
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* , 
87,89c87
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned ,
---
>                              unsigned int* destLenunsigned ,
88,89c88
<                              char*         source, 
<                              unsigned ,
---
>                              ,
88,90c88
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                              charint           small,
88,90c88
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                              char*         small,
88,90c88
<                              char*         source, 
<                              unsigned ,
<                              int           small,
---
>                              char*         source,
89,90d88
<                              unsigned ,
<                              int           small,
89,91c89
<                              unsigned ,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned verbosity )
90,91c90
<                              int           small,
<                              int           verbosity )
---
>                              )
90,92c90
<                              int           small,
<                              int           verbosity )
< ;
---
>                              int           ;
90,101c90
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              int           small* bzopen_or_bzdopen
91,101c91
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
---
>                              bzopen_or_bzdopen
91,102c91
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
---
>                              int           ( )
92,102d91
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
92,102d91
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * bzopen_or_bzdopen
<                ( )
101,104c101
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> int bzerr;
101,104c101
< * bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> * bzerr;
102,104c102
<                ( )
< {
<    int bzerr;
---
>                ;
102,105c102
<                ( )
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>                ( if (bzerr == BZ_STREAM_END) ;
103,105c103
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
> (bzerr == BZ_STREAM_END) ;
104,105c104
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    bzerr == BZ_STREAM_END) ;
104,105c104
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int == BZ_STREAM_END) ;
104,105c104
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerrBZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>    ) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>    if ;
105,106c105
<    if (bzerr == BZ_STREAM_END) ;
< }
---
>    if (}
105,110c105
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
105,110c105
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
105,110c105
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
105,110c105
<    if (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
106,110d105
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #define BZ_OK                0
---
> define BZ_OK                0
9c9
< #define BZ_OK                0
---
>  BZ_OK                0
9c9
< #define BZ_OK                0
---
> define                 0
9c9
< #define BZ_OK                0
---
>                  0
9c9
< #define BZ_OK                0
---
> define BZ_OK                
9c9
< #define BZ_OK                0
---
>  BZ_OK                
9c9
< #define BZ_OK                0
---
> define                 
9c9
< #define BZ_OK                0
---
>                  
9c9
< #define BZ_OK                0
---
> # BZ_OK                0
9c9
< #define BZ_OK                0
---
> #                 0
(99.3 %, 1479 bytes)
10c10
< #define BZ_STREAM_END        4
---
>          
10c10
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
> #         4
10c10
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        
10c10
< #define BZ_STREAM_END        4
---
> #         
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> # BZ_STREAM_END        4
> include <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #         4
> include <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> # BZ_STREAM_END        
> include <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #         
> include <stdio.h>
10c10
< #define BZ_STREAM_END        4
---
> #define         4
10c10
< #define BZ_STREAM_END        4
---
> #define         
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define         4
> include <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define         
> include <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define         4
> # <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define         
> # <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define         4
>  <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define         
>  <stdio.h>
10c10
< #define BZ_STREAM_END        4
---
> #define BZ_STREAM_END        
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        
> include <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        
> # <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        
>  <stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        
> #include stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        
> include stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        
> # stdio.h>
10,11c10,11
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        
>  stdio.h>
11c11
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #include <stdio.h>
---
>  <stdio.h>
11c11
< #include <stdio.h>
---
> include stdio.h>
11c11
< #include <stdio.h>
---
>  stdio.h>
11c11
< #include <stdio.h>
---
> include <.h>
11c11
< #include <stdio.h>
---
>  <.h>
11c11
< #include <stdio.h>
---
> include .h>
11c11
< #include <stdio.h>
---
>  .h>
11c11
< #include <stdio.h>
---
> # <stdio.h>
11c11
< #include <stdio.h>
---
> # stdio.h>
11c11
< #include <stdio.h>
---
> # <.h>
11c11
< #include <stdio.h>
---
> # .h>
11c11
< #include <stdio.h>
---
> # <stdioh>
11c11
< #include <stdio.h>
---
> # stdioh>
11c11
< #include <stdio.h>
---
> # <h>
11c11
< #include <stdio.h>
---
> # h>
11c11
< #include <stdio.h>
---
> #include stdio.h>
11c11
< #include <stdio.h>
---
> #include .h>
11c11
< #include <stdio.h>
---
> #include stdioh>
11c11
< #include <stdio.h>
---
> #include h>
11c11
< #include <stdio.h>
---
> #include stdio.>
11c11
< #include <stdio.h>
---
> #include .>
11c11
< #include <stdio.h>
---
> #include stdio>
11c11
< #include <stdio.h>
---
> #include >
11c11
< #include <stdio.h>
---
> #include <.h>
11c11
< #include <stdio.h>
---
> #include <h>
11c11
< #include <stdio.h>
---
> #include <.>
11c11
< #include <stdio.h>
---
> #include <>
11c11
< #include <stdio.h>
---
> #include <.h
11c11
< #include <stdio.h>
---
> #include <h
11c11
< #include <stdio.h>
---
> #include <.
11c11
< #include <stdio.h>
---
> #include <
11c11
< #include <stdio.h>
---
> #include <stdioh>
11c11
< #include <stdio.h>
---
> #include <stdio>
11c11
< #include <stdio.h>
---
> #include <stdioh
11c11
< #include <stdio.h>
---
> #include <stdio
11c11
< #include <stdio.h>
---
> #include <stdioh>
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio>
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdioh
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.>
11c11
< #include <stdio.h>
---
> #include <stdio.
11c11
< #include <stdio.h>
---
> #include <stdio.>
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.>
13c13
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.
13c13
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.>
13c13
< #   define BZ_API(func) func
---
>     BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.
13c13
< #   define BZ_API(func) func
---
>     BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #   define BZ_API(func) func
---
>     BZ_API(func) func
11c11
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #   define BZ_API(func) func
---
> #   define (func) func
11c11
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #   define BZ_API(func) func
---
>    define (func) func
11c11
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #   define BZ_API(func) func
---
> #    (func) func
11c11
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #   define BZ_API(func) func
---
>     (func) func
13c13
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #   define BZ_API(func) func
---
>     BZ_API(func) func
13c13
< #   define BZ_API(func) func
---
>    define (func) func
13c13
< #   define BZ_API(func) func
---
>     (func) func
13c13
< #   define BZ_API(func) func
---
>    define BZ_APIfunc) func
13c13
< #   define BZ_API(func) func
---
>     BZ_APIfunc) func
13c13
< #   define BZ_API(func) func
---
>    define func) func
13c13
< #   define BZ_API(func) func
---
>     func) func
13c13
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
13c13
< #   define BZ_API(func) func
---
> #    (func) func
13c13
< #   define BZ_API(func) func
---
> #    BZ_APIfunc) func
13c13
< #   define BZ_API(func) func
---
> #    func) func
13c13
< #   define BZ_API(func) func
---
> #    BZ_API() func
13c13
< #   define BZ_API(func) func
---
> #    () func
13c13
< #   define BZ_API(func) func
---
> #    BZ_API) func
13c13
< #   define BZ_API(func) func
---
> #    ) func
13c13
< #   define BZ_API(func) func
---
> #   define (func) func
13c13
< #   define BZ_API(func) func
---
> #   define func) func
13c13
< #   define BZ_API(func) func
---
> #   define () func
13c13
< #   define BZ_API(func) func
---
> #   define ) func
13c13
< #   define BZ_API(func) func
---
> #   define (func func
13c13
< #   define BZ_API(func) func
---
> #   define func func
13c13
< #   define BZ_API(func) func
---
> #   define ( func
13c13
< #   define BZ_API(func) func
---
> #   define  func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API) func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) 
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API) 
13c13
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc 
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API 
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API() func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API( func
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API() 
13c13
< #   define BZ_API(func) func
---
> #   define BZ_API( 
13,14c13,14
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() func
>    define BZ_EXTERN extern
13,14c13,14
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API( func
>    define BZ_EXTERN extern
13,14c13,14
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() 
>    define BZ_EXTERN extern
(99.3 %, 1469 bytes)
14c14
< #   define BZ_EXTERN extern
---
>      
14c14
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
14c14
< #   define BZ_EXTERN extern
---
> #     extern
14c14
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
14c14
< #   define BZ_EXTERN extern
---
> #     
(99.3 %, 1447 bytes)
19c19
< typedef void BZFILE;
---
>   
19c19
< typedef void BZFILE;
---
> typedef  BZFILE;
19c19
< typedef void BZFILE;
---
> typedef  ;
19c19
< typedef void BZFILE;
---
> typedef  BZFILE
19c19
< typedef void BZFILE;
---
> typedef  
19c19
< typedef void BZFILE;
---
> typedef  BZFILE;
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
19c19
< typedef void BZFILE;
---
> typedef  ;
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
19c19
< typedef void BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
19c19
< typedef void BZFILE;
---
> typedef  
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
19c19
< typedef void BZFILE;
---
> typedef void ;
(99.3 %, 1443 bytes)
19c19
< typedef  BZFILE;
---
> typedef  ;
19c19
< typedef  BZFILE;
---
> typedef  
19c19
< typedef  BZFILE;
---
> typedef  ;
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
19c19
< typedef  BZFILE;
---
> typedef  
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
19c19
< typedef  BZFILE;
---
> typedef  ;
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> () ( 
19c19
< typedef  BZFILE;
---
> typedef  
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> () ( 
19c19
< typedef  BZFILE;
---
> typedef  ;
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> ) ( 
19c19
< typedef  BZFILE;
---
> typedef  
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> ) ( 
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> () ( 
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> ) ( 
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadOpenBZ2_bzReadGetUnused ( 
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused ( 
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> ( ( 
19c19
< typedef  BZFILE;
---
> typedef  BZFILE
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
>  ( 
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> ) ( 
21c21
< (BZ2_bzReadOpenBZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadOpenBZ2_bzReadGetUnused ( 
(99.3 %, 1407 bytes)
21,22c21,22
<  ( 
<       int*    ,  
---
>   
>             
22c22
<       int*    ,  
---
>       *    ,  
22c22
<       int*    ,  
---
>           ,  
22c22
<       int*    ,  
---
>       *      
22c22
<       int*    ,  
---
>             
22,23c22,23
<       int*    ,  
<       int*    nUnused 
---
>       *    ,  
>       *    nUnused 
22,23c22,23
<       int*    ,  
<       int*    nUnused 
---
>           ,  
>       *    nUnused 
22,23c22,23
<       int*    ,  
<       int*    nUnused 
---
>       *      
>       *    nUnused 
22,23c22,23
<       int*    ,  
<       int*    nUnused 
---
>             
>       *    nUnused 
22c22
<       int*    ,  
---
>       int    ,  
(99.3 %, 1402 bytes)
23c23
<       int*    nUnused 
---
>            
23,24c23,24
<       int*    nUnused 
<    );
---
>       *    nUnused 
>    ;
23,24c23,24
<       int*    nUnused 
<    );
---
>           nUnused 
>    ;
23,24c23,24
<       int*    nUnused 
<    );
---
>       *     
>    ;
23,24c23,24
<       int*    nUnused 
<    );
---
>            
>    ;
23c23
<       int*    nUnused 
---
>       int    nUnused 
(99.3 %, 1391 bytes)
24c24
<    );
---
>    
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    ;
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    ;
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    )
24c24
<    );
---
>    )
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    )
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    )
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZ_API(BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    )
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* (BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    )
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * (BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    )
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE (BZ2_bzWriteOpen) ( 
24c24
<    );
---
>    )
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  (BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZ_API(BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * (BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  (BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_APIBZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZ_APIBZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE (BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ_APIBZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ_API() ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE () ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE BZ_API) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE ) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* (BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ2_bzWriteOpen) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* () ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* ) ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* (BZ2_bzWriteOpen ( 
26c26
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ2_bzWriteOpen ( 
(99.3 %, 1385 bytes)
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ2_bzWriteOpen) ( 
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* ) ( 
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ2_bzWriteOpen ( 
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE*  ( 
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ2_bzWriteOpen)  
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* )  
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ2_bzWriteOpen  
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE*   
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* () ( 
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* ( ( 
26c26
< BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZFILE* ()  
(99.3 %, 1383 bytes)
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE*  ( 
>       *  bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE*   
>       *  bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE*  ( 
>       int  bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE*   
>       int  bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE*  ( 
>         bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE*   
>         bzerror,      
26c26
< BZFILE* BZ2_bzWriteOpen ( 
---
> BZFILE* BZ2_bzWriteOpen  
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen  
>       *  bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen  
>       int  bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen  
>         bzerror,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen  
>       int*  ,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen  
>       *  ,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen  
>       int  ,      
26,27c26,27
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen  
>         ,      
27c27
<       int*  bzerror,      
---
>       *  bzerror,      
27c27
<       int*  bzerror,      
---
>         bzerror,      
27c27
<       int*  bzerror,      
---
>       *  ,      
27c27
<       int*  bzerror,      
---
>         ,      
27c27
<       int*  bzerror,      
---
>       *  bzerror      
27c27
<       int*  bzerror,      
---
>         bzerror      
27c27
<       int*  bzerror,      
---
>       *        
27c27
<       int*  bzerror,      
---
>               
27c27
<       int*  bzerror,      
---
>       int  bzerror,      
27c27
<       int*  bzerror,      
---
>       int  ,      
27c27
<       int*  bzerror,      
---
>       int  bzerror      
27c27
<       int*  bzerror,      
---
>       int        
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror,      
>       * f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int  ,      
>       * f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror      
>       * f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int        
>       * f, 
27c27
<       int*  bzerror,      
---
>       int*  ,      
27c27
<       int*  bzerror,      
---
>       int*        
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       * f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       * f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       FILE f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>        f, 
27,28c27,28
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>        f, 
(99.3 %, 1376 bytes)
27c27
<       int*  ,      
---
>       int*        
27,28c27,28
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * f, 
27,28c27,28
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
27,28c27,28
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        f, 
27,28c27,28
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE* , 
27,28c27,28
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * , 
27,28c27,28
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE , 
27,28c27,28
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        , 
28c28
<       FILE* f, 
---
>       * f, 
28c28
<       FILE* f, 
---
>        f, 
28c28
<       FILE* f, 
---
>       * , 
28c28
<       FILE* f, 
---
>        , 
28c28
<       FILE* f, 
---
>       * f 
28c28
<       FILE* f, 
---
>        f 
28c28
<       FILE* f, 
---
>       *  
28c28
<       FILE* f, 
---
>         
28c28
<       FILE* f, 
---
>       FILE f, 
28c28
<       FILE* f, 
---
>       FILE , 
28c28
<       FILE* f, 
---
>       FILE f 
28c28
<       FILE* f, 
---
>       FILE  
28,29c28,29
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f, 
>          blockSize100k, 
28,29c28,29
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE , 
>          blockSize100k, 
28,29c28,29
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f 
>          blockSize100k, 
28,29c28,29
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE  
>          blockSize100k, 
28c28
<       FILE* f, 
---
>       FILE* , 
28c28
<       FILE* f, 
---
>       FILE*  
28,29c28,29
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>          blockSize100k, 
28,29c28,29
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
28,29c28,29
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>       int   , 
(99.3 %, 1375 bytes)
28c28
<       FILE* , 
---
>       FILE*  
28,29c28,29
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
28,29c28,29
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   , 
28,29c28,29
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          , 
28,29c28,29
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   blockSize100k 
28,29c28,29
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k 
28,29c28,29
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int    
28,29c28,29
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>           
29c29
<       int   blockSize100k, 
---
>          blockSize100k, 
29c29
<       int   blockSize100k, 
---
>          , 
29c29
<       int   blockSize100k, 
---
>          blockSize100k 
29c29
<       int   blockSize100k, 
---
>           
29,30c29,30
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k, 
>          verbosity, 
29,30c29,30
<       int   blockSize100k, 
<       int   verbosity, 
---
>          , 
>          verbosity, 
29,30c29,30
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k 
>          verbosity, 
29,30c29,30
<       int   blockSize100k, 
<       int   verbosity, 
---
>           
>          verbosity, 
29c29
<       int   blockSize100k, 
---
>       int   , 
29c29
<       int   blockSize100k, 
---
>       int    
29,30c29,30
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>          verbosity, 
29,30c29,30
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int    
>          verbosity, 
29,30c29,30
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>       int   , 
(99.3 %, 1362 bytes)
29c29
<       int   , 
---
>       int    
29,30c29,30
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity, 
28a29
>       int    
30d30
<       int   verbosity, 
29,30c29,30
<       int   , 
<       int   verbosity, 
---
>       int    
>          , 
29,30c29,30
<       int   , 
<       int   verbosity, 
---
>       int    
>       int   verbosity 
29,30c29,30
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity 
29,30c29,30
<       int   , 
<       int   verbosity, 
---
>       int    
>       int    
29,30c29,30
<       int   , 
<       int   verbosity, 
---
>       int    
>           
30c30
<       int   verbosity, 
---
>          verbosity, 
30c30
<       int   verbosity, 
---
>          , 
30c30
<       int   verbosity, 
---
>          verbosity 
30c30
<       int   verbosity, 
---
>           
30,31c30,31
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity, 
>          workFactor 
30,31c30,31
<       int   verbosity, 
<       int   workFactor 
---
>          , 
>          workFactor 
30,31c30,31
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity 
>          workFactor 
30,31c30,31
<       int   verbosity, 
<       int   workFactor 
---
>           
>          workFactor 
30c30
<       int   verbosity, 
---
>       int   , 
30c30
<       int   verbosity, 
---
>       int    
30,31c30,31
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>          workFactor 
30,31c30,31
<       int   verbosity, 
<       int   workFactor 
---
>       int    
>          workFactor 
30,31c30,31
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>       int    
(99.3 %, 1353 bytes)
30c30
<       int   , 
---
>       int    
30,31c30,31
<       int   , 
<       int   workFactor 
---
>       int    
>          workFactor 
30,31c30,31
<       int   , 
<       int   workFactor 
---
>       int    
>       int    
30,31c30,31
<       int   , 
<       int   workFactor 
---
>       int    
>           
30c30
<       int   , 
---
>       int    
32c32
<    );
---
>    ;
30,32c30,32
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>          workFactor 
>    ;
30,32c30,32
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>       int    
>    ;
30,32c30,32
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>           
>    ;
31c31
<       int   workFactor 
---
>          workFactor 
31c31
<       int   workFactor 
---
>           
31,32c31,32
<       int   workFactor 
<    );
---
>          workFactor 
>    ;
31,32c31,32
<       int   workFactor 
<    );
---
>           
>    ;
31,32c31,32
<       int   workFactor 
<    );
---
>          workFactor 
>    )
31,32c31,32
<       int   workFactor 
<    );
---
>           
>    )
31,32c31,32
<       int   workFactor 
<    );
---
>          workFactor 
>    
31,32c31,32
<       int   workFactor 
<    );
---
>           
>    
31c31
<       int   workFactor 
---
>       int    
31,32c31,32
<       int   workFactor 
<    );
---
>       int    
>    ;
31,32c31,32
<       int   workFactor 
<    );
---
>       int    
>    )
(99.3 %, 1343 bytes)
32c32
<    );
---
>    ;
32c32
<    );
---
>    
32c32
<    );
---
>    ;
34c34
< BZ_API;
---
> ;
32c32
<    );
---
>    
34c34
< BZ_API;
---
> ;
32c32
<    );
---
>    ;
34c34
< BZ_API;
---
> BZ_API
32c32
<    );
---
>    
34c34
< BZ_API;
---
> BZ_API
32c32,33
<    );
---
>    ;
> 
34d34
< BZ_API;
32c32,33
<    );
---
>    
> 
34d34
< BZ_API;
32c32
<    );
---
>    )
32c32
<    );
---
>    )
34c34
< BZ_API;
---
> ;
(99.3 %, 1342 bytes)
34c34
< BZ_API;
---
> ;
34c34
< BZ_API;
---
> 
34c34
< BZ_API;
---
> ;
36c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
(99.3 %, 1336 bytes)
34c34
< ;
---
> 
34d33
< ;
36c35,36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> 
> (BZ2_bzBuffToBuffDecompress) ( 
34d33
< ;
36c35,36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> 
> BZ_APIBZ2_bzBuffToBuffDecompress) ( 
34d33
< ;
36c35,36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> 
> BZ2_bzBuffToBuffDecompress) ( 
34d33
< ;
36c35,36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> 
> BZ_API() ( 
34d33
< ;
36c35,36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> 
> () ( 
34d33
< ;
36c35,36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> 
> BZ_API) ( 
34d33
< ;
36c35,36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> 
> ) ( 
36c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
36c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
36c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> () ( 
36c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
36c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress ( 
36c36
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress ( 
(99.4 %, 1330 bytes)
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress ( 
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
>  ( 
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress)  
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
> )  
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress  
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
>   
36c36
< (BZ2_bzBuffToBuffDecompress) ( 
---
> () ( 
(99.4 %, 1328 bytes)
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>  ( 
>       *         dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   
>       *         dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>  ( 
>       char         dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   
>       char         dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>  ( 
>                dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   
>                dest, 
36c36
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       *         dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       char         dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>                dest, 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       char*         , 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       *         , 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       char         , 
36,37c36,37
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>                , 
37c37
<       char*         dest, 
---
>       *         dest, 
37c37
<       char*         dest, 
---
>                dest, 
37c37
<       char*         dest, 
---
>       *         , 
37c37
<       char*         dest, 
---
>                , 
37c37
<       char*         dest, 
---
>       *         dest 
37c37
<       char*         dest, 
---
>                dest 
37c37
<       char*         dest, 
---
>       *          
37c37
<       char*         dest, 
---
>                 
37c37
<       char*         dest, 
---
>       char         dest, 
37c37
<       char*         dest, 
---
>       char         , 
37c37
<       char*         dest, 
---
>       char         dest 
37c37
<       char*         dest, 
---
>       char          
37,38c37,38
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
37,38c37,38
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
37,38c37,38
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
37,38c37,38
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
37c37
<       char*         dest, 
---
>       char*         , 
37c37
<       char*         dest, 
---
>       char*          
37,38c37,38
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
37,38c37,38
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
37,38c37,38
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(99.4 %, 1324 bytes)
37c37
<       char*         , 
---
>       char*          
37,38c37,38
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
37,38c37,38
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
37,38c37,38
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
37,38c37,38
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
37,38c37,38
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
37,38c37,38
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
37,38c37,38
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
38c38
<       unsigned int* destLen,
---
>        int* destLen,
38c38
<       unsigned int* destLen,
---
>        * destLen,
38c38
<       unsigned int* destLen,
---
>        int destLen,
38c38
<       unsigned int* destLen,
---
>         destLen,
38c38
<       unsigned int* destLen,
---
>        int* ,
38c38
<       unsigned int* destLen,
---
>        * ,
38c38
<       unsigned int* destLen,
---
>        int ,
38c38
<       unsigned int* destLen,
---
>         ,
38c38
<       unsigned int* destLen,
---
>       unsigned * destLen,
38c38
<       unsigned int* destLen,
---
>       unsigned  destLen,
38c38
<       unsigned int* destLen,
---
>       unsigned * ,
(99.4 %, 1321 bytes)
38c38
<       unsigned * destLen,
---
>       unsigned  destLen,
38c38
<       unsigned * destLen,
---
>       unsigned  ,
38c38
<       unsigned * destLen,
---
>       unsigned  destLen
38c38
<       unsigned * destLen,
---
>       unsigned  
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
38c38
<       unsigned * destLen,
---
>       unsigned * ,
38c38
<       unsigned * destLen,
---
>       unsigned * 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
38,39c38,39
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
(99.4 %, 1314 bytes)
38c38
<       unsigned * ,
---
>       unsigned * 
38,39c38,39
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
38,39c38,39
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
38,39c38,39
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
38,39c38,39
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
38,39c38,39
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
38,39c38,39
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
38,39c38,39
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
39c39
<       char*         source, 
---
>       *         source, 
39c39
<       char*         source, 
---
>                source, 
39c39
<       char*         source, 
---
>       *         , 
39c39
<       char*         source, 
---
>                , 
39c39
<       char*         source, 
---
>       *         source 
39c39
<       char*         source, 
---
>                source 
39c39
<       char*         source, 
---
>       *          
39c39
<       char*         source, 
---
>                 
39c39
<       char*         source, 
---
>       char         source, 
39c39
<       char*         source, 
---
>       char         , 
39c39
<       char*         source, 
---
>       char         source 
39c39
<       char*         source, 
---
>       char          
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char         source, 
>        ,
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char         , 
>        ,
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char         source 
>        ,
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char          
>        ,
39c39
<       char*         source, 
---
>       char*         , 
39c39
<       char*         source, 
---
>       char*          
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>        ,
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char*          
>        ,
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>       unsigned 
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char*          
>       unsigned 
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>        
39,40c39,40
<       char*         source, 
<       unsigned ,
---
>       char*          
>        
39c39
<       char*         source, 
---
>       char*         source 
(99.4 %, 1308 bytes)
39c39
<       char*         , 
---
>       char*          
39,40c39,40
<       char*         , 
<       unsigned ,
---
>       char*          
>        ,
39,40c39,40
<       char*         , 
<       unsigned ,
---
>       char*          
>       unsigned 
39,40c39,40
<       char*         , 
<       unsigned ,
---
>       char*          
>        
39c39
<       char*         , 
---
>       char*          
41c41
<       int           small, 
---
>                  small, 
39,41c39,41
<       char*         , 
<       unsigned ,
<       int           small, 
---
>       char*          
>        ,
>                  small, 
39,41c39,41
<       char*         , 
<       unsigned ,
<       int           small, 
---
>       char*          
>       unsigned 
>                  small, 
39,41c39,41
<       char*         , 
<       unsigned ,
<       int           small, 
---
>       char*          
>        
>                  small, 
40c40
<       unsigned ,
---
>        ,
40c40
<       unsigned ,
---
>        
40,41c40,41
<       unsigned ,
<       int           small, 
---
>        ,
>                  small, 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>        
>                  small, 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>        ,
>       int           , 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>        
>       int           , 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>        ,
>                  , 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>        
>                  , 
40c40
<       unsigned ,
---
>       unsigned 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                  small, 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>       unsigned 
>       int           , 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                  , 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>       unsigned 
>       int           small 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                  small 
40,41c40,41
<       unsigned ,
<       int           small, 
---
>       unsigned 
>       int            
40,41c40,41
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                   
41c41
<       int           small, 
---
>                  small, 
41c41
<       int           small, 
---
>                  , 
41c41
<       int           small, 
---
>                  small 
41c41
<       int           small, 
---
>                   
41,42c41,42
<       int           small, 
<       int           );
---
>                  small, 
>                  );
41,42c41,42
<       int           small, 
<       int           );
---
>                  , 
>                  );
41,42c41,42
<       int           small, 
<       int           );
---
>                  small 
>                  );
41,42c41,42
<       int           small, 
<       int           );
---
>                   
>                  );
41c41
<       int           small, 
---
>       int           , 
41c41
<       int           small, 
---
>       int            
41,42c41,42
<       int           small, 
<       int           );
---
>       int           , 
>                  );
41,42c41,42
<       int           small, 
<       int           );
---
>       int            
>                  );
41,42c41,42
<       int           small, 
<       int           );
---
>       int           , 
>       int           ;
41,42c41,42
<       int           small, 
<       int           );
---
>       int            
>       int           ;
41,42c41,42
<       int           small, 
<       int           );
---
>       int           , 
>                  ;
41,42c41,42
<       int           small, 
<       int           );
---
>       int            
>                  ;
(99.4 %, 1303 bytes)
41c41
<       int           , 
---
>       int            
41,42c41,42
<       int           , 
<       int           );
---
>       int            
>                  );
41,42c41,42
<       int           , 
<       int           );
---
>       int            
>       int           ;
41,42c41,42
<       int           , 
<       int           );
---
>       int            
>                  ;
41,42c41,42
<       int           , 
<       int           );
---
>       int            
>       int           )
41,42c41,42
<       int           , 
<       int           );
---
>       int            
>                  )
41,42c41,42
<       int           , 
<       int           );
---
>       int            
>       int           
41,42c41,42
<       int           , 
<       int           );
---
>       int            
>                  
42c42
<       int           );
---
>                  );
42c42
<       int           );
---
>                  ;
42c42
<       int           );
---
>                  )
42c42
<       int           );
---
>                  
42c42
<       int           );
---
>                  );
45c45
< #define True  ebzFile
---
> define True  ebzFile
42c42
<       int           );
---
>                  ;
45c45
< #define True  ebzFile
---
> define True  ebzFile
42c42
<       int           );
---
>                  )
45c45
< #define True  ebzFile
---
> define True  ebzFile
42c42
<       int           );
---
>                  
45c45
< #define True  ebzFile
---
> define True  ebzFile
42c42
<       int           );
---
>       int           ;
42c42
<       int           );
---
>       int           
42c42
<       int           );
---
>       int           ;
45c45
< #define True  ebzFile
---
> define True  ebzFile
42c42
<       int           );
---
>       int           
45c45
< #define True  ebzFile
---
> define True  ebzFile
42c42
<       int           );
---
>       int           ;
45c45
< #define True  ebzFile
---
> # True  ebzFile
42c42
<       int           );
---
>       int           
45c45
< #define True  ebzFile
---
> # True  ebzFile
42c42
<       int           );
---
>       int           ;
45c45
< #define True  ebzFile
---
>  True  ebzFile
42c42
<       int           );
---
>       int           
45c45
< #define True  ebzFile
---
>  True  ebzFile
42c42
<       int           );
---
>       int           )
42c42
<       int           );
---
>       int           )
45c45
< #define True  ebzFile
---
> define True  ebzFile
42c42
<       int           );
---
>       int           )
45c45
< #define True  ebzFile
---
> # True  ebzFile
42c42
<       int           );
---
>       int           )
45c45
< #define True  ebzFile
---
>  True  ebzFile
42c42
<       int           );
---
>       int           )
45c45
< #define True  ebzFile
---
> #define   ebzFile
42c42
<       int           );
---
>       int           )
45c45
< #define True  ebzFile
---
> define   ebzFile
42c42
<       int           );
---
>       int           )
45c45
< #define True  ebzFile
---
> #   ebzFile
42c42
<       int           );
---
>       int           )
45c45
< #define True  ebzFile
---
>    ebzFile
45c45
< #define True  ebzFile
---
> define True  ebzFile
45c45
< #define True  ebzFile
---
>  True  ebzFile
45c45
< #define True  ebzFile
---
> define   ebzFile
45c45
< #define True  ebzFile
---
>    ebzFile
45c45
< #define True  ebzFile
---
> define True  
45c45
< #define True  ebzFile
---
>  True  
45c45
< #define True  ebzFile
---
> define   
45c45
< #define True  ebzFile
---
>    
45c45
< #define True  ebzFile
---
> # True  ebzFile
45c45
< #define True  ebzFile
---
> #   ebzFile
45c45
< #define True  ebzFile
---
> # True  
45c45
< #define True  ebzFile
---
> #   
(99.4 %, 1285 bytes)
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE (BZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_APIBZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API() 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE () 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE ) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* (BZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* () 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* ) 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* (BZ2_bzWriteOpen 
53c53
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen 
(99.4 %, 1279 bytes)
53c53
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen) 
53c53
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* ) 
53c53
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen 
53c53
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE*  
53,54c53,54
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen) 
>                      int*  bzerror,      
53,54c53,54
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* ) 
>                      int*  bzerror,      
53,54c53,54
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen 
>                      int*  bzerror,      
53,54c53,54
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                      int*  bzerror,      
53c53
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* () 
53c53
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* ( 
53,54c53,54
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* () 
>                      int*  bzerror,      
(99.4 %, 1277 bytes)
53,54c53,54
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                     ( *  bzerror,      
53,54c53,54
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                      *  bzerror,      
53,54c53,54
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                     ( int  bzerror,      
53,54c53,54
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                      int  bzerror,      
53,54c53,54
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                     (   bzerror,      
53,54c53,54
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                        bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                      *  bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                      int  bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                        bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                      int*  ,      
54c54
<                     ( int*  bzerror,      
---
>                      *  ,      
54c54
<                     ( int*  bzerror,      
---
>                      int  ,      
54c54
<                     ( int*  bzerror,      
---
>                        ,      
54c54
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                     (   bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                     ( *  ,      
54c54
<                     ( int*  bzerror,      
---
>                     (   ,      
54c54
<                     ( int*  bzerror,      
---
>                     ( *  bzerror      
54c54
<                     ( int*  bzerror,      
---
>                     (   bzerror      
54c54
<                     ( int*  bzerror,      
---
>                     ( *        
54c54
<                     ( int*  bzerror,      
---
>                     (         
54c54
<                     ( int*  bzerror,      
---
>                     ( int  bzerror,      
54c54
<                     ( int*  bzerror,      
---
>                     ( int  ,      
54c54
<                     ( int*  bzerror,      
---
>                     ( int  bzerror      
54c54
<                     ( int*  bzerror,      
---
>                     ( int        
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror,      
>                       * f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  ,      
>                       * f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror      
>                       * f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int        
>                       * f, 
54c54
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
54c54
<                     ( int*  bzerror,      
---
>                     ( int*        
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       * f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       FILE f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                        f, 
54,55c54,55
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
(99.4 %, 1270 bytes)
54c54
<                     ( int*  ,      
---
>                     ( int*        
54,55c54,55
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
54,55c54,55
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
54,55c54,55
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
54,55c54,55
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE* , 
54,55c54,55
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       * , 
54,55c54,55
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE , 
54,55c54,55
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                        , 
55c55
<                       FILE* f, 
---
>                       * f, 
55c55
<                       FILE* f, 
---
>                        f, 
55c55
<                       FILE* f, 
---
>                       * , 
55c55
<                       FILE* f, 
---
>                        , 
55c55
<                       FILE* f, 
---
>                       * f 
55c55
<                       FILE* f, 
---
>                        f 
55c55
<                       FILE* f, 
---
>                       *  
55c55
<                       FILE* f, 
---
>                         
55c55
<                       FILE* f, 
---
>                       FILE f, 
55c55
<                       FILE* f, 
---
>                       FILE , 
55c55
<                       FILE* f, 
---
>                       FILE f 
55c55
<                       FILE* f, 
---
>                       FILE  
55,56c55,56
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f, 
>                          blockSize100k, 
55,56c55,56
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE , 
>                          blockSize100k, 
55,56c55,56
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f 
>                          blockSize100k, 
55,56c55,56
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE  
>                          blockSize100k, 
55c55
<                       FILE* f, 
---
>                       FILE* , 
55c55
<                       FILE* f, 
---
>                       FILE*  
55,56c55,56
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          blockSize100k, 
55,56c55,56
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
55,56c55,56
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                       int   , 
(99.4 %, 1269 bytes)
55c55
<                       FILE* , 
---
>                       FILE*  
55,56c55,56
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
55,56c55,56
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   , 
55,56c55,56
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          , 
55,56c55,56
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   blockSize100k 
55,56c55,56
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k 
55,56c55,56
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int    
55,56c55,56
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                           
56c56
<                       int   blockSize100k, 
---
>                          blockSize100k, 
56c56
<                       int   blockSize100k, 
---
>                          , 
56c56
<                       int   blockSize100k, 
---
>                          blockSize100k 
56c56
<                       int   blockSize100k, 
---
>                           
56,57c56,57
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k, 
>                          verbosity,
56,57c56,57
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          , 
>                          verbosity,
56,57c56,57
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k 
>                          verbosity,
56,57c56,57
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                           
>                          verbosity,
56c56
<                       int   blockSize100k, 
---
>                       int   , 
56c56
<                       int   blockSize100k, 
---
>                       int    
56,57c56,57
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          verbosity,
56,57c56,57
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
56,57c56,57
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                       int   ,
(99.4 %, 1256 bytes)
56c56
<                       int   , 
---
>                       int    
56,57c56,57
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
56,57c56,57
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                       int   ,
56,57c56,57
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          ,
56,57c56,57
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                       int   verbosity
56,57c56,57
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          verbosity
56,57c56,57
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                       int   
56,57c56,57
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          
57c57
<                       int   verbosity,
---
>                          verbosity,
57c57
<                       int   verbosity,
---
>                          ,
57c57
<                       int   verbosity,
---
>                          verbosity
57c57
<                       int   verbosity,
---
>                          
57,58c57,58
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity,
>                          workFactor )
57,58c57,58
<                       int   verbosity,
<                       int   workFactor )
---
>                          ,
>                          workFactor )
57,58c57,58
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity
>                          workFactor )
57,58c57,58
<                       int   verbosity,
<                       int   workFactor )
---
>                          
>                          workFactor )
57c57
<                       int   verbosity,
---
>                       int   ,
57c57
<                       int   verbosity,
---
>                       int   
57,58c57,58
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                          workFactor )
57,58c57,58
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
57,58c57,58
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                       int    )
(99.4 %, 1247 bytes)
57c57
<                       int   ,
---
>                       int   
57,58c57,58
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
57,58c57,58
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                       int    )
57,58c57,58
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                           )
57,58c57,58
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                       int   workFactor 
57,58c57,58
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                          workFactor 
57,58c57,58
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                       int    
57,58c57,58
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                           
58c58
<                       int   workFactor )
---
>                          workFactor )
58c58
<                       int   workFactor )
---
>                           )
58c58
<                       int   workFactor )
---
>                          workFactor 
58c58
<                       int   workFactor )
---
>                           
58c58,59
<                       int   workFactor )
---
>                          workFactor )
> 
65d65
< ;
58c58,59
<                       int   workFactor )
---
>                           )
> 
65d65
< ;
58c58,59
<                       int   workFactor )
---
>                          workFactor 
> 
65d65
< ;
58c58,59
<                       int   workFactor )
---
>                           
> 
65d65
< ;
58c58
<                       int   workFactor )
---
>                       int    )
58c58
<                       int   workFactor )
---
>                       int    
58c58,59
<                       int   workFactor )
---
>                       int    )
> 
65d65
< ;
58c58,59
<                       int   workFactor )
---
>                       int    
> 
65d65
< ;
58c58
<                       int   workFactor )
---
>                       int    )
69c69
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
58c58
<                       int   workFactor )
---
>                       int    
69c69
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
58c58
<                       int   workFactor )
---
>                       int    )
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> BZ2_bzRead) 
58c58
<                       int   workFactor )
---
>                       int    
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> BZ2_bzRead) 
(99.4 %, 1237 bytes)
58c58
<                       int    )
---
>                       int    
58c58,59
<                       int    )
---
>                       int    
> 
65d65
< ;
58c58
<                       int    )
---
>                       int    
69c69
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
58c58
<                       int    )
---
>                       int    
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> BZ2_bzRead) 
58c58
<                       int    )
---
>                       int    
69c69
< (BZ2_bzRead) 
---
> () 
58c58
<                       int    )
---
>                       int    
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> () 
58c58
<                       int    )
---
>                       int    
69c69
< (BZ2_bzRead) 
---
> ) 
58c58
<                       int    )
---
>                       int    
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> ) 
65c65
< ;
---
> 
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> BZ2_bzRead) 
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> () 
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> ) 
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> (BZ2_bzRead 
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> BZ2_bzRead 
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
> ( 
65d64
< ;
69c68,69
< (BZ2_bzRead) 
---
> 
>  
69c69
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
69c69
< (BZ2_bzRead) 
---
> ) 
69c69
< (BZ2_bzRead) 
---
> BZ2_bzRead 
69c69
< (BZ2_bzRead) 
---
>  
69,70c69,70
< (BZ2_bzRead) 
<            (  
---
> BZ2_bzRead) 
>              
69,70c69,70
< (BZ2_bzRead) 
<            (  
---
> ) 
>              
69,70c69,70
< (BZ2_bzRead) 
<            (  
---
> BZ2_bzRead 
>              
69,70c69,70
< (BZ2_bzRead) 
<            (  
---
>  
>              
69c69
< (BZ2_bzRead) 
---
> () 
69c69
< (BZ2_bzRead) 
---
> ( 
(99.4 %, 1235 bytes)
69c69
< BZ2_bzRead 
---
>  
71c71
<              void )
---
>               )
69,71c69,71
< BZ2_bzRead 
<            (  
<              void )
---
>  
>              
>               )
69c69
< BZ2_bzRead 
---
>  
71c71
<              void )
---
>              void 
69,71c69,71
< BZ2_bzRead 
<            (  
<              void )
---
>  
>              
>              void 
69c69
< BZ2_bzRead 
---
>  
71c71
<              void )
---
>               
69,71c69,71
< BZ2_bzRead 
<            (  
<              void )
---
>  
>              
>               
70c70
<            (  
---
>              
70,71c70,71
<            (  
<              void )
---
>              
>               )
70,71c70,71
<            (  
<              void )
---
>              
>              void 
70,71c70,71
<            (  
<              void )
---
>              
>               
70c70
<            (  
---
>              
72c72
< {
---
> 
70,72c70,72
<            (  
<              void )
< {
---
>              
>               )
> 
70,72c70,72
<            (  
<              void )
< {
---
>              
>              void 
> 
70,72c70,72
<            (  
<              void )
< {
---
>              
>               
> 
71c71
<              void )
---
>               )
71c71
<              void )
---
>               
71,72c71,72
<              void )
< {
---
>               )
> 
71,72c71,72
<              void )
< {
---
>               
> 
71c71
<              void )
---
>               )
73c73
<    ; 
---
>     
(99.4 %, 1231 bytes)
71c71
<               )
---
>               
71,72c71,72
<               )
< {
---
>               
> 
71c71
<               )
---
>               
73c73
<    ; 
---
>     
71,73c71,73
<               )
< {
<    ; 
---
>               
> 
>     
71c71
<               )
---
>               
74c74
< }
---
> 
71,72c71,72
<               )
< {
---
>               
> 
74c74
< }
---
> 
71c71
<               )
---
>               
73,74c73,74
<    ; 
< }
---
>     
> 
71,74c71,74
<               )
< {
<    ; 
< }
---
>               
> 
>     
> 
72c72
< {
---
> 
72,73c72,73
< {
<    ; 
---
> 
>     
72c72
< {
---
> 
74c74
< }
---
> 
72,74c72,74
< {
<    ; 
< }
---
> 
>     
> 
72c72
< {
---
> 
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
72,73c72,73
< {
<    ; 
---
> 
>     
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
72c72
< {
---
> 
74d73
< }
78c77,78
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_API(BZ2_bzReadGetUnused) 
(99.4 %, 1229 bytes)
73c73
<    ; 
---
>     
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused) 
73c73
<    ; 
---
>     
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  (BZ2_bzReadGetUnused) 
73c73
<    ; 
---
>     
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused) 
73c73
<    ; 
---
>     
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_APIBZ2_bzReadGetUnused) 
73c73
<    ; 
---
>     
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
73c73
<    ; 
---
>     
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ2_bzReadGetUnused) 
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
78c78
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  (BZ2_bzReadGetUnused) 
(99.4 %, 1225 bytes)
78c78
<  BZ_API(BZ2_bzReadGetUnused) 
---
>  (BZ2_bzReadGetUnused) 
78c78
<  BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ2_bzReadGetUnused) 
78c78
<  BZ_API(BZ2_bzReadGetUnused) 
---
>  () 
78c78
<  BZ_API(BZ2_bzReadGetUnused) 
---
>  ) 
78c78
<  BZ_API(BZ2_bzReadGetUnused) 
---
>  (BZ2_bzReadGetUnused 
78c78
<  BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ2_bzReadGetUnused 
(99.4 %, 1219 bytes)
78c78
<  (BZ2_bzReadGetUnused) 
---
>  BZ2_bzReadGetUnused) 
78c78
<  (BZ2_bzReadGetUnused) 
---
>  ) 
78c78
<  (BZ2_bzReadGetUnused) 
---
>  BZ2_bzReadGetUnused 
78c78
<  (BZ2_bzReadGetUnused) 
---
>   
78,79c78,79
<  (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>  BZ2_bzReadGetUnused) 
>                       int*    , 
78,79c78,79
<  (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>  ) 
>                       int*    , 
78,79c78,79
<  (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>  BZ2_bzReadGetUnused 
>                       int*    , 
78,79c78,79
<  (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>   
>                       int*    , 
78c78
<  (BZ2_bzReadGetUnused) 
---
>  () 
78c78
<  (BZ2_bzReadGetUnused) 
---
>  ( 
78,79c78,79
<  (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>  () 
>                       int*    , 
78,79c78,79
<  (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>  ( 
>                       int*    , 
(99.4 %, 1217 bytes)
78,79c78,79
<  BZ2_bzReadGetUnused 
<                      ( int*    , 
---
>   
>                      ( *    , 
78,79c78,79
<  BZ2_bzReadGetUnused 
<                      ( int*    , 
---
>   
>                       *    , 
78,79c78,79
<  BZ2_bzReadGetUnused 
<                      ( int*    , 
---
>   
>                      ( int    , 
78,79c78,79
<  BZ2_bzReadGetUnused 
<                      ( int*    , 
---
>   
>                       int    , 
78,79c78,79
<  BZ2_bzReadGetUnused 
<                      ( int*    , 
---
>   
>                      (     , 
78,79c78,79
<  BZ2_bzReadGetUnused 
<                      ( int*    , 
---
>   
>                           , 
79c79
<                      ( int*    , 
---
>                       int*    , 
79c79
<                      ( int*    , 
---
>                       *    , 
79c79
<                      ( int*    , 
---
>                       int    , 
79c79
<                      ( int*    , 
---
>                           , 
79c79
<                      ( int*    , 
---
>                       int*     
79c79
<                      ( int*    , 
---
>                       *     
79c79
<                      ( int*    , 
---
>                       int     
79c79
<                      ( int*    , 
---
>                            
79c79
<                      ( int*    , 
---
>                      ( *    , 
79c79
<                      ( int*    , 
---
>                      (     , 
79c79
<                      ( int*    , 
---
>                      ( *     
79c79
<                      ( int*    , 
---
>                      (      
79,80c79,80
<                      ( int*    , 
<                        int)
---
>                      ( *    , 
>                        )
79,80c79,80
<                      ( int*    , 
<                        int)
---
>                      (     , 
>                        )
79,80c79,80
<                      ( int*    , 
<                        int)
---
>                      ( *     
>                        )
79,80c79,80
<                      ( int*    , 
<                        int)
---
>                      (      
>                        )
(99.4 %, 1212 bytes)
80,81c80,81
<                        int)
< ;
---
>                        
> 
80c80
<                        int)
---
>                        )
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
80c80
<                        int)
---
>                        
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
80,81c80
<                        int)
< ;
---
>                        )
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress) 
80,81c80
<                        int)
< ;
---
>                        
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress) 
80c80
<                        int)
---
>                        int
80,81c80,81
<                        int)
< ;
---
>                        int
> 
80c80
<                        int)
---
>                        int
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
80,81c80
<                        int)
< ;
---
>                        int
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress) 
80c80
<                        int)
---
>                        int
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> () 
80,81c80
<                        int)
< ;
---
>                        int
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> () 
80c80
<                        int)
---
>                        int
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> ) 
80,81c80
<                        int)
< ;
---
>                        int
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> ) 
81c81
< ;
---
> 
81d80
< ;
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress) 
81d80
< ;
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> () 
81d80
< ;
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> ) 
81d80
< ;
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> (BZ2_bzBuffToBuffDecompress 
81d80
< ;
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress 
81d80
< ;
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> ( 
81d80
< ;
85c84,85
< (BZ2_bzBuffToBuffDecompress) 
---
> 
>  
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> ) 
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress 
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
>  
85,86c85,86
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ2_bzBuffToBuffDecompress) 
>                             char*         dest, 
85,86c85,86
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ) 
>                             char*         dest, 
85,86c85,86
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ2_bzBuffToBuffDecompress 
>                             char*         dest, 
85,86c85,86
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>  
>                             char*         dest, 
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> () 
85c85
< (BZ2_bzBuffToBuffDecompress) 
---
> ( 
(99.4 %, 1210 bytes)
85,86c85,86
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            ( *         dest, 
85,86c85,86
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             *         dest, 
85,86c85,86
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            ( char         dest, 
85,86c85,86
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             char         dest, 
85,86c85,86
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            (          dest, 
85,86c85,86
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                                      dest, 
86c86
<                            ( char*         dest, 
---
>                             char*         dest, 
86c86
<                            ( char*         dest, 
---
>                             *         dest, 
86c86
<                            ( char*         dest, 
---
>                             char         dest, 
86c86
<                            ( char*         dest, 
---
>                                      dest, 
86c86
<                            ( char*         dest, 
---
>                             char*         , 
86c86
<                            ( char*         dest, 
---
>                             *         , 
86c86
<                            ( char*         dest, 
---
>                             char         , 
86c86
<                            ( char*         dest, 
---
>                                      , 
86c86
<                            ( char*         dest, 
---
>                            ( *         dest, 
86c86
<                            ( char*         dest, 
---
>                            (          dest, 
86c86
<                            ( char*         dest, 
---
>                            ( *         , 
86c86
<                            ( char*         dest, 
---
>                            (          , 
86c86
<                            ( char*         dest, 
---
>                            ( *         dest 
86c86
<                            ( char*         dest, 
---
>                            (          dest 
86c86
<                            ( char*         dest, 
---
>                            ( *          
86c86
<                            ( char*         dest, 
---
>                            (           
86c86
<                            ( char*         dest, 
---
>                            ( char         dest, 
86c86
<                            ( char*         dest, 
---
>                            ( char         , 
86c86
<                            ( char*         dest, 
---
>                            ( char         dest 
86c86
<                            ( char*         dest, 
---
>                            ( char          
86,87c86,87
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest, 
>                               int* destLen,
86,87c86,87
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         , 
>                               int* destLen,
86,87c86,87
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest 
>                               int* destLen,
86,87c86,87
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char          
>                               int* destLen,
86c86
<                            ( char*         dest, 
---
>                            ( char*         , 
86c86
<                            ( char*         dest, 
---
>                            ( char*          
86,87c86,87
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               int* destLen,
86,87c86,87
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int* destLen,
86,87c86,87
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                              unsigned * destLen,
(99.4 %, 1206 bytes)
86c86
<                            ( char*         , 
---
>                            ( char*          
86,87c86,87
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int* destLen,
86,87c86,87
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned * destLen,
86,87c86,87
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               * destLen,
86,87c86,87
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned int destLen,
86,87c86,87
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int destLen,
86,87c86,87
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned  destLen,
86,87c86,87
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                                destLen,
87c87
<                              unsigned int* destLen,
---
>                               int* destLen,
87c87
<                              unsigned int* destLen,
---
>                               * destLen,
87c87
<                              unsigned int* destLen,
---
>                               int destLen,
87c87
<                              unsigned int* destLen,
---
>                                destLen,
87c87
<                              unsigned int* destLen,
---
>                               int* ,
87c87
<                              unsigned int* destLen,
---
>                               * ,
87c87
<                              unsigned int* destLen,
---
>                               int ,
87c87
<                              unsigned int* destLen,
---
>                                ,
87c87
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
87c87
<                              unsigned int* destLen,
---
>                              unsigned  destLen,
87c87
<                              unsigned int* destLen,
---
>                              unsigned * ,
(99.4 %, 1203 bytes)
87c87
<                              unsigned * destLen,
---
>                              unsigned  destLen,
87c87
<                              unsigned * destLen,
---
>                              unsigned  ,
87c87
<                              unsigned * destLen,
---
>                              unsigned  destLen
87c87
<                              unsigned * destLen,
---
>                              unsigned  
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen,
>                              *         source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  ,
>                              *         source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen
>                              *         source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  
>                              *         source, 
87c87
<                              unsigned * destLen,
---
>                              unsigned * ,
87c87
<                              unsigned * destLen,
---
>                              unsigned * 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              *         source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              char         source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                                       source, 
87,88c87,88
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
(99.4 %, 1196 bytes)
87c87
<                              unsigned * ,
---
>                              unsigned * 
87,88c87,88
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
87,88c87,88
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
87,88c87,88
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
87,88c87,88
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              char*         , 
87,88c87,88
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              *         , 
87,88c87,88
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              char         , 
87,88c87,88
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                                       , 
88c88
<                              char*         source, 
---
>                              *         source, 
88c88
<                              char*         source, 
---
>                                       source, 
88c88
<                              char*         source, 
---
>                              *         , 
88c88
<                              char*         source, 
---
>                                       , 
88c88
<                              char*         source, 
---
>                              *         source 
88c88
<                              char*         source, 
---
>                                       source 
88c88
<                              char*         source, 
---
>                              *          
88c88
<                              char*         source, 
---
>                                        
88c88
<                              char*         source, 
---
>                              char         source, 
88c88
<                              char*         source, 
---
>                              char         , 
88c88
<                              char*         source, 
---
>                              char         source 
88c88
<                              char*         source, 
---
>                              char          
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char         source, 
>                               ,
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char         , 
>                               ,
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char         source 
>                               ,
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char          
>                               ,
88c88
<                              char*         source, 
---
>                              char*         , 
88c88
<                              char*         source, 
---
>                              char*          
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char*         , 
>                               ,
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char*          
>                               ,
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char*         , 
>                              unsigned 
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char*          
>                              unsigned 
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char*         , 
>                               
88,89c88,89
<                              char*         source, 
<                              unsigned ,
---
>                              char*          
>                               
(99.4 %, 1190 bytes)
88c88
<                              char*         , 
---
>                              char*          
88,89c88,89
<                              char*         , 
<                              unsigned ,
---
>                              char*          
>                               ,
88,89c88,89
<                              char*         , 
<                              unsigned ,
---
>                              char*          
>                              unsigned 
88,89c88,89
<                              char*         , 
<                              unsigned ,
---
>                              char*          
>                               
88c88
<                              char*         , 
---
>                              char*          
90c90
<                              int           small,
---
>                                         small,
88,90c88,90
<                              char*         , 
<                              unsigned ,
<                              int           small,
---
>                              char*          
>                               ,
>                                         small,
88,90c88,90
<                              char*         , 
<                              unsigned ,
<                              int           small,
---
>                              char*          
>                              unsigned 
>                                         small,
88,90c88,90
<                              char*         , 
<                              unsigned ,
<                              int           small,
---
>                              char*          
>                               
>                                         small,
89c89
<                              unsigned ,
---
>                               ,
89c89
<                              unsigned ,
---
>                               
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                               ,
>                                         small,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                               
>                                         small,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                               ,
>                              int           ,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                               
>                              int           ,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                               ,
>                                         ,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                               
>                                         ,
89c89
<                              unsigned ,
---
>                              unsigned 
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                              unsigned 
>                                         small,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                              unsigned 
>                              int           ,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                              unsigned 
>                                         ,
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                              unsigned 
>                              int           small
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                              unsigned 
>                                         small
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                              unsigned 
>                              int           
89,90c89,90
<                              unsigned ,
<                              int           small,
---
>                              unsigned 
>                                         
90c90
<                              int           small,
---
>                                         small,
90c90
<                              int           small,
---
>                                         ,
90c90
<                              int           small,
---
>                                         small
90c90
<                              int           small,
---
>                                         
90,91c90,91
<                              int           small,
<                              int           verbosity )
---
>                                         small,
>                                         verbosity )
90,91c90,91
<                              int           small,
<                              int           verbosity )
---
>                                         ,
>                                         verbosity )
90,91c90,91
<                              int           small,
<                              int           verbosity )
---
>                                         small
>                                         verbosity )
90,91c90,91
<                              int           small,
<                              int           verbosity )
---
>                                         
>                                         verbosity )
90c90
<                              int           small,
---
>                              int           ,
90c90
<                              int           small,
---
>                              int           
90,91c90,91
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                         verbosity )
90,91c90,91
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
90,91c90,91
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                              int            )
(99.4 %, 1185 bytes)
90c90
<                              int           ,
---
>                              int           
90,91c90,91
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
90,91c90,91
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                              int            )
90,91c90,91
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                          )
90,91c90,91
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                              int           verbosity 
90,91c90,91
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                         verbosity 
90,91c90,91
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                              int            
90,91c90,91
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                          
91c91
<                              int           verbosity )
---
>                                         verbosity )
91c91
<                              int           verbosity )
---
>                                          )
91c91
<                              int           verbosity )
---
>                                         verbosity 
91c91
<                              int           verbosity )
---
>                                          
91,92c91,92
<                              int           verbosity )
< ;
---
>                                         verbosity )
> 
91,92c91,92
<                              int           verbosity )
< ;
---
>                                          )
> 
91,92c91,92
<                              int           verbosity )
< ;
---
>                                         verbosity 
> 
91,92c91,92
<                              int           verbosity )
< ;
---
>                                          
> 
91c91
<                              int           verbosity )
---
>                              int            )
91c91
<                              int           verbosity )
---
>                              int            
91,92c91,92
<                              int           verbosity )
< ;
---
>                              int            )
> 
91,92c91,92
<                              int           verbosity )
< ;
---
>                              int            
> 
91c91
<                              int           verbosity )
---
>                              int            )
101c101
< * bzopen_or_bzdopen
---
>  bzopen_or_bzdopen
(99.4 %, 1176 bytes)
91c91
<                              int            )
---
>                              int            
91,92c91,92
<                              int            )
< ;
---
>                              int            
> 
91c91
<                              int            )
---
>                              int            
101c101
< * bzopen_or_bzdopen
---
>  bzopen_or_bzdopen
91,92c91
<                              int            )
< ;
---
>                              int            
101c100,101
< * bzopen_or_bzdopen
---
> 
>  bzopen_or_bzdopen
91c91
<                              int            )
---
>                              int            
101c101
< * bzopen_or_bzdopen
---
> * 
91,92c91
<                              int            )
< ;
---
>                              int            
101c100,101
< * bzopen_or_bzdopen
---
> 
> * 
91c91
<                              int            )
---
>                              int            
101c101
< * bzopen_or_bzdopen
---
>  
91,92c91
<                              int            )
< ;
---
>                              int            
101c100,101
< * bzopen_or_bzdopen
---
> 
>  
92c92
< ;
---
> 
92d91
< ;
101c100,101
< * bzopen_or_bzdopen
---
> 
>  bzopen_or_bzdopen
92d91
< ;
101c100,101
< * bzopen_or_bzdopen
---
> 
> * 
92d91
< ;
101c100,101
< * bzopen_or_bzdopen
---
> 
>  
92c92
< ;
---
> 
102c102
<                ( )
---
>                 )
92d91
< ;
101,102c100,102
< * bzopen_or_bzdopen
<                ( )
---
> 
>  bzopen_or_bzdopen
>                 )
92d91
< ;
101,102c100,102
< * bzopen_or_bzdopen
<                ( )
---
> 
> * 
>                 )
92d91
< ;
101,102c100,102
< * bzopen_or_bzdopen
<                ( )
---
> 
>  
>                 )
101c101
< * bzopen_or_bzdopen
---
>  bzopen_or_bzdopen
101c101
< * bzopen_or_bzdopen
---
>  
101,102c101,102
< * bzopen_or_bzdopen
<                ( )
---
>  bzopen_or_bzdopen
>                 )
101,102c101,102
< * bzopen_or_bzdopen
<                ( )
---
>  
>                 )
101,102c101,102
< * bzopen_or_bzdopen
<                ( )
---
>  bzopen_or_bzdopen
>                ( 
101,102c101,102
< * bzopen_or_bzdopen
<                ( )
---
>  
>                ( 
101,102c101,102
< * bzopen_or_bzdopen
<                ( )
---
>  bzopen_or_bzdopen
>                 
101,102c101,102
< * bzopen_or_bzdopen
<                ( )
---
>  
>                 
101c101
< * bzopen_or_bzdopen
---
> * 
(99.4 %, 1175 bytes)
101c101
<  bzopen_or_bzdopen
---
>  
101,102c101,102
<  bzopen_or_bzdopen
<                ( )
---
>  
>                 )
101,102c101,102
<  bzopen_or_bzdopen
<                ( )
---
>  
>                ( 
101,102c101,102
<  bzopen_or_bzdopen
<                ( )
---
>  
>                 
101c101
<  bzopen_or_bzdopen
---
>  
103c103
< {
---
> 
101,103c101,103
<  bzopen_or_bzdopen
<                ( )
< {
---
>  
>                 )
> 
101,103c101,103
<  bzopen_or_bzdopen
<                ( )
< {
---
>  
>                ( 
> 
101,103c101,103
<  bzopen_or_bzdopen
<                ( )
< {
---
>  
>                 
> 
102c102
<                ( )
---
>                 )
102c102
<                ( )
---
>                 
102,103c102,103
<                ( )
< {
---
>                 )
> 
102,103c102,103
<                ( )
< {
---
>                 
> 
102c102
<                ( )
---
>                 )
104c104
<    int bzerr;
---
>     bzerr;
102c102
<                ( )
---
>                 
104c104
<    int bzerr;
---
>     bzerr;
102,104c102,104
<                ( )
< {
<    int bzerr;
---
>                 )
> 
>     bzerr;
102,104c102,104
<                ( )
< {
<    int bzerr;
---
>                 
> 
>     bzerr;
102c102
<                ( )
---
>                ( 
102,103c102,103
<                ( )
< {
---
>                ( 
> 
102c102
<                ( )
---
>                ( 
104c104
<    int bzerr;
---
>     bzerr;
102,104c102,104
<                ( )
< {
<    int bzerr;
---
>                ( 
> 
>     bzerr;
102c102
<                ( )
---
>                ( 
104c104
<    int bzerr;
---
>    int ;
102,104c102,104
<                ( )
< {
<    int bzerr;
---
>                ( 
> 
>    int ;
102c102
<                ( )
---
>                ( 
104c104
<    int bzerr;
---
>     ;
102,104c102,104
<                ( )
< {
<    int bzerr;
---
>                ( 
> 
>     ;
103c103
< {
---
> 
103,104c103,104
< {
<    int bzerr;
---
> 
>     bzerr;
103,104c103,104
< {
<    int bzerr;
---
> 
>    int ;
103,104c103,104
< {
<    int bzerr;
---
> 
>     ;
103,104c103,104
< {
<    int bzerr;
---
> 
>    int bzerr
103,104c103,104
< {
<    int bzerr;
---
> 
>     bzerr
103,104c103,104
< {
<    int bzerr;
---
> 
>    int 
103,104c103,104
< {
<    int bzerr;
---
> 
>     
104c104
<    int bzerr;
---
>     bzerr;
104c104
<    int bzerr;
---
>     ;
104c104
<    int bzerr;
---
>     bzerr
104c104
<    int bzerr;
---
>     
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>     bzerr;
>     (bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>     ;
>     (bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>     bzerr
>     (bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>     
>     (bzerr == BZ_STREAM_END) ;
104c104
<    int bzerr;
---
>    int ;
104c104
<    int bzerr;
---
>    int 
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int ;
>     (bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int 
>     (bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int ;
>    if bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int 
>    if bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int ;
>     bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int 
>     bzerr == BZ_STREAM_END) ;
104c104
<    int bzerr;
---
>    int bzerr
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     (bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>    if bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     bzerr == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>    if ( == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     ( == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>    if  == BZ_STREAM_END) ;
104,105c104,105
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>      == BZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>     bzerr == BZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>     ( == BZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>      == BZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>     bzerr  BZ_STREAM_END) ;
105c105
<    if (bzerr == BZ_STREAM_END) ;
---
>     (  BZ_STREAM_END) ;
(99.4 %, 1173 bytes)
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr == BZ_STREAM_END) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>      == BZ_STREAM_END) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr  BZ_STREAM_END) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>       BZ_STREAM_END) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr == ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>      == ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr  ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>       ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     ( == BZ_STREAM_END) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (  BZ_STREAM_END) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     ( == ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (  ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     ( == BZ_STREAM_END ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (  BZ_STREAM_END ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     ( ==  ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (   ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr   ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END) 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  ) 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr   
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == ) ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr ==  ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == ) 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr ==  
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == ) ;
> 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr ==  ;
> 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == ) 
> 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr ==  
> 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END ;
> 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END 
> 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END ;
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END ;
> 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END 
> 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
105c105
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
105,106c105,106
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
106c106
< }
---
> 
106c106
< }
---
> 
106c106
< }
---
> 
106c106
< }
---
> 
106c106
< }
---
> 
106c106
< }
---
> 
106c106
< }
---
> 
106c106
< }
---
> 
Termination check: size was 1735; now 1173
===< pass_include_includes :: 0 >===
===< pass_clang :: remove-namespace >===
===< pass_clang :: reduce-pointer-level >===
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_special :: c >===
===< pass_ints :: b >===
===< pass_ints :: d >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-15 >===
10,19c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
---
> BZFILE
10,21c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
---
> #( 
10,24c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
---
> #define );
10,24c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
---
> #define BZ_STREAM_END        ;
11,25d10
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
11,26c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
---
> #* BZ2_bzWriteOpen ( 
11,26c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
---
> #include BZ2_bzWriteOpen ( 
11,26c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
---
> #include <( 
11,27c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
---
> #include <stdioint*  ,      
11,27c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
---
> #include <stdio.*  ,      
11,27c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
---
> #include <stdio.h,      
13,28c13
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
> FILE* , 
13,28c13
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
> #   * , 
13,28c13
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
> #   define , 
19,29c19
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
---
> int   , 
19,29c19
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
---
> typedef  , 
21,30c21
<  ( 
<             
<            
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
>  int   , 
24,30c24
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
>    , 
24,31c24
<    );
< 
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
---
>    )int    
26,32c26
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
---
> )
26,34c26
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
---
> BZFILE;
26,36c26
< BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
---
> BZFILE* BZ2_bzBuffToBuffDecompress ( 
27,36d26
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
27,36d26
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
27,37c27
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       int*         , 
27,37c27
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       int*  , 
28,37d27
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
28,38c28
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       FILE* ,
28,38c28
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       FILE* ,
29,38d28
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
(99.5 %, 1067 bytes)
26,33c26
< BZFILE;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
> BZFILE, 
28,34c28
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
> int           );
28,34c28
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
> BZ2_bzBuffToBuffDecompress );
29,34c29
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       ;
29,45c29
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
>       charBZFILE* BZ2_bzWriteOpen 
29,45c29
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
>       char*         * BZ2_bzWriteOpen 
30,45c30
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
>       BZ2_bzWriteOpen 
30,46c30
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       unsigned ( int*  ,      
30,46c30
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       unsigned * int*  ,      
31,46c31
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       *  ,      
31,46c31
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       char,      
31,47c31
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
---
>       char*         FILE* , 
32,47c32
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
---
>       * , 
32,47c32
<       unsigned ,
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
---
>       unsigned , 
33,48c33
<       int           , 
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
---
>       int   , 
34,48d33
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
34,49c34
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
---
>       int   ,
34,49c34
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
---
>       int           ,
34,50c34
<       int           );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
---
>       int           )int    )
45,50c45
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
---
> )
45,57c45
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< 
< 
< 
< 
< 
< 
< ;
---
> BZFILE;
45,61c45
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< BZ2_bzRead 
---
> BZFILE* BZ2_bzRead 
(99.6 %, 883 bytes)
45,67c45
< BZFILE;
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< 
<    ; 
< 
< 
< 
< 
<  BZ2_bzReadGetUnused 
<                      (      
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
---
> BZFILEunsigned * ,
49,67c49
< BZ2_bzRead 
<            (  
<               )
< 
<    ; 
< 
< 
< 
< 
<  BZ2_bzReadGetUnused 
<                      (      
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
---
> * ,
50,67c50
<            (  
<               )
< 
<    ; 
< 
< 
< 
< 
<  BZ2_bzReadGetUnused 
<                      (      
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
---
>            ,
51,68c51
<               )
< 
<    ; 
< 
< 
< 
< 
<  BZ2_bzReadGetUnused 
<                      (      
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
---
>               char*         , 
53,68c53
<    ; 
< 
< 
< 
< 
<  BZ2_bzReadGetUnused 
<                      (      
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
---
>    *         , 
58,68c58
<  BZ2_bzReadGetUnused 
<                      (      
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
---
>  , 
59,69c59
<                      (      
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
---
>                      unsigned ,
60,69c60
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
---
>                        ,
60,70c60
<                        int)
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
---
>                        intint           ,
61,70c61
< ;
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
---
> ,
65,71c65
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int            )
---
> int            )
(99.7 %, 641 bytes)
51,67c51
<               char*         , 
<                              unsigned ,
<                              int           ,
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>               bzerr;
51,67c51
<               char*         , 
<                              unsigned ,
<                              int           ,
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>               char;
51,68c51
<               char*         , 
<                              unsigned ,
<                              int           ,
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>               char*         (bzerr == BZ_STREAM_END) ;
52,68c52
<                              unsigned ,
<                              int           ,
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                              bzerr == BZ_STREAM_END) ;
52,68c52
<                              unsigned ,
<                              int           ,
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                              unsigned == BZ_STREAM_END) ;
53,68c53
<                              int           ,
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                              BZ_STREAM_END) ;
53,68c53
<                              int           ,
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                              int           ) ;
54,68c54
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                              ;
54,69c54
<                              int            )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
---
>                              int            }
55,73d54
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
64,72d63
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
65,73c65
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                
\ No newline at end of file
65,73c65
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                ( 
\ No newline at end of file
66,73d65
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
67,73c67
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
67,73c67
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
67,73c67
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
68,73c68
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
68,73c68
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (
\ No newline at end of file
68,73c68
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
68,73c68
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
68,73c68
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
68,73c68
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
69,73d68
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> <stdio.h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #stdio.h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define .h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        h>
11c11
< #include <stdio.h>
---
> >
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API 
---
> ##   define BZ_API 
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include define BZ_API 
11,13c11
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include <BZ_API 
11,19c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
---
> #include <stdiotypedef  BZFILE
11,19c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
---
> #include <stdio.BZFILE
11,21c11
< #include <stdio.h>
< 
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
---
> #include <stdio.h( 
13,24c13
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
---
> );
13,24c13
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
---
> #   ;
13,26c13
< #   define BZ_API 
<      
< 
< 
< 
< 
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE;
---
> #   define BZFILE;
19,26c19
< typedef  BZFILE
< 
<  ( 
<             
<            
<    );
< 
< BZFILE;
---
> ;
(99.7 %, 570 bytes)
13,16c13
< #   define BZFILE;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> #   define , 
13,17c13
< #   define BZFILE;
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
> #   define BZFILEunsigned * ,
15,17c15
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
> * ,
15,17c15
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
> BZ2_bzBuffToBuffDecompress ,
17,18d16
<       unsigned * ,
<       char*         , 
17,18d16
<       unsigned * ,
<       char*         , 
(99.7 %, 528 bytes)
16,18c16
<       char*         , 
<       unsigned ,
<       int           , 
---
>       , 
16,19c16
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       charint           );
16,19c16
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       char*         );
17,19c17
<       unsigned ,
<       int           , 
<       int           );
---
>       ;
(99.8 %, 465 bytes)
16,33c16
<       char*         );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE;
< 
< 
< 
< BZ2_bzRead 
<            (  
<               char*         , 
---
>       char*         char*         , 
16,33c16
<       char*         );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE;
< 
< 
< 
< BZ2_bzRead 
<            (  
<               char*         , 
---
>       char*         )*         , 
27,33c27
< BZFILE;
< 
< 
< 
< BZ2_bzRead 
<            (  
<               char*         , 
---
> , 
27,34c27
< BZFILE;
< 
< 
< 
< BZ2_bzRead 
<            (  
<               char*         , 
<                              unsigned ,
---
> BZFILEunsigned ,
31,34c31
< BZ2_bzRead 
<            (  
<               char*         , 
<                              unsigned ,
---
> ,
32,35c32
<            (  
<               char*         , 
<                              unsigned ,
<                              int           ,
---
>            int           ,
33,35c33
<               char*         , 
<                              unsigned ,
<                              int           ,
---
>               ,
33,36c33
<               char*         , 
<                              unsigned ,
<                              int           ,
<                              int            )
---
>               charint            )
33,36c33
<               char*         , 
<                              unsigned ,
<                              int           ,
<                              int            )
---
>               char*         )
34,37c34
<                              unsigned ,
<                              int           ,
<                              int            )
< ;
---
>                              ;
(99.8 %, 333 bytes)
33,46c33
<               char*         )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>               char*         int bzerr;
34,46c34
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> bzerr;
43,46c43
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
>  ;
44,47c44
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                (bzerr == BZ_STREAM_END) ;
44,47c44
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                ( bzerr == BZ_STREAM_END) ;
45,47c45
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> == BZ_STREAM_END) ;
46,47c46
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    BZ_STREAM_END) ;
46,47c46
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int ) ;
47d46
<     (bzerr == BZ_STREAM_END) ;
47,48c47
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     }
47,52c47
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (
\ No newline at end of file
47,52c47
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
47,52c47
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
47,52c47
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
47,52c47
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
48,52d47
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
10c10
< #define BZ_STREAM_END        4
---
> BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
> #4
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define #include <stdio.h>
10,11c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
---
> #define BZ_STREAM_END        include <stdio.h>
11c11
< #include <stdio.h>
---
> <stdio.h>
11c11
< #include <stdio.h>
---
> #stdio.h>
11c11
< #include <stdio.h>
---
> #include .h>
11c11
< #include <stdio.h>
---
> #include <h>
11c11
< #include <stdio.h>
---
> #include <stdio>
11,13c11
< #include <stdio.h>
< 
< #   define BZFILE;
---
> #include <stdio.#   define BZFILE;
11,13c11
< #include <stdio.h>
< 
< #   define BZFILE;
---
> #include <stdio.hdefine BZFILE;
13c13
< #   define BZFILE;
---
> BZFILE;
13c13
< #   define BZFILE;
---
> #   ;
13,15c13
< #   define BZFILE;
< 
< BZ2_bzBuffToBuffDecompress ( 
---
> #   define BZ2_bzBuffToBuffDecompress ( 
13,15c13
< #   define BZFILE;
< 
< BZ2_bzBuffToBuffDecompress ( 
---
> #   define BZFILE( 
15,16c15
< BZ2_bzBuffToBuffDecompress ( 
<       char*         );
---
> char*         );
15,16c15
< BZ2_bzBuffToBuffDecompress ( 
<       char*         );
---
> BZ2_bzBuffToBuffDecompress *         );
16c16
<       char*         );
---
>       );
(99.8 %, 322 bytes)
13,14d12
< BZFILE;
< 
13,15c13
< BZFILE;
< 
< BZ2_bzBuffToBuffDecompress ( 
---
> BZFILE( 
15,16c15
< BZ2_bzBuffToBuffDecompress ( 
<       char*         );
---
> char*         );
15,16c15
< BZ2_bzBuffToBuffDecompress ( 
<       char*         );
---
> BZ2_bzBuffToBuffDecompress *         );
16c16
<       char*         );
---
>       );
(99.8 %, 313 bytes)
13,14c13
< BZ2_bzBuffToBuffDecompress ( 
<       char*         );
---
> char*         );
13,14c13
< BZ2_bzBuffToBuffDecompress ( 
<       char*         );
---
> BZ2_bzBuffToBuffDecompress *         );
14c14
<       char*         );
---
>       );
14c14
<       char*         );
---
>       char;
14,25c14
<       char*         );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE;
---
>       char*         BZFILE;
17,27d16
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE;
< 
< 
(99.9 %, 299 bytes)
14,25c14
<       );
< 
< 
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE;
---
>       BZFILE;
17,27d16
<    
< 
< 
< 
< 
< 
< 
< 
< BZFILE;
< 
< 
25,28d24
< BZFILE;
< 
< 
< 
(99.9 %, 278 bytes)
14,19c14
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
---
>       )(  
18,20c18
< BZ2_bzRead 
<            (  
<               char*         )
---
> char*         )
19,20c19
<            (  
<               char*         )
---
>            *         )
20c20
<               char*         )
---
>               )
20,21c20
<               char*         )
< ;
---
>               char;
20,30c20
<               char*         )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
---
>               char*         bzopen_or_bzdopen
21,31c21
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
---
> ( )
30,31c30
<  bzopen_or_bzdopen
<                ( )
---
>  )
31,32c31
<                ( )
< {
---
>                {
31,33c31
<                ( )
< {
<    int bzerr;
---
>                ( int bzerr;
32,33c32
< {
<    int bzerr;
---
> bzerr;
(99.9 %, 264 bytes)
20,30c20
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
---
>               bzopen_or_bzdopen
21,31c21
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
---
> ( )
30,31c30
<  bzopen_or_bzdopen
<                ( )
---
>  )
31,32c31
<                ( )
< {
---
>                {
31,33c31
<                ( )
< {
<    int bzerr;
---
>                ( int bzerr;
32,33c32
< {
<    int bzerr;
---
> bzerr;
33c33
<    int bzerr;
---
>    ;
33,34c33
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int (bzerr == BZ_STREAM_END) ;
33,34c33
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerrbzerr == BZ_STREAM_END) ;
34c34
<     (bzerr == BZ_STREAM_END) ;
---
>     == BZ_STREAM_END) ;
34c34
<     (bzerr == BZ_STREAM_END) ;
---
>     (BZ_STREAM_END) ;
34c34
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr ) ;
34c34
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == ;
34,35c34
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END}
34,39c34
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
35,39d34
< }
< 
< 
< 
<  
\ No newline at end of file
Termination check: size was 1173; now 264
===< pass_balanced :: curly-only >===
32c32
< {
---
> 
35c35
< }
---
> 
===< pass_clang :: return-void >===
===< pass_clang :: simplify-if >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-dependent-name >===
===< pass_unifdef :: 0 >===
===< pass_comments :: 0 >===
===< pass_ints :: a >===
===< pass_clex :: rm-toks-15 >===
10,17d9
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
10,19c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
---
> #(  
10,20c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
---
> #define )
10,21c10
< #define BZ_STREAM_END        4
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
---
> #define BZ_STREAM_END        ;
11,30c11
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
---
> bzopen_or_bzdopen
11,31c11
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
---
> #( )
11,31c11
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
---
> #include )
11,32c11
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
---
> #include <{
11,33c11
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> #include <stdioint bzerr;
11,33c11
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> #include <stdio.bzerr;
11,33c11
< #include <stdio.h>
< 
< BZ2_bzBuffToBuffDecompress ( 
<       );
< 
< 
< 
< BZ2_bzRead 
<            (  
<               )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
<  bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> #include <stdio.h;
(99.9 %, 148 bytes)
11,20d10
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
12,20c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                
\ No newline at end of file
12,20c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                ( 
\ No newline at end of file
13,20d12
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20d15
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-12 >===
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> bzerr == BZ_STREAM_END) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #== BZ_STREAM_END) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #define BZ_STREAM_END) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #define BZ_STREAM_END        ) ;
11,15c11
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> ;
12,16c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
---
>                }
12,20c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                ( 
\ No newline at end of file
13,20d12
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20d15
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-7 >===
10,12d9
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
10,14c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> #int bzerr;
10,14c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> #define bzerr;
10,14c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> #define BZ_STREAM_END        ;
11,15c11
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> (bzerr == BZ_STREAM_END) ;
12,15c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                bzerr == BZ_STREAM_END) ;
12,15c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                ( == BZ_STREAM_END) ;
13,15c13
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> BZ_STREAM_END) ;
14,15c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    ) ;
14,15c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int ;
14,16c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
---
>    int bzerr}
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20d15
< }
< 
< 
< 
<  
\ No newline at end of file
Termination check: size was 264; now 148
===< pass_ternary :: c >===
===< pass_balanced :: curly >===
13,16c13
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
---
> 
===< pass_balanced :: angles-only >===
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: remove-unused-function >===
11,16c11
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
---
> 
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-array-index-var >===
===< pass_unifdef :: 0 >===
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-14 >===
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> BZ_STREAM_END) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #define ;
10,16c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
---
> #define BZ_STREAM_END        }
11,20d10
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
12,20c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                
\ No newline at end of file
12,20c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                ( 
\ No newline at end of file
13,20d12
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20d15
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-13 >===
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> == BZ_STREAM_END) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #BZ_STREAM_END) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #define ) ;
10,15c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> #define BZ_STREAM_END        ;
11,15d10
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
12,20c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                
\ No newline at end of file
12,20c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>                ( 
\ No newline at end of file
13,20d12
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
14,20c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20d15
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-5 >===
10,12c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> ( )
10,12c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> #)
10,13c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
---
> #define {
10,14c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> #define BZ_STREAM_END        int bzerr;
11,14c11
< bzopen_or_bzdopen
<                ( )
< {
<    int bzerr;
---
> bzerr;
12,14c12
<                ( )
< {
<    int bzerr;
---
>                ;
12,15c12
<                ( )
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>                ( (bzerr == BZ_STREAM_END) ;
13,15c13
< {
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
> bzerr == BZ_STREAM_END) ;
14,15c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    == BZ_STREAM_END) ;
14,15c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int BZ_STREAM_END) ;
14,15c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     ;
15,16c15
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (}
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == 
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END
\ No newline at end of file
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20d15
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
10c10
< #define BZ_STREAM_END        4
---
> BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
> #4
10,11c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> #define bzopen_or_bzdopen
10,12c10
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> #define BZ_STREAM_END        ( )
11,12c11
< bzopen_or_bzdopen
<                ( )
---
> )
12,13c12
<                ( )
< {
---
>                {
12,14c12
<                ( )
< {
<    int bzerr;
---
>                ( int bzerr;
13,14c13
< {
<    int bzerr;
---
> bzerr;
14c14
<    int bzerr;
---
>    ;
14,15c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int (bzerr == BZ_STREAM_END) ;
14,15c14
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerrbzerr == BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     == BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == ;
15,16c15
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END}
15,20c15
<     (bzerr == BZ_STREAM_END) ;
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20d15
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
10c10
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
>  BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
> define         4
10c10
< #define BZ_STREAM_END        4
---
>          4
10c10
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        
10c10
< #define BZ_STREAM_END        4
---
>  BZ_STREAM_END        
10c10
< #define BZ_STREAM_END        4
---
> define         
10c10
< #define BZ_STREAM_END        4
---
>          
10c10
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        4
10c10
< #define BZ_STREAM_END        4
---
> #         4
10c10
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        
10c10
< #define BZ_STREAM_END        4
---
> #         
10,11c10,11
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> # BZ_STREAM_END        4
> 
10,11c10,11
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> #         4
> 
10,11c10,11
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> # BZ_STREAM_END        
> 
10,11c10,11
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> #         
> 
10c10
< #define BZ_STREAM_END        4
---
> #define         4
10c10
< #define BZ_STREAM_END        4
---
> #define         
10,11c10,11
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> #define         4
> 
10,11c10,11
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> #define         
> 
10c10
< #define BZ_STREAM_END        4
---
> #define         4
12c12
<                ( )
---
>                 )
10c10
< #define BZ_STREAM_END        4
---
> #define         
12c12
<                ( )
---
>                 )
10,12c10,12
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> #define         4
> 
>                 )
10,12c10,12
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> #define         
> 
>                 )
10c10
< #define BZ_STREAM_END        4
---
> #define BZ_STREAM_END        
10,11c10,11
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
---
> #define BZ_STREAM_END        
> 
10c10
< #define BZ_STREAM_END        4
---
> #define BZ_STREAM_END        
12c12
<                ( )
---
>                 )
10,12c10,12
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> #define BZ_STREAM_END        
> 
>                 )
10c10
< #define BZ_STREAM_END        4
---
> #define BZ_STREAM_END        
12c12
<                ( )
---
>                ( 
10,12c10,12
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> #define BZ_STREAM_END        
> 
>                ( 
10c10
< #define BZ_STREAM_END        4
---
> #define BZ_STREAM_END        
12c12
<                ( )
---
>                 
10,12c10,12
< #define BZ_STREAM_END        4
< bzopen_or_bzdopen
<                ( )
---
> #define BZ_STREAM_END        
> 
>                 
11c11
< bzopen_or_bzdopen
---
> 
11,12c11,12
< bzopen_or_bzdopen
<                ( )
---
> 
>                 )
11,12c11,12
< bzopen_or_bzdopen
<                ( )
---
> 
>                ( 
11,12c11,12
< bzopen_or_bzdopen
<                ( )
---
> 
>                 
11c11
< bzopen_or_bzdopen
---
> 
13c13
< {
---
> 
11,13c11,13
< bzopen_or_bzdopen
<                ( )
< {
---
> 
>                 )
> 
11,13c11,13
< bzopen_or_bzdopen
<                ( )
< {
---
> 
>                ( 
> 
11,13c11,13
< bzopen_or_bzdopen
<                ( )
< {
---
> 
>                 
> 
12c12
<                ( )
---
>                 )
12c12
<                ( )
---
>                 
12,13c12,13
<                ( )
< {
---
>                 )
> 
12,13c12,13
<                ( )
< {
---
>                 
> 
12c12
<                ( )
---
>                 )
14c14
<    int bzerr;
---
>     bzerr;
12c12
<                ( )
---
>                 
14c14
<    int bzerr;
---
>     bzerr;
12,14c12,14
<                ( )
< {
<    int bzerr;
---
>                 )
> 
>     bzerr;
12,14c12,14
<                ( )
< {
<    int bzerr;
---
>                 
> 
>     bzerr;
12c12
<                ( )
---
>                ( 
12,13c12,13
<                ( )
< {
---
>                ( 
> 
12c12
<                ( )
---
>                ( 
14c14
<    int bzerr;
---
>     bzerr;
12,14c12,14
<                ( )
< {
<    int bzerr;
---
>                ( 
> 
>     bzerr;
12c12
<                ( )
---
>                ( 
14c14
<    int bzerr;
---
>    int ;
12,14c12,14
<                ( )
< {
<    int bzerr;
---
>                ( 
> 
>    int ;
12c12
<                ( )
---
>                ( 
14c14
<    int bzerr;
---
>     ;
12,14c12,14
<                ( )
< {
<    int bzerr;
---
>                ( 
> 
>     ;
13c13
< {
---
> 
13,14c13,14
< {
<    int bzerr;
---
> 
>     bzerr;
13,14c13,14
< {
<    int bzerr;
---
> 
>    int ;
13,14c13,14
< {
<    int bzerr;
---
> 
>     ;
13,14c13,14
< {
<    int bzerr;
---
> 
>    int bzerr
13,14c13,14
< {
<    int bzerr;
---
> 
>     bzerr
13,14c13,14
< {
<    int bzerr;
---
> 
>    int 
13,14c13,14
< {
<    int bzerr;
---
> 
>     
14c14
<    int bzerr;
---
>     bzerr;
14c14
<    int bzerr;
---
>     ;
14c14
<    int bzerr;
---
>     bzerr
14c14
<    int bzerr;
---
>     
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr;
>     bzerr == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>     ;
>     bzerr == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr
>     bzerr == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>     
>     bzerr == BZ_STREAM_END) ;
14c14
<    int bzerr;
---
>    int ;
14c14
<    int bzerr;
---
>    int 
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int ;
>     bzerr == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int 
>     bzerr == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int ;
>     ( == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int 
>     ( == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int ;
>      == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int 
>      == BZ_STREAM_END) ;
14c14
<    int bzerr;
---
>    int bzerr
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     bzerr == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     ( == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>      == BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     (bzerr  BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     bzerr  BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>     (  BZ_STREAM_END) ;
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int bzerr
>       BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr == BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>      == BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr  BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>       BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr == ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>      == ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     bzerr  ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>       ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     ( == BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (  BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     ( == ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (  ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     ( == BZ_STREAM_END ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (  BZ_STREAM_END ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     ( ==  ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (   ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr   ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END) 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  ) 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr  BZ_STREAM_END 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr   
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == ) ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr ==  ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == ) 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr ==  
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == ) ;
> 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr ==  ;
> 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == ) 
> 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr ==  
> 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END ;
> 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END 
> 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END ;
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END ;
> 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END 
> 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
15c15
<     (bzerr == BZ_STREAM_END) ;
---
>     (bzerr == BZ_STREAM_END) 
15,16c15,16
<     (bzerr == BZ_STREAM_END) ;
< }
---
>     (bzerr == BZ_STREAM_END) 
> 
16c16
< }
---
> 
16c16
< }
---
> 
16c16
< }
---
> 
16c16
< }
---
> 
16c16
< }
---
> 
16c16
< }
---
> 
16c16
< }
---
> 
16c16
< }
---
> 
Termination check: size was 148; now 148
===< pass_clang :: rename-fun >===
11c11
< bzopen_or_bzdopen
---
> fn1
(99.9 %, 134 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
14,15c14,15
<    int bzerr;
<     (bzerr == BZ_STREAM_END) ;
---
>    int a;
>     (a == BZ_STREAM_END) ;
(99.9 %, 126 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
1d0
<  
3,9d1
< 
< 
< 
< 
< 
< 
<                  
11,12c3
< fn1
<                ( )
---
> fn1 (  )
14,15c5,6
<    int a;
<     (a == BZ_STREAM_END) ;
---
>   int a;
>   ( a == BZ_STREAM_END );
17,20d7
< 
< 
< 
<  
\ No newline at end of file
1d0
<  
9c8,9
<                  
---
> 
> 
12c12
<                ( )
---
> ( )
14c14
<    int a;
---
>     int a;
20d19
<  
\ No newline at end of file
1d0
<  
4,15c3,6
< 
< 
< 
< 
< 
<                  
< #define BZ_STREAM_END        4
< fn1
<                ( )
< {
<    int a;
<     (a == BZ_STREAM_END) ;
---
> #define BZ_STREAM_END 4
> fn1() {
>   int a;
>   (a == BZ_STREAM_END);
17,20d7
< 
< 
< 
<  
\ No newline at end of file
(100.0 %, 80 bytes)
5,6c5,6
<   int a;
<   ( a == BZ_STREAM_END );
---
>     int a;
>     ( a == BZ_STREAM_END );
2,4c2,3
< #define BZ_STREAM_END        4
< fn1 (  )
< {
---
> #define BZ_STREAM_END 4
> fn1() {
6c5
<   ( a == BZ_STREAM_END );
---
>   (a == BZ_STREAM_END);
(100.0 %, 84 bytes)
2,6c2,5
< #define BZ_STREAM_END        4
< fn1 (  )
< {
<     int a;
<     ( a == BZ_STREAM_END );
---
> #define BZ_STREAM_END 4
> fn1() {
>   int a;
>   (a == BZ_STREAM_END);
(100.0 %, 68 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 0 times
  method pass_balanced :: angles-only worked 0 times and failed 0 times
  method pass_balanced :: curly worked 69 times and failed 51 times
  method pass_balanced :: curly-only worked 0 times and failed 1 times
  method pass_balanced :: curly2 worked 26 times and failed 12 times
  method pass_balanced :: curly3 worked 6 times and failed 0 times
  method pass_balanced :: parens worked 0 times and failed 0 times
  method pass_balanced :: parens-only worked 0 times and failed 0 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 3 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 1 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 0 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 2 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 19 times and failed 4 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 2 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 33 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 47 times and failed 1040 times
  method pass_clex :: rm-toks-1 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-10 worked 1 times and failed 218 times
  method pass_clex :: rm-toks-11 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-12 worked 0 times and failed 18 times
  method pass_clex :: rm-toks-13 worked 33 times and failed 814 times
  method pass_clex :: rm-toks-14 worked 0 times and failed 246 times
  method pass_clex :: rm-toks-15 worked 174 times and failed 1072 times
  method pass_clex :: rm-toks-16 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-2 worked 36 times and failed 286 times
  method pass_clex :: rm-toks-3 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-4 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-5 worked 6 times and failed 205 times
  method pass_clex :: rm-toks-6 worked 21 times and failed 341 times
  method pass_clex :: rm-toks-7 worked 0 times and failed 18 times
  method pass_clex :: rm-toks-8 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-9 worked 19 times and failed 403 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 0 times and failed 0 times
  method pass_ints :: a worked 134 times and failed 2 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 1 times and failed 0 times
  method pass_peep :: a worked 7 times and failed 4563 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 14 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454558345.68989/bzip2.c' reduced to:

#define BZ_STREAM_END 4
fn1() {
  int a;
  (a == BZ_STREAM_END);
}
1180.08user 241.03system 15:59.74elapsed 148%CPU (0avgtext+0avgdata 60732maxresident)k
224inputs+4612808outputs (2major+93340435minor)pagefaults 0swaps
