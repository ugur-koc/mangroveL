===< 23686 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
5054d5053
< #include <math.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
5054d5053
< #include <errno.h>
5055d5054
< #include <ctype.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
5105d5104
< #     include <fcntl.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
5118d5117
< #   include <fcntl.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5031d5030
< #   ifdef __DJGPP__
5043d5041
< #   endif
6672,6674d6669
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5031,5044d5030
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6672d6657
< #  ifndef __DJGPP__
6674d6658
< #  endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1129,1136d1128
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1138,1220d1129
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
721,723c721
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
1086,1089c1086
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
---
>          if (zPend & 1)  else {
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
1526c1526
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_balanced :: curly2 >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct ; 
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct ;
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct ;
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;;
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) ;
(80.6 %, 39819 bytes)
1025,1080c1025
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1046,1073c1046
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) ;
1053,1055c1053
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i) ; else {
(81.1 %, 38643 bytes)
1135,1187c1135
< {
<    Int32   n;
<    EState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
---
> ;
1219,1230c1219
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
(81.9 %, 37137 bytes)
1167,1178c1167
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
1183,1198c1183
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1210,1242c1210
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.0 %, 36897 bytes)
1172,1187c1172
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1199,1231c1199
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.2 %, 36536 bytes)
1184,1216c1184
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
1238,1250c1238
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
(82.7 %, 35523 bytes)
1206,1218c1206
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
1223,1238c1223
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1249,1257c1249
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1272,1309c1272
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(82.8 %, 35296 bytes)
1211,1226c1211
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1237,1245c1237
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1260,1297c1260
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.0 %, 34941 bytes)
1222,1230c1222
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1245,1282c1245
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1292,1322c1292
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1310,1321c1310
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.3 %, 34129 bytes)
1255,1285c1255
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1273,1284c1273
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.6 %, 33556 bytes)
1265,1268c1265
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> ;
1279,1311c1279
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1322,1363c1322
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.7 %, 33447 bytes)
1276,1308c1276
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1319,1360c1319
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(84.1 %, 32584 bytes)
1287,1328c1287
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1333,1346c1333
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(84.5 %, 31734 bytes)
1292,1305c1292
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1314,1335c1314
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1344,1356c1344
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
(84.6 %, 31528 bytes)
1301,1322c1301
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1331,1343c1331
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
1359,1399c1359
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
(84.7 %, 31285 bytes)
1347,1387c1347
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
1398,1437c1398
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
(85.2 %, 30281 bytes)
1358,1397c1358
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
1389,1392c1389
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm.avail_out > 0) ; else ;      
(85.7 %, 29363 bytes)
1368,1370c1368
< {
<    return BZ_VERSION;
< }
---
> ;
1389,1391c1389
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
(85.7 %, 29339 bytes)
1387,1389c1387
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
1396,1398c1396
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
(85.7 %, 29292 bytes)
1394,1396c1394
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
1401,1410c1401
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
(85.7 %, 29245 bytes)
1399,1408c1399
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
1405,1407c1405
<    } else {
<       return -1;
<    }
---
>    } else ;
(85.7 %, 29220 bytes)
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
1411,1420c1411
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
(85.8 %, 29198 bytes)
1409,1418c1409
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
1413,1415c1413
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK);else{
(85.8 %, 29074 bytes)
1414,1417c1414
< {
<    
<    return 0;
< }
---
> ;
1422,1436c1422
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
(85.8 %, 29055 bytes)
1419,1433c1419
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1424,1429c1424
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
(86.0 %, 28760 bytes)
1424,1441c1424
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;;
1445,1451c1445
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
---
> ;
1733c1733
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1735c1735
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
(86.0 %, 28646 bytes)
1727c1727
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1729c1729
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
===< pass_balanced :: curly3 >===
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] ;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
(86.1 %, 28523 bytes)
833,901c833
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
915,968c915
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
(87.8 %, 24993 bytes)
847,900c847
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
1354,1371c1354
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
(89.1 %, 22249 bytes)
1301,1318c1301
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
1604c1604
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
(89.3 %, 21940 bytes)
1587c1587
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21904 bytes)
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21876 bytes)
===< pass_clang :: callexpr-to-value >===
1279c1279
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(89.3 %, 21849 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(89.4 %, 21821 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,717c716
< static
< Int32 incs[14] ;
---
> 
(89.4 %, 21787 bytes)
716,717c716
< static
< Int32 incs[14] ;
---
> 
833c833
< UInt32 BZ2_crc32Table[256] ;
---
> 
(89.4 %, 21764 bytes)
832c832
< UInt32 BZ2_crc32Table[256] ;
---
> 
846c846
< Int32 BZ2_rNums[512] ;
---
> 
(89.4 %, 21736 bytes)
846c846
< Int32 BZ2_rNums[512] ;
---
> 
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
(89.4 %, 21714 bytes)
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
1178c1178
<    Int32   n, ret;
---
>    Int32   n;
(89.4 %, 21712 bytes)
1178c1178
<    Int32    ret;
---
>    
1300c1300
< static char *bzerrorstrings[] ;
---
> 
(89.4 %, 21699 bytes)
1300c1300
< static char *bzerrorstrings[] ;
---
> 
1391c1391
< Int32   verbosity;
---
> 
(89.4 %, 21668 bytes)
1391c1391
< Int32   verbosity;
---
> 
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(89.4 %, 21650 bytes)
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(89.4 %, 21635 bytes)
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(89.4 %, 21625 bytes)
1392c1392
< Bool      deleteOutputOnInterrupt;
---
> 
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(89.5 %, 21591 bytes)
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(89.5 %, 21576 bytes)
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(89.5 %, 21561 bytes)
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(89.5 %, 21547 bytes)
1393c1393
< Bool       noisy;
---
> 
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(89.5 %, 21530 bytes)
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(89.5 %, 21517 bytes)
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(89.5 %, 21499 bytes)
1394c1394
< Int32     blockSize100k;
---
> 
1395c1395
< Int32   exitValue;
---
> 
(89.5 %, 21475 bytes)
1395c1395
< Int32   exitValue;
---
> 
1407c1407
< Int32   opMode;
---
> 
(89.5 %, 21457 bytes)
1407c1407
< Int32   opMode;
---
> 
1408c1408
< Int32   srcMode;
---
> 
(89.5 %, 21442 bytes)
1408c1408
< Int32   srcMode;
---
> 
1412c1412
< Int32   longestFileName;
---
> 
(89.5 %, 21426 bytes)
1412c1412
< Int32   longestFileName;
---
> 
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
(89.6 %, 21402 bytes)
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
(89.6 %, 21371 bytes)
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
(89.6 %, 21340 bytes)
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
1416c1416
< Char    *progName;
---
> 
(89.6 %, 21309 bytes)
1416c1416
< Char    *progName;
---
> 
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(89.6 %, 21291 bytes)
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
(89.6 %, 21253 bytes)
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
1419c1419
< Int32   workFactor;
---
> 
(89.6 %, 21221 bytes)
1419c1419
< Int32   workFactor;
---
> 
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(89.7 %, 21202 bytes)
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
1585,1586c1585
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21166 bytes)
1584,1585c1584
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
1586,1587c1586
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21128 bytes)
1585,1586c1585
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21088 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_balanced :: parens >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
(89.7 %, 21084 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
(89.7 %, 21080 bytes)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
(89.7 %, 21076 bytes)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
(89.7 %, 21072 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
(89.7 %, 21068 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
(89.7 %, 21064 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
(89.7 %, 21060 bytes)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc);
(89.7 %, 21056 bytes)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree);
(89.7 %, 21052 bytes)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree);
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
(89.7 %, 21036 bytes)
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree);
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
60,65c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
(89.7 %, 21021 bytes)
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
60,65c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
67,70c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
72,74c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
76,80c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
82,84c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress) ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
98,105c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API ( 
107,110c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API ( 
112,117c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API ( 
119,124c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
126,132c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API ( 
134,139c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API ( 
141,147c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API ( 
149,157c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
162,170c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
172,179c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API (
184,186c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
188,191c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
193,196c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API (
198,202c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzread) ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API (
204,208c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API (
210,212c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API (
214,216c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API (
218,221c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) ;
248c248
< #define True  ((Bool)1)
---
> #define True  
248c248
< #define True  ((Bool)1)
---
> #define True  (1)
249c249
< #define False ((Bool)0)
---
> #define False 
249c249
< #define False ((Bool)0)
---
> #define False (0)
(89.7 %, 21015 bytes)
249c249
< #define False ((Bool)0)
---
> #define False 
249c249
< #define False ((Bool)0)
---
> #define False (0)
(89.7 %, 21006 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertH \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
(89.8 %, 20992 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
259c259
<    fprintf(stderr,zf)
---
>    fprintf
(89.8 %, 20982 bytes)
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
259c259
<    fprintf(stderr,zf)
---
>    fprintf
(89.8 %, 20978 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
(89.8 %, 20967 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
(89.8 %, 20959 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
(89.8 %, 20944 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
(89.8 %, 20932 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
(89.8 %, 20913 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
(89.8 %, 20897 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
(89.8 %, 20874 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
(89.8 %, 20854 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
(89.8 %, 20827 bytes)
sh: 0: getcwd() failed: No such file or directory
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
(89.8 %, 20803 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
(89.9 %, 20772 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)
(89.9 %, 20767 bytes)
272c272
< #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->opaque,(nnn),1)
272c272
< #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)
272c272
< #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,,1)
(89.9 %, 20752 bytes)
272c272
< #define BZALLOC (strm->opaque,(nnn),1)
---
> #define BZALLOC 
272c272
< #define BZALLOC (strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->opaque,,1)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
(89.9 %, 20730 bytes)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->bzfree)
(89.9 %, 20725 bytes)
273c273
< #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->opaque,(ppp))
273c273
< #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)
(89.9 %, 20711 bytes)
273c273
< #define BZFREE  (strm->opaque,(ppp))
---
> #define BZFREE  
273c273
< #define BZFREE  (strm->opaque,(ppp))
---
> #define BZFREE  (strm->opaque,)
(89.9 %, 20691 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + )
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK 
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK ( ? 1 : 0)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if                                             \
(89.9 %, 20665 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if                                             \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
(89.9 %, 20649 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
(89.9 %, 20641 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
(89.9 %, 20633 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
(89.9 %, 20621 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
(90.0 %, 20579 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (s->tPos & 0xff);           \
(90.0 %, 20573 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
(90.0 %, 20566 bytes)
599c599
<     cccc = (s->tPos & 0xff);           \
---
>     cccc = ;           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
(90.0 %, 20550 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (c_tPos & 0xff);            \
(90.0 %, 20544 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar);            \
(90.0 %, 20537 bytes)
604c604
<     cccc = (c_tPos & 0xff);            \
---
>     cccc = ;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
(90.0 %, 20522 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
(90.0 %, 20517 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ( & 0xF)
(90.0 %, 20514 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ( & 0xF)
(90.0 %, 20454 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LL                          \
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
(90.0 %, 20449 bytes)
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
(90.0 %, 20446 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ( | (GET_LL4(i) << 16))
(90.0 %, 20403 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
(90.0 %, 20397 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
(90.1 %, 20376 bytes)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
(90.1 %, 20367 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
(90.1 %, 20357 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b)  ? (a) : (b)
(90.1 %, 20340 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b)  ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ( < (b)) ? (a) : (b)
(90.1 %, 20335 bytes)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin  ? (a) : (b)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin ( < (b)) ? (a) : (b)
(90.1 %, 20324 bytes)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ?  : (b)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ? (a) : 
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
(90.1 %, 20321 bytes)
665c665
< #define fmin  ?  : (b)
---
> #define fmin  ?  : 
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
(90.1 %, 20318 bytes)
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
(90.1 %, 20311 bytes)
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[ >> 5] |= (1 << ((zz) & 31))
(90.1 %, 20304 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[ >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= 
(90.1 %, 20300 bytes)
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= 
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << )
(90.1 %, 20296 bytes)
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= 
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << )
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << ( & 31))
(90.1 %, 20278 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
(90.1 %, 20274 bytes)
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~
(90.1 %, 20270 bytes)
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << )
(90.1 %, 20252 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  
(90.1 %, 20248 bytes)
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[ >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[(zz) >> 5] & )
(90.1 %, 20209 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH(zz)  bhtab[ >> 5]
(90.1 %, 20205 bytes)
692c692
< #define      WORD_BH  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[ >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ((zz) & 0x01f)
(90.1 %, 20201 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  
(90.1 %, 20197 bytes)
693c693
< #define UNALIGNED_BH  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  
693c693
< #define UNALIGNED_BH  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ( & 0x01f)
(90.2 %, 20183 bytes)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswap \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
(90.2 %, 20173 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
(90.2 %, 20156 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b)  ? (a) : (b)
(90.2 %, 20151 bytes)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin  ? (a) : (b)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin ( < (b)) ? (a) : (b)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < ) ? (a) : (b)
(90.2 %, 20140 bytes)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ?  : (b)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ? (a) : 
(90.2 %, 20137 bytes)
732c732
< #define mmin  ?  : (b)
---
> #define mmin  ?  : 
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
(90.2 %, 20134 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
(90.2 %, 20124 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
(90.2 %, 20114 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) 
(90.2 %, 20110 bytes)
739c739
< #define mnextsize (nextHi[az]-nextLo[az])
---
> #define mnextsize 
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
(90.2 %, 20087 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
(90.2 %, 20080 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
(90.2 %, 20055 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[ << 8] - ftab[(b) << 8])
(90.2 %, 20052 bytes)
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ 
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[ << 8] - ftab[(b) << 8])
(90.2 %, 20015 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
(90.2 %, 20006 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~)
(90.2 %, 19994 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  ((zz0) & 0xffffff00)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  
(90.2 %, 19989 bytes)
793c793
< #define WEIGHTOF  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  
793c793
< #define WEIGHTOF  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  ( & 0xffffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ((zz1) & 0x000000ff)
(90.3 %, 19969 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ((zz1) & 0x000000ff)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   
(90.3 %, 19964 bytes)
794c794
< #define DEPTHOF   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   
794c794
< #define DEPTHOF   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ( & 0x000000ff)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
(90.3 %, 19944 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) 
(90.3 %, 19935 bytes)
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX 
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ( > (zz3) ? (zz2) : (zz3))
(90.3 %, 19904 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTS                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
(90.3 %, 19895 bytes)
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF+WEIGHTOF(zw2)) |                    \
(90.3 %, 19866 bytes)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOF,DEPTHOF(zw2)))
(90.3 %, 19828 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAP                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
(90.3 %, 19825 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
(90.3 %, 19822 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURN                               \
(90.3 %, 19818 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURN                               \
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
(90.3 %, 19813 bytes)
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
935c935
<    while (True) 
---
>    while  
(90.3 %, 19800 bytes)
935c935
<    while (True) 
---
>    while  
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
(90.3 %, 19794 bytes)
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
(90.3 %, 19785 bytes)
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
(90.4 %, 19774 bytes)
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
(90.4 %, 19765 bytes)
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
(90.4 %, 19754 bytes)
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok 
(90.4 %, 19734 bytes)
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok 
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc 
(90.4 %, 19726 bytes)
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
996c996
< void init_RL ( EState* s )
---
> void init_RL 
1001c1001
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL 
(90.4 %, 19685 bytes)
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
996c996
< void init_RL ( EState* s )
---
> void init_RL 
1001c1001
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL 
1006c1006
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1007,1010c1007
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
(90.4 %, 19672 bytes)
1006c1006
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1007,1010c1007
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress 
(90.4 %, 19662 bytes)
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API 
1057,1059c1057
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      
(90.4 %, 19643 bytes)
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API 
1057,1059c1057
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API ( bz_stream *strm )
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR                    \
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1116,1120c1116
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1127,1130c1127
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1136,1140c1136
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
(90.4 %, 19638 bytes)
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1116,1120c1116
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1127,1130c1127
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1136,1140c1136
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
1145,1151c1145
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_API 
1157,1162c1157
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API ( int *bzerror, BZFILE *b )
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API 
1173,1176c1173
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1181c1181
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
(90.4 %, 19629 bytes)
1181c1181
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1186c1186
<    if (bzf->writing)
---
>    if 
1189c1189
<    if (len == 0)
---
>    if 
1195c1195
<    while (True) 
---
>    while  
1202c1202
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1203,1206c1203
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
(90.4 %, 19622 bytes)
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1186c1186
<    if (bzf->writing)
---
>    if 
1189c1189
<    if (len == 0)
---
>    if 
1195c1195
<    while (True) 
---
>    while  
1202c1202
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1203,1206c1203
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
1215c1215
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API 
1216,1222c1216
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          
1227c1227
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API 
1228,1233c1228
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(void)
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)
1251,1254c1251
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                      
1260c1260
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API
1261,1262c1261
<                ( const char *path,
<                  const char *mode )
---
>                
1267c1267
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API
1268,1269c1268
<                ( int fd,
<                  const char *mode )
---
>                
1274c1274
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1274c1274
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
(90.5 %, 19495 bytes)
1257c1257
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API
1258,1259c1258
<                ( const char *path,
<                  const char *mode )
---
>                
1264c1264
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API
1265,1266c1265
<                ( int fd,
<                  const char *mode )
---
>                
1271c1271
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1271c1271
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (->lastErr == BZ_STREAM_END) return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((b)->lastErr == BZ_STREAM_END) return 0;
1276c1276
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if  ; else ;
1281c1281
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1281c1281
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) 
1286c1286
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API (BZFILE *b)
1286c1286
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) 
1291c1291
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API (BZFILE* b)
1291c1291
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) 
1300c1300
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API (BZFILE *b, int *errnum)
1300c1300
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) 
1342c1342
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOF       
1343c1343
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
1344c1344
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
(90.5 %, 19492 bytes)
sh: 0: getcwd() failed: No such file or directory
1343c1343
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
1344c1344
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
(90.5 %, 19489 bytes)
1344c1344
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
1360c1360
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
(90.5 %, 19486 bytes)
1360c1360
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString
(90.5 %, 19474 bytes)
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString((root), )
(90.5 %, 19458 bytes)
1363c1363
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAG \
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString
(90.5 %, 19446 bytes)
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString((root), )
(90.5 %, 19430 bytes)
1366c1366
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE 
1377c1377
< #define True  ((Bool)1)
---
> #define True  
(90.5 %, 19426 bytes)
1377c1377
< #define True  ((Bool)1)
---
> #define True  
1377c1377
< #define True  ((Bool)1)
---
> #define True  (1)
(90.5 %, 19417 bytes)
1378c1378
< #define False ((Bool)0)
---
> #define False 
1378c1378
< #define False ((Bool)0)
---
> #define False (0)
(90.5 %, 19408 bytes)
1638c1638
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, (s))==0)
1638c1638
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) 
(90.5 %, 19405 bytes)
1638c1638
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG 
1638c1638
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp==0)
(90.5 %, 19379 bytes)
1640c1640
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main 
(90.6 %, 19347 bytes)
===< pass_balanced :: parens-only >===
44c44
<       void *(*bzalloc);
---
>       void **bzalloc;
45c45
<       void (*bzfree);
---
>       void *bzfree;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
(90.6 %, 19345 bytes)
45c45
<       void (*bzfree);
---
>       void *bzfree;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
(90.6 %, 19343 bytes)
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
(90.6 %, 19341 bytes)
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
(90.6 %, 19339 bytes)
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
(90.6 %, 19337 bytes)
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
(90.6 %, 19335 bytes)
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
(90.6 %, 19333 bytes)
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
(90.6 %, 19331 bytes)
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen)  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
(90.6 %, 19329 bytes)
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
(90.6 %, 19327 bytes)
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
(90.6 %, 19325 bytes)
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead)  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
(90.6 %, 19323 bytes)
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen)  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
(90.6 %, 19321 bytes)
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
(90.6 %, 19319 bytes)
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
(90.6 %, 19317 bytes)
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
(90.6 %, 19315 bytes)
149c149
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
(90.6 %, 19313 bytes)
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
(90.6 %, 19311 bytes)
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
(90.6 %, 19309 bytes)
184c184
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
(90.6 %, 19307 bytes)
188c188
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
(90.6 %, 19305 bytes)
193c193
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
(90.6 %, 19303 bytes)
198c198
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN int BZ_APIBZ2_bzread 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
(90.6 %, 19301 bytes)
204c204
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
(90.6 %, 19299 bytes)
210c210
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
(90.6 %, 19297 bytes)
214c214
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) 
221c221
<    );
---
>    ;
248c248
< #define True  (1)
---
> #define True  1
(90.6 %, 19295 bytes)
218c218
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror 
221c221
<    );
---
>    ;
248c248
< #define True  (1)
---
> #define True  1
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
(90.6 %, 19293 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + 900000 / BZ_G_SIZE)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
(90.6 %, 19291 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
---
> #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
(90.6 %, 19289 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
996c996
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
1006c1006
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_APIBZ2_bzCompressInit 
1007c1007
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1010c1010
<                      int        workFactor )
---
>                      int        workFactor 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
(90.6 %, 19287 bytes)
1007c1007
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1010c1010
<                      int        workFactor )
---
>                      int        workFactor 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress)  bz_stream *strm, int action 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
(90.6 %, 19285 bytes)
1042c1042
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress  bz_stream *strm, int action 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)   bz_stream *strm 
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
(90.6 %, 19283 bytes)
1047c1047
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd   bz_stream *strm 
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
1057c1057
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1059c1059
<                        int        small )
---
>                        int        small 
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
(90.6 %, 19281 bytes)
1057c1057
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1059c1059
<                        int        small )
---
>                        int        small 
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress)  bz_stream *strm 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
(90.6 %, 19279 bytes)
1081c1081
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress  bz_stream *strm 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)   bz_stream *strm 
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
(90.6 %, 19277 bytes)
1086c1086
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd   bz_stream *strm 
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
1116c1116
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1120c1120
<                       int   workFactor )
---
>                       int   workFactor 
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
(90.6 %, 19275 bytes)
1116c1116
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1120c1120
<                       int   workFactor )
---
>                       int   workFactor 
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
1127c1127
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1130c1130
<                int     len )
---
>                int     len 
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
(90.6 %, 19273 bytes)
1127c1127
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1130c1130
<                int     len )
---
>                int     len 
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
1136c1136
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1140c1140
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
(90.6 %, 19271 bytes)
1136c1136
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1140c1140
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
1145c1145
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1151c1151
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
(90.6 %, 19269 bytes)
1145c1145
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1151c1151
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
1157c1157
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1162c1162
<                      int   nUnused )
---
>                      int   nUnused 
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
(90.6 %, 19267 bytes)
1157c1157
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1162c1162
<                      int   nUnused )
---
>                      int   nUnused 
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose)  int *bzerror, BZFILE *b 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
(90.6 %, 19265 bytes)
1167c1167
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
1173c1173
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1176c1176
<              int     len )
---
>              int     len 
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1186c1186
<    if (bzf->writing)
---
>    if bzf->writing
1189c1189
<    if (len == 0)
---
>    if len == 0
1195c1195
<    while (True) 
---
>    while True 
1202c1202
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
(90.6 %, 19263 bytes)
1173c1173
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1176c1176
<              int     len )
---
>              int     len 
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1186c1186
<    if (bzf->writing)
---
>    if bzf->writing
1189c1189
<    if (len == 0)
---
>    if len == 0
1195c1195
<    while (True) 
---
>    while True 
1202c1202
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
1203c1203
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1206c1206
<                        int*    nUnused )
---
>                        int*    nUnused 
1215c1215
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
1216c1216
<                          ( char*         dest, 
---
>                           char*         dest, 
1222c1222
<                            int           workFactor )
---
>                            int           workFactor 
(90.6 %, 19261 bytes)
1203c1203
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1206c1206
<                        int*    nUnused )
---
>                        int*    nUnused 
1215c1215
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
1216c1216
<                          ( char*         dest, 
---
>                           char*         dest, 
1222c1222
<                            int           workFactor )
---
>                            int           workFactor 
1227c1227
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
(90.6 %, 19259 bytes)
1216c1216
<                          ( char*         dest, 
---
>                           char*         dest, 
1222c1222
<                            int           workFactor )
---
>                            int           workFactor 
1227c1227
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
1228c1228
<                            ( char*         dest, 
---
>                             char*         dest, 
1233c1233
<                              int           verbosity )
---
>                              int           verbosity 
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
(90.6 %, 19257 bytes)
1228c1228
<                            ( char*         dest, 
---
>                             char*         dest, 
1233c1233
<                              int           verbosity )
---
>                              int           verbosity 
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)void
1257c1257
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
(90.6 %, 19255 bytes)
1243c1243
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersionvoid
1257c1257
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
1258,1259c1258,1259
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
(90.6 %, 19253 bytes)
1257c1257
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
1258,1259c1258,1259
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1264c1264
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
(90.6 %, 19251 bytes)
1258,1259c1258,1259
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1264c1264
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
1265,1266c1265,1266
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1271c1271
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
(90.6 %, 19249 bytes)
1265,1266c1265,1266
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1271c1271
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1271c1271
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) BZFILE* b, void* buf, int len 
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1276c1276
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END ; else ;
1281c1281
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
(90.6 %, 19247 bytes)
1271c1271
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread BZFILE* b, void* buf, int len 
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1276c1276
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END ; else ;
1281c1281
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
1281c1281
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) BZFILE* b, void* buf, int len 
1286c1286
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
(90.6 %, 19245 bytes)
1281c1281
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len 
1286c1286
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
1286c1286
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) BZFILE *b
1291c1291
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
(90.6 %, 19243 bytes)
1286c1286
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzflush BZFILE *b
1291c1291
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
1291c1291
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) BZFILE* b
1300c1300
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
(90.6 %, 19241 bytes)
1291c1291
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE* b
1300c1300
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1300c1300
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) BZFILE *b, int *errnum
(90.6 %, 19239 bytes)
1300c1300
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE *b, int *errnum
===< pass_clang :: remove-namespace >===
===< pass_clang :: local-to-global >===
1171a1172
> bzFile *BZ_APIBZ2_bzRead_bzf = b;
1179c1180
<    bzFile* bzf = b;
---
>    
1186c1187
<    if (bzf->writing)
---
>    if (BZ_APIBZ2_bzRead_bzf->writing)
1192,1193c1193,1194
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_APIBZ2_bzRead_bzf->strm.avail_out = len;
>    BZ_APIBZ2_bzRead_bzf->strm.next_out = buf;
1270a1271
> int BZ_APIBZ2_bzread_bzerr;
1273c1274
<    int bzerr, nread;
---
>    int nread;
1276c1277
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_APIBZ2_bzread_bzerr == BZ_OK || BZ_APIBZ2_bzread_bzerr == BZ_STREAM_END) ; else ;
1270a1271
> int BZ_APIBZ2_bzread_nread;
1273c1274
<    int bzerr, nread;
---
>    int bzerr;
1275c1276
<    nread = 0;
---
>    BZ_APIBZ2_bzread_nread = 0;
(90.6 %, 19277 bytes)
===< pass_clang :: union-to-struct >===
===< pass_clang :: simple-inliner >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
973,975c973
< static
< int bz_config_ok 
< ;
---
> 
979,981c979
< static
< void* default_bzalloc 
< ;
---
> 
1000,1002c1000
< static
< Bool isempty_RL 
< ;
---
> 
(90.6 %, 19251 bytes)
977,979c977
< static
< void* default_bzalloc 
< ;
---
> 
998,1000c998
< static
< Bool isempty_RL 
< ;
---
> 
(90.6 %, 19220 bytes)
996,998c996
< static
< Bool isempty_RL 
< ;
---
> 
1032,1034c1032
< static
< Bool handle_compress 
< ;
---
> 
(90.6 %, 19195 bytes)
1030,1032c1030
< static
< Bool handle_compress 
< ;
---
> 
1237,1238c1237
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
---
> 
(90.6 %, 19165 bytes)
1235,1236c1235
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
---
> 
1241,1244c1241
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
---
> 
(90.7 %, 19124 bytes)
1240,1243c1240
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
---
> 
1632,1633c1632
< IntNative main 
< ;
---
> 
(90.7 %, 19067 bytes)
1629,1630c1629
< IntNative main 
< ;
---
> 
(90.7 %, 19050 bytes)
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: replace-one-level-typedef-type >===
240c240
< typedef char            Char;
---
> 
1092c1092
<       Char      buf[BZ_MAX_UNUSED];
---
>       char      buf[BZ_MAX_UNUSED];
(90.7 %, 19021 bytes)
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: empty-struct-to-int >===
1426,1427c1426
<    struct  
<    UInt64;
---
>    
1606c1606
<    struct zzzz 
---
>     int 
(90.7 %, 19014 bytes)
===< pass_clang :: remove-addr-taken >===
===< pass_indent :: regular >===
1,6d0
<  
< 
< 
< 
< 
< 
11,50c5,40
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
< #define BZ_MEM_ERROR         
< #define BZ_DATA_ERROR        
< #define BZ_DATA_ERROR_MAGIC  
< #define BZ_IO_ERROR          
< #define BZ_UNEXPECTED_EOF    
< #define BZ_OUTBUFF_FULL      
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void **bzalloc;
<       void *bzfree;
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
---
> #define BZ_RUN 0
> #define BZ_FLUSH 1
> #define BZ_FINISH 2
> 
> #define BZ_OK 0
> #define BZ_RUN_OK 1
> #define BZ_FLUSH_OK 2
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
> #define BZ_SEQUENCE_ERROR
> #define BZ_PARAM_ERROR
> #define BZ_MEM_ERROR
> #define BZ_DATA_ERROR
> #define BZ_DATA_ERROR_MAGIC
> #define BZ_IO_ERROR
> #define BZ_UNEXPECTED_EOF
> #define BZ_OUTBUFF_FULL
> #define BZ_CONFIG_ERROR
> 
> typedef struct {
>   char *next_in;
>   unsigned int avail_in;
>   unsigned int total_in_lo32;
>   unsigned int total_in_hi32;
> 
>   char *next_out;
>   unsigned int avail_out;
>   unsigned int total_out_lo32;
>   unsigned int total_out_hi32;
> 
>   void *state;
> 
>   void **bzalloc;
>   void *bzfree;
>   void *opaque;
> } bz_stream;
54,56c44,45
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
---
> #define BZ_API(func) func
> #define BZ_EXTERN extern
57a47,48
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
>                                        int verbosity, int workFactor);
58a50
> BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
60,89c52
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
90a54,55
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
>                                          int small);
91a57
> BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
92a59
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
98,221c65,66
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
>                                        int small, void *unused, int nUnused);
222a68
> BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
223a70,71
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
>                                          int *nUnused);
224a73
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
225a75,77
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
>                                         int blockSize100k, int verbosity,
>                                         int workFactor);
226a79
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
227a81,83
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
>                                       unsigned int *nbytes_in,
>                                       unsigned int *nbytes_out);
228a85,89
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
>                                         unsigned int *nbytes_in_lo32,
>                                         unsigned int *nbytes_in_hi32,
>                                         unsigned int *nbytes_out_lo32,
>                                         unsigned int *nbytes_out_hi32);
229a91,95
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
>                                              char *source,
>                                              unsigned int sourceLen,
>                                              int blockSize100k, int verbosity,
>                                              int workFactor);
231c97,101
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
>                                                unsigned int *destLen,
>                                                char *source,
>                                                unsigned int sourceLen,
>                                                int small, int verbosity);
233c103
< #include <stdlib.h>
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
234a105
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
235a107
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
236a109
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
238c111
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
239a113
> BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
241,273c115
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  1
< #define False 
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH \
<    
< #define AssertD \
<    
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
<    fprintf
< #define VPrintf3 \
<    fprintf
< #define VPrintf4 \
<    fprintf
< #define VPrintf5 \
<    fprintf
< 
< 
< #define BZALLOC 
< #define BZFREE  
---
> BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
274a117
> BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
275a119
> #define _BZLIB_PRIVATE_H
276a121
> #include <stdlib.h>
278,282c123
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
---
> #define BZ_VERSION "1.0.2, 30-Dec-2001"
283a125,155
> typedef unsigned char Bool;
> typedef unsigned char UChar;
> typedef int Int32;
> typedef unsigned int UInt32;
> typedef short Int16;
> typedef unsigned short UInt16;
> 
> #define True 1
> #define False
> 
> #define __inline__
> 
> extern void BZ2_bz__AssertH__fail(int errcode);
> #define AssertH
> 
> #define AssertD
> 
> #define VPrintf0 fprintf
> #define VPrintf1 fprintf
> #define VPrintf2 fprintf
> #define VPrintf3 fprintf
> #define VPrintf4 fprintf
> #define VPrintf5 fprintf
> 
> #define BZALLOC
> #define BZFREE
> 
> #define BZ_HDR_B 0x42
> #define BZ_HDR_Z 0x5a
> #define BZ_HDR_h 0x68
> #define BZ_HDR_0 0x30
286c158
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN 23
292,293c164,165
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE 50
> #define BZ_N_ITERS 4
296a169,171
> #define BZ_RAND_DECLS                                                          \
>   Int32 rNToGo;                                                                \
>   Int32 rTPos
297a173,175
> #define BZ_RAND_INIT_MASK                                                      \
>   s->rNToGo = 0;                                                               \
>   s->rTPos = 0
298a177
> #define BZ_RAND_MASK
299a179,181
> #define BZ_RAND_UPD_MASK                                                       \
>   if                                                                           \
>     s->rNToGo--;
300a183
> #define BZ_INITIALISE_CRC
301a185
> #define BZ_FINALISE_CRC
303,329c187
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 
< 
< #define BZ_RAND_UPD_MASK                       \
<    if                                             \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC              \
< 
< 
< #define BZ_FINALISE_CRC                \
< 
< 
< #define BZ_UPDATE_CRC              \
---
> #define BZ_UPDATE_CRC
331,338c189,191
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_IDLE 1
> #define BZ_M_RUNNING 2
> #define BZ_M_FLUSHING 3
341,342c194,195
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_S_OUTPUT 1
> #define BZ_S_INPUT 2
347,426c200
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
---
> #define BZ_N_OVERSHOOT
427a202
> typedef struct {
428a204
>   bz_stream *strm;
429a206,207
>   Int32 mode;
>   Int32 state;
430a209,257
>   UInt32 avail_in_expect;
> 
>   UInt32 *arr1;
>   UInt32 *arr2;
>   UInt32 *ftab;
>   Int32 origPtr;
> 
>   UInt32 *ptr;
>   UChar *block;
>   UInt16 *mtfv;
>   UChar *zbits;
> 
>   Int32 workFactor;
> 
>   UInt32 state_in_ch;
>   Int32 state_in_len;
>   BZ_RAND_DECLS;
> 
>   Int32 nblock;
>   Int32 nblockMAX;
>   Int32 numZ;
>   Int32 state_out_pos;
> 
>   Int32 nInUse;
>   Bool inUse[256];
>   UChar unseqToSeq[256];
> 
>   UInt32 bsBuff;
>   Int32 bsLive;
> 
>   UInt32 blockCRC;
>   UInt32 combinedCRC;
> 
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
> 
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
> 
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
> 
> } EState;
436,491c263,306
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
---
> #define BZ_X_IDLE 1
> #define BZ_X_OUTPUT 2
> 
> #define BZ_X_MAGIC_1 10
> #define BZ_X_MAGIC_2 11
> #define BZ_X_MAGIC_3 12
> #define BZ_X_MAGIC_4 13
> #define BZ_X_BLKHDR_1 14
> #define BZ_X_BLKHDR_2 15
> #define BZ_X_BLKHDR_3 16
> #define BZ_X_BLKHDR_4 17
> #define BZ_X_BLKHDR_5 18
> #define BZ_X_BLKHDR_6 19
> #define BZ_X_BCRC_1 20
> #define BZ_X_BCRC_2 21
> #define BZ_X_BCRC_3 22
> #define BZ_X_BCRC_4 23
> #define BZ_X_RANDBIT 24
> #define BZ_X_ORIGPTR_1 25
> #define BZ_X_ORIGPTR_2 26
> #define BZ_X_ORIGPTR_3 27
> #define BZ_X_MAPPING_1 28
> #define BZ_X_MAPPING_2 29
> #define BZ_X_SELECTOR_1 30
> #define BZ_X_SELECTOR_2 31
> #define BZ_X_SELECTOR_3 32
> #define BZ_X_CODING_1 33
> #define BZ_X_CODING_2 34
> #define BZ_X_CODING_3 35
> #define BZ_X_MTF_1 36
> #define BZ_X_MTF_2 37
> #define BZ_X_MTF_3 38
> #define BZ_X_MTF_4 39
> #define BZ_X_MTF_5 40
> #define BZ_X_MTF_6 41
> #define BZ_X_ENDHDR_2 42
> #define BZ_X_ENDHDR_3 43
> #define BZ_X_ENDHDR_4 44
> #define BZ_X_ENDHDR_5 45
> #define BZ_X_ENDHDR_6 46
> #define BZ_X_CCRC_1 47
> #define BZ_X_CCRC_2 48
> #define BZ_X_CCRC_3 49
> #define BZ_X_CCRC_4 50
495a311
> typedef struct {
496a313
>   bz_stream *strm;
497a315
>   Int32 state;
498a317,415
>   UChar state_out_ch;
>   Int32 state_out_len;
>   Bool blockRandomised;
>   BZ_RAND_DECLS;
> 
>   UInt32 bsBuff;
>   Int32 bsLive;
> 
>   Int32 blockSize100k;
>   Bool smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity;
> 
>   Int32 origPtr;
>   UInt32 tPos;
>   Int32 k0;
>   Int32 unzftab[256];
>   Int32 nblock_used;
>   Int32 cftab[257];
>   Int32 cftabCopy[257];
> 
>   UInt32 *tt;
> 
>   UInt16 *ll16;
>   UChar *ll4;
> 
>   UInt32 storedBlockCRC;
>   UInt32 storedCombinedCRC;
>   UInt32 calculatedBlockCRC;
>   UInt32 calculatedCombinedCRC;
> 
>   Int32 nInUse;
>   Bool inUse[256];
>   Bool inUse16[16];
>   UChar seqToUnseq[256];
> 
>   UChar mtfa[MTFA_SIZE];
>   Int32 mtfbase[256 / MTFL_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 minLens[BZ_N_GROUPS];
> 
>   Int32 save_i;
>   Int32 save_j;
>   Int32 save_t;
>   Int32 save_alphaSize;
>   Int32 save_nGroups;
>   Int32 save_nSelectors;
>   Int32 save_EOB;
>   Int32 save_groupNo;
>   Int32 save_groupPos;
>   Int32 save_nextSym;
>   Int32 save_nblockMAX;
>   Int32 save_nblock;
>   Int32 save_es;
>   Int32 save_N;
>   Int32 save_curr;
>   Int32 save_zt;
>   Int32 save_zn;
>   Int32 save_zvec;
>   Int32 save_zj;
>   Int32 save_gSel;
>   Int32 save_gMinlen;
>   Int32 *save_gLimit;
>   Int32 *save_gBase;
>   Int32 *save_gPerm;
> 
> } DState;
> 
> #define BZ_GET_FAST                                                            \
>   s->tPos = s->tt[s->tPos];                                                    \
>   cccc = ;                                                                     \
>   s->tPos >>= 8;
> 
> #define BZ_GET_FAST_C                                                          \
>   c_tPos = c_tt[c_tPos];                                                       \
>   cccc = ;                                                                     \
>   c_tPos >>= 8;
> 
> #define SET_LL4
> 
> #define GET_LL4
> 
> #define SET_LL
> 
> #define GET_LL
> 
> #define BZ_GET_SMALL                                                           \
>   cccc = BZ2_indexIntoF;                                                       \
>   s->tPos = GET_LL;
> 
> extern Int32 BZ2_decompress(DState *);
> 
> #define fswap
500,655c417
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = ;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = ;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4                                          \
<    
< 
< #define GET_LL4                             \
<    
< 
< #define SET_LL                          \
<    
< 
< #define GET_LL \
<    
< 
< #define BZ_GET_SMALL                            \
<       cccc = BZ2_indexIntoF ;    \
<       s->tPos = GET_LL;
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> #define fvswap
656a419
> #define fmin ?:
658,659c421
< #define fswap \
<    
---
> #define fpush
661,669c423
< #define fvswap       \
< 
< 
< 
< #define fmin  ?  : 
< 
< #define fpush 
< 
< #define fpop 
---
> #define fpop
672,675c426
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
---
> #define FALLBACK_QSORT_STACK_SIZE 100
685,700c436,445
< 
< 
< 
< 
< #define       SET_BH  bhtab[ >> 5] |= 
< #define     CLEAR_BH  bhtab[ >> 5] &= ~
< #define     ISSET_BH  
< #define      WORD_BH  bhtab[ >> 5]
< #define UNALIGNED_BH  
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #define SET_BH bhtab[ >> 5] |=
> #define CLEAR_BH bhtab[ >> 5] &= ~
> #define ISSET_BH
> #define WORD_BH bhtab[ >> 5]
> #define UNALIGNED_BH
> 
> #undef SET_BH
> #undef CLEAR_BH
> #undef ISSET_BH
> #undef WORD_BH
702a448
> #define mswap
703a450
> #define mvswap
704a452
> #define mmin ?:
705a454
> #define mpush
706a456
> #define mpop
707a458
> #define mnextsize
709,743c460
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap \
<    
< 
< #define mvswap       \
< 
< 
< 
< 
< #define mmin  ?  : 
< 
< #define mpush 
< 
< #define mpop 
< 
< 
< #define mnextsize 
< 
< #define mnextswap                                        \
<    
< 
---
> #define mnextswap
746c463
< #define MAIN_QSORT_DEPTH_THRESH 
---
> #define MAIN_QSORT_DEPTH_THRESH
749,750d465
< 
< 
762,770c477,479
< 
< 
< 
< 
< #define BIGFREQ 
< #define SETMASK 
< #define CLEARMASK 
< 
< 
---
> #define BIGFREQ
> #define SETMASK
> #define CLEARMASK
775a485,487
> #define WEIGHTOF
> #define DEPTHOF
> #define MYMAX
776a489
> #define ADDWEIGHTS |
777a491
> #define UPHEAP
778a493
> #define DOWNHEAP
779a495
> #define bsNEEDW
780a497
> static void makeMaps_e(EState *s);
781a499
> static void generateMTFValues(EState *s);
782a501,502
> #define BZ_LESSER_ICOST 0
> #define BZ_GREATER_ICOST 15
783a504
> #define RETURN ;
784a506,509
> #define GET_BITS                                                               \
>   case lll:                                                                    \
>     s->state = lll;                                                            \
>     while
785a511
> #define GET_UCHAR GET_BITS
786a513
> #define GET_BIT GET_BITS
787a515
> #define GET_MTF_VAL
788a517
> Int32 BZ2_decompress(DState *s);
789a519
> void BZ2_bz__AssertH__fail(int errcode);
790a521
> static void default_bzfree(void *opaque, void *addr);
791a523
> static void prepare_new_block(EState *s);
793,864c525
< #define WEIGHTOF  
< #define DEPTHOF   
< #define MYMAX 
< 
< #define ADDWEIGHTS                           \
<     |                    \
<    
< 
< #define UPHEAP                                     \
< 
< 
< #define DOWNHEAP                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> static void init_RL(EState *s);
865a527,528
> int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
>                              int workFactor);
866a530
> #define ADD_CHAR_TO_BLOCK
867a532
> int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
868a534
> int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
869a536
> int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
870a538
> static void unRLE_obuf_to_output_FAST(DState *s);
872c540
< #define bsNEEDW                           \
---
> static void unRLE_obuf_to_output_SMALL(DState *s);
873a542
> int BZ_APIBZ2_bzDecompress(bz_stream *strm);
874a544
> int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
875a546
> #define BZ_SETERR
876a548,556
> typedef struct {
>   FILE *handle;
>   char buf[BZ_MAX_UNUSED];
>   Int32 bufN;
>   Bool writing;
>   bz_stream strm;
>   Int32 lastErr;
>   Bool initialisedOk;
> } bzFile;
877a558,559
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
>                               int verbosity, int workFactor);
878a561
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
879a563,564
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
>                             unsigned int *nbytes_in, unsigned int *nbytes_out);
880a566,570
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
>                               unsigned int *nbytes_in_lo32,
>                               unsigned int *nbytes_in_hi32,
>                               unsigned int *nbytes_out_lo32,
>                               unsigned int *nbytes_out_hi32);
881a572,573
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
>                              void *unused, int nUnused);
882a575
> void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
883a577
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
884a579
>   bzFile *bzf = b;
885a581
>   BZ_SETERR;
886a583,584
>   if (bzf == NULL || buf == NULL || len < 0)
>     ;
887a586,587
>   if (bzf->writing)
>     ;
888a589,590
>   if (len == 0)
>     ;
889a592,593
>   bzf->strm.avail_out = len;
>   bzf->strm.next_out = buf;
890a595
>   while (True)
891a597,598
>     return 0;
> }
893,895c600,601
< static
< void makeMaps_e ( EState* s )
< ;
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
>                                int *nUnused);
896a603,606
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
>                                    char *source, unsigned int sourceLen,
>                                    int blockSize100k, int verbosity,
>                                    int workFactor);
897a608,610
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
>                                      char *source, unsigned int sourceLen,
>                                      int small, int verbosity);
899,901c612
< static
< void generateMTFValues ( EState* s )
< ;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
902a614
> BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
903a616,626
> int BZ_APIBZ2_bzread_nread;
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
>   int bzerr;
>   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
>     return 0;
>   BZ_APIBZ2_bzread_nread = 0;
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
>     ;
>   else
>     ;
> }
905,906c628
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
907a630
> int BZ_APIBZ2_bzflush(BZFILE *b);
908a632
> void BZ_APIBZ2_bzclose(BZFILE *b);
909a634
> const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
910a636
> #define BZ_UNIX 1
911a638
> #define BZ_LCCWIN32 0
912a640,641
> #include <signal.h>
> #include <errno.h>
913a643,645
> #define ERROR_IF_EOF
> #define ERROR_IF_NOT_ZERO
> #define ERROR_IF_MINUS_ONE
914a647,649
> #if BZ_UNIX
> #include <fcntl.h>
> #include <utime.h>
915a651,655
> #define PATH_SEP '/'
> #define MY_LSTAT lstat
> #define MY_STAT stat
> #define MY_S_ISREG S_ISREG
> #define MY_S_ISDIR S_ISDIR
916a657
> #define APPEND_FILESPEC root = snocString
917a659
> #define APPEND_FLAG root = snocString
918a661
> #define SET_BINARY_MODE
919a663
> #define NORETURN
920a665
> #endif
921a667,668
> #define True
> #define False
922a670
> typedef int IntNative;
923a672,678
> #define SM_I2O 1
> #define SM_F2O 2
> #define SM_F2F 3
> 
> #define OM_Z 1
> #define OM_UNZ 2
> #define OM_TEST 3
924a680
> #define FILE_NAME_LEN 1034
925a682
> typedef struct UInt64;
926a684
> #if BZ_UNIX
928,1566c686
< 
< 
< #define RETURN                               \
<    ;
< 
< #define GET_BITS                     \
<    case lll: s->state = lll;                      \
<    while  
< 
< #define GET_UCHAR                        \
<    GET_BITS
< 
< #define GET_BIT                          \
<    GET_BITS
< 
< 
< #define GET_MTF_VAL           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF       
< #define ERROR_IF_NOT_ZERO  
< #define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC \
<       root=snocString
< 
< #   define APPEND_FLAG \
<       root=snocString
< 
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> #endif
1569a690
> typedef int Cell;
1571,1634c692
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<     int 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define ISFLAG
(92.5 %, 15347 bytes)
===< pass_clex :: rm-toks-12 >===
3,7c3
< #define _BZLIB_H
< 
< #define BZ_RUN 0
< #define BZ_FLUSH 1
< #define BZ_FINISH 2
---
> define BZ_FINISH 2
3,7c3
< #define _BZLIB_H
< 
< #define BZ_RUN 0
< #define BZ_FLUSH 1
< #define BZ_FINISH 2
---
> #BZ_FINISH 2
3,7c3
< #define _BZLIB_H
< 
< #define BZ_RUN 0
< #define BZ_FLUSH 1
< #define BZ_FINISH 2
---
> #define 2
5,8d4
< #define BZ_RUN 0
< #define BZ_FLUSH 1
< #define BZ_FINISH 2
< 
5,8d4
< #define BZ_RUN 0
< #define BZ_FLUSH 1
< #define BZ_FINISH 2
< 
(92.5 %, 15290 bytes)
5,7d4
< #define BZ_OK 0
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
5,7d4
< #define BZ_OK 0
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
5,7d4
< #define BZ_OK 0
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
5,8c5
< #define BZ_OK 0
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 3
6,8d5
< #define BZ_RUN_OK 1
< #define BZ_FLUSH_OK 2
< #define BZ_FINISH_OK 3
(92.6 %, 15225 bytes)
5,9c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR
< #define BZ_MEM_ERROR
---
> #define BZ_OK define BZ_MEM_ERROR
6,9c6
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR
< #define BZ_MEM_ERROR
---
> BZ_MEM_ERROR
6,10c6
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR
< #define BZ_MEM_ERROR
< #define BZ_DATA_ERROR
---
> ##define BZ_DATA_ERROR
6,10c6
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR
< #define BZ_MEM_ERROR
< #define BZ_DATA_ERROR
---
> #define define BZ_DATA_ERROR
6,10c6
< #define BZ_STREAM_END 4
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR
< #define BZ_MEM_ERROR
< #define BZ_DATA_ERROR
---
> #define BZ_STREAM_END BZ_DATA_ERROR
7,10d6
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR
< #define BZ_MEM_ERROR
< #define BZ_DATA_ERROR
7,10d6
< #define BZ_SEQUENCE_ERROR
< #define BZ_PARAM_ERROR
< #define BZ_MEM_ERROR
< #define BZ_DATA_ERROR
(92.6 %, 15133 bytes)
7,10d6
< #define BZ_DATA_ERROR_MAGIC
< #define BZ_IO_ERROR
< #define BZ_UNEXPECTED_EOF
< #define BZ_OUTBUFF_FULL
7,10d6
< #define BZ_DATA_ERROR_MAGIC
< #define BZ_IO_ERROR
< #define BZ_UNEXPECTED_EOF
< #define BZ_OUTBUFF_FULL
7,10d6
< #define BZ_DATA_ERROR_MAGIC
< #define BZ_IO_ERROR
< #define BZ_UNEXPECTED_EOF
< #define BZ_OUTBUFF_FULL
(92.7 %, 15035 bytes)
7,11c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   char *next_in;
<   unsigned int avail_in;
---
> avail_in;
7,11c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   char *next_in;
<   unsigned int avail_in;
---
> #;
7,12c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
---
> #define unsigned int total_in_lo32;
9,12c9
< typedef struct {
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
---
> int total_in_lo32;
9,12c9
< typedef struct {
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
---
> typedef total_in_lo32;
9,12c9
< typedef struct {
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
---
> typedef struct ;
10,12d9
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
10,13c10
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
<   unsigned int total_in_hi32;
---
>   char int total_in_hi32;
10,13c10
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
<   unsigned int total_in_hi32;
---
>   char *total_in_hi32;
(92.7 %, 14963 bytes)
10,13d9
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
10,13d9
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
10,13d9
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
11,14d10
< 
<   char *next_out;
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
12,14d11
<   char *next_out;
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
12,15c12
<   char *next_out;
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
---
>   char int total_out_hi32;
12,15c12
<   char *next_out;
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
---
>   char *total_out_hi32;
13,15d12
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
13,16d12
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
< 
13,17c13
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
< 
<   void *state;
---
>   unsigned *state;
13,17c13
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
< 
<   void *state;
---
>   unsigned int state;
14,17d13
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
< 
<   void *state;
14,18d13
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
< 
<   void *state;
< 
(92.7 %, 14885 bytes)
13,17c13
<   unsigned int avail_out;
< 
<   void **bzalloc;
<   void *bzfree;
<   void *opaque;
---
>   unsigned int avail_outopaque;
15,17c15
<   void **bzalloc;
<   void *bzfree;
<   void *opaque;
---
>   ;
15,18c15
<   void **bzalloc;
<   void *bzfree;
<   void *opaque;
< } bz_stream;
---
>   void } bz_stream;
(92.8 %, 14839 bytes)
15,20c15
<   ;
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
>   define BZ_API(func) func
16,20c16
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> BZ_API(func) func
16,20c16
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> } (func) func
16,20c16
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> } bz_streamfunc) func
18,20c18
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> ) func
18,20c18
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #func
18,21c18
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include #define BZ_EXTERN extern
18,21c18
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <define BZ_EXTERN extern
18,21c18
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdioBZ_EXTERN extern
18,21c18
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdio.extern
18,23c18
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #include <stdio.hBZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
20,23c20
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
20,23c20
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
20,23c20
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #define (bz_stream *strm, int blockSize100k,
20,23c20
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #define BZ_APIbz_stream *strm, int blockSize100k,
20,23c20
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(*strm, int blockSize100k,
20,23c20
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(funcstrm, int blockSize100k,
20,23c20
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(func) , int blockSize100k,
21,23c21
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> int blockSize100k,
21,23c21
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #blockSize100k,
21,23c21
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
---
> #define ,
21,24c21
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
---
> #define BZ_EXTERN int verbosity, int workFactor);
23,24c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
---
> verbosity, int workFactor);
23,24c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
---
> BZ_EXTERN , int workFactor);
23,24c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
---
> BZ_EXTERN int int workFactor);
23,24c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInitworkFactor);
23,24c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
23,24c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream ;
23,26c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
23,26c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strmint BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
23,26c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
23,26c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int (bz_stream *strm, int action);
23,26c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
<                                        int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100kbz_stream *strm, int action);
24,26c24
<                                        int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
>                                        *strm, int action);
(92.8 %, 14735 bytes)
25,26d24
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
< 
25,26d24
< BZ_EXTERN int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
< 
(92.8 %, 14669 bytes)
23,27c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
23,27c23
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit()BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> (bz_stream *strm, int verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN bz_stream *strm, int verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int *strm, int verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEndstrm, int verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(, int verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream int verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *verbosity,
25,27c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm,
25,28c25
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm)int small);
27,28c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
---
> small);
27,28c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
---
> BZ_EXTERN );
27,28c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
---
> BZ_EXTERN int ;
27,30c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInitBZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
27,30c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(int BZ_APIBZ2_bzDecompress(bz_stream *strm);
27,30c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream BZ_APIBZ2_bzDecompress(bz_stream *strm);
27,30c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *(bz_stream *strm);
27,30c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strmbz_stream *strm);
27,30c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity,
<                                          int small);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, *strm);
(92.9 %, 14559 bytes)
27,30d26
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
29,31c29
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> (bz_stream *strm);
29,31c29
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> BZ_EXTERN bz_stream *strm);
29,31c29
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> BZ_EXTERN int *strm);
29,31c29
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressstrm);
29,31c29
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress();
(92.9 %, 14486 bytes)
27,31c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int void BZFILE;
27,31c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEndBZFILE;
27,31c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(;
27,33c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
27,33c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
27,33c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm*BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
27,33c27
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm)BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
29,33c29
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> (int *bzerror, FILE *f, int verbosity,
29,33c29
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> #int *bzerror, FILE *f, int verbosity,
29,33c29
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> #define *bzerror, FILE *f, int verbosity,
29,33c29
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> #define BZ_MAX_UNUSED bzerror, FILE *f, int verbosity,
31,33c31
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> , FILE *f, int verbosity,
31,33c31
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef FILE *f, int verbosity,
31,33c31
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef void *f, int verbosity,
31,33c31
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILEf, int verbosity,
33c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> , int verbosity,
33c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN int verbosity,
33c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE verbosity,
33c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *,
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpenint small, void *unused, int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(small, void *unused, int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int , void *unused, int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *void *unused, int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror*unused, int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, unused, int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE , int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *int nUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *fnUnused);
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, );
33,34c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int ;
33,36c33
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosityBZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small(int *bzerror, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, int *bzerror, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, void *bzerror, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, void *bzerror, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, void *unused, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, void *unused, BZFILE *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, void *unused, int *b);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, void *unused, int nUnusedb);
34,36c34
<                                        int small, void *unused, int nUnused);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                                        int small, void *unused, int nUnused));
36c36
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
> ;
(93.0 %, 14423 bytes)
34,36c34
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *unused, int nUnusedbb, void **unused,
34,36c34
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *unused, int nUnusedb), void **unused,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void **unused,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN **unused,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void *unused,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnusedunused,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int int *nUnused);
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int **nUnused);
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerrornUnused);
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, );
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE ;
36,39c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
36,39c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *bint BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
36,39c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
36,39c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void (int *bzerror, BZFILE *b, void *buf, int len);
36,39c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *int *bzerror, BZFILE *b, void *buf, int len);
36,39c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void ***bzerror, BZFILE *b, void *buf, int len);
36,39c36
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unusedbzerror, BZFILE *b, void *buf, int len);
37,39c37
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          , BZFILE *b, void *buf, int len);
37,39c37
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int BZFILE *b, void *buf, int len);
37,39c37
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int **b, void *buf, int len);
37,39c37
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnusedb, void *buf, int len);
37,39c37
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnused), void *buf, int len);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> void *buf, int len);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN *buf, int len);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int buf, int len);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead, int len);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int len);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int len);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *);
39c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror;
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE **BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *bBZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, (int *bzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void int *bzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void **bzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *bufbzerror, FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, , FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int FILE *f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len*f,
39,41c39
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len)f,
41c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> ,
41,42c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN int blockSize100k, int verbosity,
41,42c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE blockSize100k, int verbosity,
41,42c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *, int verbosity,
41,42c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpenint verbosity,
41,42c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(verbosity,
41,42c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int ,
41,43c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *int workFactor);
41,43c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerrorworkFactor);
41,43c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, );
41,43c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE ;
41,45c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
41,45c41
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fvoid BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
42,45c42
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
42,45c42
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int (int *bzerror, BZFILE *b, void *buf, int len);
42,45c42
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100kint *bzerror, BZFILE *b, void *buf, int len);
42,45c42
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100k, *bzerror, BZFILE *b, void *buf, int len);
42,45c42
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100k, int bzerror, BZFILE *b, void *buf, int len);
42,45c42
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100k, int verbosity, BZFILE *b, void *buf, int len);
43,45c43
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         BZFILE *b, void *buf, int len);
43,45c43
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int *b, void *buf, int len);
43,45c43
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactorb, void *buf, int len);
43,45c43
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactor), void *buf, int len);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void *buf, int len);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN *buf, int len);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void buf, int len);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite, int len);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int len);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int len);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *);
45c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror;
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b(int *bzerror, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, int *bzerror, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *bzerror, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *bzerror, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, BZFILE *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int *b, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int lenb, int abandon,
45,47c45
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len), int abandon,
47c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> int abandon,
47c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN abandon,
47c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void ,
47,48c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteCloseunsigned int *nbytes_in,
47,48c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *nbytes_in,
47,48c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *nbytes_in,
47,48c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *nbytes_in,
47,48c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror,
47,49c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, unsigned int *nbytes_out);
47,49c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE int *nbytes_out);
47,49c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE **nbytes_out);
47,49c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *bnbytes_out);
47,49c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, );
47,49c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int ;
47,51c47
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandonBZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
48,51c48
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
48,51c48
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
48,51c48
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int (int *bzerror, BZFILE *b, int abandon,
48,51c48
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *int *bzerror, BZFILE *b, int abandon,
48,51c48
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_in*bzerror, BZFILE *b, int abandon,
49,51c49
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       bzerror, BZFILE *b, int abandon,
49,51c49
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned , BZFILE *b, int abandon,
49,51c49
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int BZFILE *b, int abandon,
49,51c49
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int **b, int abandon,
49,51c49
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_outb, int abandon,
49,51c49
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_out), int abandon,
51c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> int abandon,
51c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN abandon,
51c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void ,
51,52c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64unsigned int *nbytes_in_lo32,
51,52c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *nbytes_in_lo32,
51,52c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *nbytes_in_lo32,
51,52c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *nbytes_in_lo32,
51,52c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror,
51,53c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, unsigned int *nbytes_in_hi32,
51,53c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE int *nbytes_in_hi32,
51,53c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE **nbytes_in_hi32,
51,53c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *bnbytes_in_hi32,
51,53c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, ,
51,54c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int unsigned int *nbytes_out_lo32,
51,54c51
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandonint *nbytes_out_lo32,
52,54c52
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         *nbytes_out_lo32,
52,54c52
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned nbytes_out_lo32,
52,54c52
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned int ,
52,55c52
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *unsigned int *nbytes_out_hi32);
52,55c52
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *nbytes_in_lo32int *nbytes_out_hi32);
53,55c53
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         *nbytes_out_hi32);
53,55c53
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned nbytes_out_hi32);
53,55c53
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int );
53,55c53
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *;
53,57c53
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_in_hi32BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
54,57c54
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
54,57c54
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
54,57c54
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int (char *dest, unsigned int *destLen,
54,57c54
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *char *dest, unsigned int *destLen,
54,57c54
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_lo32*dest, unsigned int *destLen,
55,57c55
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         dest, unsigned int *destLen,
55,57c55
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned , unsigned int *destLen,
55,57c55
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int unsigned int *destLen,
55,57c55
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *int *destLen,
55,57c55
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32*destLen,
55,57c55
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32)destLen,
57c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> ,
57,58c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN char *source,
57,58c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int *source,
57,58c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompresssource,
57,58c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(,
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char unsigned int sourceLen,
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *int sourceLen,
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *destsourceLen,
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, ,
57,60c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int blockSize100k, int verbosity,
57,60c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int blockSize100k, int verbosity,
57,60c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *, int verbosity,
57,60c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLenint verbosity,
58,60c58
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              verbosity,
58,60c58
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              char ,
58,61c58
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              char *int workFactor);
58,61c58
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              char *sourceworkFactor);
59,61c59
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              );
59,61c59
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              unsigned ;
59,63c59
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              unsigned int BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
59,63c59
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              unsigned int sourceLenint BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
60,63c60
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
60,63c60
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int (char *dest,
60,63c60
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int blockSize100kchar *dest,
60,63c60
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int blockSize100k, *dest,
60,63c60
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int blockSize100k, int dest,
61,63d60
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
61,64c61
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
>                                              unsigned int *destLen,
61,64c61
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
>                                              int int *destLen,
61,64c61
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
>                                              int workFactor*destLen,
61,64c61
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
>                                              int workFactor)destLen,
63,64c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> ,
63,65c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
---
> BZ_EXTERN char *source,
63,65c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
---
> BZ_EXTERN int *source,
63,65c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompresssource,
63,65c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(,
63,66c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char unsigned int sourceLen,
63,66c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *int sourceLen,
63,66c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *destsourceLen,
64,66c64
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                ,
64,67c64
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int small, int verbosity);
64,67c64
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int small, int verbosity);
64,67c64
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int *, int verbosity);
64,67c64
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int *destLenint verbosity);
65,67c65
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                verbosity);
65,67c65
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                char );
65,67c65
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                char *;
65,69c65
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                char *sourceBZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
66,69c66
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                const char *BZ_APIBZ2_bzlibVersion(void);
66,69c66
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                unsigned char *BZ_APIBZ2_bzlibVersion(void);
66,69c66
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                unsigned int *BZ_APIBZ2_bzlibVersion(void);
66,69c66
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                unsigned int sourceLenBZ_APIBZ2_bzlibVersion(void);
67,69c67
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                (void);
67,69c67
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int void);
67,69c67
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int small);
67,69c67
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int small, ;
67,71c67
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                                int small, int BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
67,71c67
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                                int small, int verbosityBZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
67,71c67
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                                int small, int verbosity)*BZ_APIBZ2_bzopen(const char *path, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_APIBZ2_bzopen(const char *path, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN (const char *path, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const const char *path, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char char *path, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char **path, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersionpath, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(, const char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(voidconst char *mode);
69,71c69
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void)char *mode);
71c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> *mode);
71c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN mode);
71c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE );
71c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *;
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopenBZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const *BZ_APIBZ2_bzdopen(int fd, const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char BZ_APIBZ2_bzdopen(int fd, const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *(int fd, const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *pathint fd, const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, fd, const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const , const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char const char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *char *mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode*mode);
71,73c71
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode)mode);
73c73
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> );
73c73
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZ_EXTERN ;
73,75c73
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
73,75c73
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
73,75c73
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopenBZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
(93.0 %, 14372 bytes)
73,75c73
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN , int len);
75c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> int len);
75c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN len);
75c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int );
75c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread;
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b(BZFILE *b, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, BZFILE *b, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *b, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *b, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, void *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int *buf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int lenbuf, int len);
75,77c75
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len), int len);
77c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int len);
77c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN len);
77c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int );
77c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite;
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE int BZ_APIBZ2_bzflush(BZFILE *b);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *BZ_APIBZ2_bzflush(BZFILE *b);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b(BZFILE *b);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, BZFILE *b);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *b);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *b);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf);
77,79c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, ;
77,81c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
77,81c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenvoid BZ_APIBZ2_bzclose(BZFILE *b);
77,81c77
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len)BZ_APIBZ2_bzclose(BZFILE *b);
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> (BZFILE *b);
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN BZFILE *b);
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN int *b);
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzflushb);
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush();
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE ;
79,83c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
79,83c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *bconst char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
79,83c79
< BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush(BZFILE *b)char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
81,83c81
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
81,83c81
< BZ_EXTERN void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
(93.0 %, 14317 bytes)
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush();
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush(int *errnum);
79,81c79
< BZ_EXTERN int BZ_APIBZ2_bzflush();
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush()*errnum);
81c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> errnum);
81c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN );
81c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> BZ_EXTERN const ;
81,83c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char #define _BZLIB_PRIVATE_H
81,83c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char *define _BZLIB_PRIVATE_H
81,83c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror_BZLIB_PRIVATE_H
81,85c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror(#include <stdlib.h>
81,85c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE include <stdlib.h>
81,85c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *<stdlib.h>
81,85c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *bstdlib.h>
81,85c81
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror(BZFILE *b, .h>
(93.0 %, 14270 bytes)
81,87c81
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const define BZ_VERSION "1.0.2, 30-Dec-2001"
83,87c83
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> BZ_VERSION "1.0.2, 30-Dec-2001"
83,87c83
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
83,89c83
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define typedef unsigned char Bool;
85,89c85
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> unsigned char Bool;
85,89c85
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #char Bool;
85,89c85
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #include Bool;
85,89c85
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #include <;
85,90c85
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> #include <stdlibtypedef unsigned char UChar;
85,90c85
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> #include <stdlib.unsigned char UChar;
85,90c85
< #include <stdlib.h>
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> #include <stdlib.hchar UChar;
87,90c87
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> UChar;
87,90c87
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> #;
87,91c87
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
---
> #define typedef int Int32;
87,91c87
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
---
> #define BZ_VERSION int Int32;
89,91c89
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
---
> Int32;
89,91c89
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
---
> typedef ;
89,92c89
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned typedef unsigned int UInt32;
89,92c89
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned char unsigned int UInt32;
89,92c89
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned char Boolint UInt32;
90,92c90
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> UInt32;
90,92c90
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef ;
90,93c90
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef unsigned typedef short Int16;
90,93c90
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef unsigned char short Int16;
90,93c90
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef unsigned char UCharInt16;
91,93c91
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
---
> ;
91,94c91
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef typedef unsigned short UInt16;
91,94c91
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef int unsigned short UInt16;
91,94c91
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef int Int32short UInt16;
92,94c92
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> UInt16;
92,94c92
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef ;
92,96c92
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
---
> typedef unsigned #define True 1
92,96c92
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
---
> typedef unsigned int define True 1
92,96c92
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
---
> typedef unsigned int UInt32True 1
93,96c93
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
---
> 1
93,97c93
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
---
> typedef #define False
93,97c93
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
---
> typedef short define False
93,97c93
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
---
> typedef short Int16False
94,98d93
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
< 
94,99c94
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
< 
< #define __inline__
---
> typedef define __inline__
94,99c94
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
< 
< #define __inline__
---
> typedef unsigned __inline__
94,101c94
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> typedef unsigned short extern void BZ2_bz__AssertH__fail(int errcode);
94,101c94
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> typedef unsigned short UInt16void BZ2_bz__AssertH__fail(int errcode);
96,101c96
< #define True 1
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> BZ2_bz__AssertH__fail(int errcode);
96,101c96
< #define True 1
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #(int errcode);
96,101c96
< #define True 1
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #define int errcode);
96,101c96
< #define True 1
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #define True errcode);
97,101c97
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> );
97,101c97
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #;
97,102c97
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
---
> #define #define AssertH
99,102c99
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
---
> define AssertH
99,102c99
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
---
> #AssertH
99,104c99
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
---
> #define #define AssertD
101,104c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
---
> define AssertD
101,104c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
---
> extern AssertD
101,106c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
---
> extern void #define VPrintf0 fprintf
101,106c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
---
> extern void BZ2_bz__AssertH__faildefine VPrintf0 fprintf
101,106c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
---
> extern void BZ2_bz__AssertH__fail(VPrintf0 fprintf
101,106c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
---
> extern void BZ2_bz__AssertH__fail(int fprintf
101,107c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
---
> extern void BZ2_bz__AssertH__fail(int errcode#define VPrintf1 fprintf
101,107c101
< extern void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
---
> extern void BZ2_bz__AssertH__fail(int errcode)define VPrintf1 fprintf
102,107c102
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
---
> VPrintf1 fprintf
102,107c102
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
---
> #fprintf
102,108c102
< #define AssertH
< 
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
< #define VPrintf2 fprintf
---
> #define #define VPrintf2 fprintf
104,108c104
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
< #define VPrintf2 fprintf
---
> define VPrintf2 fprintf
104,108c104
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
< #define VPrintf2 fprintf
---
> #VPrintf2 fprintf
104,108c104
< #define AssertD
< 
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
< #define VPrintf2 fprintf
---
> #define fprintf
106,108d105
< #define VPrintf0 fprintf
< #define VPrintf1 fprintf
< #define VPrintf2 fprintf
(93.1 %, 14194 bytes)
105,107d104
< #define VPrintf3 fprintf
< #define VPrintf4 fprintf
< #define VPrintf5 fprintf
105,108d104
< #define VPrintf3 fprintf
< #define VPrintf4 fprintf
< #define VPrintf5 fprintf
< 
(93.1 %, 14119 bytes)
104,110c104
< #define fprintf
< 
< #define BZALLOC
< #define BZFREE
< 
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
---
> #define define BZ_HDR_Z 0x5a
106,110c106
< #define BZALLOC
< #define BZFREE
< 
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
---
> BZ_HDR_Z 0x5a
106,110c106
< #define BZALLOC
< #define BZFREE
< 
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
---
> #0x5a
106,111c106
< #define BZALLOC
< #define BZFREE
< 
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> #define #define BZ_HDR_h 0x68
107,111c107
< #define BZFREE
< 
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> define BZ_HDR_h 0x68
107,111c107
< #define BZFREE
< 
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> #BZ_HDR_h 0x68
107,111c107
< #define BZFREE
< 
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> #define 0x68
109,111d108
< #define BZ_HDR_B 0x42
< #define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
(93.1 %, 14055 bytes)
104,108c104
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define define BZ_MAX_ALPHA_SIZE 258
104,108c104
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define define BZ_MAX_ALPHA_SIZE 258
104,108c104
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define define BZ_HDR_Z 258
105,108d104
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
105,108d104
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
105,108d104
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
105,109c105
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
---
> #define BZ_HDR_h 23
106,110d105
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
106,110d105
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
106,110d105
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
106,111c106
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
< #define BZ_RUNA 0
---
> #define BZ_HDR_0 0
108,111d107
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
< #define BZ_RUNA 0
108,111d107
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
< #define BZ_RUNA 0
108,111d107
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
< #define BZ_RUNA 0
108,112c108
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN 23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define BZ_MAX_ALPHA_SIZE 1
109,113d108
< #define BZ_MAX_CODE_LEN 23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
(93.2 %, 13989 bytes)
108,112c108
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_MAX_ALPHA_SIZE 4
110,113d109
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
110,113d109
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
110,113d109
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
110,114c110
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_N_GROUPS 2 + 900000 / BZ_G_SIZE
111,114c111
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> + 900000 / BZ_G_SIZE
111,114c111
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #900000 / BZ_G_SIZE
111,114c111
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define / BZ_G_SIZE
111,114c111
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_G_SIZE BZ_G_SIZE
112,115d111
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
112,115d111
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
112,115d111
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
112,116c112
< #define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
---
> #define BZ_N_ITERS \
114,117c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> Int32 rNToGo;                                                                \
114,117c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #rNToGo;                                                                \
114,117c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define ;                                                                \
114,117c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_MAX_SELECTORS \
114,118c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
---
> #define BZ_MAX_SELECTORS 2 Int32 rTPos
114,118c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
---
> #define BZ_MAX_SELECTORS 2 + rTPos
114,120c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define BZ_MAX_SELECTORS 2 + 900000 #define BZ_RAND_INIT_MASK                                                      \
114,120c114
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define BZ_MAX_SELECTORS 2 + 900000 / define BZ_RAND_INIT_MASK                                                      \
116,120c116
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
---
> BZ_RAND_INIT_MASK                                                      \
116,120c116
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
---
> #\
116,121c116
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define s->rNToGo = 0;                                                               \
116,121c116
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define BZ_RAND_DECLS                                                          ->rNToGo = 0;                                                               \
117,121c117
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
>   rNToGo = 0;                                                               \
117,121c117
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
>   Int32 = 0;                                                               \
117,121c117
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
>   Int32 rNToGo0;                                                               \
117,121c117
<   Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
>   Int32 rNToGo;                                                                ;                                                               \
118,121c118
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
>   \
118,122c118
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
<   s->rTPos = 0
---
>   Int32 s->rTPos = 0
120,122c120
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
<   s->rTPos = 0
---
> ->rTPos = 0
120,122c120
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
<   s->rTPos = 0
---
> #rTPos = 0
120,122c120
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
<   s->rTPos = 0
---
> #define = 0
120,122c120
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
<   s->rTPos = 0
---
> #define BZ_RAND_INIT_MASK                                                      0
121,124c121
<   s->rNToGo = 0;                                                               \
<   s->rTPos = 0
< 
< #define BZ_RAND_MASK
---
>   #define BZ_RAND_MASK
(93.2 %, 13893 bytes)
120,126c120
< #define BZ_RAND_INIT_MASK                                                      0
< 
< #define BZ_RAND_MASK
< 
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
---
> #define BZ_RAND_INIT_MASK                                                      rNToGo--;
122,126c122
< #define BZ_RAND_MASK
< 
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
---
> --;
122,126c122
< #define BZ_RAND_MASK
< 
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
---
> #;
122,128c122
< #define BZ_RAND_MASK
< 
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
< 
< #define BZ_INITIALISE_CRC
---
> #define #define BZ_INITIALISE_CRC
124,128c124
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
< 
< #define BZ_INITIALISE_CRC
---
> define BZ_INITIALISE_CRC
124,128c124
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
< 
< #define BZ_INITIALISE_CRC
---
> #BZ_INITIALISE_CRC
124,130c124
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
< 
< #define BZ_INITIALISE_CRC
< 
< #define BZ_FINALISE_CRC
---
> #define #define BZ_FINALISE_CRC
124,130c124
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo--;
< 
< #define BZ_INITIALISE_CRC
< 
< #define BZ_FINALISE_CRC
---
> #define BZ_RAND_UPD_MASK                                                       define BZ_FINALISE_CRC
(93.3 %, 13699 bytes)
120,128c120
< #define BZ_RAND_INIT_MASK                                                      rNToGo--;
< 
< #define BZ_INITIALISE_CRC
< 
< #define BZ_FINALISE_CRC
< 
< #define BZ_UPDATE_CRC
< 
< #define BZ_M_IDLE 1
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_M_IDLE 1
120,128c120
< #define BZ_RAND_INIT_MASK                                                      rNToGo--;
< 
< #define BZ_INITIALISE_CRC
< 
< #define BZ_FINALISE_CRC
< 
< #define BZ_UPDATE_CRC
< 
< #define BZ_M_IDLE 1
---
> #define BZ_RAND_INIT_MASK                                                      rNToGodefine BZ_M_IDLE 1
(93.4 %, 13613 bytes)
120,123c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_M_IDLE 1
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_M_FINISHING 4
120,123c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_M_IDLE 1
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_M_FINISHING 4
120,123c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_M_IDLE 1
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_M_FINISHING 4
(93.4 %, 13546 bytes)
120,125c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT 1
< #define BZ_S_INPUT 2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_N_RADIX 2
120,125c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT 1
< #define BZ_S_INPUT 2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_N_RADIX 2
(93.4 %, 13476 bytes)
120,123c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
120,123c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
120,123c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
---
> #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
(93.5 %, 13411 bytes)
120,126c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 mode;
---
> #define BZ_RAND_INIT_MASK                                                      ;
120,127c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
---
> #define BZ_RAND_INIT_MASK                                                      #Int32 state;
120,127c120
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
---
> #define BZ_RAND_INIT_MASK                                                      #define state;
122,127c122
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
---
> ;
122,129c122
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
< 
<   UInt32 avail_in_expect;
---
> typedef UInt32 avail_in_expect;
122,129c122
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
< 
<   UInt32 avail_in_expect;
---
> typedef struct avail_in_expect;
124,129c124
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
< 
<   UInt32 avail_in_expect;
---
>   ;
124,131c124
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
< 
<   UInt32 avail_in_expect;
< 
<   UInt32 *arr1;
---
>   bz_stream UInt32 *arr1;
124,131c124
<   bz_stream *strm;
< 
<   Int32 mode;
<   Int32 state;
< 
<   UInt32 avail_in_expect;
< 
<   UInt32 *arr1;
---
>   bz_stream **arr1;
(93.5 %, 13339 bytes)
125,128d124
< 
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
126,128d125
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
126,129c126
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 origPtr;
(93.5 %, 13290 bytes)
124,128d123
<   ;
<   Int32 origPtr;
< 
<   UInt32 *ptr;
<   UChar *block;
125,129c125
<   Int32 origPtr;
< 
<   UInt32 *ptr;
<   UChar *block;
<   UInt16 *mtfv;
---
>   *mtfv;
125,129c125
<   Int32 origPtr;
< 
<   UInt32 *ptr;
<   UChar *block;
<   UInt16 *mtfv;
---
>   Int32 mtfv;
(93.5 %, 13237 bytes)
124,129c124
<   UInt16 *mtfv;
<   UChar *zbits;
< 
<   Int32 workFactor;
< 
<   UInt32 state_in_ch;
---
>   state_in_ch;
124,129c124
<   UInt16 *mtfv;
<   UChar *zbits;
< 
<   Int32 workFactor;
< 
<   UInt32 state_in_ch;
---
>   UInt16 ;
124,130c124
<   UInt16 *mtfv;
<   UChar *zbits;
< 
<   Int32 workFactor;
< 
<   UInt32 state_in_ch;
<   Int32 state_in_len;
---
>   UInt16 *Int32 state_in_len;
124,130c124
<   UInt16 *mtfv;
<   UChar *zbits;
< 
<   Int32 workFactor;
< 
<   UInt32 state_in_ch;
<   Int32 state_in_len;
---
>   UInt16 *mtfvstate_in_len;
(93.6 %, 13172 bytes)
124,130c124
<   UInt16 ;
<   Int32 state_in_len;
<   BZ_RAND_DECLS;
< 
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   UInt16 Int32 numZ;
125,130c125
<   Int32 state_in_len;
<   BZ_RAND_DECLS;
< 
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   numZ;
125,130c125
<   Int32 state_in_len;
<   BZ_RAND_DECLS;
< 
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
---
>   Int32 ;
125,131c125
<   Int32 state_in_len;
<   BZ_RAND_DECLS;
< 
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
---
>   Int32 state_in_lenInt32 state_out_pos;
126,131c126
<   BZ_RAND_DECLS;
< 
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
---
>   state_out_pos;
128,132d127
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
< 
(93.6 %, 13093 bytes)
126,129d125
<   Int32 state_out_pos;
< 
<   Int32 nInUse;
<   Bool inUse[256];
126,129d125
<   Int32 state_out_pos;
< 
<   Int32 nInUse;
<   Bool inUse[256];
(93.6 %, 13034 bytes)
126,129d125
<   UChar unseqToSeq[256];
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
126,130d125
<   UChar unseqToSeq[256];
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
(93.7 %, 12975 bytes)
126,131d125
< 
<   UInt32 blockCRC;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
127,131d126
<   UInt32 blockCRC;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
(93.7 %, 12896 bytes)
126,129d125
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
126,129d125
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
126,130c126
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 selector[BZ_MAX_SELECTORS];
(93.7 %, 12822 bytes)
126,127d125
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
126,128d125
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
< 
(93.8 %, 12747 bytes)
125,128c125
<   Int32 ;
< 
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
127,128c127
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
127,128c127
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar ][BZ_MAX_ALPHA_SIZE];
127,128c127
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar len[BZ_MAX_ALPHA_SIZE];
127,128c127
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar len[BZ_MAX_ALPHA_SIZE];
(93.8 %, 12688 bytes)
127,128c127
<   UChar len[BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar len;
127,130c127
<   UChar len[BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UChar len[UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
127,130c127
<   UChar len[BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UChar len[BZ_MAX_ALPHA_SIZElen_pack[BZ_MAX_ALPHA_SIZE][4];
127,130c127
<   UChar len[BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UChar len[BZ_MAX_ALPHA_SIZE][BZ_MAX_ALPHA_SIZE][4];
(93.8 %, 12622 bytes)
129,132d128
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
129,133c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
---
>   ;
129,135c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
---
>   UInt32 ;
129,137c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
---
>   UInt32 len_pack#define BZ_X_IDLE 1
129,137c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
---
>   UInt32 len_pack[define BZ_X_IDLE 1
129,137c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
---
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZEBZ_X_IDLE 1
129,137c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
---
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE]1
129,138c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
---
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][#define BZ_X_OUTPUT 2
129,138c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
---
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4define BZ_X_OUTPUT 2
129,138c129
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
---
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4]BZ_X_OUTPUT 2
131,138c131
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
---
> 2
131,140c131
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
< 
< #define BZ_X_MAGIC_1 10
---
> } #define BZ_X_MAGIC_1 10
131,140c131
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
< 
< #define BZ_X_MAGIC_1 10
---
> } EStatedefine BZ_X_MAGIC_1 10
133,140c133
< ;
< 
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
< 
< #define BZ_X_MAGIC_1 10
---
> BZ_X_MAGIC_1 10
135,140c135
< ;
< 
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
< 
< #define BZ_X_MAGIC_1 10
---
> 10
137,140d136
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
< 
< #define BZ_X_MAGIC_1 10
137,140d136
< #define BZ_X_IDLE 1
< #define BZ_X_OUTPUT 2
< 
< #define BZ_X_MAGIC_1 10
(93.9 %, 12555 bytes)
137,139d136
< #define BZ_X_MAGIC_2 11
< #define BZ_X_MAGIC_3 12
< #define BZ_X_MAGIC_4 13
137,139d136
< #define BZ_X_MAGIC_2 11
< #define BZ_X_MAGIC_3 12
< #define BZ_X_MAGIC_4 13
137,139d136
< #define BZ_X_MAGIC_2 11
< #define BZ_X_MAGIC_3 12
< #define BZ_X_MAGIC_4 13
(93.9 %, 12483 bytes)
137,139d136
< #define BZ_X_BLKHDR_1 14
< #define BZ_X_BLKHDR_2 15
< #define BZ_X_BLKHDR_3 16
137,139d136
< #define BZ_X_BLKHDR_1 14
< #define BZ_X_BLKHDR_2 15
< #define BZ_X_BLKHDR_3 16
137,139d136
< #define BZ_X_BLKHDR_1 14
< #define BZ_X_BLKHDR_2 15
< #define BZ_X_BLKHDR_3 16
(93.9 %, 12408 bytes)
137,139d136
< #define BZ_X_BLKHDR_4 17
< #define BZ_X_BLKHDR_5 18
< #define BZ_X_BLKHDR_6 19
137,139d136
< #define BZ_X_BLKHDR_4 17
< #define BZ_X_BLKHDR_5 18
< #define BZ_X_BLKHDR_6 19
(94.0 %, 12333 bytes)
137,139d136
< #define BZ_X_BCRC_1 20
< #define BZ_X_BCRC_2 21
< #define BZ_X_BCRC_3 22
137,139d136
< #define BZ_X_BCRC_1 20
< #define BZ_X_BCRC_2 21
< #define BZ_X_BCRC_3 22
(94.0 %, 12264 bytes)
137,139d136
< #define BZ_X_BCRC_4 23
< #define BZ_X_RANDBIT 24
< #define BZ_X_ORIGPTR_1 25
137,139d136
< #define BZ_X_BCRC_4 23
< #define BZ_X_RANDBIT 24
< #define BZ_X_ORIGPTR_1 25
(94.1 %, 12191 bytes)
137,139d136
< #define BZ_X_ORIGPTR_2 26
< #define BZ_X_ORIGPTR_3 27
< #define BZ_X_MAPPING_1 28
137,139d136
< #define BZ_X_ORIGPTR_2 26
< #define BZ_X_ORIGPTR_3 27
< #define BZ_X_MAPPING_1 28
137,139d136
< #define BZ_X_ORIGPTR_2 26
< #define BZ_X_ORIGPTR_3 27
< #define BZ_X_MAPPING_1 28
(94.1 %, 12113 bytes)
137,139d136
< #define BZ_X_MAPPING_2 29
< #define BZ_X_SELECTOR_1 30
< #define BZ_X_SELECTOR_2 31
137,139d136
< #define BZ_X_MAPPING_2 29
< #define BZ_X_SELECTOR_1 30
< #define BZ_X_SELECTOR_2 31
(94.1 %, 12033 bytes)
137,139d136
< #define BZ_X_SELECTOR_3 32
< #define BZ_X_CODING_1 33
< #define BZ_X_CODING_2 34
137,139d136
< #define BZ_X_SELECTOR_3 32
< #define BZ_X_CODING_1 33
< #define BZ_X_CODING_2 34
(94.2 %, 11956 bytes)
137,139d136
< #define BZ_X_CODING_3 35
< #define BZ_X_MTF_1 36
< #define BZ_X_MTF_2 37
137,139d136
< #define BZ_X_CODING_3 35
< #define BZ_X_MTF_1 36
< #define BZ_X_MTF_2 37
137,139d136
< #define BZ_X_CODING_3 35
< #define BZ_X_MTF_1 36
< #define BZ_X_MTF_2 37
(94.2 %, 11887 bytes)
137,139d136
< #define BZ_X_MTF_3 38
< #define BZ_X_MTF_4 39
< #define BZ_X_MTF_5 40
137,139d136
< #define BZ_X_MTF_3 38
< #define BZ_X_MTF_4 39
< #define BZ_X_MTF_5 40
(94.2 %, 11821 bytes)
137,139d136
< #define BZ_X_MTF_6 41
< #define BZ_X_ENDHDR_2 42
< #define BZ_X_ENDHDR_3 43
137,139d136
< #define BZ_X_MTF_6 41
< #define BZ_X_ENDHDR_2 42
< #define BZ_X_ENDHDR_3 43
(94.3 %, 11749 bytes)
137,139d136
< #define BZ_X_ENDHDR_4 44
< #define BZ_X_ENDHDR_5 45
< #define BZ_X_ENDHDR_6 46
137,139d136
< #define BZ_X_ENDHDR_4 44
< #define BZ_X_ENDHDR_5 45
< #define BZ_X_ENDHDR_6 46
137,139d136
< #define BZ_X_ENDHDR_4 44
< #define BZ_X_ENDHDR_5 45
< #define BZ_X_ENDHDR_6 46
(94.3 %, 11674 bytes)
137,139d136
< #define BZ_X_CCRC_1 47
< #define BZ_X_CCRC_2 48
< #define BZ_X_CCRC_3 49
137,139d136
< #define BZ_X_CCRC_1 47
< #define BZ_X_CCRC_2 48
< #define BZ_X_CCRC_3 49
(94.3 %, 11605 bytes)
137,141d136
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
137,142c137
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> #struct {
137,142c137
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> #define {
137,144c137
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
---
> #define BZ_X_CCRC_4 bz_stream *strm;
139,144c139
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
---
> *strm;
139,144c139
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
---
> #strm;
139,144c139
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
---
> #define ;
139,146c139
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
---
> #define MTFA_SIZE Int32 state;
140,146c140
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
---
> state;
140,146c140
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
---
> #;
140,148c140
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
---
> #define UChar state_out_ch;
140,148c140
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
---
> #define MTFL_SIZE state_out_ch;
142,148c142
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
---
> ;
142,149c142
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
<   Int32 state_out_len;
---
> typedef Int32 state_out_len;
142,149c142
< typedef struct {
< 
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
<   Int32 state_out_len;
---
> typedef struct state_out_len;
144,149c144
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
<   Int32 state_out_len;
---
>   ;
144,150c144
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
<   Int32 state_out_len;
<   Bool blockRandomised;
---
>   bz_stream Bool blockRandomised;
144,150c144
<   bz_stream *strm;
< 
<   Int32 state;
< 
<   UChar state_out_ch;
<   Int32 state_out_len;
<   Bool blockRandomised;
---
>   bz_stream *blockRandomised;
(94.4 %, 11528 bytes)
144,150d143
<   ;
<   Bool blockRandomised;
<   BZ_RAND_DECLS;
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
145,151c145
<   Bool blockRandomised;
<   BZ_RAND_DECLS;
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
<   Int32 blockSize100k;
---
>   blockSize100k;
145,151c145
<   Bool blockRandomised;
<   BZ_RAND_DECLS;
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
<   Int32 blockSize100k;
---
>   Bool ;
(94.4 %, 11448 bytes)
144,148d143
<   Int32 blockSize100k;
<   Bool smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity;
< 
144,148d143
<   Int32 blockSize100k;
<   Bool smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity;
< 
(94.5 %, 11360 bytes)
144,147c144
<   Int32 origPtr;
<   UInt32 tPos;
<   Int32 k0;
<   Int32 unzftab[256];
---
>   256];
144,147c144
<   Int32 origPtr;
<   UInt32 tPos;
<   Int32 k0;
<   Int32 unzftab[256];
---
>   Int32 ];
145,147d144
<   UInt32 tPos;
<   Int32 k0;
<   Int32 unzftab[256];
145,147d144
<   UInt32 tPos;
<   Int32 k0;
<   Int32 unzftab[256];
(94.5 %, 11311 bytes)
144,147c144
<   Int32 origPtr;
<   Int32 nblock_used;
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
---
>   Int32 origPtr[257];
145,147c145
<   Int32 nblock_used;
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
---
>   257];
145,147c145
<   Int32 nblock_used;
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
---
>   Int32 ];
146,147d145
<   Int32 cftab[257];
<   Int32 cftabCopy[257];
(94.5 %, 11251 bytes)
144,149c144
<   Int32 origPtr[257];
< 
<   UInt32 *tt;
< 
<   UInt16 *ll16;
<   UChar *ll4;
---
>   Int32 origPtrUChar *ll4;
144,149c144
<   Int32 origPtr[257];
< 
<   UInt32 *tt;
< 
<   UInt16 *ll16;
<   UChar *ll4;
---
>   Int32 origPtr[*ll4;
144,149c144
<   Int32 origPtr[257];
< 
<   UInt32 *tt;
< 
<   UInt16 *ll16;
<   UChar *ll4;
---
>   Int32 origPtr[257ll4;
146,150d145
<   UInt32 *tt;
< 
<   UInt16 *ll16;
<   UChar *ll4;
< 
146,150d145
<   UInt32 *tt;
< 
<   UInt16 *ll16;
<   UChar *ll4;
< 
(94.5 %, 11205 bytes)
146,150d145
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
< 
146,150d145
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
< 
146,151c146
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
< 
<   Int32 nInUse;
---
>   UInt32 nInUse;
(94.6 %, 11090 bytes)
144,148c144
<   Int32 origPtr[257];
< 
<   Int32 nInUse;
<   Bool inUse[256];
<   Bool inUse16[16];
---
>   Int32 origPtr[257][16];
146,148c146
<   Int32 nInUse;
<   Bool inUse[256];
<   Bool inUse16[16];
---
>   16];
146,148c146
<   Int32 nInUse;
<   Bool inUse[256];
<   Bool inUse16[16];
---
>   Int32 ];
147,148d146
<   Bool inUse[256];
<   Bool inUse16[16];
(94.6 %, 11038 bytes)
144,147c144
<   Int32 origPtr[257][16];
<   UChar seqToUnseq[256];
< 
<   UChar mtfa[MTFA_SIZE];
---
>   Int32 origPtr[257][MTFA_SIZE];
144,147c144
<   Int32 origPtr[257][16];
<   UChar seqToUnseq[256];
< 
<   UChar mtfa[MTFA_SIZE];
---
>   Int32 origPtr[257][MTFA_SIZE];
(94.6 %, 10994 bytes)
144,146c144
<   Int32 origPtr[257][MTFA_SIZE];
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 origPtr[257]UChar selector[BZ_MAX_SELECTORS];
144,146c144
<   Int32 origPtr[257][MTFA_SIZE];
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 origPtr[257][selector[BZ_MAX_SELECTORS];
144,146c144
<   Int32 origPtr[257][MTFA_SIZE];
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 origPtr[257][MTFA_SIZE[BZ_MAX_SELECTORS];
144,146c144
<   Int32 origPtr[257][MTFA_SIZE];
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 origPtr[257][MTFA_SIZE]BZ_MAX_SELECTORS];
145,146c145
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   ];
145,146c145
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 ;
145,147c145
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   Int32 mtfbaseUChar selectorMtf[BZ_MAX_SELECTORS];
145,147c145
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[selectorMtf[BZ_MAX_SELECTORS];
145,147c145
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[256 [BZ_MAX_SELECTORS];
145,147c145
<   Int32 mtfbase[256 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[256 / BZ_MAX_SELECTORS];
(94.7 %, 10934 bytes)
145,147c145
<   Int32 ;
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_MAX_ALPHA_SIZE];
146,147c146
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   BZ_MAX_ALPHA_SIZE];
146,147c146
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar ];
146,147c146
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf;
146,149c146
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf[Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
146,149c146
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf[BZ_MAX_SELECTORSlimit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
146,149c146
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf[BZ_MAX_SELECTORS][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(94.7 %, 10871 bytes)
146,149c146
<   UChar selectorMtf;
< 
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
148,149c148
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
148,149c148
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 ][BZ_MAX_ALPHA_SIZE];
148,149c148
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 limit[BZ_MAX_ALPHA_SIZE];
(94.7 %, 10809 bytes)
146,147c146
<   UChar selectorMtf[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf[BZ_MAX_ALPHA_SIZE];
146,147c146
<   UChar selectorMtf[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf[BZ_MAX_ALPHA_SIZE];
146,147c146
<   UChar selectorMtf[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar selectorMtf[BZ_N_GROUPS];
(94.8 %, 10750 bytes)
146,149c146
<   UChar selectorMtf[BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
---
>   UChar selectorMtf;
146,150c146
<   UChar selectorMtf[BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
---
>   UChar selectorMtf[Int32 save_j;
146,150c146
<   UChar selectorMtf[BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
---
>   UChar selectorMtf[BZ_MAX_ALPHA_SIZEsave_j;
147,150d146
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
(94.8 %, 10684 bytes)
147,150d146
<   Int32 save_j;
<   Int32 save_t;
<   Int32 save_alphaSize;
<   Int32 save_nGroups;
147,150d146
<   Int32 save_j;
<   Int32 save_t;
<   Int32 save_alphaSize;
<   Int32 save_nGroups;
(94.8 %, 10606 bytes)
147,150d146
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
147,150d146
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
147,150d146
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
(94.9 %, 10518 bytes)
147,150d146
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
147,150d146
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
147,150d146
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
(94.9 %, 10434 bytes)
147,150d146
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
147,150d146
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
147,150d146
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
(94.9 %, 10365 bytes)
147,150d146
<   Int32 save_zvec;
<   Int32 save_zj;
<   Int32 save_gSel;
<   Int32 save_gMinlen;
147,150d146
<   Int32 save_zvec;
<   Int32 save_zj;
<   Int32 save_gSel;
<   Int32 save_gMinlen;
(95.0 %, 10288 bytes)
147,149d146
<   Int32 *save_gLimit;
<   Int32 *save_gBase;
<   Int32 *save_gPerm;
147,151c147
<   Int32 *save_gLimit;
<   Int32 *save_gBase;
<   Int32 *save_gPerm;
< 
< } DState;
---
>   } DState;
147,151c147
<   Int32 *save_gLimit;
<   Int32 *save_gBase;
<   Int32 *save_gPerm;
< 
< } DState;
---
>   Int32 DState;
(95.0 %, 10224 bytes)
146,151c146
<   UChar selectorMtf;
< 
< } DState;
< 
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
>   UChar selectorMtfs->tt[s->tPos];                                                    \
148,151c148
< } DState;
< 
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> ->tt[s->tPos];                                                    \
148,151c148
< } DState;
< 
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> } tt[s->tPos];                                                    \
148,151c148
< } DState;
< 
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> } DState[s->tPos];                                                    \
150,151c150
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> s->tPos];                                                    \
150,151c150
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #->tPos];                                                    \
150,151c150
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define tPos];                                                    \
150,151c150
< #define BZ_GET_FAST                                                            \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define BZ_GET_FAST                                                            ];                                                    \
(95.1 %, 10130 bytes)
150,152c150
< #define tPos];                                                    \
<   cccc = ;                                                                     \
<   s->tPos >>= 8;
---
> #define 8;
150,152c150
< #define tPos];                                                    \
<   cccc = ;                                                                     \
<   s->tPos >>= 8;
---
> #define tPos;
150,154c150
< #define tPos];                                                    \
<   cccc = ;                                                                     \
<   s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C                                                          \
---
> #define tPos]#define BZ_GET_FAST_C                                                          \
(95.1 %, 9978 bytes)
150,153c150
< #define tPos;
< 
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define tPos\
152,154c152
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
<   cccc = ;                                                                     \
---
> cccc = ;                                                                     \
152,154c152
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
<   cccc = ;                                                                     \
---
> #= ;                                                                     \
152,154c152
< #define BZ_GET_FAST_C                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
<   cccc = ;                                                                     \
---
> #define ;                                                                     \
153,154d152
<   c_tPos = c_tt[c_tPos];                                                       \
<   cccc = ;                                                                     \
(95.2 %, 9815 bytes)
150,156c150
< #define tPos\
<   cccc = ;                                                                     \
<   c_tPos >>= 8;
< 
< #define SET_LL4
< 
< #define GET_LL4
---
> #define tPos#define GET_LL4
151,156c151
<   cccc = ;                                                                     \
<   c_tPos >>= 8;
< 
< #define SET_LL4
< 
< #define GET_LL4
---
>   define GET_LL4
(95.3 %, 9698 bytes)
150,156c150
< #define tPos#define GET_LL4
< 
< #define SET_LL
< 
< #define GET_LL
< 
< #define BZ_GET_SMALL                                                           \
---
> #define tPos\
150,157c150
< #define tPos#define GET_LL4
< 
< #define SET_LL
< 
< #define GET_LL
< 
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define tPos#cccc = BZ2_indexIntoF;                                                       \
150,157c150
< #define tPos#define GET_LL4
< 
< #define SET_LL
< 
< #define GET_LL
< 
< #define BZ_GET_SMALL                                                           \
<   cccc = BZ2_indexIntoF;                                                       \
---
> #define tPos#define = BZ2_indexIntoF;                                                       \
(95.3 %, 9570 bytes)
150,154c150
< #define tPos\
<   cccc = BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
< 
< extern Int32 BZ2_decompress(DState *);
---
> #define tPosextern Int32 BZ2_decompress(DState *);
151,154c151
<   cccc = BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
< 
< extern Int32 BZ2_decompress(DState *);
---
>   Int32 BZ2_decompress(DState *);
151,154c151
<   cccc = BZ2_indexIntoF;                                                       \
<   s->tPos = GET_LL;
< 
< extern Int32 BZ2_decompress(DState *);
---
>   cccc BZ2_decompress(DState *);
(95.4 %, 9466 bytes)
150,154c150
< #define tPosextern Int32 BZ2_decompress(DState *);
< 
< #define fswap
< 
< #define fvswap
---
> #define tPosextern fvswap
150,156c150
< #define tPosextern Int32 BZ2_decompress(DState *);
< 
< #define fswap
< 
< #define fvswap
< 
< #define fmin ?:
---
> #define tPosextern Int32 #define fmin ?:
150,156c150
< #define tPosextern Int32 BZ2_decompress(DState *);
< 
< #define fswap
< 
< #define fvswap
< 
< #define fmin ?:
---
> #define tPosextern Int32 BZ2_decompressdefine fmin ?:
(95.4 %, 9410 bytes)
150,158c150
< #define tPosextern fvswap
< 
< #define fmin ?:
< 
< #define fpush
< 
< #define fpop
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define tPosextern #define FALLBACK_QSORT_SMALL_THRESH 10
152,158c152
< #define fmin ?:
< 
< #define fpush
< 
< #define fpop
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> define FALLBACK_QSORT_SMALL_THRESH 10
152,158c152
< #define fmin ?:
< 
< #define fpush
< 
< #define fpop
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #FALLBACK_QSORT_SMALL_THRESH 10
152,158c152
< #define fmin ?:
< 
< #define fpush
< 
< #define fpop
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define 10
152,159c152
< #define fmin ?:
< 
< #define fpush
< 
< #define fpop
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE 100
---
> #define fmin #define FALLBACK_QSORT_STACK_SIZE 100
(95.4 %, 9356 bytes)
150,154c150
< #define tPosextern #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE 100
< 
< #undef fmin
< #undef fpush
---
> #define tPosextern undef fpush
150,154c150
< #define tPosextern #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE 100
< 
< #undef fmin
< #undef fpush
---
> #define tPosextern #fpush
150,155c150
< #define tPosextern #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE 100
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define tPosextern #define #undef fpop
(95.5 %, 9265 bytes)
150,154c150
< #define tPosextern undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> #define tPosextern undef FALLBACK_QSORT_SMALL_THRESH
150,154c150
< #define tPosextern undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> #define tPosextern undef FALLBACK_QSORT_SMALL_THRESH
(95.5 %, 9213 bytes)
150,153c150
< #define tPosextern undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< #define SET_BH bhtab[ >> 5] |=
---
> #define tPosextern ] |=
150,153c150
< #define tPosextern undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< #define SET_BH bhtab[ >> 5] |=
---
> #define tPosextern undef |=
(95.6 %, 9119 bytes)
150,152c150
< #define tPosextern ] |=
< #define CLEAR_BH bhtab[ >> 5] &= ~
< #define ISSET_BH
---
> #define tPosextern #define ISSET_BH
150,152c150
< #define tPosextern ] |=
< #define CLEAR_BH bhtab[ >> 5] &= ~
< #define ISSET_BH
---
> #define tPosextern ] define ISSET_BH
(95.6 %, 9079 bytes)
150,152c150
< #define tPosextern #define ISSET_BH
< #define WORD_BH bhtab[ >> 5]
< #define UNALIGNED_BH
---
> #define tPosextern define UNALIGNED_BH
150,152c150
< #define tPosextern #define ISSET_BH
< #define WORD_BH bhtab[ >> 5]
< #define UNALIGNED_BH
---
> #define tPosextern #UNALIGNED_BH
150,154c150
< #define tPosextern #define ISSET_BH
< #define WORD_BH bhtab[ >> 5]
< #define UNALIGNED_BH
< 
< #undef SET_BH
---
> #define tPosextern #define #undef SET_BH
(95.6 %, 9032 bytes)
150,155c150
< #define tPosextern define UNALIGNED_BH
< 
< #undef SET_BH
< #undef CLEAR_BH
< #undef ISSET_BH
< #undef WORD_BH
---
> #define tPosextern undef WORD_BH
150,155c150
< #define tPosextern define UNALIGNED_BH
< 
< #undef SET_BH
< #undef CLEAR_BH
< #undef ISSET_BH
< #undef WORD_BH
---
> #define tPosextern define WORD_BH
(95.6 %, 8964 bytes)
150,157c150
< #define tPosextern undef WORD_BH
< #undef UNALIGNED_BH
< 
< #define mswap
< 
< #define mvswap
< 
< #define mmin ?:
---
> #define tPosextern define mmin ?:
150,157c150
< #define tPosextern undef WORD_BH
< #undef UNALIGNED_BH
< 
< #define mswap
< 
< #define mvswap
< 
< #define mmin ?:
---
> #define tPosextern undef mmin ?:
151,157c151
< #undef UNALIGNED_BH
< 
< #define mswap
< 
< #define mvswap
< 
< #define mmin ?:
---
> ?:
(95.7 %, 8897 bytes)
150,156c150
< #define tPosextern define mmin ?:
< 
< #define mpush
< 
< #define mpop
< 
< #define mnextsize
---
> #define tPosextern mnextsize
150,158c150
< #define tPosextern define mmin ?:
< 
< #define mpush
< 
< #define mpop
< 
< #define mnextsize
< 
< #define mnextswap
---
> #define tPosextern define #define mnextswap
(95.7 %, 8844 bytes)
150,156c150
< #define tPosextern mnextsize
< 
< #define mnextswap
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define tPosextern define MAIN_QSORT_STACK_SIZE 100
152,156c152
< #define mnextswap
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> MAIN_QSORT_STACK_SIZE 100
152,156c152
< #define mnextswap
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH
< #define MAIN_QSORT_STACK_SIZE 100
---
> #100
(95.7 %, 8746 bytes)
150,155c150
< #define tPosextern define MAIN_QSORT_STACK_SIZE 100
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
---
> #define tPosextern #undef mpop
150,155c150
< #define tPosextern define MAIN_QSORT_STACK_SIZE 100
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
---
> #define tPosextern define undef mpop
150,155c150
< #define tPosextern define MAIN_QSORT_STACK_SIZE 100
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
---
> #define tPosextern define MAIN_QSORT_STACK_SIZE mpop
(95.8 %, 8672 bytes)
150,154c150
< #define tPosextern #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> #define tPosextern #undef MAIN_QSORT_SMALL_THRESH
150,154c150
< #define tPosextern #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> #define tPosextern #undef MAIN_QSORT_SMALL_THRESH
(95.8 %, 8614 bytes)
150,155c150
< #define tPosextern #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< #define BIGFREQ
< #define SETMASK
---
> #define tPosextern #define SETMASK
150,155c150
< #define tPosextern #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< #define BIGFREQ
< #define SETMASK
---
> #define tPosextern #define SETMASK
150,155c150
< #define tPosextern #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< #define BIGFREQ
< #define SETMASK
---
> #define tPosextern #undef SETMASK
(95.8 %, 8506 bytes)
150,155c150
< #define tPosextern #define SETMASK
< #define CLEARMASK
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define tPosextern #undef CLEARMASK
150,155c150
< #define tPosextern #define SETMASK
< #define CLEARMASK
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define tPosextern #undef CLEARMASK
150,155c150
< #define tPosextern #define SETMASK
< #define CLEARMASK
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define tPosextern #define CLEARMASK
(95.9 %, 8441 bytes)
150,156c150
< #define tPosextern #undef CLEARMASK
< 
< #define WEIGHTOF
< #define DEPTHOF
< #define MYMAX
< 
< #define ADDWEIGHTS |
---
> #define tPosextern #define ADDWEIGHTS |
150,156c150
< #define tPosextern #undef CLEARMASK
< 
< #define WEIGHTOF
< #define DEPTHOF
< #define MYMAX
< 
< #define ADDWEIGHTS |
---
> #define tPosextern #define ADDWEIGHTS |
150,156c150
< #define tPosextern #undef CLEARMASK
< 
< #define WEIGHTOF
< #define DEPTHOF
< #define MYMAX
< 
< #define ADDWEIGHTS |
---
> #define tPosextern #undef ADDWEIGHTS |
(95.9 %, 8375 bytes)
150,156c150
< #define tPosextern #define ADDWEIGHTS |
< 
< #define UPHEAP
< 
< #define DOWNHEAP
< 
< #define bsNEEDW
---
> #define tPosextern bsNEEDW
150,158c150
< #define tPosextern #define ADDWEIGHTS |
< 
< #define UPHEAP
< 
< #define DOWNHEAP
< 
< #define bsNEEDW
< 
< static void makeMaps_e(EState *s);
---
> #define tPosextern #static void makeMaps_e(EState *s);
(95.9 %, 8311 bytes)
150,154c150
< #define tPosextern bsNEEDW
< 
< static void makeMaps_e(EState *s);
< 
< static void generateMTFValues(EState *s);
---
> #define tPosextern generateMTFValues(EState *s);
152,154c152
< static void makeMaps_e(EState *s);
< 
< static void generateMTFValues(EState *s);
---
> (EState *s);
152,154c152
< static void makeMaps_e(EState *s);
< 
< static void generateMTFValues(EState *s);
---
> static EState *s);
152,154c152
< static void makeMaps_e(EState *s);
< 
< static void generateMTFValues(EState *s);
---
> static void *s);
152,154c152
< static void makeMaps_e(EState *s);
< 
< static void generateMTFValues(EState *s);
---
> static void makeMaps_es);
152,154c152
< static void makeMaps_e(EState *s);
< 
< static void generateMTFValues(EState *s);
---
> static void makeMaps_e();
(96.0 %, 8254 bytes)
150,153c150
< #define tPosextern generateMTFValues(EState *s);
< 
< #define BZ_LESSER_ICOST 0
< #define BZ_GREATER_ICOST 15
---
> #define tPosextern define BZ_GREATER_ICOST 15
150,153c150
< #define tPosextern generateMTFValues(EState *s);
< 
< #define BZ_LESSER_ICOST 0
< #define BZ_GREATER_ICOST 15
---
> #define tPosextern generateMTFValuesBZ_GREATER_ICOST 15
(96.0 %, 8196 bytes)
150,155c150
< #define tPosextern define BZ_GREATER_ICOST 15
< 
< #define RETURN ;
< 
< #define GET_BITS                                                               \
<   case lll:                                                                    \
---
> #define tPosextern lll:                                                                    \
150,155c150
< #define tPosextern define BZ_GREATER_ICOST 15
< 
< #define RETURN ;
< 
< #define GET_BITS                                                               \
<   case lll:                                                                    \
---
> #define tPosextern define :                                                                    \
(96.1 %, 8062 bytes)
150,154c150
< #define tPosextern lll:                                                                    \
<     s->state = lll;                                                            \
<     while
< 
< #define GET_UCHAR GET_BITS
---
> #define tPosextern define GET_UCHAR GET_BITS
150,154c150
< #define tPosextern lll:                                                                    \
<     s->state = lll;                                                            \
<     while
< 
< #define GET_UCHAR GET_BITS
---
> #define tPosextern lllGET_UCHAR GET_BITS
150,154c150
< #define tPosextern lll:                                                                    \
<     s->state = lll;                                                            \
<     while
< 
< #define GET_UCHAR GET_BITS
---
> #define tPosextern lll:                                                                    GET_BITS
(96.1 %, 7895 bytes)
150,156c150
< #define tPosextern define GET_UCHAR GET_BITS
< 
< #define GET_BIT GET_BITS
< 
< #define GET_MTF_VAL
< 
< Int32 BZ2_decompress(DState *s);
---
> #define tPosextern (DState *s);
150,156c150
< #define tPosextern define GET_UCHAR GET_BITS
< 
< #define GET_BIT GET_BITS
< 
< #define GET_MTF_VAL
< 
< Int32 BZ2_decompress(DState *s);
---
> #define tPosextern define DState *s);
(96.2 %, 7801 bytes)
150,152c150
< #define tPosextern (DState *s);
< 
< void BZ2_bz__AssertH__fail(int errcode);
---
> #define tPosextern ;
150,154c150
< #define tPosextern (DState *s);
< 
< void BZ2_bz__AssertH__fail(int errcode);
< 
< static void default_bzfree(void *opaque, void *addr);
---
> #define tPosextern (static void default_bzfree(void *opaque, void *addr);
150,154c150
< #define tPosextern (DState *s);
< 
< void BZ2_bz__AssertH__fail(int errcode);
< 
< static void default_bzfree(void *opaque, void *addr);
---
> #define tPosextern (DState void default_bzfree(void *opaque, void *addr);
(96.2 %, 7748 bytes)
150,152c150
< #define tPosextern ;
< 
< static void default_bzfree(void *opaque, void *addr);
---
> #define tPosextern );
152c152
< static void default_bzfree(void *opaque, void *addr);
---
> ;
(96.2 %, 7694 bytes)
150,154c150
< #define tPosextern );
< 
< static void prepare_new_block(EState *s);
< 
< static void init_RL(EState *s);
---
> #define tPosextern void init_RL(EState *s);
150,154c150
< #define tPosextern );
< 
< static void prepare_new_block(EState *s);
< 
< static void init_RL(EState *s);
---
> #define tPosextern )init_RL(EState *s);
152,154c152
< static void prepare_new_block(EState *s);
< 
< static void init_RL(EState *s);
---
> (EState *s);
(96.3 %, 7640 bytes)
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern *strm, int blockSize100k, int verbosity,
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern void strm, int blockSize100k, int verbosity,
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern void init_RL, int blockSize100k, int verbosity,
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern void init_RL(int blockSize100k, int verbosity,
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern void init_RL(EState blockSize100k, int verbosity,
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern void init_RL(EState *, int verbosity,
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern void init_RL(EState *sint verbosity,
150,152c150
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> #define tPosextern void init_RL(EState *s)verbosity,
152c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
---
> ,
152,153c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
---
> int int workFactor);
152,153c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
---
> int BZ_APIBZ2_bzCompressInitworkFactor);
152,153c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
---
> int BZ_APIBZ2_bzCompressInit();
152,153c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
---
> int BZ_APIBZ2_bzCompressInit(bz_stream ;
152,155c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
< 
< #define ADD_CHAR_TO_BLOCK
---
> int BZ_APIBZ2_bzCompressInit(bz_stream *#define ADD_CHAR_TO_BLOCK
152,155c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
< 
< #define ADD_CHAR_TO_BLOCK
---
> int BZ_APIBZ2_bzCompressInit(bz_stream *strmdefine ADD_CHAR_TO_BLOCK
152,155c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
< 
< #define ADD_CHAR_TO_BLOCK
---
> int BZ_APIBZ2_bzCompressInit(bz_stream *strm, ADD_CHAR_TO_BLOCK
152,157c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
< 
< #define ADD_CHAR_TO_BLOCK
< 
< int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
152,157c152
< int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity,
<                              int workFactor);
< 
< #define ADD_CHAR_TO_BLOCK
< 
< int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> int BZ_APIBZ2_bzCompressInit(bz_stream *strm, int blockSize100kBZ_APIBZ2_bzCompress(bz_stream *strm, int action);
(96.3 %, 7546 bytes)
152,156c152
< int BZ_APIBZ2_bzCompressInit();
< 
< #define ADD_CHAR_TO_BLOCK
< 
< int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> int BZ_APIBZ2_bzCompressInit(int action);
152,156c152
< int BZ_APIBZ2_bzCompressInit();
< 
< #define ADD_CHAR_TO_BLOCK
< 
< int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> int BZ_APIBZ2_bzCompressInit()action);
154,156c154
< #define ADD_CHAR_TO_BLOCK
< 
< int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> );
154,156c154
< #define ADD_CHAR_TO_BLOCK
< 
< int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
---
> #;
154,158c154
< #define ADD_CHAR_TO_BLOCK
< 
< int BZ_APIBZ2_bzCompress(bz_stream *strm, int action);
< 
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
---
> #define int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
(96.4 %, 7473 bytes)
152,156c152
< int BZ_APIBZ2_bzCompressInit(int action);
< 
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressInit(int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
152,156c152
< int BZ_APIBZ2_bzCompressInit(int action);
< 
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressInit(int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
152,156c152
< int BZ_APIBZ2_bzCompressInit(int action);
< 
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressInit(int action(bz_stream *strm, int verbosity, int small);
152,156c152
< int BZ_APIBZ2_bzCompressInit(int action);
< 
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressInit(int action)bz_stream *strm, int verbosity, int small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> *strm, int verbosity, int small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int strm, int verbosity, int small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressEnd, int verbosity, int small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressEnd(int verbosity, int small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream verbosity, int small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream *, int small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream *strmint small);
154,156c154
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream *strm)small);
156c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> );
156c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
---
> int ;
156,158c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> int BZ_APIBZ2_bzDecompressInitstatic void unRLE_obuf_to_output_FAST(DState *s);
156,158c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> int BZ_APIBZ2_bzDecompressInit(void unRLE_obuf_to_output_FAST(DState *s);
156,158c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> int BZ_APIBZ2_bzDecompressInit(bz_stream unRLE_obuf_to_output_FAST(DState *s);
156,158c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> int BZ_APIBZ2_bzDecompressInit(bz_stream *(DState *s);
156,158c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> int BZ_APIBZ2_bzDecompressInit(bz_stream *strmDState *s);
156,158c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, *s);
156,158c156
< int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
---
> int BZ_APIBZ2_bzDecompressInit(bz_stream *strm, int s);
(96.4 %, 7404 bytes)
156,160c156
< int ;
< 
< static void unRLE_obuf_to_output_FAST(DState *s);
< 
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> int unRLE_obuf_to_output_SMALL(DState *s);
158,160c158
< static void unRLE_obuf_to_output_FAST(DState *s);
< 
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> (DState *s);
158,160c158
< static void unRLE_obuf_to_output_FAST(DState *s);
< 
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> static DState *s);
158,160c158
< static void unRLE_obuf_to_output_FAST(DState *s);
< 
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> static void *s);
158,160c158
< static void unRLE_obuf_to_output_FAST(DState *s);
< 
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> static void unRLE_obuf_to_output_FASTs);
158,160c158
< static void unRLE_obuf_to_output_FAST(DState *s);
< 
< static void unRLE_obuf_to_output_SMALL(DState *s);
---
> static void unRLE_obuf_to_output_FAST();
(96.4 %, 7338 bytes)
156,158c156
< int unRLE_obuf_to_output_SMALL(DState *s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> int strm);
156,158c156
< int unRLE_obuf_to_output_SMALL(DState *s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> int unRLE_obuf_to_output_SMALL);
156,158c156
< int unRLE_obuf_to_output_SMALL(DState *s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> int unRLE_obuf_to_output_SMALL(;
156,160c156
< int unRLE_obuf_to_output_SMALL(DState *s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int unRLE_obuf_to_output_SMALL(DState int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
156,160c156
< int unRLE_obuf_to_output_SMALL(DState *s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int unRLE_obuf_to_output_SMALL(DState *BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
156,160c156
< int unRLE_obuf_to_output_SMALL(DState *s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int unRLE_obuf_to_output_SMALL(DState *s(bz_stream *strm);
156,160c156
< int unRLE_obuf_to_output_SMALL(DState *s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int unRLE_obuf_to_output_SMALL(DState *s)bz_stream *strm);
158,160c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> *strm);
158,160c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int strm);
158,160c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzDecompress);
158,160c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzDecompress(;
158,162c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
---
> int BZ_APIBZ2_bzDecompress(bz_stream #define BZ_SETERR
158,162c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
---
> int BZ_APIBZ2_bzDecompress(bz_stream *define BZ_SETERR
158,162c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
---
> int BZ_APIBZ2_bzDecompress(bz_stream *strmBZ_SETERR
158,164c158
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> int BZ_APIBZ2_bzDecompress(bz_stream *strm)typedef struct {
160,164c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> struct {
160,164c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> int {
160,165c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
---
> int BZ_APIBZ2_bzDecompressEndFILE *handle;
160,165c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
---
> int BZ_APIBZ2_bzDecompressEnd(*handle;
160,165c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
---
> int BZ_APIBZ2_bzDecompressEnd(bz_stream handle;
160,165c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
---
> int BZ_APIBZ2_bzDecompressEnd(bz_stream *;
160,166c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
> int BZ_APIBZ2_bzDecompressEnd(bz_stream *strmchar buf[BZ_MAX_UNUSED];
160,166c160
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
> int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm)buf[BZ_MAX_UNUSED];
162,166c162
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
> [BZ_MAX_UNUSED];
162,166c162
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
> #BZ_MAX_UNUSED];
162,166c162
< #define BZ_SETERR
< 
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
> #define ];
164,166c164
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
---
> ;
164,167c164
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
> typedef Int32 bufN;
164,167c164
< typedef struct {
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
> typedef struct bufN;
165,167c165
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   ;
165,168c165
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
<   Bool writing;
---
>   FILE Bool writing;
165,168c165
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
<   Bool writing;
---
>   FILE *writing;
(96.4 %, 7285 bytes)
166,169d165
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
166,170c166
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   } bzFile;
166,170c166
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   Bool bzFile;
167,170d166
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
167,172c167
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
167,172c167
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   bz_stream *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
167,172c167
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   bz_stream strmBZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
168,172c168
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   (int *bzerror, FILE *f, int blockSize100k,
168,172c168
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Int32 int *bzerror, FILE *f, int blockSize100k,
168,172c168
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Int32 lastErr*bzerror, FILE *f, int blockSize100k,
169,172c169
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   bzerror, FILE *f, int blockSize100k,
169,172c169
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool , FILE *f, int blockSize100k,
169,172c169
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool initialisedOkFILE *f, int blockSize100k,
170,172c170
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> *f, int blockSize100k,
170,172c170
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } f, int blockSize100k,
170,172c170
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFile, int blockSize100k,
172c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> int blockSize100k,
172c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE blockSize100k,
172c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *,
172,173c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpenint verbosity, int workFactor);
172,173c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(verbosity, int workFactor);
172,173c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int , int workFactor);
172,173c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *int workFactor);
172,173c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerrorworkFactor);
172,173c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, );
172,173c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE ;
172,175c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
172,175c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fBZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
172,175c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, (int *bzerror, BZFILE *b, void *buf, int len);
172,175c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int int *bzerror, BZFILE *b, void *buf, int len);
172,175c172
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k*bzerror, BZFILE *b, void *buf, int len);
173,175c173
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               bzerror, BZFILE *b, void *buf, int len);
173,175c173
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int , BZFILE *b, void *buf, int len);
173,175c173
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosityBZFILE *b, void *buf, int len);
173,175c173
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, *b, void *buf, int len);
173,175c173
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int b, void *buf, int len);
173,175c173
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactor, void *buf, int len);
173,175c173
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactor)void *buf, int len);
175c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> *buf, int len);
175c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void buf, int len);
175c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite, int len);
175c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int len);
175c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int len);
175c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *);
175c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror;
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *(int *bzerror, BZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *bint *bzerror, BZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, *bzerror, BZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void bzerror, BZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *, BZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *bufBZFILE *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, *b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int b, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len, int abandon,
175,177c175
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)int abandon,
177c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> abandon,
177c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void ,
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteCloseunsigned int *nbytes_in, unsigned int *nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *nbytes_in, unsigned int *nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *nbytes_in, unsigned int *nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *nbytes_in, unsigned int *nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, unsigned int *nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, unsigned int *nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE int *nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE **nbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *bnbytes_out);
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, );
177,178c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int ;
177,180c177
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandonvoid BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned (int *bzerror, BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int int *bzerror, BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int **bzerror, BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_inbzerror, BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, , BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned BZFILE *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *b, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_out, int abandon,
178,180c178
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_out)int abandon,
180c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> abandon,
180c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void ,
180,181c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64unsigned int *nbytes_in_lo32,
180,181c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *nbytes_in_lo32,
180,181c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *nbytes_in_lo32,
180,181c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *nbytes_in_lo32,
180,181c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror,
180,182c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, unsigned int *nbytes_in_hi32,
180,182c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE int *nbytes_in_hi32,
180,182c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE **nbytes_in_hi32,
180,182c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *bnbytes_in_hi32,
180,182c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, ,
180,183c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int unsigned int *nbytes_out_lo32,
180,183c180
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandonint *nbytes_out_lo32,
181,183c181
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               *nbytes_out_lo32,
181,183c181
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned nbytes_out_lo32,
181,183c181
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned int ,
181,184c181
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *unsigned int *nbytes_out_hi32);
181,184c181
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *nbytes_in_lo32int *nbytes_out_hi32);
182,184c182
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               *nbytes_out_hi32);
182,184c182
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned nbytes_out_hi32);
182,184c182
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int );
182,184c182
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *;
182,186c182
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_in_hi32BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
183,186c183
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
183,186c183
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
183,186c183
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int (int *bzerror, FILE *f, int verbosity, int small,
183,186c183
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *int *bzerror, FILE *f, int verbosity, int small,
183,186c183
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_lo32*bzerror, FILE *f, int verbosity, int small,
184,186c184
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               bzerror, FILE *f, int verbosity, int small,
184,186c184
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned , FILE *f, int verbosity, int small,
184,186c184
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int FILE *f, int verbosity, int small,
184,186c184
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int **f, int verbosity, int small,
184,186c184
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_hi32f, int verbosity, int small,
184,186c184
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_hi32), int verbosity, int small,
186c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> int verbosity, int small,
186c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE verbosity, int small,
186c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *, int small,
186c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpenint small,
186c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(small,
186c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int ,
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *void *unused, int nUnused);
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror*unused, int nUnused);
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, unused, int nUnused);
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE , int nUnused);
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *int nUnused);
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *fnUnused);
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, );
186,187c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int ;
186,189c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosityvoid BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
186,189c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
186,189c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int (int *bzerror, BZFILE *b);
186,189c186
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int smallint *bzerror, BZFILE *b);
187,189c187
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                              *bzerror, BZFILE *b);
187,189c187
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                              void bzerror, BZFILE *b);
187,189c187
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                              void *, BZFILE *b);
187,189c187
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                              void *unusedBZFILE *b);
187,189c187
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                              void *unused, *b);
187,189c187
<                              void *unused, int nUnused);
< 
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
---
>                              void *unused, int b);
189,190d188
< void BZ_APIBZ2_bzReadClose(int *bzerror, BZFILE *b);
< 
(96.5 %, 7225 bytes)
187,189c187
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int b, void *buf, int len) {
187,189c187
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int b, void *buf, int len) {
187,189c187
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int b)void *buf, int len) {
189c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> *buf, int len) {
189c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int buf, int len) {
189c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead, int len) {
189c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int len) {
189c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int len) {
189c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *) {
189c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror{
189,191c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, bzFile *bzf = b;
189,191c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *bzf = b;
189,191c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *bzf = b;
189,191c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b= b;
189,191c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, b;
189,191c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void ;
189,193c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *BZ_SETERR;
189,193c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf;
189,195c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, if (bzf == NULL || buf == NULL || len < 0)
189,195c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int (bzf == NULL || buf == NULL || len < 0)
189,195c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int lenbzf == NULL || buf == NULL || len < 0)
189,195c189
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) == NULL || buf == NULL || len < 0)
191,195c191
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   NULL || buf == NULL || len < 0)
191,195c191
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   bzFile || buf == NULL || len < 0)
191,195c191
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   bzFile *buf == NULL || len < 0)
191,195c191
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   bzFile *bzf == NULL || len < 0)
191,195c191
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   bzFile *bzf = NULL || len < 0)
191,195c191
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   bzFile *bzf = b|| len < 0)
193,195c193
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   len < 0)
193,195c193
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   BZ_SETERR< 0)
195c195
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   0)
195c195
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if )
195,196c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
---
>   if (;
195,198c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
---
>   if (bzf if (bzf->writing)
195,198c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
---
>   if (bzf == (bzf->writing)
195,198c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
---
>   if (bzf == NULL bzf->writing)
195,198c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
---
>   if (bzf == NULL || ->writing)
195,198c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
---
>   if (bzf == NULL || buf writing)
195,198c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
---
>   if (bzf == NULL || buf == )
195,199c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
<     ;
---
>   if (bzf == NULL || buf == NULL ;
195,201c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
<     ;
< 
<   if (len == 0)
---
>   if (bzf == NULL || buf == NULL || if (len == 0)
195,201c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
<     ;
< 
<   if (len == 0)
---
>   if (bzf == NULL || buf == NULL || len (len == 0)
195,201c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
<     ;
< 
<   if (len == 0)
---
>   if (bzf == NULL || buf == NULL || len < len == 0)
195,201c195
<   if (bzf == NULL || buf == NULL || len < 0)
<     ;
< 
<   if (bzf->writing)
<     ;
< 
<   if (len == 0)
---
>   if (bzf == NULL || buf == NULL || len < 0== 0)
(96.5 %, 7182 bytes)
195,198c195
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf->strm.avail_out = len;
---
>   if (bzf == NULL || buf == NULL || len < ;
195,199c195
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   if (bzf == NULL || buf == NULL || len < len bzf->strm.next_out = buf;
195,199c195
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   if (bzf == NULL || buf == NULL || len < len == ->strm.next_out = buf;
195,199c195
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   if (bzf == NULL || buf == NULL || len < len == 0strm.next_out = buf;
196,199c196
<     ;
< 
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>     .next_out = buf;
198,199c198
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   next_out = buf;
198,199c198
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   bzf= buf;
198,199c198
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   bzf->buf;
198,199c198
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>   bzf->strm;
(96.5 %, 7137 bytes)
198,205c198
<   bzf= buf;
< 
<   while (True)
< 
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzfBZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
198,205c198
<   bzf= buf;
< 
<   while (True)
< 
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzf= (int *bzerror, BZFILE *b, void **unused,
198,205c198
<   bzf= buf;
< 
<   while (True)
< 
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzf= bufint *bzerror, BZFILE *b, void **unused,
200,205c200
<   while (True)
< 
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   *bzerror, BZFILE *b, void **unused,
200,205c200
<   while (True)
< 
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   while bzerror, BZFILE *b, void **unused,
200,205c200
<   while (True)
< 
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   while (, BZFILE *b, void **unused,
200,205c200
<   while (True)
< 
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   while (TrueBZFILE *b, void **unused,
202,205c202
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>     *b, void **unused,
202,205c202
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>     return b, void **unused,
202,205c202
<     return 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>     return 0, void **unused,
203,205c203
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void **unused,
205c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> **unused,
205c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void *unused,
205c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedunused,
205c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(,
205,206c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int int *nUnused);
205,206c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int **nUnused);
205,206c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerrornUnused);
205,206c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, );
205,206c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE ;
205,208c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
205,208c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *bBZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
205,208c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, (char *dest, unsigned int *destLen,
205,208c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void char *dest, unsigned int *destLen,
205,208c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **dest, unsigned int *destLen,
205,208c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **dest, unsigned int *destLen,
205,208c205
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, unsigned int *destLen,
206,208c206
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                unsigned int *destLen,
206,208c206
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int int *destLen,
206,208c206
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int **destLen,
206,208c206
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnuseddestLen,
206,208c206
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnused),
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> char *source, unsigned int sourceLen,
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int *source, unsigned int sourceLen,
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompresssource, unsigned int sourceLen,
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(, unsigned int sourceLen,
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char unsigned int sourceLen,
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *int sourceLen,
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *destsourceLen,
208,209c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, ,
208,210c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int blockSize100k, int verbosity,
208,210c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int blockSize100k, int verbosity,
208,210c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *, int verbosity,
208,210c208
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLenint verbosity,
209,210c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    verbosity,
209,210c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char ,
209,211c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    char *int workFactor);
209,211c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    char *sourceworkFactor);
209,211c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    char *source, );
209,211c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    char *source, unsigned ;
209,213c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    char *source, unsigned int int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
209,213c209
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    char *source, unsigned int sourceLenBZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
210,213c210
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    (char *dest, unsigned int *destLen,
210,213c210
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int char *dest, unsigned int *destLen,
210,213c210
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k*dest, unsigned int *destLen,
210,213c210
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k, dest, unsigned int *destLen,
210,213c210
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k, int , unsigned int *destLen,
210,213c210
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k, int verbosityunsigned int *destLen,
211,213c211
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int *destLen,
211,213c211
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int *destLen,
211,213c211
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactordestLen,
211,213c211
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactor),
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> char *source, unsigned int sourceLen,
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int *source, unsigned int sourceLen,
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompresssource, unsigned int sourceLen,
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(, unsigned int sourceLen,
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char unsigned int sourceLen,
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *int sourceLen,
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *destsourceLen,
213,214c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, ,
213,215c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int small, int verbosity);
213,215c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int small, int verbosity);
213,215c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *, int verbosity);
213,215c213
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLenint verbosity);
214,215c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      verbosity);
214,215c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char );
214,215c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *;
214,217c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      char *sourceBZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
214,217c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      char *source, *BZ_APIBZ2_bzopen(const char *path, const char *mode);
214,217c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      char *source, unsigned BZ_APIBZ2_bzopen(const char *path, const char *mode);
214,217c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      char *source, unsigned int (const char *path, const char *mode);
214,217c214
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      char *source, unsigned int sourceLenconst char *path, const char *mode);
215,217c215
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      char *path, const char *mode);
215,217c215
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      int *path, const char *mode);
215,217c215
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      int smallpath, const char *mode);
215,217c215
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      int small, , const char *mode);
215,217c215
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      int small, int const char *mode);
215,217c215
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      int small, int verbositychar *mode);
215,217c215
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                      int small, int verbosity)*mode);
217c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> mode);
217c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZFILE );
217c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZFILE *;
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopenBZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(*BZ_APIBZ2_bzdopen(int fd, const char *mode);
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const BZ_APIBZ2_bzdopen(int fd, const char *mode);
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char (int fd, const char *mode);
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *int fd, const char *mode);
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *path, , const char *mode);
217,219c217
< BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZFILE *BZ_APIBZ2_bzdopen(int fd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *path, const const char *mode);
(96.5 %, 7085 bytes)
217,220c217
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd(BZFILE *b, void *buf, int len) {
217,220c217
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, BZFILE *b, void *buf, int len) {
217,220c217
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const *b, void *buf, int len) {
217,220c217
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char b, void *buf, int len) {
217,220c217
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *, void *buf, int len) {
217,220c217
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *modevoid *buf, int len) {
217,220c217
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode)*buf, int len) {
219,220c219
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> buf, int len) {
219,220c219
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int , int len) {
219,220c219
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread_nreadint len) {
220c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> len) {
220c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int ) {
220c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread{
220,221c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(int bzerr;
220,221c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE bzerr;
220,221c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE *;
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *bif (((bzFile *)b)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, (((bzFile *)b)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void ((bzFile *)b)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *(bzFile *)b)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *bufbzFile *)b)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, *)b)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int )b)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int lenb)->lastErr == BZ_STREAM_END)
220,222c220
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) )->lastErr == BZ_STREAM_END)
221,222c221
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   ->lastErr == BZ_STREAM_END)
221,222c221
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int lastErr == BZ_STREAM_END)
221,222c221
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr== BZ_STREAM_END)
222c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   BZ_STREAM_END)
222c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if )
222,223c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
---
>   if (return 0;
222,223c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
---
>   if ((0;
222,223c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
---
>   if (((;
222,224c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile BZ_APIBZ2_bzread_nread = 0;
222,224c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile *= 0;
222,224c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile *)0;
222,224c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile *)b;
222,225c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
222,225c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->(bzerr == BZ_OK || bzerr == BZ_STREAM_END)
222,225c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->lastErr bzerr == BZ_OK || bzerr == BZ_STREAM_END)
222,225c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->lastErr == == BZ_OK || bzerr == BZ_STREAM_END)
222,225c222
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->lastErr == BZ_STREAM_ENDBZ_OK || bzerr == BZ_STREAM_END)
223,225c223
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     || bzerr == BZ_STREAM_END)
223,225c223
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     return bzerr == BZ_STREAM_END)
223,225c223
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     return 0== BZ_STREAM_END)
224,225c224
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   BZ_STREAM_END)
224,225c224
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   BZ_APIBZ2_bzread_nread )
224,226c224
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>   BZ_APIBZ2_bzread_nread = ;
224,227c224
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
---
>   BZ_APIBZ2_bzread_nread = 0else
225,228c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
---
>   ;
225,229c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
---
>   if }
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (bzerr BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (bzerr == (BZFILE *b, void *buf, int len);
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK BZFILE *b, void *buf, int len);
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || *b, void *buf, int len);
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || bzerr b, void *buf, int len);
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || bzerr == , void *buf, int len);
225,231c225
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDvoid *buf, int len);
226,231c226
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>     *buf, int len);
227,231c227
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   buf, int len);
228,231c228
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>     , int len);
229,231c229
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int len);
231c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> len);
231c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int );
231c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int BZ_APIBZ2_bzwrite;
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(int BZ_APIBZ2_bzflush(BZFILE *b);
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE BZ_APIBZ2_bzflush(BZFILE *b);
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *(BZFILE *b);
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *bBZFILE *b);
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, *b);
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void b);
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *);
231,233c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf;
231,235c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, void BZ_APIBZ2_bzclose(BZFILE *b);
231,235c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int BZ_APIBZ2_bzclose(BZFILE *b);
231,235c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len(BZFILE *b);
231,235c231
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len)BZFILE *b);
233,235c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> *b);
233,235c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int b);
233,235c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzflush);
233,235c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzflush(;
233,237c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> int BZ_APIBZ2_bzflush(BZFILE const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
233,237c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> int BZ_APIBZ2_bzflush(BZFILE *char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
233,237c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> int BZ_APIBZ2_bzflush(BZFILE *b*BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
233,237c233
< int BZ_APIBZ2_bzflush(BZFILE *b);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> int BZ_APIBZ2_bzflush(BZFILE *b)BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> (BZFILE *b, int *errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> void BZFILE *b, int *errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> void BZ_APIBZ2_bzclose*b, int *errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> void BZ_APIBZ2_bzclose(b, int *errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> void BZ_APIBZ2_bzclose(BZFILE , int *errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> void BZ_APIBZ2_bzclose(BZFILE *int *errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> void BZ_APIBZ2_bzclose(BZFILE *b*errnum);
235,237c235
< void BZ_APIBZ2_bzclose(BZFILE *b);
< 
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> void BZ_APIBZ2_bzclose(BZFILE *b)errnum);
237c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> );
237c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
---
> const ;
237,239c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define BZ_UNIX 1
---
> const char #define BZ_UNIX 1
237,239c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define BZ_UNIX 1
---
> const char *define BZ_UNIX 1
237,239c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define BZ_UNIX 1
---
> const char *BZ_APIBZ2_bzerrorBZ_UNIX 1
237,239c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define BZ_UNIX 1
---
> const char *BZ_APIBZ2_bzerror(1
237,241c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
---
> const char *BZ_APIBZ2_bzerror(BZFILE #define BZ_LCCWIN32 0
237,241c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
---
> const char *BZ_APIBZ2_bzerror(BZFILE *define BZ_LCCWIN32 0
237,241c237
< const char *BZ_APIBZ2_bzerror(BZFILE *b, int *errnum);
< 
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
---
> const char *BZ_APIBZ2_bzerror(BZFILE *bBZ_LCCWIN32 0
(96.6 %, 7038 bytes)
237,243c237
< const ;
< 
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
---
> const signal.h>
239,243c239
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
---
> .h>
239,243c239
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
---
> #h>
239,243c239
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
---
> #define >
239,244c239
< #define BZ_UNIX 1
< 
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
< #include <errno.h>
---
> #define BZ_UNIX #include <errno.h>
241,244c241
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
< #include <errno.h>
---
> include <errno.h>
241,244c241
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
< #include <errno.h>
---
> #<errno.h>
241,244c241
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
< #include <errno.h>
---
> #define errno.h>
241,244c241
< #define BZ_LCCWIN32 0
< 
< #include <signal.h>
< #include <errno.h>
---
> #define BZ_LCCWIN32 .h>
(96.6 %, 6993 bytes)
241,244d240
< #define errno.h>
< 
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
241,247c241
< #define errno.h>
< 
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
< 
< #if BZ_UNIX
---
> #define errno#if BZ_UNIX
241,247c241
< #define errno.h>
< 
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
< 
< #if BZ_UNIX
---
> #define errno.if BZ_UNIX
241,247c241
< #define errno.h>
< 
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
< 
< #if BZ_UNIX
---
> #define errno.hBZ_UNIX
243,247d242
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
< 
< #if BZ_UNIX
243,247d242
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
< 
< #if BZ_UNIX
243,248c243
< #define ERROR_IF_EOF
< #define ERROR_IF_NOT_ZERO
< #define ERROR_IF_MINUS_ONE
< 
< #if BZ_UNIX
< #include <fcntl.h>
---
> #define <fcntl.h>
(96.6 %, 6928 bytes)
241,245c241
< #define ERROR_IF_MINUS_ONE
< 
< #if BZ_UNIX
< #include <fcntl.h>
< #include <utime.h>
---
> #define include <utime.h>
243,245c243
< #if BZ_UNIX
< #include <fcntl.h>
< #include <utime.h>
---
> <utime.h>
243,245c243
< #if BZ_UNIX
< #include <fcntl.h>
< #include <utime.h>
---
> #utime.h>
243,245c243
< #if BZ_UNIX
< #include <fcntl.h>
< #include <utime.h>
---
> #if .h>
244,245c244
< #include <fcntl.h>
< #include <utime.h>
---
> h>
244,245c244
< #include <fcntl.h>
< #include <utime.h>
---
> #>
244,247c244
< #include <fcntl.h>
< #include <utime.h>
< 
< #define PATH_SEP '/'
---
> #include #define PATH_SEP '/'
244,247c244
< #include <fcntl.h>
< #include <utime.h>
< 
< #define PATH_SEP '/'
---
> #include <define PATH_SEP '/'
244,247c244
< #include <fcntl.h>
< #include <utime.h>
< 
< #define PATH_SEP '/'
---
> #include <fcntlPATH_SEP '/'
244,247c244
< #include <fcntl.h>
< #include <utime.h>
< 
< #define PATH_SEP '/'
---
> #include <fcntl.'/'
244,248c244
< #include <fcntl.h>
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
---
> #include <fcntl.h#define MY_LSTAT lstat
245,248c245
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
---
> define MY_LSTAT lstat
245,248c245
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
---
> #MY_LSTAT lstat
245,248c245
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
---
> #include lstat
245,249c245
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
< #define MY_STAT stat
---
> #include <#define MY_STAT stat
245,249c245
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
< #define MY_STAT stat
---
> #include <utimedefine MY_STAT stat
245,249c245
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
< #define MY_STAT stat
---
> #include <utime.MY_STAT stat
245,249c245
< #include <utime.h>
< 
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
< #define MY_STAT stat
---
> #include <utime.hstat
247,249d246
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
< #define MY_STAT stat
247,249d246
< #define PATH_SEP '/'
< #define MY_LSTAT lstat
< #define MY_STAT stat
(96.7 %, 6863 bytes)
247,250c247
< #define MY_S_ISREG S_ISREG
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
---
> = snocString
247,250c247
< #define MY_S_ISREG S_ISREG
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
---
> #snocString
247,252c247
< #define MY_S_ISREG S_ISREG
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
< 
< #define APPEND_FLAG root = snocString
---
> #define #define APPEND_FLAG root = snocString
247,252c247
< #define MY_S_ISREG S_ISREG
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
< 
< #define APPEND_FLAG root = snocString
---
> #define MY_S_ISREG define APPEND_FLAG root = snocString
248,252c248
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
< 
< #define APPEND_FLAG root = snocString
---
> APPEND_FLAG root = snocString
248,252c248
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
< 
< #define APPEND_FLAG root = snocString
---
> #root = snocString
248,252c248
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
< 
< #define APPEND_FLAG root = snocString
---
> #define = snocString
248,252c248
< #define MY_S_ISDIR S_ISDIR
< 
< #define APPEND_FILESPEC root = snocString
< 
< #define APPEND_FLAG root = snocString
---
> #define MY_S_ISDIR snocString
(96.7 %, 6783 bytes)
247,253c247
< #define MY_S_ISREG define APPEND_FLAG root = snocString
< 
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
---
> #define MY_S_ISREG endif
247,255c247
< #define MY_S_ISREG define APPEND_FLAG root = snocString
< 
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #define True
---
> #define MY_S_ISREG define #define True
247,255c247
< #define MY_S_ISREG define APPEND_FLAG root = snocString
< 
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #define True
---
> #define MY_S_ISREG define APPEND_FLAG define True
247,255c247
< #define MY_S_ISREG define APPEND_FLAG root = snocString
< 
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #define True
---
> #define MY_S_ISREG define APPEND_FLAG root True
247,256c247
< #define MY_S_ISREG define APPEND_FLAG root = snocString
< 
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #define True
< #define False
---
> #define MY_S_ISREG define APPEND_FLAG root = #define False
249,256c249
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #define True
< #define False
---
> define False
249,256c249
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #define True
< #define False
---
> #False
249,258c249
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #define True
< #define False
< 
< typedef int IntNative;
---
> #define typedef int IntNative;
251,258c251
< #define NORETURN
< 
< #endif
< 
< #define True
< #define False
< 
< typedef int IntNative;
---
> int IntNative;
251,258c251
< #define NORETURN
< 
< #endif
< 
< #define True
< #define False
< 
< typedef int IntNative;
---
> #IntNative;
251,258c251
< #define NORETURN
< 
< #endif
< 
< #define True
< #define False
< 
< typedef int IntNative;
---
> #define ;
253,259d252
< #endif
< 
< #define True
< #define False
< 
< typedef int IntNative;
< 
253,259d252
< #endif
< 
< #define True
< #define False
< 
< typedef int IntNative;
< 
255,260c255
< #define True
< #define False
< 
< typedef int IntNative;
< 
< #define SM_I2O 1
---
> SM_I2O 1
255,260c255
< #define True
< #define False
< 
< typedef int IntNative;
< 
< #define SM_I2O 1
---
> #1
255,261c255
< #define True
< #define False
< 
< typedef int IntNative;
< 
< #define SM_I2O 1
< #define SM_F2O 2
---
> #define #define SM_F2O 2
256,261c256
< #define False
< 
< typedef int IntNative;
< 
< #define SM_I2O 1
< #define SM_F2O 2
---
> define SM_F2O 2
256,261c256
< #define False
< 
< typedef int IntNative;
< 
< #define SM_I2O 1
< #define SM_F2O 2
---
> #SM_F2O 2
256,261c256
< #define False
< 
< typedef int IntNative;
< 
< #define SM_I2O 1
< #define SM_F2O 2
---
> #define 2
258,261d257
< typedef int IntNative;
< 
< #define SM_I2O 1
< #define SM_F2O 2
(96.7 %, 6717 bytes)
256,259d255
< #define SM_F2O 2
< #define SM_F2F 3
< 
< #define OM_Z 1
256,259d255
< #define SM_F2O 2
< #define SM_F2F 3
< 
< #define OM_Z 1
(96.7 %, 6667 bytes)
255,259c255
< #1
< #define OM_UNZ 2
< #define OM_TEST 3
< 
< #define FILE_NAME_LEN 1034
---
> #1034
256,260d255
< #define OM_UNZ 2
< #define OM_TEST 3
< 
< #define FILE_NAME_LEN 1034
< 
(96.8 %, 6607 bytes)
255,263c255
< #1034
< 
< typedef struct UInt64;
< 
< #if BZ_UNIX
< 
< #endif
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #BZ_N_SUFFIX_PAIRS 4
257,263c257
< typedef struct UInt64;
< 
< #if BZ_UNIX
< 
< #endif
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> 4
257,265c257
< typedef struct UInt64;
< 
< #if BZ_UNIX
< 
< #endif
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< typedef int Cell;
---
> typedef typedef int Cell;
257,265c257
< typedef struct UInt64;
< 
< #if BZ_UNIX
< 
< #endif
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< typedef int Cell;
---
> typedef struct int Cell;
257,265c257
< typedef struct UInt64;
< 
< #if BZ_UNIX
< 
< #endif
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< typedef int Cell;
---
> typedef struct UInt64Cell;
259,265c259
< #if BZ_UNIX
< 
< #endif
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< typedef int Cell;
---
> ;
(96.8 %, 6542 bytes)
257,259c257
< typedef struct UInt64Cell;
< 
< #define ISFLAG
---
> typedef struct UInt64Cell
\ No newline at end of file
259d258
< #define ISFLAG
259c259
< #define ISFLAG
---
> #
\ No newline at end of file
(96.8 %, 6527 bytes)
===< pass_clex :: rm-toks-7 >===
3,5d2
< #define _BZLIB_H
< 
< #define BZ_OK 3
3,5d2
< #define _BZLIB_H
< 
< #define BZ_OK 3
3,5d2
< #define _BZLIB_H
< 
< #define BZ_OK 3
5,6c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
---
> 4
5,7c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> ##define BZ_CONFIG_ERROR
5,7c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define define BZ_CONFIG_ERROR
5,7c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_OK BZ_CONFIG_ERROR
6,8d5
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
< 
6,9c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
---
> #struct {
6,9c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
---
> #define {
6,10c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   unsigned int total_in_hi32;
---
> #define BZ_STREAM_END unsigned int total_in_hi32;
7,10c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   unsigned int total_in_hi32;
---
> int total_in_hi32;
7,10c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   unsigned int total_in_hi32;
---
> #total_in_hi32;
7,10c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   unsigned int total_in_hi32;
---
> #define ;
9,12c9
< typedef struct {
<   unsigned int total_in_hi32;
< 
<   char *next_out;
---
> char *next_out;
9,12c9
< typedef struct {
<   unsigned int total_in_hi32;
< 
<   char *next_out;
---
> typedef *next_out;
9,12c9
< typedef struct {
<   unsigned int total_in_hi32;
< 
<   char *next_out;
---
> typedef struct next_out;
10,12c10
<   unsigned int total_in_hi32;
< 
<   char *next_out;
---
>   ;
10,13c10
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
---
>   unsigned unsigned int avail_out;
10,13c10
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
---
>   unsigned int int avail_out;
10,13c10
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
---
>   unsigned int total_in_hi32avail_out;
(96.8 %, 6482 bytes)
10,14c10
<   ;
<   unsigned int avail_out;
< 
<   ;
< } bz_stream;
---
>   bz_stream;
11,12d10
<   unsigned int avail_out;
< 
14d11
< } bz_stream;
11,16c11
<   unsigned int avail_out;
< 
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   unsigned #include <stdio.h>
11,16c11
<   unsigned int avail_out;
< 
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   unsigned int include <stdio.h>
11,16c11
<   unsigned int avail_out;
< 
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   unsigned int avail_out<stdio.h>
13,16c13
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   stdio.h>
14,16c14
< } bz_stream;
< 
< #include <stdio.h>
---
> .h>
14,16c14
< } bz_stream;
< 
< #include <stdio.h>
---
> } h>
14,16c14
< } bz_stream;
< 
< #include <stdio.h>
---
> } bz_stream>
16,17d15
< #include <stdio.h>
< 
16,17d15
< #include <stdio.h>
< 
16,18c16
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include BZ_API(func) func
16,18c16
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <(func) func
16,18c16
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdiofunc) func
16,18c16
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdio.) func
16,18c16
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdio.hfunc
18d17
< #define BZ_API(func) func
18d17
< #define BZ_API(func) func
(96.8 %, 6456 bytes)
18,20c18
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
---
> ();
18,20c18
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
---
> #);
18,20c18
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
---
> #define ;
18,22c18
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
---
> #define BZ_EXTERN BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
20,22c20
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
20,22c20
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit();
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
---
> BZ_EXTERN BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
(96.9 %, 6403 bytes)
20c20
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
---
> ;
20,22c20
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
20,22c20
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzCompressEndint BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
20,22c20
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzCompressEnd(BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
20,22c20
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream (bz_stream *strm);
20,22c20
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream *bz_stream *strm);
20,22c20
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> int BZ_APIBZ2_bzCompressEnd(bz_stream *strm*strm);
(96.9 %, 6359 bytes)
20,22c20
< ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> strm);
22c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> );
22c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> BZ_EXTERN ;
22,24c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int #define BZ_MAX_UNUSED 5000
22,24c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnddefine BZ_MAX_UNUSED 5000
22,24c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(BZ_MAX_UNUSED 5000
22,24c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream 5000
22,26c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *typedef void BZFILE;
22,26c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strmvoid BZFILE;
22,26c22
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm)BZFILE;
(96.9 %, 6313 bytes)
22,26c22
< BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN BZFILE;
24,26c24
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> ;
24,28c24
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> #BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
24,28c24
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> #define BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
24,28c24
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> #define BZ_MAX_UNUSED *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
26,28c26
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
26,28c26
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef (int *bzerror, FILE *f, int verbosity,
26,28c26
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef void int *bzerror, FILE *f, int verbosity,
26,28c26
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILE*bzerror, FILE *f, int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> bzerror, FILE *f, int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN , FILE *f, int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE FILE *f, int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE **f, int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpenf, int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(, int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int int verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *verbosity,
28c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror,
28,29c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, int small, void *unused, int nUnusedb);
28,29c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE small, void *unused, int nUnusedb);
28,29c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *, void *unused, int nUnusedb);
28,29c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *fvoid *unused, int nUnusedb);
28,29c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, *unused, int nUnusedb);
28,29c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int unused, int nUnusedb);
28,29c28
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int nUnusedb);
29c29
<                                        int small, void *unused, int nUnusedb);
---
>                                        int nUnusedb);
29c29
<                                        int small, void *unused, int nUnusedb);
---
>                                        int nUnusedb);
29c29
<                                        int small, void *unused, int nUnusedb);
---
>                                        int small);
29c29
<                                        int small, void *unused, int nUnusedb);
---
>                                        int small, ;
29,31c29
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
29,31c29
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
29,31c29
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *unusedBZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
29,31c29
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *unused, (int *bzerror, BZFILE *b, void **unused,
29,31c29
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *unused, int int *bzerror, BZFILE *b, void **unused,
29,31c29
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *unused, int nUnusedb*bzerror, BZFILE *b, void **unused,
29,31c29
<                                        int small, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>                                        int small, void *unused, int nUnusedb)bzerror, BZFILE *b, void **unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> , BZFILE *b, void **unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN BZFILE *b, void **unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void *b, void **unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnusedb, void **unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(, void **unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int void **unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int ***unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror*unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, unused,
31c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE ,
31,32c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *int *nUnused);
31,32c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b*nUnused);
31,32c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, nUnused);
31,32c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void );
31,32c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *;
31,34c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
31,34c31
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unusedint BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int (int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnused*bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnused)bzerror, BZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> , BZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int *b, void *buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzReadb, void *buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(, void *buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int void *buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int **buf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerrorbuf, int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, , int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE int len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *len);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b);
34c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, ;
34,36c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
34,36c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
34,36c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf*BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
34,36c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
34,36c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int (int *bzerror, FILE *f,
34,36c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int lenint *bzerror, FILE *f,
34,36c34
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len)*bzerror, FILE *f,
36c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> bzerror, FILE *f,
36c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN , FILE *f,
36c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE FILE *f,
36c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE **f,
36c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpenf,
36c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(,
36,37c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int int blockSize100k, int verbosity,
36,37c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *blockSize100k, int verbosity,
36,37c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, int verbosity,
36,37c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, int verbosity,
36,37c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE verbosity,
36,37c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *,
36,38c36
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fint workFactor);
37,38c37
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         workFactor);
37,38c37
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int );
37,38c37
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int blockSize100k;
37,40c37
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100k, BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
37,40c37
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100k, int void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
37,40c37
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100k, int verbosityBZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
38,40c38
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         (int *bzerror, BZFILE *b, void *buf, int len);
38,40c38
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int int *bzerror, BZFILE *b, void *buf, int len);
38,40c38
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactor*bzerror, BZFILE *b, void *buf, int len);
38,40c38
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactor)bzerror, BZFILE *b, void *buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> , BZFILE *b, void *buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *b, void *buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void *b, void *buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteb, void *buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(, void *buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int void *buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int **buf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerrorbuf, int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, , int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE int len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *len);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b);
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, ;
40,42c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
40,42c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
40,42c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *bufBZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
40,42c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, (int *bzerror, BZFILE *b, int abandon,
40,42c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int int *bzerror, BZFILE *b, int abandon,
40,42c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len*bzerror, BZFILE *b, int abandon,
40,42c40
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)bzerror, BZFILE *b, int abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> , BZFILE *b, int abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN BZFILE *b, int abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void *b, int abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteCloseb, int abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(, int abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int int abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *abandon,
42c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror,
42,43c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, unsigned int *nbytes_in,
42,43c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE int *nbytes_in,
42,43c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE **nbytes_in,
42,43c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *bnbytes_in,
42,43c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, ,
42,44c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int unsigned int *nbytes_out);
42,44c42
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandonint *nbytes_out);
43,44c43
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       *nbytes_out);
43,44c43
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned nbytes_out);
43,44c43
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned int );
43,44c43
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned int *;
43,46c43
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_inBZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
44,46c44
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
44,46c44
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
44,46c44
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int (int *bzerror, BZFILE *b, int abandon,
44,46c44
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *int *bzerror, BZFILE *b, int abandon,
44,46c44
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_out*bzerror, BZFILE *b, int abandon,
44,46c44
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_out)bzerror, BZFILE *b, int abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> , BZFILE *b, int abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN BZFILE *b, int abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void *b, int abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64b, int abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(, int abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int int abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *abandon,
46c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror,
46,47c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, unsigned int *nbytes_in_lo32,
46,47c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE int *nbytes_in_lo32,
46,47c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE **nbytes_in_lo32,
46,47c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *bnbytes_in_lo32,
46,47c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, ,
46,48c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int unsigned int *nbytes_in_hi32,
46,48c46
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandonint *nbytes_in_hi32,
47,48c47
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         *nbytes_in_hi32,
47,48c47
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned nbytes_in_hi32,
47,48c47
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned int ,
47,49c47
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned int *unsigned int *nbytes_out_lo32,
47,49c47
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned int *nbytes_in_lo32int *nbytes_out_lo32,
48,49c48
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         *nbytes_out_lo32,
48,49c48
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned nbytes_out_lo32,
48,49c48
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned int ,
48,50c48
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *unsigned int *nbytes_out_hi32);
48,50c48
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *nbytes_in_hi32int *nbytes_out_hi32);
49,50c49
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         *nbytes_out_hi32);
49,50c49
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned nbytes_out_hi32);
49,50c49
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int );
49,50c49
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *;
49,52c49
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_lo32BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
50,52c50
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
50,52c50
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
50,52c50
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int (char *dest, unsigned int *destLen,
50,52c50
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *char *dest, unsigned int *destLen,
50,52c50
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32*dest, unsigned int *destLen,
50,52c50
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32)dest, unsigned int *destLen,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> , unsigned int *destLen,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN unsigned int *destLen,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int int *destLen,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress*destLen,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(destLen,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char ,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *char *source,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest*source,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, source,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned ,
52,54c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int unsigned int sourceLen,
52,54c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *int sourceLen,
52,54c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLensourceLen,
53,54c53
<                                              char *source,
<                                              unsigned int sourceLen,
---
>                                              ,
53,55c53
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              char int blockSize100k, int verbosity,
53,55c53
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              char *blockSize100k, int verbosity,
53,55c53
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              char *source, int verbosity,
54,55c54
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              int verbosity,
54,55c54
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned verbosity,
54,55c54
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned int ,
54,56c54
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              unsigned int sourceLenint workFactor);
55,56c55
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              workFactor);
55,56c55
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int );
55,56c55
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int blockSize100k;
55,58c55
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int blockSize100k, BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
55,58c55
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int blockSize100k, int int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
55,58c55
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int blockSize100k, int verbosityBZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
56,58c56
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              (char *dest,
56,58c56
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int char *dest,
56,58c56
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int workFactor*dest,
56,58c56
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int workFactor)dest,
58c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> ,
58,59c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN unsigned int *destLen,
58,59c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int int *destLen,
58,59c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress*destLen,
58,59c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(destLen,
58,59c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char ,
58,60c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *char *source,
58,60c58
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
<                                                char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest*source,
59,60c59
<                                                unsigned int *destLen,
<                                                char *source,
---
>                                                source,
59,60c59
<                                                unsigned int *destLen,
<                                                char *source,
---
>                                                unsigned ,
59,61c59
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                unsigned int unsigned int sourceLen,
59,61c59
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                unsigned int *int sourceLen,
59,61c59
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                unsigned int *destLensourceLen,
60,61c60
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                ,
60,62c60
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                char int small, int verbosity);
60,62c60
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                char *small, int verbosity);
60,62c60
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                char *source, int verbosity);
61,62c61
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                int verbosity);
61,62c61
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned verbosity);
61,62c61
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int );
61,62c61
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int sourceLen;
62,64c62
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
62,64c62
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int const char *BZ_APIBZ2_bzlibVersion(void);
62,64c62
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int smallchar *BZ_APIBZ2_bzlibVersion(void);
62,64c62
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int small, *BZ_APIBZ2_bzlibVersion(void);
62,64c62
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int small, int BZ_APIBZ2_bzlibVersion(void);
62,64c62
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int small, int verbosity(void);
62,64c62
<                                                int small, int verbosity);
< 
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
>                                                int small, int verbosity)void);
64c64
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
> );
64c64
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
> BZ_EXTERN ;
64,66c64
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
64,66c64
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
64,66c64
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char **BZ_APIBZ2_bzopen(const char *path, const char *mode);
64,66c64
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersionBZ_APIBZ2_bzopen(const char *path, const char *mode);
(96.9 %, 6273 bytes)
64,66c64
< BZ_EXTERN ;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN char *path, const char *mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> *path, const char *mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN path, const char *mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE , const char *mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *const char *mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopenchar *mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(*mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const mode);
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char );
66c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *;
66,68c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *pathBZ_EXTERN ;
66,68c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, ;
66,70c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
66,70c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
66,70c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
66,70c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode(BZFILE *b, void *buf, int len);
66,70c66
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode)BZFILE *b, void *buf, int len);
68,70c68
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> *b, void *buf, int len);
68,70c68
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN b, void *buf, int len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> , void *buf, int len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void *buf, int len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int *buf, int len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzreadbuf, int len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(, int len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE int len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *len);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b);
70c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, ;
70,72c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
70,72c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
70,72c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *bufBZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
70,72c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, (BZFILE *b, void *buf, int len);
70,72c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int BZFILE *b, void *buf, int len);
70,72c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len*b, void *buf, int len);
70,72c70
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len)b, void *buf, int len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> , void *buf, int len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void *buf, int len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int *buf, int len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzwritebuf, int len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(, int len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE int len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *len);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b);
72c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, ;
72,74c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush();
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void BZ_EXTERN int BZ_APIBZ2_bzflush();
72,74c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush();
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *int BZ_APIBZ2_bzflush();
72,74c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush();
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *bufBZ_APIBZ2_bzflush();
72,74c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush();
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, ();
72,74c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush();
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
72,74c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush();
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len;
72,76c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush();
< 
< BZ_EXTERN const ;
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len)BZ_EXTERN const ;
74,76c74
< BZ_EXTERN int BZ_APIBZ2_bzflush();
< 
< BZ_EXTERN const ;
---
> const ;
(97.0 %, 6234 bytes)
72,76c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
< 
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int _BZLIB_PRIVATE_H
72,78c72
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
< 
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int )#include <stdlib.h>
74,78c74
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> include <stdlib.h>
74,78c74
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN <stdlib.h>
74,78c74
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const stdlib.h>
76,78c76
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> .h>
76,78c76
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> #h>
76,78c76
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> #define >
78,79d77
< #include <stdlib.h>
< 
78,79d77
< #include <stdlib.h>
< 
(97.0 %, 6213 bytes)
78,80c78
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> Bool;
78,80c78
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #;
78,81c78
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> #define typedef unsigned char UChar;
78,81c78
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> #define BZ_VERSION unsigned char UChar;
80,81c80
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> char UChar;
80,81c80
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> typedef UChar;
80,81c80
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> typedef unsigned ;
80,82c80
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
---
> typedef unsigned char typedef int Int32;
80,82c80
< typedef unsigned char Bool;
< typedef unsigned char UChar;
< typedef int Int32;
---
> typedef unsigned char Boolint Int32;
81,82c81
< typedef unsigned char UChar;
< typedef int Int32;
---
> Int32;
81,82c81
< typedef unsigned char UChar;
< typedef int Int32;
---
> typedef ;
81,83c81
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned typedef unsigned int UInt32;
81,83c81
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned char unsigned int UInt32;
81,83c81
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned char UCharint UInt32;
82,83c82
< typedef int Int32;
< typedef unsigned int UInt32;
---
> UInt32;
82,83c82
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef ;
82,84c82
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef int typedef short Int16;
82,84c82
< typedef int Int32;
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef int Int32short Int16;
83,84c83
< typedef unsigned int UInt32;
< typedef short Int16;
---
> Int16;
83,84c83
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef ;
83,85c83
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef unsigned typedef unsigned short UInt16;
83,85c83
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef unsigned int unsigned short UInt16;
83,85c83
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef unsigned int UInt32short UInt16;
84,85c84
< typedef short Int16;
< typedef unsigned short UInt16;
---
> UInt16;
84,85c84
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef ;
84,87c84
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
---
> typedef short #define True 1
84,87c84
< typedef short Int16;
< typedef unsigned short UInt16;
< 
< #define True 1
---
> typedef short Int16define True 1
85,87c85
< typedef unsigned short UInt16;
< 
< #define True 1
---
> True 1
85,87c85
< typedef unsigned short UInt16;
< 
< #define True 1
---
> typedef 1
85,88c85
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
---
> typedef unsigned #define False
85,88c85
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
---
> typedef unsigned short define False
85,88c85
< typedef unsigned short UInt16;
< 
< #define True 1
< #define False
---
> typedef unsigned short UInt16False
87,89d86
< #define True 1
< #define False
< 
87,89d86
< #define True 1
< #define False
< 
87,89d86
< #define True 1
< #define False
< 
87,92c87
< #define True 1
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #define True extern void BZ2_bz__AssertH__fail(int errcode);
88,92c88
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> void BZ2_bz__AssertH__fail(int errcode);
88,92c88
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #BZ2_bz__AssertH__fail(int errcode);
88,92c88
< #define False
< 
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #define (int errcode);
90,92c90
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> int errcode);
90,92c90
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #errcode);
90,92c90
< #define __inline__
< 
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> #define );
92c92
< extern void BZ2_bz__AssertH__fail(int errcode);
---
> ;
(97.0 %, 6171 bytes)
88d87
< void BZ2_bz__AssertH__fail(int errcode);
88,89c88
< void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
---
> void define AssertH
88,89c88
< void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
---
> void BZ2_bz__AssertH__failAssertH
88,91c88
< void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define define BZ_HDR_Z 0x5a
---
> void BZ2_bz__AssertH__fail(#define define BZ_HDR_Z 0x5a
88,91c88
< void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define define BZ_HDR_Z 0x5a
---
> void BZ2_bz__AssertH__fail(int define define BZ_HDR_Z 0x5a
88,91c88
< void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define define BZ_HDR_Z 0x5a
---
> void BZ2_bz__AssertH__fail(int errcodedefine BZ_HDR_Z 0x5a
88,91c88
< void BZ2_bz__AssertH__fail(int errcode);
< #define AssertH
< 
< #define define BZ_HDR_Z 0x5a
---
> void BZ2_bz__AssertH__fail(int errcode)BZ_HDR_Z 0x5a
(97.0 %, 6130 bytes)
88,90c88
< #define AssertH
< 
< #define define BZ_HDR_Z 0x5a
---
> 0x5a
88,91c88
< #define AssertH
< 
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> ##define BZ_HDR_h 0x68
88,91c88
< #define AssertH
< 
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> #define define BZ_HDR_h 0x68
90,91c90
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> BZ_HDR_h 0x68
90,91c90
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
---
> #0x68
90,92c90
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
---
> #define #define BZ_HDR_0 0x30
90,92c90
< #define define BZ_HDR_Z 0x5a
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
---
> #define define define BZ_HDR_0 0x30
(97.0 %, 6091 bytes)
88,91c88
< #define define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> #define #define BZ_MAX_ALPHA_SIZE 1
88,91c88
< #define define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> #define define define BZ_MAX_ALPHA_SIZE 1
88,91c88
< #define define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> #define define BZ_HDR_h BZ_MAX_ALPHA_SIZE 1
89,91c89
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> 1
89,93c89
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
---
> ##define BZ_N_GROUPS 6
89,93c89
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
---
> #define define BZ_N_GROUPS 6
89,93c89
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_HDR_0 BZ_N_GROUPS 6
91,93c91
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
---
> 6
91,94c91
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> ##define BZ_G_SIZE 50
91,94c91
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define define BZ_G_SIZE 50
91,94c91
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_MAX_ALPHA_SIZE BZ_G_SIZE 50
93,94c93
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> 50
93,95c93
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> ##define BZ_N_ITERS 4
93,95c93
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define define BZ_N_ITERS 4
93,95c93
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_N_GROUPS BZ_N_ITERS 4
(97.0 %, 6055 bytes)
93,95c93
< #define define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define + 900000 / BZ_G_SIZE
93,95c93
< #define define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define define 900000 / BZ_G_SIZE
93,95c93
< #define define BZ_N_ITERS 4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define define BZ_N_ITERS / BZ_G_SIZE
(97.1 %, 6012 bytes)
93,96c93
< #define define 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define define Int32 rNToGo;                                                                \
93,96c93
< #define define 900000 / BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define define 900000 rNToGo;                                                                \
(97.1 %, 5909 bytes)
93,96c93
< #define define Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
93,96c93
< #define define Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define define Int32 BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
93,96c93
< #define define Int32 rNToGo;                                                                \
<   Int32 rTPos
< 
< #define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define define Int32 rNToGo#define BZ_N_OVERSHOOT
(97.2 %, 5814 bytes)
93,95c93
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
---
> #define define {
93,97c93
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   UInt16 ;
---
> #define define define UInt16 ;
93,97c93
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   UInt16 ;
---
> #define define define BZ_RAND_INIT_MASK                                                      ;
93,98c93
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   UInt16 ;
<   Int32 ;
---
> #define define define BZ_RAND_INIT_MASK                                                      #Int32 ;
93,98c93
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   UInt16 ;
<   Int32 ;
---
> #define define define BZ_RAND_INIT_MASK                                                      #define ;
95,100c95
< typedef struct {
< 
<   UInt16 ;
<   Int32 ;
< 
<   UChar len;
---
> UChar len;
95,100c95
< typedef struct {
< 
<   UInt16 ;
<   Int32 ;
< 
<   UChar len;
---
> typedef len;
95,100c95
< typedef struct {
< 
<   UInt16 ;
<   Int32 ;
< 
<   UChar len;
---
> typedef struct ;
97,101d96
<   UInt16 ;
<   Int32 ;
< 
<   UChar len;
< 
97,102c97
<   UInt16 ;
<   Int32 ;
< 
<   UChar len;
< 
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UInt16 len_pack[BZ_MAX_ALPHA_SIZE][4];
98,102c98
<   Int32 ;
< 
<   UChar len;
< 
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   [BZ_MAX_ALPHA_SIZE][4];
(97.2 %, 5778 bytes)
97c97
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   ];
97c97
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UInt32 ;
97,99c97
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< } EState;
---
>   UInt32 len_pack} EState;
(97.2 %, 5748 bytes)
97,105c97
<   UInt32 ;
< 
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
>   UInt32 define BZ_X_CCRC_4 50
99,105c99
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> BZ_X_CCRC_4 50
99,105c99
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> } 50
99,107c99
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
---
> } EState#define MTFA_SIZE 4096
101,107c101
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
103,107c103
< ;
< 
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
105,107c105
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
---
> 4096
105,108c105
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> ##define MTFL_SIZE 16
105,108c105
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define MTFL_SIZE 16
105,108c105
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define BZ_X_CCRC_4 MTFL_SIZE 16
107,108c107
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> 16
107,110c107
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> #typedef struct {
107,110c107
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> #define struct {
107,110c107
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> #define MTFA_SIZE {
108,112c108
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   Int32 origPtr[257][MTFA_SIZE];
---
> Int32 origPtr[257][MTFA_SIZE];
108,112c108
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   Int32 origPtr[257][MTFA_SIZE];
---
> #origPtr[257][MTFA_SIZE];
108,112c108
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   Int32 origPtr[257][MTFA_SIZE];
---
> #define [257][MTFA_SIZE];
108,112c108
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   Int32 origPtr[257][MTFA_SIZE];
---
> #define MTFL_SIZE 257][MTFA_SIZE];
110,112c110
< typedef struct {
< 
<   Int32 origPtr[257][MTFA_SIZE];
---
> ][MTFA_SIZE];
110,112c110
< typedef struct {
< 
<   Int32 origPtr[257][MTFA_SIZE];
---
> typedef [MTFA_SIZE];
110,112c110
< typedef struct {
< 
<   Int32 origPtr[257][MTFA_SIZE];
---
> typedef struct MTFA_SIZE];
112c112
<   Int32 origPtr[257][MTFA_SIZE];
---
>   ];
112c112
<   Int32 origPtr[257][MTFA_SIZE];
---
>   Int32 ;
112,113c112
<   Int32 origPtr[257][MTFA_SIZE];
<   Int32 ;
---
>   Int32 origPtrInt32 ;
(97.2 %, 5725 bytes)
112,116c112
<   Int32 ;
<   Int32 ;
<   UChar selectorMtf;
< 
< } DState;
---
>   Int32 DState;
113,116c113
<   Int32 ;
<   UChar selectorMtf;
< 
< } DState;
---
>   ;
113,118c113
<   Int32 ;
<   UChar selectorMtf;
< 
< } DState;
< 
< #define tPosextern void init_RL(EState *s);
---
>   Int32 #define tPosextern void init_RL(EState *s);
114,118c114
<   UChar selectorMtf;
< 
< } DState;
< 
< #define tPosextern void init_RL(EState *s);
---
>   define tPosextern void init_RL(EState *s);
114,118c114
<   UChar selectorMtf;
< 
< } DState;
< 
< #define tPosextern void init_RL(EState *s);
---
>   UChar tPosextern void init_RL(EState *s);
114,118c114
<   UChar selectorMtf;
< 
< } DState;
< 
< #define tPosextern void init_RL(EState *s);
---
>   UChar selectorMtfvoid init_RL(EState *s);
116,118c116
< } DState;
< 
< #define tPosextern void init_RL(EState *s);
---
> init_RL(EState *s);
116,118c116
< } DState;
< 
< #define tPosextern void init_RL(EState *s);
---
> } (EState *s);
116,118c116
< } DState;
< 
< #define tPosextern void init_RL(EState *s);
---
> } DStateEState *s);
118c118
< #define tPosextern void init_RL(EState *s);
---
> *s);
118c118
< #define tPosextern void init_RL(EState *s);
---
> #s);
118c118
< #define tPosextern void init_RL(EState *s);
---
> #define );
118c118
< #define tPosextern void init_RL(EState *s);
---
> #define tPosextern ;
118,120c118
< #define tPosextern void init_RL(EState *s);
< 
< int BZ_APIBZ2_bzCompressInit(int action);
---
> #define tPosextern void int BZ_APIBZ2_bzCompressInit(int action);
(97.2 %, 5702 bytes)
120,121d119
< int BZ_APIBZ2_bzCompressInit(int action);
< 
120,121d119
< int BZ_APIBZ2_bzCompressInit(int action);
< 
(97.2 %, 5659 bytes)
118,120c118
< #define tPosextern ;
< 
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
---
> #define tPosextern );
120c120
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
---
> ;
120,122c120
< int BZ_APIBZ2_bzCompressEnd(bz_stream *strm);
< 
< int unRLE_obuf_to_output_SMALL(DState *s);
---
> int int unRLE_obuf_to_output_SMALL(DState *s);
(97.3 %, 5613 bytes)
118,120c118
< #define tPosextern );
< 
< int unRLE_obuf_to_output_SMALL(DState *s);
---
> #define tPosextern s);
118,120c118
< #define tPosextern );
< 
< int unRLE_obuf_to_output_SMALL(DState *s);
---
> #define tPosextern ));
120c120
< int unRLE_obuf_to_output_SMALL(DState *s);
---
> ;
(97.3 %, 5570 bytes)
118,120c118
< #define tPosextern s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> #define tPosextern *strm);
118,120c118
< #define tPosextern s);
< 
< int BZ_APIBZ2_bzDecompress(bz_stream *strm);
---
> #define tPosextern sstrm);
(97.3 %, 5528 bytes)
118,120c118
< #define tPosextern *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> #define tPosextern bz_stream *strm);
118,120c118
< #define tPosextern *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> #define tPosextern **strm);
118,120c118
< #define tPosextern *strm);
< 
< int BZ_APIBZ2_bzDecompressEnd(bz_stream *strm);
---
> #define tPosextern *strmstrm);
(97.3 %, 5489 bytes)
118,120c118
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
---
> #define tPosextern BZ_SETERR
118,122c118
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> #define tPosextern bz_stream typedef struct {
118,122c118
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> #define tPosextern bz_stream *struct {
118,122c118
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> #define tPosextern bz_stream *strm{
119,123d118
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
120,124c120
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   Bool writing;
---
> Bool writing;
120,124c120
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   Bool writing;
---
> #writing;
120,124c120
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   Bool writing;
---
> #define ;
122,125c122
< typedef struct {
<   ;
<   Bool writing;
<   bz_stream strm;
---
> bz_stream strm;
122,125c122
< typedef struct {
<   ;
<   Bool writing;
<   bz_stream strm;
---
> typedef strm;
122,125c122
< typedef struct {
<   ;
<   Bool writing;
<   bz_stream strm;
---
> typedef struct ;
123,125d122
<   ;
<   Bool writing;
<   bz_stream strm;
124,126c124
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
---
>   lastErr;
124,126c124
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
---
>   Bool ;
124,127c124
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Bool writingBool initialisedOk;
125,127c125
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   initialisedOk;
125,127c125
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   bz_stream ;
125,128c125
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   bz_stream strm} bzFile;
126,128c126
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   bzFile;
(97.3 %, 5451 bytes)
123,125c123
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   bzFile;
123,125c123
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   Int32 ;
123,127c123
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Int32 lastErrBZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
124,127c124
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
124,127c124
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
124,127c124
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool initialisedOk(int *bzerror, FILE *f, int blockSize100k,
125,127c125
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> int *bzerror, FILE *f, int blockSize100k,
125,127c125
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } *bzerror, FILE *f, int blockSize100k,
125,127c125
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFilebzerror, FILE *f, int blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> , FILE *f, int blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE FILE *f, int blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE **f, int blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpenf, int blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(, int blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int int blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *blockSize100k,
127c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror,
127,128c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, int verbosity, int workFactor);
127,128c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE verbosity, int workFactor);
127,128c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *, int workFactor);
127,128c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fint workFactor);
127,128c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, workFactor);
127,128c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int );
127,128c127
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k;
128,130c128
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
128,130c128
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
128,130c128
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity(int *bzerror, BZFILE *b, void *buf, int len);
128,130c128
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int *bzerror, BZFILE *b, void *buf, int len);
128,130c128
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int *bzerror, BZFILE *b, void *buf, int len);
128,130c128
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactorbzerror, BZFILE *b, void *buf, int len);
128,130c128
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactor), BZFILE *b, void *buf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *b, void *buf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void *b, void *buf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWriteb, void *buf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(, void *buf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int void *buf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int **buf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerrorbuf, int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, , int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE int len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *len);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b);
130c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, ;
130,132c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
130,132c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
130,132c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf(int *bzerror, BZFILE *b, int abandon,
130,132c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int *bzerror, BZFILE *b, int abandon,
130,132c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int *bzerror, BZFILE *b, int abandon,
130,132c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int lenbzerror, BZFILE *b, int abandon,
130,132c130
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len), BZFILE *b, int abandon,
132c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZFILE *b, int abandon,
132c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void *b, int abandon,
132c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteCloseb, int abandon,
132c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(, int abandon,
132c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int int abandon,
132c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *abandon,
132c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror,
132,133c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, unsigned int *nbytes_in, unsigned int *nbytes_out);
132,133c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE int *nbytes_in, unsigned int *nbytes_out);
132,133c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE **nbytes_in, unsigned int *nbytes_out);
132,133c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *bnbytes_in, unsigned int *nbytes_out);
132,133c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, , unsigned int *nbytes_out);
132,133c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int unsigned int *nbytes_out);
132,133c132
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandonint *nbytes_out);
133c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             *nbytes_out);
133c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned nbytes_out);
133c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int );
133c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *;
133,135c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_invoid BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
133,135c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
133,135c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned (int *bzerror, BZFILE *b, int abandon,
133,135c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int int *bzerror, BZFILE *b, int abandon,
133,135c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int **bzerror, BZFILE *b, int abandon,
133,135c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_outbzerror, BZFILE *b, int abandon,
133,135c133
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_out), BZFILE *b, int abandon,
135c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZFILE *b, int abandon,
135c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void *b, int abandon,
135c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64b, int abandon,
135c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(, int abandon,
135c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int int abandon,
135c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *abandon,
135c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror,
135,136c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, unsigned int *nbytes_in_lo32,
135,136c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE int *nbytes_in_lo32,
135,136c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE **nbytes_in_lo32,
135,136c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *bnbytes_in_lo32,
135,136c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, ,
135,137c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int unsigned int *nbytes_in_hi32,
135,137c135
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandonint *nbytes_in_hi32,
136,137c136
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               *nbytes_in_hi32,
136,137c136
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned nbytes_in_hi32,
136,137c136
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned int ,
136,138c136
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned int *unsigned int *nbytes_out_lo32,
136,138c136
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned int *nbytes_in_lo32int *nbytes_out_lo32,
137,138c137
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               *nbytes_out_lo32,
137,138c137
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned nbytes_out_lo32,
137,138c137
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned int ,
137,139c137
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *unsigned int *nbytes_out_hi32);
137,139c137
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *nbytes_in_hi32int *nbytes_out_hi32);
138,139c138
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               *nbytes_out_hi32);
138,139c138
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned nbytes_out_hi32);
138,139c138
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int );
138,139c138
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *;
138,141c138
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_lo32BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
139,141c139
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
139,141c139
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
139,141c139
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int (int *bzerror, FILE *f, int verbosity, int small,
139,141c139
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *int *bzerror, FILE *f, int verbosity, int small,
139,141c139
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_hi32*bzerror, FILE *f, int verbosity, int small,
139,141c139
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_hi32)bzerror, FILE *f, int verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> , FILE *f, int verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE FILE *f, int verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE **f, int verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpenf, int verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(, int verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int int verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *verbosity, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, int small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE small,
141c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *,
141,142c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *fvoid *unused, int b);
141,142c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, *unused, int b);
141,142c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int unused, int b);
141,142c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int b);
141,142c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int b);
141,142c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int b);
141,142c141
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small);
142c142
<                              void *unused, int b);
---
>                              ;
142,144c142
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
142,144c142
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
142,144c142
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused(int *bzerror, BZFILE *b, void *buf, int len) {
142,144c142
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int *bzerror, BZFILE *b, void *buf, int len) {
142,144c142
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int *bzerror, BZFILE *b, void *buf, int len) {
142,144c142
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int bbzerror, BZFILE *b, void *buf, int len) {
142,144c142
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int b), BZFILE *b, void *buf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *b, void *buf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int *b, void *buf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzReadb, void *buf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(, void *buf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int void *buf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int **buf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerrorbuf, int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, , int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE int len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *len) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b) {
144c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, {
144,146c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void bzFile *bzf = b;
144,146c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void **bzf = b;
144,146c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *bufbzf = b;
144,146c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, = b;
144,146c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int b;
144,146c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len;
144,148c144
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) BZ_SETERR;
146,148c146
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
>   ;
146,150c146
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile if (bzf == NULL || buf == NULL || len < len == 0)
146,150c146
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *(bzf == NULL || buf == NULL || len < len == 0)
146,150c146
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf bzf == NULL || buf == NULL || len < len == 0)
146,150c146
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = == NULL || buf == NULL || len < len == 0)
146,150c146
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = bNULL || buf == NULL || len < len == 0)
148,150c148
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   || buf == NULL || len < len == 0)
148,150c148
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   BZ_SETERRbuf == NULL || len < len == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   == NULL || len < len == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if NULL || len < len == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (|| len < len == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf len < len == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf == < len == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf == NULL len == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf == NULL || == 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf == NULL || buf 0)
150c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf == NULL || buf == )
150,151c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
---
>   if (bzf == NULL || buf == NULL ;
150,153c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= buf;
---
>   if (bzf == NULL || buf == NULL || bzf= buf;
150,153c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= buf;
---
>   if (bzf == NULL || buf == NULL || len = buf;
150,153c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= buf;
---
>   if (bzf == NULL || buf == NULL || len < buf;
150,153c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= buf;
---
>   if (bzf == NULL || buf == NULL || len < len ;
150,155c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= buf;
< 
<   while (True)
---
>   if (bzf == NULL || buf == NULL || len < len == while (True)
150,155c150
<   if (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= buf;
< 
<   while (True)
---
>   if (bzf == NULL || buf == NULL || len < len == 0(True)
151,155c151
<     ;
< 
<   bzf= buf;
< 
<   while (True)
---
>     True)
153,155c153
<   bzf= buf;
< 
<   while (True)
---
>   )
153,157c153
<   bzf= buf;
< 
<   while (True)
< 
<     return 0;
---
>   bzfreturn 0;
153,157c153
<   bzf= buf;
< 
<   while (True)
< 
<     return 0;
---
>   bzf= 0;
154,157d153
< 
<   while (True)
< 
<     return 0;
(97.4 %, 5418 bytes)
153,156c153
<   bzf= 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzf= *bzerror, BZFILE *b, void **unused,
153,156c153
<   bzf= 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzf= 0bzerror, BZFILE *b, void **unused,
154,156c154
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> , BZFILE *b, void **unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *b, void **unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void *b, void **unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedb, void **unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(, void **unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int void **unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int ***unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror*unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, unused,
156c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE ,
156,157c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *int *nUnused);
156,157c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b*nUnused);
156,157c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, nUnused);
156,157c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void );
156,157c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *;
156,159c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
156,159c156
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unusedBZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
157,159c157
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                (char *dest, unsigned int *destLen,
157,159c157
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int char *dest, unsigned int *destLen,
157,159c157
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int **dest, unsigned int *destLen,
157,159c157
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnuseddest, unsigned int *destLen,
157,159c157
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnused), unsigned int *destLen,
159c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> unsigned int *destLen,
159c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int int *destLen,
159c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress*destLen,
159c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(destLen,
159c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char ,
159,160c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *char *source, unsigned int sourceLen,
159,160c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest*source, unsigned int sourceLen,
159,160c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, source, unsigned int sourceLen,
159,160c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned , unsigned int sourceLen,
159,160c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int unsigned int sourceLen,
159,160c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *int sourceLen,
159,160c159
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLensourceLen,
160c160
<                                    char *source, unsigned int sourceLen,
---
>                                    ,
160,161c160
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char int blockSize100k, int verbosity,
160,161c160
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *blockSize100k, int verbosity,
160,161c160
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, int verbosity,
160,161c160
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, int verbosity,
160,161c160
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned verbosity,
160,161c160
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned int ,
160,162c160
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    char *source, unsigned int sourceLenint workFactor);
161,162c161
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    workFactor);
161,162c161
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int );
161,162c161
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int blockSize100k;
161,164c161
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k, int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
161,164c161
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k, int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
161,164c161
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k, int verbosity(char *dest, unsigned int *destLen,
162,164c162
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    char *dest, unsigned int *destLen,
162,164c162
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int *dest, unsigned int *destLen,
162,164c162
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactordest, unsigned int *destLen,
162,164c162
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactor), unsigned int *destLen,
164c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> unsigned int *destLen,
164c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int int *destLen,
164c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress*destLen,
164c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(destLen,
164c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char ,
164,165c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *char *source, unsigned int sourceLen,
164,165c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest*source, unsigned int sourceLen,
164,165c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, source, unsigned int sourceLen,
164,165c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned , unsigned int sourceLen,
164,165c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int unsigned int sourceLen,
164,165c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *int sourceLen,
164,165c164
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLensourceLen,
165c165
<                                      char *source, unsigned int sourceLen,
---
>                                      ,
165,166c165
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char int small, int verbosity);
165,166c165
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *small, int verbosity);
165,166c165
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, int verbosity);
165,166c165
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, int verbosity);
165,166c165
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned verbosity);
165,166c165
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned int );
165,166c165
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned int sourceLen;
166,168c166
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
166,168c166
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
166,168c166
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int smallBZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
166,168c166
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, (const char *pathfd, const char *mode);
166,168c166
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int const char *pathfd, const char *mode);
166,168c166
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int verbositychar *pathfd, const char *mode);
166,168c166
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int verbosity)*pathfd, const char *mode);
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> pathfd, const char *mode);
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE , const char *mode);
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *const char *mode);
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopenchar *mode);
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(*mode);
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const mode);
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char );
168c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *;
168,170c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfdint BZ_APIBZ2_bzread_nread;
168,170c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, BZ_APIBZ2_bzread_nread;
168,170c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const ;
168,171c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
168,171c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
168,171c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode(BZFILE *b, void *buf, int len) {
168,171c168
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode)BZFILE *b, void *buf, int len) {
170,171c170
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> *b, void *buf, int len) {
170,171c170
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int b, void *buf, int len) {
170,171c170
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread_nread, void *buf, int len) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> void *buf, int len) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int *buf, int len) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzreadbuf, int len) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(, int len) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE int len) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *len) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *b) {
171c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *b, {
171,172c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE *b, void int bzerr;
171,172c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *bzerr;
171,172c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf;
171,173c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, if (((bzFile *)b)->lastErr == BZ_STREAM_END)
171,173c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int (((bzFile *)b)->lastErr == BZ_STREAM_END)
171,173c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len((bzFile *)b)->lastErr == BZ_STREAM_END)
171,173c171
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) (bzFile *)b)->lastErr == BZ_STREAM_END)
172,173c172
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   bzFile *)b)->lastErr == BZ_STREAM_END)
172,173c172
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int *)b)->lastErr == BZ_STREAM_END)
172,173c172
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr)b)->lastErr == BZ_STREAM_END)
173c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   b)->lastErr == BZ_STREAM_END)
173c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if )->lastErr == BZ_STREAM_END)
173c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (->lastErr == BZ_STREAM_END)
173c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((lastErr == BZ_STREAM_END)
173c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((== BZ_STREAM_END)
173c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile BZ_STREAM_END)
173c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)
173,174c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
---
>   if (((bzFile *)return 0;
173,174c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
---
>   if (((bzFile *)b0;
173,174c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
---
>   if (((bzFile *)b);
173,175c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile *)b)->BZ_APIBZ2_bzread_nread = 0;
173,175c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile *)b)->lastErr = 0;
173,175c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile *)b)->lastErr == 0;
173,175c173
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
---
>   if (((bzFile *)b)->lastErr == BZ_STREAM_END;
174,176c174
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
174,176c174
<     return 0;
<   BZ_APIBZ2_bzread_nread = 0;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     return (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
(97.4 %, 5376 bytes)
174c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     == BZ_STREAM_END)
174c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if BZ_STREAM_END)
174c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if ()
174,175c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>     if (bzerr ;
174,176c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
---
>     if (bzerr == else
174,177c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
---
>     if (bzerr == BZ_OK ;
174,178c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
---
>     if (bzerr == BZ_OK || }
174,180c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>     if (bzerr == BZ_OK || bzerr int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
174,180c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>     if (bzerr == BZ_OK || bzerr == BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
174,180c174
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END(BZFILE *b, void *buf, int len);
175,180c175
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>     BZFILE *b, void *buf, int len);
176,180c176
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>   *b, void *buf, int len);
177,180c177
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
>     b, void *buf, int len);
178,180c178
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> , void *buf, int len);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> void *buf, int len);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int *buf, int len);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int BZ_APIBZ2_bzwritebuf, int len);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int BZ_APIBZ2_bzwrite(, int len);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int BZ_APIBZ2_bzwrite(BZFILE int len);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int BZ_APIBZ2_bzwrite(BZFILE *len);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b);
180c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, ;
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void int BZ_APIBZ2_bzflush(BZFILE *b);
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *BZ_APIBZ2_bzflush(BZFILE *b);
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf(BZFILE *b);
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, BZFILE *b);
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int *b);
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenb);
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len);
< 
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int len));
182c182
< int BZ_APIBZ2_bzflush(BZFILE *b);
---
> ;
(97.4 %, 5342 bytes)
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenb);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
180,182c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenb);
< 
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenb));
182c182
< void BZ_APIBZ2_bzclose(BZFILE *b);
---
> ;
(97.4 %, 5307 bytes)
180,184c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
< 
< const ;
< 
< #define BZ_UNIX 1
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb1
180,186c180
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
< 
< const ;
< 
< #define BZ_UNIX 1
< 
< #define ERROR_IF_MINUS_ONE
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb)#define ERROR_IF_MINUS_ONE
182,186c182
< const ;
< 
< #define BZ_UNIX 1
< 
< #define ERROR_IF_MINUS_ONE
---
> define ERROR_IF_MINUS_ONE
182,186c182
< const ;
< 
< #define BZ_UNIX 1
< 
< #define ERROR_IF_MINUS_ONE
---
> const ERROR_IF_MINUS_ONE
184,187d183
< #define BZ_UNIX 1
< 
< #define ERROR_IF_MINUS_ONE
< 
184,187d183
< #define BZ_UNIX 1
< 
< #define ERROR_IF_MINUS_ONE
< 
(97.4 %, 5260 bytes)
184,185c184
< #if BZ_UNIX
< #include <fcntl.h>
---
> .h>
184,185c184
< #if BZ_UNIX
< #include <fcntl.h>
---
> #h>
184,185c184
< #if BZ_UNIX
< #include <fcntl.h>
---
> #if >
185d184
< #include <fcntl.h>
185d184
< #include <fcntl.h>
(97.4 %, 5241 bytes)
185,186d184
< #include <utime.h>
< 
185,186d184
< #include <utime.h>
< 
185,187c185
< #include <utime.h>
< 
< #define MY_S_ISREG define APPEND_FLAG root = snocString
---
> #include MY_S_ISREG define APPEND_FLAG root = snocString
(97.5 %, 5221 bytes)
185c185
< #define MY_S_ISREG define APPEND_FLAG root = snocString
---
> snocString
185,187c185
< #define MY_S_ISREG define APPEND_FLAG root = snocString
< 
< #define SET_BINARY_MODE
---
> ##define SET_BINARY_MODE
(97.5 %, 5176 bytes)
185,190d184
< snocString
< 
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
187,191c187
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
---
> endif
187,193c187
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #1034
---
> ##1034
187,193c187
< #define SET_BINARY_MODE
< 
< #define NORETURN
< 
< #endif
< 
< #1034
---
> #define 1034
189,194d188
< #define NORETURN
< 
< #endif
< 
< #1034
< 
189,195c189
< #define NORETURN
< 
< #endif
< 
< #1034
< 
< typedef struct UInt64Cell;
---
> #struct UInt64Cell;
189,195c189
< #define NORETURN
< 
< #endif
< 
< #1034
< 
< typedef struct UInt64Cell;
---
> #define UInt64Cell;
(97.5 %, 5121 bytes)
185,189c185
< #endif
< 
< #1034
< 
< typedef struct UInt64Cell;
---
> ;
185,190c185
< #endif
< 
< #1034
< 
< typedef struct UInt64Cell;
< 
---
> #
\ No newline at end of file
187,190d186
< #1034
< 
< typedef struct UInt64Cell;
< 
187,190c187
< #1034
< 
< typedef struct UInt64Cell;
< 
---
> #
\ No newline at end of file
(97.5 %, 5086 bytes)
===< pass_clex :: rm-toks-5 >===
3,5c3
< #define _BZLIB_H
< 
< #define BZ_OK 3
---
> BZ_OK 3
3,5c3
< #define _BZLIB_H
< 
< #define BZ_OK 3
---
> #3
3,6c3
< #define _BZLIB_H
< 
< #define BZ_OK 3
< #define BZ_STREAM_END 4
---
> #define #define BZ_STREAM_END 4
5,6c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 4
5,6c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
---
> #BZ_STREAM_END 4
5,6c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
---
> #define 4
5,7c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_OK #define BZ_CONFIG_ERROR
6,7c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> define BZ_CONFIG_ERROR
6,7c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #BZ_CONFIG_ERROR
6,9c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
---
> #define typedef struct {
6,9c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
---
> #define BZ_STREAM_END struct {
7,9c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
---
> {
7,10c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   ;
---
> #;
7,11c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
<   ;
<   unsigned int avail_out;
---
> #define unsigned int avail_out;
9,11c9
< typedef struct {
<   ;
<   unsigned int avail_out;
---
> int avail_out;
9,11c9
< typedef struct {
<   ;
<   unsigned int avail_out;
---
> typedef avail_out;
9,11c9
< typedef struct {
<   ;
<   unsigned int avail_out;
---
> typedef struct ;
11,13d10
<   unsigned int avail_out;
< 
<   ;
11,14c11
<   unsigned int avail_out;
< 
<   ;
< } bz_stream;
---
>   } bz_stream;
11,14c11
<   unsigned int avail_out;
< 
<   ;
< } bz_stream;
---
>   unsigned bz_stream;
(97.5 %, 5055 bytes)
10,13c10
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   include <stdio.h>
11,13c11
< } bz_stream;
< 
< #include <stdio.h>
---
> <stdio.h>
11,13c11
< } bz_stream;
< 
< #include <stdio.h>
---
> } stdio.h>
11,13c11
< } bz_stream;
< 
< #include <stdio.h>
---
> } bz_stream.h>
13c13
< #include <stdio.h>
---
> h>
13c13
< #include <stdio.h>
---
> #>
13,15c13
< #include <stdio.h>
< 
< #define BZ_EXTERN extern
---
> #include #define BZ_EXTERN extern
13,15c13
< #include <stdio.h>
< 
< #define BZ_EXTERN extern
---
> #include <define BZ_EXTERN extern
13,15c13
< #include <stdio.h>
< 
< #define BZ_EXTERN extern
---
> #include <stdioBZ_EXTERN extern
13,15c13
< #include <stdio.h>
< 
< #define BZ_EXTERN extern
---
> #include <stdio.extern
13,17c13
< #include <stdio.h>
< 
< #define BZ_EXTERN extern
< 
< ;
---
> #include <stdio.h;
15,18d14
< #define BZ_EXTERN extern
< 
< ;
< 
15,19c15
< #define BZ_EXTERN extern
< 
< ;
< 
< BZ_EXTERN ;
---
> #;
15,21c15
< #define BZ_EXTERN extern
< 
< ;
< 
< BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
---
> #define #define BZ_MAX_UNUSED 5000
15,21c15
< #define BZ_EXTERN extern
< 
< ;
< 
< BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_EXTERN define BZ_MAX_UNUSED 5000
17,21c17
< ;
< 
< BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_MAX_UNUSED 5000
19,21c19
< BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
---
> 5000
19,23c19
< BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN typedef void BZFILE;
21,23c21
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> void BZFILE;
21,23c21
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #BZFILE;
21,23c21
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #define ;
21,25c21
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> #define BZ_MAX_UNUSED BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
23,25c23
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILE(int *bzerror, FILE *f, int verbosity,
25c25
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> int *bzerror, FILE *f, int verbosity,
25c25
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN *bzerror, FILE *f, int verbosity,
25c25
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE bzerror, FILE *f, int verbosity,
25c25
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *, FILE *f, int verbosity,
25c25
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpenFILE *f, int verbosity,
25c25
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(*f, int verbosity,
25c25
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity,
(97.6 %, 5014 bytes)
23c23
< typedef void BZFILE(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILEFILE *f, int verbosity,
23c23
< typedef void BZFILE(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILE(*f, int verbosity,
23c23
< typedef void BZFILE(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILE(int f, int verbosity,
23c23
< typedef void BZFILE(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILE(int *, int verbosity,
23c23
< typedef void BZFILE(int *bzerror, FILE *f, int verbosity,
---
> typedef void BZFILE(int *bzerrorint verbosity,
(97.6 %, 4998 bytes)
23,24c23
< typedef void BZFILE(int f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> typedef void BZFILE(int int small, void *unused, int nUnusedb);
23,24c23
< typedef void BZFILE(int f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
23,24c23
< typedef void BZFILE(int f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> typedef void BZFILE(int f, , void *unused, int nUnusedb);
23,24c23
< typedef void BZFILE(int f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> typedef void BZFILE(int f, int void *unused, int nUnusedb);
23,24c23
< typedef void BZFILE(int f, int verbosity,
<                                        int small, void *unused, int nUnusedb);
---
> typedef void BZFILE(int f, int verbosity*unused, int nUnusedb);
24c24
<                                        int small, void *unused, int nUnusedb);
---
>                                        unused, int nUnusedb);
24c24
<                                        int small, void *unused, int nUnusedb);
---
>                                        int , int nUnusedb);
(97.6 %, 4938 bytes)
23c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmallint nUnusedb);
23c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, nUnusedb);
23c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void );
23c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void *;
23,25c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unusedBZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
23,25c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unused, void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
23,25c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unused, int BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
23,25c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unused, int nUnusedb(int *bzerror, BZFILE *b, void **unused,
23,25c23
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unused, int nUnusedb)int *bzerror, BZFILE *b, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> *bzerror, BZFILE *b, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN bzerror, BZFILE *b, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void , BZFILE *b, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnusedBZFILE *b, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(*b, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int b, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *, void **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerrorvoid **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, **unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *unused,
25c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
25,26c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, int *nUnused);
25,26c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *nUnused);
25,26c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *nUnused);
25,26c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **);
25,26c25
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused;
26,28c26
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnused(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnused)int *bzerror, BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> *bzerror, BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN bzerror, BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int , BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzReadBZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(*b, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int b, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *, void *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerrorvoid *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, *buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE buf, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *, int len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *bint len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, len);
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void );
28c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *;
28,30c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *bufBZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
28,30c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
28,30c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
28,30c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int lenBZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
28,30c28
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len)(int *bzerror, FILE *f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> int *bzerror, FILE *f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN *bzerror, FILE *f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE bzerror, FILE *f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *, FILE *f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpenFILE *f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(*f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int f,
30c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *,
30,31c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerrorint blockSize100k, int verbosity,
30,31c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, blockSize100k, int verbosity,
30,31c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE , int verbosity,
30,31c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *int verbosity,
30,31c30
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fverbosity,
31c31
<                                         int blockSize100k, int verbosity,
---
>                                         ,
31,32c31
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int int workFactor);
31,32c31
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int blockSize100kworkFactor);
31,32c31
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int blockSize100k, );
31,32c31
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int blockSize100k, int ;
31,34c31
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int blockSize100k, int verbosityBZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactor(int *bzerror, BZFILE *b, void *buf, int len);
32,34c32
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactor)int *bzerror, BZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> *bzerror, BZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN bzerror, BZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void , BZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteBZFILE *b, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(*b, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int b, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *, void *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerrorvoid *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, *buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE buf, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *, int len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *bint len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, len);
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void );
34c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *;
34,36c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *bufBZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
34,36c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
34,36c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
34,36c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len(int *bzerror, BZFILE *b, int abandon,
34,36c34
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)int *bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> *bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void , BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteCloseBZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(*b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerrorint abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE ,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *unsigned int *nbytes_in,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *bint *nbytes_in,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, *nbytes_in,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int nbytes_in,
37d36
<                                       unsigned int *nbytes_in,
37d36
<                                       unsigned int *nbytes_in,
37d36
<                                       unsigned int *nbytes_in,
37d36
<                                       unsigned int *nbytes_in,
37d36
<                                       unsigned int *nbytes_in,
37,38c37
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned int *nbytes_in);
38c38
<                                       unsigned int *nbytes_out);
---
>                                       ;
38,40c38
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
38,40c38
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
38,40c38
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
38,40c38
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_out(int *bzerror, BZFILE *b, int abandon,
38,40c38
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_out)int *bzerror, BZFILE *b, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> *bzerror, BZFILE *b, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN bzerror, BZFILE *b, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void , BZFILE *b, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64BZFILE *b, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(*b, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int b, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *, int abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerrorint abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, abandon,
40c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE ,
40,41c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *unsigned int *nbytes_in_lo32,
40,41c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *bint *nbytes_in_lo32,
40,41c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, *nbytes_in_lo32,
40,41c40
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int nbytes_in_lo32,
41d40
<                                         unsigned int *nbytes_in_lo32,
41d40
<                                         unsigned int *nbytes_in_lo32,
41d40
<                                         unsigned int *nbytes_in_lo32,
41d40
<                                         unsigned int *nbytes_in_lo32,
41d40
<                                         unsigned int *nbytes_in_lo32,
42d41
<                                         unsigned int *nbytes_in_hi32,
42d41
<                                         unsigned int *nbytes_in_hi32,
42d41
<                                         unsigned int *nbytes_in_hi32,
42d41
<                                         unsigned int *nbytes_in_hi32,
42d41
<                                         unsigned int *nbytes_in_hi32,
43d42
<                                         unsigned int *nbytes_out_lo32,
43d42
<                                         unsigned int *nbytes_out_lo32,
43d42
<                                         unsigned int *nbytes_out_lo32,
43d42
<                                         unsigned int *nbytes_out_lo32,
43d42
<                                         unsigned int *nbytes_out_lo32,
43,44c43
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *nbytes_out_lo32);
44c44
<                                         unsigned int *nbytes_out_hi32);
---
>                                         ;
44,46c44
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
44,46c44
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
44,46c44
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
44,46c44
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32(char *dest, unsigned int *destLen,
44,46c44
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32)char *dest, unsigned int *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> *dest, unsigned int *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN dest, unsigned int *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int , unsigned int *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompressunsigned int *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(int *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *destLen,
46c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest,
46,47c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, char *source,
46,47c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned *source,
46,47c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int source,
46,47c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *,
46,48c46
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
<                                              unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLenunsigned int sourceLen,
47,48c47
<                                              char *source,
<                                              unsigned int sourceLen,
---
>                                              int sourceLen,
47,48c47
<                                              char *source,
<                                              unsigned int sourceLen,
---
>                                              char sourceLen,
47,48c47
<                                              char *source,
<                                              unsigned int sourceLen,
---
>                                              char *,
47,49c47
<                                              char *source,
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              char *sourceint blockSize100k, int verbosity,
48,49c48
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              blockSize100k, int verbosity,
48,49c48
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned , int verbosity,
48,49c48
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned int int verbosity,
48,49c48
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned int sourceLenverbosity,
49c49
<                                              int blockSize100k, int verbosity,
---
>                                              ,
49,50c49
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int int workFactor);
49,50c49
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int blockSize100kworkFactor);
49,50c49
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int blockSize100k, );
49,50c49
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int blockSize100k, int ;
49,52c49
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int blockSize100k, int verbosityBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
50,52c50
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
50,52c50
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
50,52c50
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int workFactor(char *dest,
50,52c50
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int workFactor)char *dest,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> *dest,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_EXTERN dest,
52c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_EXTERN int ,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompressunsigned int *destLen,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(int *destLen,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *destLen,
52,53c52
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *destLen,
53d52
<                                                unsigned int *destLen,
53d52
<                                                unsigned int *destLen,
53,54c53
<                                                unsigned int *destLen,
<                                                char *source,
---
>                                                unsigned *source,
53,54c53
<                                                unsigned int *destLen,
<                                                char *source,
---
>                                                unsigned int source,
53,54c53
<                                                unsigned int *destLen,
<                                                char *source,
---
>                                                unsigned int *,
53,55c53
<                                                unsigned int *destLen,
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                unsigned int *destLenunsigned int sourceLen,
54,55c54
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                int sourceLen,
54,55c54
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                char sourceLen,
54,55c54
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                char *,
54,56c54
<                                                char *source,
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                char *sourceint small, int verbosity);
55,56c55
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                small, int verbosity);
55,56c55
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned , int verbosity);
55,56c55
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int int verbosity);
55,56c55
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int sourceLenverbosity);
56c56
<                                                int small, int verbosity);
---
>                                                );
56c56
<                                                int small, int verbosity);
---
>                                                int ;
56,58c56
<                                                int small, int verbosity);
< 
< BZ_EXTERN ;
---
>                                                int smallBZ_EXTERN ;
56,58c56
<                                                int small, int verbosity);
< 
< BZ_EXTERN ;
---
>                                                int small, ;
56,60c56
<                                                int small, int verbosity);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                                int small, int BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
56,60c56
<                                                int small, int verbosity);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                                int small, int verbosityBZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
56,60c56
<                                                int small, int verbosity);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                                int small, int verbosity)*BZ_APIBZ2_bzopen(const char *path, const char *mode);
58,60c58
< BZ_EXTERN ;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_APIBZ2_bzopen(const char *path, const char *mode);
58,60c58
< BZ_EXTERN ;
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN (const char *path, const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> const char *path, const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN char *path, const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *path, const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *path, const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen, const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *mode);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path);
60c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, ;
60,62c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const BZ_EXTERN ;
60,62c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char ;
60,64c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
60,64c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *modeint BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
60,64c60
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode)BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
62,64c62
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> (BZFILE *b, void *buf, int len);
62,64c62
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *b, void *buf, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> *b, void *buf, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN b, void *buf, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int , void *buf, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzreadvoid *buf, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(*buf, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE buf, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *, int len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *bint len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, len);
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void );
64c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *;
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *bufBZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len(BZFILE *b, void *buf, int );
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len)BZFILE *b, void *buf, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> *b, void *buf, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN b, void *buf, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int , void *buf, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwritevoid *buf, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(*buf, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE buf, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *, int );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *bint );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, );
66c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void ;
66,68c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
< 
< BZ_EXTERN const ;
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *BZ_EXTERN const ;
66,68c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
< 
< BZ_EXTERN const ;
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *bufconst ;
66,68c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
< 
< BZ_EXTERN const ;
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, ;
66,70c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
< 
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int #define _BZLIB_PRIVATE_H
66,70c66
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
< 
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int )define _BZLIB_PRIVATE_H
68,70c68
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
---
> _BZLIB_PRIVATE_H
68,72c68
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN #define BZ_VERSION "1.0.2, 30-Dec-2001"
68,72c68
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const define BZ_VERSION "1.0.2, 30-Dec-2001"
70,72c70
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> BZ_VERSION "1.0.2, 30-Dec-2001"
70,72c70
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
70,74c70
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define typedef unsigned char Bool;
72,74c72
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> unsigned char Bool;
72,74c72
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #char Bool;
72,74c72
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define Bool;
72,74c72
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define BZ_VERSION ;
74d73
< typedef unsigned char Bool;
74d73
< typedef unsigned char Bool;
74d73
< typedef unsigned char Bool;
74d73
< typedef unsigned char Bool;
75d74
< typedef unsigned char UChar;
75d74
< typedef unsigned char UChar;
75d74
< typedef unsigned char UChar;
75,76c75
< typedef unsigned char UChar;
< typedef int Int32;
---
> typedef unsigned Int32;
75,76c75
< typedef unsigned char UChar;
< typedef int Int32;
---
> typedef unsigned char ;
75,77c75
< typedef unsigned char UChar;
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned char UChartypedef unsigned int UInt32;
76,77c76
< typedef int Int32;
< typedef unsigned int UInt32;
---
> unsigned int UInt32;
76,77c76
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int UInt32;
76,77c76
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int UInt32;
77d76
< typedef unsigned int UInt32;
77d76
< typedef unsigned int UInt32;
77d76
< typedef unsigned int UInt32;
77,78c77
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef unsigned Int16;
77,78c77
< typedef unsigned int UInt32;
< typedef short Int16;
---
> typedef unsigned int ;
77,79c77
< typedef unsigned int UInt32;
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef unsigned int UInt32typedef unsigned short UInt16;
78,79c78
< typedef short Int16;
< typedef unsigned short UInt16;
---
> unsigned short UInt16;
78,79c78
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef short UInt16;
78,79c78
< typedef short Int16;
< typedef unsigned short UInt16;
---
> typedef short UInt16;
(97.6 %, 4909 bytes)
78,80c78
< unsigned short UInt16;
< 
< #define True 1
---
> define True 1
78,80c78
< unsigned short UInt16;
< 
< #define True 1
---
> unsigned True 1
78,80c78
< unsigned short UInt16;
< 
< #define True 1
---
> unsigned short 1
78,81c78
< unsigned short UInt16;
< 
< #define True 1
< #define define BZ_HDR_h 0x68
---
> unsigned short UInt16#define define BZ_HDR_h 0x68
80,81c80
< #define True 1
< #define define BZ_HDR_h 0x68
---
> define define BZ_HDR_h 0x68
80,81c80
< #define True 1
< #define define BZ_HDR_h 0x68
---
> #define BZ_HDR_h 0x68
80,81c80
< #define True 1
< #define define BZ_HDR_h 0x68
---
> #define BZ_HDR_h 0x68
80,81c80
< #define True 1
< #define define BZ_HDR_h 0x68
---
> #define True 0x68
(97.6 %, 4887 bytes)
80,81c80
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
---
> #BZ_HDR_0 0x30
80,81c80
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
---
> #define 0x30
80,83c80
< #define BZ_HDR_h 0x68
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> #define BZ_HDR_h #define BZ_MAX_ALPHA_SIZE 1
81,83c81
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> define BZ_MAX_ALPHA_SIZE 1
81,83c81
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> #BZ_MAX_ALPHA_SIZE 1
81,83c81
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
---
> #define 1
81,85c81
< #define BZ_HDR_0 0x30
< 
< #define BZ_MAX_ALPHA_SIZE 1
< 
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define BZ_HDR_0 #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
(97.6 %, 4859 bytes)
80,82c80
< #define BZ_HDR_h #define BZ_MAX_ALPHA_SIZE 1
< 
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define BZ_HDR_h define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
80,82c80
< #define BZ_HDR_h #define BZ_MAX_ALPHA_SIZE 1
< 
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define BZ_HDR_h #define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
80,82c80
< #define BZ_HDR_h #define BZ_MAX_ALPHA_SIZE 1
< 
< #define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define BZ_HDR_h #define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
(97.6 %, 4829 bytes)
80c80
< #define BZ_HDR_h define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define BZ_HDR_h define BZ_N_OVERSHOOT
80c80
< #define BZ_HDR_h define define define BZ_RAND_INIT_MASK                                                      #define BZ_N_OVERSHOOT
---
> #define BZ_HDR_h define BZ_N_OVERSHOOT
(97.7 %, 4736 bytes)
80,84c80
< #define BZ_HDR_h define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   UInt32 ;
---
> #define BZ_HDR_h UInt32 ;
80,84c80
< #define BZ_HDR_h define BZ_N_OVERSHOOT
< 
< typedef struct {
< 
<   UInt32 ;
---
> #define BZ_HDR_h define ;
82,85d81
< typedef struct {
< 
<   UInt32 ;
< 
82,86c82
< typedef struct {
< 
<   UInt32 ;
< 
< } EState;
---
> typedef EState;
82,86c82
< typedef struct {
< 
<   UInt32 ;
< 
< } EState;
---
> typedef struct ;
84,88c84
<   UInt32 ;
< 
< } EState;
< 
< ;
---
>   ;
86,91d85
< } EState;
< 
< ;
< 
< ;
< 
86,91d85
< } EState;
< 
< ;
< 
< ;
< 
86,92c86
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> } define BZ_X_CCRC_4 50
86,92c86
< } EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> } EStateBZ_X_CCRC_4 50
88,92c88
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> 50
(97.7 %, 4712 bytes)
82,88c82
< typedef EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> typedef define BZ_X_CCRC_4 50
82,88c82
< typedef EState;
< 
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> typedef EStateBZ_X_CCRC_4 50
84,88c84
< ;
< 
< ;
< 
< #define BZ_X_CCRC_4 50
---
> 50
86,89d85
< ;
< 
< #define BZ_X_CCRC_4 50
< 
88,90c88
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
88,90c88
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
---
> #MTFA_SIZE 4096
88,90c88
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
---
> #define 4096
88,91c88
< #define BZ_X_CCRC_4 50
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define BZ_X_CCRC_4 #define MTFL_SIZE 16
(97.7 %, 4685 bytes)
86,87c86
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> define MTFL_SIZE 16
86,87c86
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #MTFL_SIZE 16
86,87c86
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define 16
86,89c86
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> #define MTFA_SIZE typedef struct {
87,89c87
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> struct {
87,89c87
< #define MTFL_SIZE 16
< 
< typedef struct {
---
> #{
87,91c87
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   Int32 ;
---
> #define Int32 ;
87,91c87
< #define MTFL_SIZE 16
< 
< typedef struct {
< 
<   Int32 ;
---
> #define MTFL_SIZE ;
89,92c89
< typedef struct {
< 
<   Int32 ;
<   Int32 ;
---
> Int32 ;
89,92c89
< typedef struct {
< 
<   Int32 ;
<   Int32 ;
---
> typedef ;
89,93c89
< typedef struct {
< 
<   Int32 ;
<   Int32 ;
<   UChar selectorMtf;
---
> typedef struct UChar selectorMtf;
91,93c91
<   Int32 ;
<   Int32 ;
<   UChar selectorMtf;
---
>   selectorMtf;
(97.7 %, 4655 bytes)
87,90c87
< struct {
< 
<   Int32 ;
<   Int32 ;
---
> ;
87,91c87
< struct {
< 
<   Int32 ;
<   Int32 ;
<   UChar selectorMtf;
---
> struct UChar selectorMtf;
89,91c89
<   Int32 ;
<   Int32 ;
<   UChar selectorMtf;
---
>   selectorMtf;
90,91d89
<   Int32 ;
<   UChar selectorMtf;
90,93c90
<   Int32 ;
<   UChar selectorMtf;
< 
< } DState;
---
>   } DState;
90,93c90
<   Int32 ;
<   UChar selectorMtf;
< 
< } DState;
---
>   Int32 DState;
(97.7 %, 4624 bytes)
89,93c89
<   Int32 ;
< 
< } DState;
< 
< #define tPosextern bz_stream *strm);
---
>   Int32 define tPosextern bz_stream *strm);
91,93c91
< } DState;
< 
< #define tPosextern bz_stream *strm);
---
> tPosextern bz_stream *strm);
91,93c91
< } DState;
< 
< #define tPosextern bz_stream *strm);
---
> } bz_stream *strm);
91,93c91
< } DState;
< 
< #define tPosextern bz_stream *strm);
---
> } DState*strm);
93c93
< #define tPosextern bz_stream *strm);
---
> strm);
93c93
< #define tPosextern bz_stream *strm);
---
> #);
93c93
< #define tPosextern bz_stream *strm);
---
> #define ;
93,95c93
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
---
> #define tPosextern #define BZ_SETERR
93,95c93
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
---
> #define tPosextern bz_stream define BZ_SETERR
93,95c93
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
---
> #define tPosextern bz_stream *BZ_SETERR
93,97c93
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> #define tPosextern bz_stream *strmtypedef struct {
93,97c93
< #define tPosextern bz_stream *strm);
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> #define tPosextern bz_stream *strm)struct {
95,97c95
< #define BZ_SETERR
< 
< typedef struct {
---
> {
95,98c95
< #define BZ_SETERR
< 
< typedef struct {
<   Int32 lastErr;
---
> #Int32 lastErr;
95,98c95
< #define BZ_SETERR
< 
< typedef struct {
<   Int32 lastErr;
---
> #define lastErr;
97,98c97
< typedef struct {
<   Int32 lastErr;
---
> ;
97,99c97
< typedef struct {
<   Int32 lastErr;
<   Bool initialisedOk;
---
> typedef Bool initialisedOk;
97,99c97
< typedef struct {
<   Int32 lastErr;
<   Bool initialisedOk;
---
> typedef struct initialisedOk;
98,99c98
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   ;
98,100c98
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   Int32 } bzFile;
98,100c98
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   Int32 lastErrbzFile;
99,100c99
<   Bool initialisedOk;
< } bzFile;
---
>   ;
99,102c99
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
99,102c99
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool initialisedOk*BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
100,102c100
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
100,102c100
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } (int *bzerror, FILE *f, int blockSize100k,
100,102c100
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFileint *bzerror, FILE *f, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> *bzerror, FILE *f, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE bzerror, FILE *f, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *, FILE *f, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpenFILE *f, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(*f, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int f, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *, int blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerrorint blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, blockSize100k,
102c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE ,
102,103c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *int verbosity, int workFactor);
102,103c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fverbosity, int workFactor);
102,103c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, , int workFactor);
102,103c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int int workFactor);
102,103c102
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100kworkFactor);
103c103
<                               int verbosity, int workFactor);
---
>                               );
103c103
<                               int verbosity, int workFactor);
---
>                               int ;
103,105c103
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosityvoid BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
103,105c103
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
103,105c103
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int (int *bzerror, BZFILE *b, void *buf, int len);
103,105c103
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactorint *bzerror, BZFILE *b, void *buf, int len);
103,105c103
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactor)*bzerror, BZFILE *b, void *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> bzerror, BZFILE *b, void *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void , BZFILE *b, void *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWriteBZFILE *b, void *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(*b, void *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int b, void *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, void *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerrorvoid *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, *buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE buf, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *, int len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *bint len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, len);
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void );
105c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *;
105,107c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *bufvoid BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
105,107c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
105,107c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int (int *bzerror, BZFILE *b, int abandon,
105,107c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int lenint *bzerror, BZFILE *b, int abandon,
105,107c105
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)*bzerror, BZFILE *b, int abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> bzerror, BZFILE *b, int abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void , BZFILE *b, int abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteCloseBZFILE *b, int abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(*b, int abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int b, int abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, int abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerrorint abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, abandon,
107c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE ,
107,108c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *unsigned int *nbytes_in, unsigned int *nbytes_out);
107,108c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *bint *nbytes_in, unsigned int *nbytes_out);
107,108c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, *nbytes_in, unsigned int *nbytes_out);
107,108c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int nbytes_in, unsigned int *nbytes_out);
107,108c107
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_out);
108c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_out);
108c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_out);
108c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_out);
108c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_out);
108c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_in);
108c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_in, ;
108,110c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
108,110c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
108,110c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *(int *bzerror, BZFILE *b, int abandon,
108,110c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_outint *bzerror, BZFILE *b, int abandon,
108,110c108
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_out)*bzerror, BZFILE *b, int abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> bzerror, BZFILE *b, int abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void , BZFILE *b, int abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64BZFILE *b, int abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(*b, int abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int b, int abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerrorint abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, abandon,
110c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE ,
110,111c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *unsigned int *nbytes_in_lo32,
110,111c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *bint *nbytes_in_lo32,
110,111c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, *nbytes_in_lo32,
110,111c110
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int nbytes_in_lo32,
111d110
<                               unsigned int *nbytes_in_lo32,
111d110
<                               unsigned int *nbytes_in_lo32,
111d110
<                               unsigned int *nbytes_in_lo32,
111d110
<                               unsigned int *nbytes_in_lo32,
111d110
<                               unsigned int *nbytes_in_lo32,
112d111
<                               unsigned int *nbytes_in_hi32,
112d111
<                               unsigned int *nbytes_in_hi32,
112d111
<                               unsigned int *nbytes_in_hi32,
112d111
<                               unsigned int *nbytes_in_hi32,
112d111
<                               unsigned int *nbytes_in_hi32,
113d112
<                               unsigned int *nbytes_out_lo32,
113d112
<                               unsigned int *nbytes_out_lo32,
113d112
<                               unsigned int *nbytes_out_lo32,
113d112
<                               unsigned int *nbytes_out_lo32,
113d112
<                               unsigned int *nbytes_out_lo32,
113,114c113
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *nbytes_out_lo32);
114c114
<                               unsigned int *nbytes_out_hi32);
---
>                               ;
114,116c114
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
114,116c114
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
114,116c114
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
114,116c114
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_hi32(int *bzerror, FILE *f, int verbosity, int small,
114,116c114
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>                               unsigned int *nbytes_out_hi32)int *bzerror, FILE *f, int verbosity, int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> *bzerror, FILE *f, int verbosity, int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE bzerror, FILE *f, int verbosity, int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *, FILE *f, int verbosity, int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpenFILE *f, int verbosity, int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(*f, int verbosity, int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int *, int verbosity, int small,
(97.8 %, 4608 bytes)
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int int small,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
116c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int f, ,
116,117c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int f, int void *unused, int b);
116,117c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity*unused, int b);
116,117c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, unused, int b);
116,117c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int small,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int f, int verbosity, int , int b);
(97.8 %, 4587 bytes)
116,117c116
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int fsmallint b);
117c117
<                              void *unused, int b);
---
>                              b);
117c117
<                              void *unused, int b);
---
>                              void );
117c117
<                              void *unused, int b);
---
>                              void *;
117,119c117
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unusedint BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
117,119c117
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
117,119c117
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int (int *bzerror, BZFILE *b, void *buf, int len) {
117,119c117
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int bint *bzerror, BZFILE *b, void *buf, int len) {
117,119c117
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int b)*bzerror, BZFILE *b, void *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> bzerror, BZFILE *b, void *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int , BZFILE *b, void *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzReadBZFILE *b, void *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(*b, void *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int b, void *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *, void *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerrorvoid *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, *buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE buf, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *, int len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *bint len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, len) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void ) {
119c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *{
119,121c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *bufbzFile *bzf = b;
119,121c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, *bzf = b;
119,121c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int bzf = b;
119,121c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len= b;
119,121c119
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) b;
121c121
<   bzFile *bzf = b;
---
>   ;
121,123c121
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
>   bzFile BZ_SETERR;
121,123c121
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
>   bzFile *;
121,125c121
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf if (bzf == NULL || buf == NULL || len < len == 0)
121,125c121
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
121,125c121
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = bbzf == NULL || buf == NULL || len < len == 0)
123,125c123
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   == NULL || buf == NULL || len < len == 0)
123,125c123
<   BZ_SETERR;
< 
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   BZ_SETERRNULL || buf == NULL || len < len == 0)
125c125
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   || buf == NULL || len < len == 0)
125c125
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if buf == NULL || len < len == 0)
125c125
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (== NULL || len < len == 0)
125c125
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf NULL || len < len == 0)
125c125
<   if (bzf == NULL || buf == NULL || len < len == 0)
---
>   if (bzf == || len < len == 0)
(97.8 %, 4564 bytes)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = buf == NULL || len < len == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (== NULL || len < len == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf NULL || len < len == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == || len < len == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == NULL len < len == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == NULL || < len == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == NULL || buf len == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == NULL || buf == == 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == NULL || buf == NULL 0)
121c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf == NULL || buf == NULL || )
121,122c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
<     ;
---
>   bzFile *bzf = (bzf == NULL || buf == NULL || len ;
121,124c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= 0;
---
>   bzFile *bzf = (bzf == NULL || buf == NULL || len < bzf= 0;
121,124c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= 0;
---
>   bzFile *bzf = (bzf == NULL || buf == NULL || len < len = 0;
121,124c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= 0;
---
>   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0;
121,124c121
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
<     ;
< 
<   bzf= 0;
---
>   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0;
122,125c122
<     ;
< 
<   bzf= 0;
< }
---
>     }
124,127c124
<   bzf= 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
124,127c124
<   bzf= 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzfBZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
124,127c124
<   bzf= 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzf= (int *bzerror, BZFILE *b, void **unused,
124,127c124
<   bzf= 0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   bzf= 0int *bzerror, BZFILE *b, void **unused,
125,127c125
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> *bzerror, BZFILE *b, void **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> bzerror, BZFILE *b, void **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void , BZFILE *b, void **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedBZFILE *b, void **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(*b, void **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int b, void **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, void **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerrorvoid **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, **unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *unused,
127c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
127,128c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, int *nUnused);
127,128c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *nUnused);
127,128c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *nUnused);
127,128c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **);
127,128c127
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused;
128,130c128
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
128,130c128
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
128,130c128
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *(char *dest, unsigned int *destLen,
128,130c128
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnusedchar *dest, unsigned int *destLen,
128,130c128
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnused)*dest, unsigned int *destLen,
130c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> dest, unsigned int *destLen,
130c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int , unsigned int *destLen,
130c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompressunsigned int *destLen,
130c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(int *destLen,
130c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *destLen,
130c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *destLen,
130c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest,
130,131c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, char *source, unsigned int sourceLen,
130,131c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned *source, unsigned int sourceLen,
130,131c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int source, unsigned int sourceLen,
130,131c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *, unsigned int sourceLen,
130,131c130
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLenunsigned int sourceLen,
131c131
<                                    char *source, unsigned int sourceLen,
---
>                                    int sourceLen,
131c131
<                                    char *source, unsigned int sourceLen,
---
>                                    char sourceLen,
131c131
<                                    char *source, unsigned int sourceLen,
---
>                                    char *,
131,132c131
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *sourceint blockSize100k, int verbosity,
131,132c131
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, blockSize100k, int verbosity,
131,132c131
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned , int verbosity,
131,132c131
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned int int verbosity,
131,132c131
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned int sourceLenverbosity,
132c132
<                                    int blockSize100k, int verbosity,
---
>                                    ,
132,133c132
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int int workFactor);
132,133c132
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int blockSize100kworkFactor);
132,133c132
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int blockSize100k, );
132,133c132
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int blockSize100k, int ;
132,135c132
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int blockSize100k, int verbosityint BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
133,135c133
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
133,135c133
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int (char *dest, unsigned int *destLen,
133,135c133
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactorchar *dest, unsigned int *destLen,
133,135c133
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactor)*dest, unsigned int *destLen,
135c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> dest, unsigned int *destLen,
135c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int , unsigned int *destLen,
135c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompressunsigned int *destLen,
135c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(int *destLen,
135c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *destLen,
135c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *destLen,
135c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
135,136c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, char *source, unsigned int sourceLen,
135,136c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned *source, unsigned int sourceLen,
135,136c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int source, unsigned int sourceLen,
135,136c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *, unsigned int sourceLen,
135,136c135
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLenunsigned int sourceLen,
136c136
<                                      char *source, unsigned int sourceLen,
---
>                                      int sourceLen,
136c136
<                                      char *source, unsigned int sourceLen,
---
>                                      char sourceLen,
136c136
<                                      char *source, unsigned int sourceLen,
---
>                                      char *,
136,137c136
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *sourceint small, int verbosity);
136,137c136
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, small, int verbosity);
136,137c136
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned , int verbosity);
136,137c136
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned int int verbosity);
136,137c136
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned int sourceLenverbosity);
137c137
<                                      int small, int verbosity);
---
>                                      );
137c137
<                                      int small, int verbosity);
---
>                                      int ;
137,139c137
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int smallBZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
137,139c137
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
137,139c137
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
137,139c137
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int verbosity(const char *pathfd, const char *mode);
137,139c137
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int verbosity)const char *pathfd, const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> char *pathfd, const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *pathfd, const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *pathfd, const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen, const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *mode);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd);
139c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, ;
139,141c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const int BZ_APIBZ2_bzread_nread;
139,141c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char BZ_APIBZ2_bzread_nread;
139,141c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *;
139,142c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *modeint BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
139,142c139
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode)BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
141,142c141
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
141,142c141
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZFILE *b, void *buf, int len) {
141,142c141
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread_nread*b, void *buf, int len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> b, void *buf, int len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int , void *buf, int len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzreadvoid *buf, int len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(*buf, int len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE buf, int len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *, int len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *bint len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *b, len) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *b, void ) {
142c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *{
142,143c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *bufint bzerr;
142,143c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, bzerr;
142,143c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int ;
142,144c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int lenif (((bzFile *)b)->lastErr == BZ_STREAM_END)
142,144c142
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
> int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) (((bzFile *)b)->lastErr == BZ_STREAM_END)
143,144c143
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   ((bzFile *)b)->lastErr == BZ_STREAM_END)
143,144c143
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int (bzFile *)b)->lastErr == BZ_STREAM_END)
143,144c143
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerrbzFile *)b)->lastErr == BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   *)b)->lastErr == BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if )b)->lastErr == BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (b)->lastErr == BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (()->lastErr == BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((->lastErr == BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile lastErr == BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *== BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)BZ_STREAM_END)
144c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)
144,145c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
144,145c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->(bzerr == BZ_OK || bzerr == BZ_STREAM_END)
144,145c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->lastErr bzerr == BZ_OK || bzerr == BZ_STREAM_END)
144,145c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->lastErr == == BZ_OK || bzerr == BZ_STREAM_END)
144,145c144
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->lastErr == BZ_STREAM_ENDBZ_OK || bzerr == BZ_STREAM_END)
145c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     || bzerr == BZ_STREAM_END)
145c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if bzerr == BZ_STREAM_END)
145c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (== BZ_STREAM_END)
145c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (bzerr BZ_STREAM_END)
145c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (bzerr == )
145,146c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>     if (bzerr == BZ_OK ;
145,147c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
---
>     if (bzerr == BZ_OK || else
145,148c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
---
>     if (bzerr == BZ_OK || bzerr ;
145,149c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
---
>     if (bzerr == BZ_OK || bzerr == }
145,151c145
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
>     if (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDint BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
146,151c146
<     ;
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
>     BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
147,151c147
<   else
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
>   (BZFILE *b, void *buf, int lenbb);
148,151c148
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
>     BZFILE *b, void *buf, int lenbb);
149,151c149
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> *b, void *buf, int lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> b, void *buf, int lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int , void *buf, int lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwritevoid *buf, int lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(*buf, int lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE buf, int lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *, int lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *bint lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, lenbb);
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void );
151c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *;
151,153c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
< 
< const ;
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *bufconst ;
151,153c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
< 
< const ;
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, ;
151,155c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
< 
< const ;
< 
< #if BZ_UNIX
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int #if BZ_UNIX
151,155c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
< 
< const ;
< 
< #if BZ_UNIX
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbbif BZ_UNIX
151,155c151
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
< 
< const ;
< 
< #if BZ_UNIX
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb)BZ_UNIX
153,155d152
< const ;
< 
< #if BZ_UNIX
153,156c153
< const ;
< 
< #if BZ_UNIX
< #endif
---
> const endif
155,157d154
< #if BZ_UNIX
< #endif
< 
155,157c155
< #if BZ_UNIX
< #endif
< 
---
> #
\ No newline at end of file
(97.8 %, 4544 bytes)
===< pass_clex :: rm-toks-2 >===
3c3
< #define _BZLIB_H
---
> _BZLIB_H
3,5c3
< #define _BZLIB_H
< 
< #define BZ_OK 3
---
> ##define BZ_OK 3
3,5c3
< #define _BZLIB_H
< 
< #define BZ_OK 3
---
> #define define BZ_OK 3
5c5
< #define BZ_OK 3
---
> BZ_OK 3
5c5
< #define BZ_OK 3
---
> #3
5,6c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
---
> #define #define BZ_STREAM_END 4
5,6c5
< #define BZ_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_OK define BZ_STREAM_END 4
6c6
< #define BZ_STREAM_END 4
---
> BZ_STREAM_END 4
6c6
< #define BZ_STREAM_END 4
---
> #4
6,7c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define #define BZ_CONFIG_ERROR
6,7c6
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END define BZ_CONFIG_ERROR
7c7
< #define BZ_CONFIG_ERROR
---
> BZ_CONFIG_ERROR
7,9c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
---
> #typedef struct {
7,9c7
< #define BZ_CONFIG_ERROR
< 
< typedef struct {
---
> #define struct {
9c9
< typedef struct {
---
> {
9,10c9
< typedef struct {
<   ;
---
> typedef ;
9,11c9
< typedef struct {
<   ;
< } bz_stream;
---
> typedef struct } bz_stream;
10,11c10
<   ;
< } bz_stream;
---
>   bz_stream;
11c11
< } bz_stream;
---
> ;
11,13c11
< } bz_stream;
< 
< #include <stdio.h>
---
> } #include <stdio.h>
11,13c11
< } bz_stream;
< 
< #include <stdio.h>
---
> } bz_streaminclude <stdio.h>
13c13
< #include <stdio.h>
---
> <stdio.h>
13c13
< #include <stdio.h>
---
> #stdio.h>
13c13
< #include <stdio.h>
---
> #include .h>
13c13
< #include <stdio.h>
---
> #include <h>
13c13
< #include <stdio.h>
---
> #include <stdio>
13,15c13
< #include <stdio.h>
< 
< #define BZ_EXTERN extern
---
> #include <stdio.#define BZ_EXTERN extern
13,15c13
< #include <stdio.h>
< 
< #define BZ_EXTERN extern
---
> #include <stdio.hdefine BZ_EXTERN extern
15c15
< #define BZ_EXTERN extern
---
> BZ_EXTERN extern
15c15
< #define BZ_EXTERN extern
---
> #extern
15,17c15
< #define BZ_EXTERN extern
< 
< ;
---
> #define ;
15,19c15
< #define BZ_EXTERN extern
< 
< ;
< 
< BZ_EXTERN ;
---
> #define BZ_EXTERN BZ_EXTERN ;
19,20d18
< BZ_EXTERN ;
< 
19,20d18
< BZ_EXTERN ;
< 
(97.8 %, 4533 bytes)
15,17c15
< #define BZ_EXTERN BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_EXTERN #define BZ_MAX_UNUSED 5000
15,17c15
< #define BZ_EXTERN BZ_EXTERN ;
< 
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_EXTERN BZ_EXTERN define BZ_MAX_UNUSED 5000
17c17
< #define BZ_MAX_UNUSED 5000
---
> BZ_MAX_UNUSED 5000
17c17
< #define BZ_MAX_UNUSED 5000
---
> #5000
17,19c17
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> #define typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
17,19c17
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> #define BZ_MAX_UNUSED void BZFILE(int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> BZFILE(int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef (int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILEfsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int void *unused, int nUnusedb);
(97.8 %, 4512 bytes)
17,19c17
< #5000
< 
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> #void BZFILE(int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> BZFILE(int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef (int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void int fsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILEfsmall, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(, void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int void *unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall*unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, unused, int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void , int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void *int nUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void *unused, );
19c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
---
> typedef void BZFILE(int fsmall, void *unused, int ;
19,21c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unused, int nUnusedbBZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
19,21c19
< typedef void BZFILE(int fsmall, void *unused, int nUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unused, int nUnusedb)void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN (int *bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void int *bzerror, BZFILE *b, void **unused,
(97.8 %, 4506 bytes)
19,21c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unusednUnusedbBZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
19,21c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> typedef void BZFILE(int fsmall, void *unusednUnusedb)void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN (int *bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void int *bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused*bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(bzerror, BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int , BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *BZFILE *b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror*b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, b, void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b**unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, *unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *,
21,22c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **int *nUnused);
21,22c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused*nUnused);
22c22
<                                          int *nUnused);
---
>                                          nUnused);
(97.8 %, 4504 bytes)
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , *unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void *,
21,22c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **int *nUnused);
21,22c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
<                                          int *nUnused);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused*nUnused);
22c22
<                                          int *nUnused);
---
>                                          nUnused);
22c22
<                                          int *nUnused);
---
>                                          int );
22c22
<                                          int *nUnused);
---
>                                          int *;
22,24c22
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnusedBZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
22,24c22
<                                          int *nUnused);
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                          int *nUnused)int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN (int *bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int int *bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead*bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int , BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *BZFILE *b, void *buf, int len);
24c24
< BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(int *bzerror*b, void *buf, int len);
(97.8 %, 4490 bytes)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> int *bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead*bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(bzerror, BZFILE *b, void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int , BZFILE *b, void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *BZFILE *b, void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror*b, void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, b, void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b*buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void , int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buflen);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, );
(97.8 %, 4488 bytes)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void , int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buflen);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, );
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int ;
24,26c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int lenBZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24,26c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len)BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE (int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen*bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int , FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror*f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE ,
26,27c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *int blockSize100k, int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fblockSize100k, int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         , int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int blockSize100kverbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int blockSize100k, ,
27,28c27
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int blockSize100k, int int workFactor);
27,28c27
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
>                                         int blockSize100k, int verbosityworkFactor);
28c28
<                                         int workFactor);
---
>                                         );
28c28
<                                         int workFactor);
---
>                                         int ;
28,30c28
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactorBZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                         int workFactor);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                         int workFactor)void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN (int *bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void int *bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite*bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int , BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror*b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b*buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void , int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buflen);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, );
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int ;
(97.8 %, 4486 bytes)
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void , int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buflen);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, );
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int ;
30,32c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int lenBZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len)void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN (int *bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void int *bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose*bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int , BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror*b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, b, int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *babandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, ,
32,33c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int unsigned int *nbytes_in,
32,33c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandonint *nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       *nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       unsigned nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       unsigned int ,
(97.8 %, 4484 bytes)
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , ,
32,33c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int unsigned int *nbytes_in,
32,33c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandonint *nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       *nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       unsigned nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       unsigned int ,
33,34c33
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned int *unsigned int *nbytes_out);
33,34c33
<                                       unsigned int *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned int *nbytes_inint *nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                       *nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                       unsigned nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                       unsigned int );
34c34
<                                       unsigned int *nbytes_out);
---
>                                       unsigned int *;
34,36c34
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_outBZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                       unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                                       unsigned int *nbytes_out)void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN (int *bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void int *bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64*bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int , BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror*b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, b, int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *babandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, ,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int unsigned int *nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandonint *nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         *nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         unsigned nbytes_in_lo32,
(97.8 %, 4482 bytes)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , ,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int unsigned int *nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandonint *nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         *nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         unsigned nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         unsigned int ,
37,38c37
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned int *unsigned int *nbytes_in_hi32,
37,38c37
<                                         unsigned int *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned int *nbytes_in_lo32int *nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                         *nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned int ,
38,39c38
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned int *unsigned int *nbytes_out_lo32,
38,39c38
<                                         unsigned int *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned int *nbytes_in_hi32int *nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                         *nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned int ,
39,40c39
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *unsigned int *nbytes_out_hi32);
39,40c39
<                                         unsigned int *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *nbytes_out_lo32int *nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                         *nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int );
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned int *;
40,42c40
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
40,42c40
<                                         unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                         unsigned int *nbytes_out_hi32)int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN (char *dest, unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int char *dest, unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress*dest, unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(dest, unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char , unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *unsigned int *destLen,
42c42
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(char *destint *destLen,
(97.8 %, 4468 bytes)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> char *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress*dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *destint *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *dest, *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int ,
42,43c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *char *source,
42,43c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen*source,
43c43
<                                              char *source,
---
>                                              source,
43c43
<                                              char *source,
---
>                                              char ,
43,44c43
<                                              char *source,
<                                              unsigned int sourceLen,
---
>                                              char *unsigned int sourceLen,
43,44c43
<                                              char *source,
<                                              unsigned int sourceLen,
---
>                                              char *sourceint sourceLen,
44c44
<                                              unsigned int sourceLen,
---
>                                              sourceLen,
44c44
<                                              unsigned int sourceLen,
---
>                                              unsigned ,
44,45c44
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned int int blockSize100k, int verbosity,
44,45c44
<                                              unsigned int sourceLen,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned int sourceLenblockSize100k, int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              , int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int blockSize100kverbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int blockSize100k, ,
45,46c45
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int blockSize100k, int int workFactor);
(97.8 %, 4455 bytes)
44,45c44
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned blockSize100k, int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              , int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int blockSize100kverbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int blockSize100k, ,
45,46c45
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int blockSize100k, int int workFactor);
45,46c45
<                                              int blockSize100k, int verbosity,
<                                              int workFactor);
---
>                                              int blockSize100k, int verbosityworkFactor);
46c46
<                                              int workFactor);
---
>                                              );
46c46
<                                              int workFactor);
---
>                                              int ;
46,48c46
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int workFactorBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
46,48c46
<                                              int workFactor);
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>                                              int workFactor)int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
48c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
48c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_EXTERN (char *dest,
48c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_EXTERN int char *dest,
48c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress*dest,
48c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(dest,
48c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char ,
48,49c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *unsigned int *destLen,
48,49c48
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(char *destint *destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                *destLen,
(97.8 %, 4441 bytes)
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> char *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress*dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char ,
48,49c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *unsigned int *destLen,
48,49c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *destint *destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                *destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                unsigned destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                unsigned int ,
49,50c49
<                                                unsigned int *destLen,
<                                                char *source,
---
>                                                unsigned int *char *source,
49,50c49
<                                                unsigned int *destLen,
<                                                char *source,
---
>                                                unsigned int *destLen*source,
50c50
<                                                char *source,
---
>                                                source,
50c50
<                                                char *source,
---
>                                                char ,
50,51c50
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                char *unsigned int sourceLen,
50,51c50
<                                                char *source,
<                                                unsigned int sourceLen,
---
>                                                char *sourceint sourceLen,
51c51
<                                                unsigned int sourceLen,
---
>                                                sourceLen,
51c51
<                                                unsigned int sourceLen,
---
>                                                unsigned ,
51,52c51
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int int small, int verbosity);
51,52c51
<                                                unsigned int sourceLen,
<                                                int small, int verbosity);
---
>                                                unsigned int sourceLensmall, int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                , int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int smallverbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int small, );
52c52
<                                                int small, int verbosity);
---
>                                                int small, int ;
52,54c52
<                                                int small, int verbosity);
< 
< BZ_EXTERN ;
---
>                                                int small, int verbosityBZ_EXTERN ;
(97.8 %, 4428 bytes)
51,52c51
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned small, int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                , int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int smallverbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int small, );
52c52
<                                                int small, int verbosity);
---
>                                                int small, int ;
52,54c52
<                                                int small, int verbosity);
< 
< BZ_EXTERN ;
---
>                                                int small, int verbosityBZ_EXTERN ;
54,55d53
< BZ_EXTERN ;
< 
54,55d53
< BZ_EXTERN ;
< 
(97.8 %, 4415 bytes)
52,54c52
<                                                int small, int verbosity);
< 
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>                                                int small, int verbosity)BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> *BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE (const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopenchar *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(*path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char , const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *pathchar *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char );
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *;
54,56c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *modeBZ_EXTERN ;
56,57d55
< BZ_EXTERN ;
< 
56,57d55
< BZ_EXTERN ;
< 
(97.9 %, 4402 bytes)
54,56c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
< 
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode)int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
56c56
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
56c56
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN (BZFILE *b, void *buf, int len);
56c56
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZFILE *b, void *buf, int len);
56c56
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread*b, void *buf, int len);
56c56
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(b, void *buf, int len);
56c56
< BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
(97.9 %, 4388 bytes)
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZFILE *b, void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread*b, void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(b, void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *b*buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *b, buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *b, void , int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *b, void *int len);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buflen);
56c56
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buf, );
(97.9 %, 4386 bytes)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void , int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *buflen);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, int ;
56,58c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, int lenBZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
56,58c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, int len)int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
58c58
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
58c58
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN (BZFILE *b, void *buf, int );
58c58
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZFILE *b, void *buf, int );
58c58
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite*b, void *buf, int );
58c58
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(b, void *buf, int );
58c58
< BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
(97.9 %, 4372 bytes)
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZFILE *b, void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite*b, void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(b, void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *b*buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *b, buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *b, void , int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *b, void *int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *b, void *buf);
(97.9 %, 4370 bytes)
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void , int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *buf);
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *buf, ;
58,60c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
< 
< BZ_EXTERN const ;
---
> BZ_APIBZ2_bzwrite(BZFILE , void *buf, int BZ_EXTERN const ;
58,60c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
< 
< BZ_EXTERN const ;
---
> BZ_APIBZ2_bzwrite(BZFILE , void *buf, int )const ;
60c60
< BZ_EXTERN const ;
---
> ;
60,62c60
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN #define _BZLIB_PRIVATE_H
60,62c60
< BZ_EXTERN const ;
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const define _BZLIB_PRIVATE_H
62c62
< #define _BZLIB_PRIVATE_H
---
> _BZLIB_PRIVATE_H
62,64c62
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> ##define BZ_VERSION "1.0.2, 30-Dec-2001"
62,64c62
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define define BZ_VERSION "1.0.2, 30-Dec-2001"
(97.9 %, 4354 bytes)
60,62c60
< ;
< 
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
62c62
< #define _BZLIB_PRIVATE_H
---
> _BZLIB_PRIVATE_H
62,64c62
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> ##define BZ_VERSION "1.0.2, 30-Dec-2001"
62,64c62
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define define BZ_VERSION "1.0.2, 30-Dec-2001"
64c64
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> BZ_VERSION "1.0.2, 30-Dec-2001"
64c64
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
64,66c64
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define typedef unsigned char Bool;
64,66c64
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define BZ_VERSION unsigned char Bool;
66c66
< typedef unsigned char Bool;
---
> char Bool;
66c66
< typedef unsigned char Bool;
---
> typedef Bool;
(97.9 %, 4335 bytes)
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define "1.0.2, 30-Dec-2001"
62,64c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define define typedef unsigned char Bool;
62,64c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
< 
< typedef unsigned char Bool;
---
> #define define BZ_VERSION unsigned char Bool;
64c64
< typedef unsigned char Bool;
---
> char Bool;
64c64
< typedef unsigned char Bool;
---
> typedef Bool;
64c64
< typedef unsigned char Bool;
---
> typedef unsigned ;
64,65c64
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> typedef unsigned char typedef unsigned char UChar;
64,65c64
< typedef unsigned char Bool;
< typedef unsigned char UChar;
---
> typedef unsigned char Boolunsigned char UChar;
65c65
< typedef unsigned char UChar;
---
> char UChar;
(97.9 %, 4321 bytes)
64,65c64
< typedef Bool;
< typedef unsigned char UChar;
---
> typedef typedef unsigned char UChar;
64,65c64
< typedef Bool;
< typedef unsigned char UChar;
---
> typedef Boolunsigned char UChar;
65c65
< typedef unsigned char UChar;
---
> char UChar;
65c65
< typedef unsigned char UChar;
---
> typedef UChar;
65c65
< typedef unsigned char UChar;
---
> typedef unsigned ;
(97.9 %, 4304 bytes)
65c65
< char UChar;
---
> ;
65,66c65
< char UChar;
< typedef int Int32;
---
> char typedef int Int32;
65,66c65
< char UChar;
< typedef int Int32;
---
> char UCharint Int32;
66c66
< typedef int Int32;
---
> Int32;
66c66
< typedef int Int32;
---
> typedef ;
66,67c66
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int typedef unsigned int UInt32;
66,67c66
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int Int32unsigned int UInt32;
67c67
< typedef unsigned int UInt32;
---
> int UInt32;
(97.9 %, 4294 bytes)
65,66c65
< ;
< typedef int Int32;
---
> int Int32;
66c66
< typedef int Int32;
---
> Int32;
66c66
< typedef int Int32;
---
> typedef ;
66,67c66
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int typedef unsigned int UInt32;
66,67c66
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int Int32unsigned int UInt32;
67c67
< typedef unsigned int UInt32;
---
> int UInt32;
67c67
< typedef unsigned int UInt32;
---
> typedef UInt32;
(97.9 %, 4277 bytes)
67c67
< int UInt32;
---
> ;
67,68c67
< int UInt32;
< unsigned short UInt16;
---
> int unsigned short UInt16;
(97.9 %, 4267 bytes)
67,68c67
< ;
< unsigned short UInt16;
---
> short UInt16;
68c68
< unsigned short UInt16;
---
> UInt16;
(97.9 %, 4256 bytes)
67c67
< short UInt16;
---
> ;
67,69c67
< short UInt16;
< 
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> short #define BZ_HDR_h define BZ_N_OVERSHOOT
67,69c67
< short UInt16;
< 
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> short UInt16define BZ_HDR_h define BZ_N_OVERSHOOT
69c69
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> BZ_HDR_h define BZ_N_OVERSHOOT
69c69
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> #define BZ_N_OVERSHOOT
(97.9 %, 4244 bytes)
67,69c67
< ;
< 
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> define BZ_HDR_h define BZ_N_OVERSHOOT
69c69
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> BZ_HDR_h define BZ_N_OVERSHOOT
69c69
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> #define BZ_N_OVERSHOOT
69c69
< #define BZ_HDR_h define BZ_N_OVERSHOOT
---
> #define BZ_N_OVERSHOOT
(97.9 %, 4228 bytes)
69,71c69
< #define BZ_N_OVERSHOOT
< 
< typedef EState;
---
> #typedef EState;
69,71c69
< #define BZ_N_OVERSHOOT
< 
< typedef EState;
---
> #define EState;
71c71
< typedef EState;
---
> ;
(97.9 %, 4204 bytes)
69,71c69
< #define EState;
< 
< ;
---
> #define ;
69,73c69
< #define EState;
< 
< ;
< 
< #define MTFA_SIZE 4096
---
> #define EState#define MTFA_SIZE 4096
71,73c71
< ;
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
73c73
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
73c73
< #define MTFA_SIZE 4096
---
> #4096
(98.0 %, 4198 bytes)
69c69
< #define EState#define MTFA_SIZE 4096
---
> #define EStateMTFA_SIZE 4096
69c69
< #define EState#define MTFA_SIZE 4096
---
> #define EState#4096
69,70c69
< #define EState#define MTFA_SIZE 4096
< struct {
---
> #define EState#define struct {
(98.0 %, 4190 bytes)
69,70c69
< #define EStateMTFA_SIZE 4096
< struct {
---
> #define EStateMTFA_SIZE {
70,72c70
< struct {
< 
<   Int32 ;
---
> Int32 ;
70,72c70
< struct {
< 
<   Int32 ;
---
> struct ;
72,74c72
<   Int32 ;
< 
< } DState;
---
>   } DState;
72,74c72
<   Int32 ;
< 
< } DState;
---
>   Int32 DState;
74c74
< } DState;
---
> ;
74,76c74
< } DState;
< 
< #define tPosextern bz_stream *strm);
---
> } #define tPosextern bz_stream *strm);
74,76c74
< } DState;
< 
< #define tPosextern bz_stream *strm);
---
> } DStatedefine tPosextern bz_stream *strm);
76c76
< #define tPosextern bz_stream *strm);
---
> tPosextern bz_stream *strm);
76c76
< #define tPosextern bz_stream *strm);
---
> #bz_stream *strm);
76c76
< #define tPosextern bz_stream *strm);
---
> #define *strm);
(98.0 %, 4181 bytes)
72c72
<   } DState;
---
>   ;
72,74c72
<   } DState;
< 
< #define tPosextern bz_stream *strm);
---
>   } #define tPosextern bz_stream *strm);
72,74c72
<   } DState;
< 
< #define tPosextern bz_stream *strm);
---
>   } DStatedefine tPosextern bz_stream *strm);
74c74
< #define tPosextern bz_stream *strm);
---
> tPosextern bz_stream *strm);
74c74
< #define tPosextern bz_stream *strm);
---
> #bz_stream *strm);
74c74
< #define tPosextern bz_stream *strm);
---
> #define *strm);
74c74
< #define tPosextern bz_stream *strm);
---
> #define tPosextern strm);
74c74
< #define tPosextern bz_stream *strm);
---
> #define tPosextern bz_stream );
74c74
< #define tPosextern bz_stream *strm);
---
> #define tPosextern bz_stream *;
(98.0 %, 4170 bytes)
74c74
< #define tPosextern strm);
---
> #define tPosextern ;
74,76c74
< #define tPosextern strm);
< 
< #define BZ_SETERR
---
> #define tPosextern strm#define BZ_SETERR
74,76c74
< #define tPosextern strm);
< 
< #define BZ_SETERR
---
> #define tPosextern strm)define BZ_SETERR
(98.0 %, 4165 bytes)
74,76c74
< #define tPosextern ;
< 
< #define BZ_SETERR
---
> #define tPosextern define BZ_SETERR
76c76
< #define BZ_SETERR
---
> BZ_SETERR
76,78c76
< #define BZ_SETERR
< 
< typedef struct {
---
> #typedef struct {
76,78c76
< #define BZ_SETERR
< 
< typedef struct {
---
> #define struct {
78c78
< typedef struct {
---
> {
78,79c78
< typedef struct {
<   Int32 lastErr;
---
> typedef Int32 lastErr;
78,79c78
< typedef struct {
<   Int32 lastErr;
---
> typedef struct lastErr;
79c79
<   Int32 lastErr;
---
>   ;
(98.0 %, 4161 bytes)
74,76c74
< #define tPosextern define BZ_SETERR
< 
< typedef struct {
---
> #define tPosextern typedef struct {
74,76c74
< #define tPosextern define BZ_SETERR
< 
< typedef struct {
---
> #define tPosextern define struct {
76c76
< typedef struct {
---
> {
76,77c76
< typedef struct {
<   Int32 lastErr;
---
> typedef Int32 lastErr;
76,77c76
< typedef struct {
<   Int32 lastErr;
---
> typedef struct lastErr;
77c77
<   Int32 lastErr;
---
>   ;
77,78c77
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 Bool initialisedOk;
77,78c77
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErrinitialisedOk;
78c78
<   Bool initialisedOk;
---
>   ;
78,79c78
<   Bool initialisedOk;
< } bzFile;
---
>   Bool } bzFile;
78,79c78
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOkbzFile;
(98.0 %, 4143 bytes)
78,79c78
<   ;
< } bzFile;
---
>   bzFile;
79c79
< } bzFile;
---
> ;
79,81c79
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79,81c79
< } bzFile;
< 
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFile*BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE (int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen*bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int , FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror*f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE , int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *fblockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, ,
81,82c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int int verbosity, int workFactor);
81,82c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor);
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100kverbosity, int workFactor);
82c82
<                               int verbosity, int workFactor);
---
>                               , int workFactor);
82c82
<                               int verbosity, int workFactor);
---
>                               int int workFactor);
82c82
<                               int verbosity, int workFactor);
---
>                               int verbosityworkFactor);
82c82
<                               int verbosity, int workFactor);
---
>                               int verbosity, );
82c82
<                               int verbosity, int workFactor);
---
>                               int verbosity, int ;
82,84c82
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactorvoid BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
82,84c82
<                               int verbosity, int workFactor);
< 
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
>                               int verbosity, int workFactor)BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> (int *bzerror, BZFILE *b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void int *bzerror, BZFILE *b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite*bzerror, BZFILE *b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(bzerror, BZFILE *b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int , BZFILE *b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *BZFILE *b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror*b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, b, void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b*buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void , int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buflen);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, );
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int ;
(98.0 %, 4141 bytes)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void , int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buflen);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, );
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int ;
84,86c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int lenvoid BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
84,86c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
< 
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len)BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> (int *bzerror, BZFILE *b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void int *bzerror, BZFILE *b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose*bzerror, BZFILE *b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(bzerror, BZFILE *b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int , BZFILE *b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *BZFILE *b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror*b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, b, int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *babandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, ,
86,87c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int unsigned int *nbytes_in, unsigned int *nbytes_out);
86,87c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandonint *nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             *nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned nbytes_in, unsigned int *nbytes_out);
(98.0 %, 4139 bytes)
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , ,
86,87c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int unsigned int *nbytes_in, unsigned int *nbytes_out);
86,87c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandonint *nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             *nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int , unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_inint *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_in, *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_in, unsigned nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_in, unsigned int );
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned int *nbytes_in, unsigned int *;
87,89c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_outvoid BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
87,89c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
< 
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
>                             unsigned int *nbytes_in, unsigned int *nbytes_out)BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> (int *bzerror, BZFILE *b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void int *bzerror, BZFILE *b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64*bzerror, BZFILE *b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(bzerror, BZFILE *b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int , BZFILE *b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *BZFILE *b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror*b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, b, int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *babandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, ,
89,90c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int unsigned int *nbytes_in_lo32,
89,90c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandonint *nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                               *nbytes_in_lo32,
(98.0 %, 4137 bytes)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , ,
89,90c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int unsigned int *nbytes_in_lo32,
89,90c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandonint *nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                               *nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                               unsigned nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                               unsigned int ,
90,91c90
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned int *unsigned int *nbytes_in_hi32,
90,91c90
<                               unsigned int *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned int *nbytes_in_lo32int *nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                               *nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned int ,
91,92c91
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned int *unsigned int *nbytes_out_lo32,
91,92c91
<                               unsigned int *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned int *nbytes_in_hi32int *nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                               *nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned int ,
92,93c92
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *unsigned int *nbytes_out_hi32);
92,93c92
<                               unsigned int *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *nbytes_out_lo32int *nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                               *nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int );
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned int *;
93,95c93
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
---
>                               unsigned int *nbytes_out_hi32BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
93,95c93
<                               unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
---
>                               unsigned int *nbytes_out_hi32)*BZ_APIBZ2_bzReadOpen(int fsmall,
95c95
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen(int fsmall,
95c95
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZFILE (int fsmall,
95c95
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZFILE *int fsmall,
95c95
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZFILE *BZ_APIBZ2_bzReadOpenfsmall,
95c95
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZFILE *BZ_APIBZ2_bzReadOpen(,
95,96c95
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int void *unused, int b);
95,96c95
< BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unused, int b);
---
> BZFILE *BZ_APIBZ2_bzReadOpen(int fsmall*unused, int b);
96c96
<                              void *unused, int b);
---
>                              unused, int b);
96c96
<                              void *unused, int b);
---
>                              void , int b);
(98.0 %, 4129 bytes)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> int fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenfsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen(,
95,96c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unused, int b);
---
> BZ_APIBZ2_bzReadOpen(int void *unused, int b);
95,96c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unused, int b);
---
> BZ_APIBZ2_bzReadOpen(int fsmall*unused, int b);
96c96
<                              void *unused, int b);
---
>                              unused, int b);
96c96
<                              void *unused, int b);
---
>                              void , int b);
96c96
<                              void *unused, int b);
---
>                              void *int b);
96c96
<                              void *unused, int b);
---
>                              void *unusedb);
96c96
<                              void *unused, int b);
---
>                              void *unused, );
96c96
<                              void *unused, int b);
---
>                              void *unused, int ;
96,98c96
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int bint BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
96,98c96
<                              void *unused, int b);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unused, int b)BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> (int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead*bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(bzerror, BZFILE *b, void *buf, int len) {
(98.0 %, 4123 bytes)
96,98c96
<                              void *unusedb);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unusedbint BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
96,98c96
<                              void *unusedb);
< 
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                              void *unusedb)BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> (int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead*bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int , BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror*b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b*buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void , int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buflen) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, ) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int {
98,100c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int lenbzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
98,100c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
> int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) *bzf = (bzf == NULL || buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzf = (bzf == NULL || buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile = (bzf == NULL || buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *(bzf == NULL || buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf bzf == NULL || buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = == NULL || buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (NULL || buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (bzf == NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (bzf || buf == NULL || len < len == 0)
(98.0 %, 4116 bytes)
100c100
<   bzFile *bzf = (NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (buf == NULL || len < len == 0)
100c100
<   bzFile *bzf = (NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (NULL == NULL || len < len == 0)
100c100
<   bzFile *bzf = (NULL || buf == NULL || len < len == 0)
---
>   bzFile *bzf = (NULL || NULL || len < len == 0)
(98.0 %, 4108 bytes)
100c100
<   bzFile *bzf = (buf == NULL || len < len == 0)
---
>   bzFile *bzf = (NULL || len < len == 0)
100c100
<   bzFile *bzf = (buf == NULL || len < len == 0)
---
>   bzFile *bzf = (buf || len < len == 0)
100c100
<   bzFile *bzf = (buf == NULL || len < len == 0)
---
>   bzFile *bzf = (buf == len < len == 0)
(98.0 %, 4101 bytes)
100c100
<   bzFile *bzf = (NULL || len < len == 0)
---
>   bzFile *bzf = (len < len == 0)
100c100
<   bzFile *bzf = (NULL || len < len == 0)
---
>   bzFile *bzf = (NULL < len == 0)
100c100
<   bzFile *bzf = (NULL || len < len == 0)
---
>   bzFile *bzf = (NULL || len == 0)
(98.0 %, 4093 bytes)
100c100
<   bzFile *bzf = (len < len == 0)
---
>   bzFile *bzf = (len == 0)
100c100
<   bzFile *bzf = (len < len == 0)
---
>   bzFile *bzf = (len == 0)
100c100
<   bzFile *bzf = (len < len == 0)
---
>   bzFile *bzf = (len < 0)
(98.0 %, 4087 bytes)
100c100
<   bzFile *bzf = (len == 0)
---
>   bzFile *bzf = (0)
100c100
<   bzFile *bzf = (len == 0)
---
>   bzFile *bzf = (len )
(98.0 %, 4080 bytes)
100,101c100
<   bzFile *bzf = (0)
<     ;
---
>   bzFile *bzf = (;
100,103c100
<   bzFile *bzf = (0)
<     ;
< 
<   bzf= 0;
---
>   bzFile *bzf = (0bzf= 0;
101,103c101
<     ;
< 
<   bzf= 0;
---
>     = 0;
103c103
<   bzf= 0;
---
>   0;
103c103
<   bzf= 0;
---
>   bzf;
(98.0 %, 4075 bytes)
103,104c103
<   0;
< }
---
>   }
103,106c103
<   0;
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   0void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
104,106c104
< }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
106c106
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> (int *bzerror, BZFILE *b, void **unused,
106c106
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void int *bzerror, BZFILE *b, void **unused,
106c106
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused*bzerror, BZFILE *b, void **unused,
106c106
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(bzerror, BZFILE *b, void **unused,
106c106
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int , BZFILE *b, void **unused,
106c106
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *BZFILE *b, void **unused,
106c106
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror*b, void **unused,
(98.0 %, 4072 bytes)
103,105c103
<   }
< 
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> (int *bzerror, BZFILE *b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void int *bzerror, BZFILE *b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused*bzerror, BZFILE *b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(bzerror, BZFILE *b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int , BZFILE *b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *BZFILE *b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror*b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, b, void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b**unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void *,
105,106c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **int *nUnused);
105,106c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused*nUnused);
(98.0 %, 4070 bytes)
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void *,
105,106c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **int *nUnused);
105,106c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused*nUnused);
106c106
<                                int *nUnused);
---
>                                nUnused);
106c106
<                                int *nUnused);
---
>                                int );
106c106
<                                int *nUnused);
---
>                                int *;
106,108c106
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnusedint BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
106,108c106
<                                int *nUnused);
< 
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>                                int *nUnused)BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int char *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress*dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char , unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *destint *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int ,
108,109c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *char *source, unsigned int sourceLen,
108,109c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
<                                    char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen*source, unsigned int sourceLen,
109c109
<                                    char *source, unsigned int sourceLen,
---
>                                    source, unsigned int sourceLen,
109c109
<                                    char *source, unsigned int sourceLen,
---
>                                    char , unsigned int sourceLen,
109c109
<                                    char *source, unsigned int sourceLen,
---
>                                    char *unsigned int sourceLen,
109c109
<                                    char *source, unsigned int sourceLen,
---
>                                    char *sourceint sourceLen,
109c109
<                                    char *source, unsigned int sourceLen,
---
>                                    char *source, sourceLen,
109c109
<                                    char *source, unsigned int sourceLen,
---
>                                    char *source, unsigned ,
109,110c109
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned int int blockSize100k, int verbosity,
109,110c109
<                                    char *source, unsigned int sourceLen,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned int sourceLenblockSize100k, int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    , int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int blockSize100kverbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int blockSize100k, ,
(98.0 %, 4057 bytes)
109,110c109
<                                    char *source, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *source, unsigned blockSize100k, int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    , int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int blockSize100kverbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int blockSize100k, ,
110,111c110
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int blockSize100k, int int workFactor);
110,111c110
<                                    int blockSize100k, int verbosity,
<                                    int workFactor);
---
>                                    int blockSize100k, int verbosityworkFactor);
111c111
<                                    int workFactor);
---
>                                    );
111c111
<                                    int workFactor);
---
>                                    int ;
111,113c111
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactorint BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
111,113c111
<                                    int workFactor);
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>                                    int workFactor)BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int char *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress*dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char , unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *destint *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int ,
113,114c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *char *source, unsigned int sourceLen,
113,114c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen*source, unsigned int sourceLen,
114c114
<                                      char *source, unsigned int sourceLen,
---
>                                      source, unsigned int sourceLen,
114c114
<                                      char *source, unsigned int sourceLen,
---
>                                      char , unsigned int sourceLen,
114c114
<                                      char *source, unsigned int sourceLen,
---
>                                      char *unsigned int sourceLen,
114c114
<                                      char *source, unsigned int sourceLen,
---
>                                      char *sourceint sourceLen,
114c114
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, sourceLen,
114c114
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned ,
114,115c114
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned int int small, int verbosity);
114,115c114
<                                      char *source, unsigned int sourceLen,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned int sourceLensmall, int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      , int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int smallverbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int small, );
(98.0 %, 4044 bytes)
114,115c114
<                                      char *source, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *source, unsigned small, int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      , int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int smallverbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int small, );
115c115
<                                      int small, int verbosity);
---
>                                      int small, int ;
115,117c115
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int verbosityBZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115,117c115
<                                      int small, int verbosity);
< 
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>                                      int small, int verbosity)*BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE (const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopenchar *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(*pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char , const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfdchar *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char );
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *;
117,119c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *modeint BZ_APIBZ2_bzread_nread;
117,119c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode)BZ_APIBZ2_bzread_nread;
119c119
< int BZ_APIBZ2_bzread_nread;
---
> ;
119,120c119
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
119,120c119
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread_nreadBZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
(98.0 %, 4018 bytes)
119,120c119
< ;
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZFILE *b, void *buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread*b, void *buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(b, void *buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE , void *buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *void *buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *b*buf, int len) {
120c120
< int BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzread(BZFILE *b, buf, int len) {
(98.0 %, 4012 bytes)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread*b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b*buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b, buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b, void , int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b, void *int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buflen) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buf, ) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buf, int {
119,120c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buf, int lenint bzerr;
119,120c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) bzerr;
120c120
<   int bzerr;
---
>   ;
120,121c120
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int if (((bzFile *)b)->lastErr == BZ_STREAM_END)
120,121c120
<   int bzerr;
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   int bzerr(((bzFile *)b)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   ((bzFile *)b)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (bzFile *)b)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (bzFile *)b)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((*)b)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if ((()b)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile b)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)->lastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)blastErr == BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)== BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->BZ_STREAM_END)
121c121
<   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
---
>   if (((bzFile *)b)->lastErr )
(98.0 %, 4002 bytes)
121c121
<   if (((bzFile *)b)== BZ_STREAM_END)
---
>   if (((bzFile *)b))
121,122c121
<   if (((bzFile *)b)== BZ_STREAM_END)
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)== if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
121,122c121
<   if (((bzFile *)b)== BZ_STREAM_END)
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)== BZ_STREAM_END(bzerr == BZ_OK || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if == BZ_OK || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (BZ_OK || bzerr == BZ_STREAM_END)
(98.1 %, 3986 bytes)
121,122c121
<   if (((bzFile *)b))
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (((bzFile *)b)(bzerr == BZ_OK || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if == BZ_OK || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (BZ_OK || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (bzerr || bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (bzerr == bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (bzerr == BZ_OK == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     if (bzerr == BZ_OK || BZ_STREAM_END)
(98.1 %, 3977 bytes)
122c122
<     if (bzerr == bzerr == BZ_STREAM_END)
---
>     if (bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == bzerr == BZ_STREAM_END)
---
>     if (bzerr == bzerr )
(98.1 %, 3968 bytes)
122,123c122
<     if (bzerr == BZ_STREAM_END)
<     ;
---
>     if (bzerr == ;
122,124c122
<     if (bzerr == BZ_STREAM_END)
<     ;
<   else
---
>     if (bzerr == BZ_STREAM_ENDelse
124,125d123
<   else
<     ;
124,126c124
<   else
<     ;
< }
---
>   }
(98.1 %, 3955 bytes)
123,126c123
<     ;
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
>     int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
124,126c124
< }
< 
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> (BZFILE *b, void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZFILE *b, void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite*b, void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(b, void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b*buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void , int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buflenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *b, void *buf, );
(98.1 %, 3953 bytes)
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE , buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE , void , int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE , void *int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE , void *buflenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE , void *buf, );
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int ;
126,128c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
< 
< const ;
---
> int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbbconst ;
128,129d127
< const ;
< 
128,129d127
< const ;
< 
(98.1 %, 3944 bytes)
126,127c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
< 
---
> int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb)
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
3c3
< #define _BZLIB_H
---
> define _BZLIB_H
3c3
< #define _BZLIB_H
---
>  _BZLIB_H
3c3
< #define _BZLIB_H
---
> define 
3c3
< #define _BZLIB_H
---
>  
3c3
< #define _BZLIB_H
---
> define _BZLIB_H
5c5
< #define BZ_OK 3
---
> define BZ_OK 3
3c3
< #define _BZLIB_H
---
>  _BZLIB_H
5c5
< #define BZ_OK 3
---
> define BZ_OK 3
3c3
< #define _BZLIB_H
---
> define 
5c5
< #define BZ_OK 3
---
> define BZ_OK 3
3c3
< #define _BZLIB_H
---
>  
5c5
< #define BZ_OK 3
---
> define BZ_OK 3
3c3
< #define _BZLIB_H
---
> # _BZLIB_H
3c3
< #define _BZLIB_H
---
> # 
(98.1 %, 3929 bytes)
5c5
< #define BZ_OK 3
---
>   3
5c5
< #define BZ_OK 3
---
> define BZ_OK 
5c5
< #define BZ_OK 3
---
>  BZ_OK 
5c5
< #define BZ_OK 3
---
> define  
5c5
< #define BZ_OK 3
---
>   
5c5
< #define BZ_OK 3
---
> # BZ_OK 3
5c5
< #define BZ_OK 3
---
> #  3
(98.1 %, 3916 bytes)
6c6
< #define BZ_STREAM_END 4
---
>   
6c6
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 4
6c6
< #define BZ_STREAM_END 4
---
> #  4
6c6
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 
6c6
< #define BZ_STREAM_END 4
---
> #  
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> # BZ_STREAM_END 4
> define BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #  4
> define BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> # BZ_STREAM_END 
> define BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #  
> define BZ_CONFIG_ERROR
6c6
< #define BZ_STREAM_END 4
---
> #define  4
6c6
< #define BZ_STREAM_END 4
---
> #define  
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define  4
> define BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define  
> define BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define  4
> # BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define  
> # BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define  4
>  BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define  
>  BZ_CONFIG_ERROR
6c6
< #define BZ_STREAM_END 4
---
> #define BZ_STREAM_END 
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END 
> define BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END 
> # BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END 
>  BZ_CONFIG_ERROR
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END 
> #define 
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END 
> define 
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END 
> # 
6,7c6,7
< #define BZ_STREAM_END 4
< #define BZ_CONFIG_ERROR
---
> #define BZ_STREAM_END 
>  
7c7
< #define BZ_CONFIG_ERROR
---
> define BZ_CONFIG_ERROR
7c7
< #define BZ_CONFIG_ERROR
---
>  BZ_CONFIG_ERROR
7c7
< #define BZ_CONFIG_ERROR
---
> define 
7c7
< #define BZ_CONFIG_ERROR
---
>  
7c7
< #define BZ_CONFIG_ERROR
---
> define BZ_CONFIG_ERROR
9c9
< typedef struct {
---
>  struct {
7c7
< #define BZ_CONFIG_ERROR
---
>  BZ_CONFIG_ERROR
9c9
< typedef struct {
---
>  struct {
7c7
< #define BZ_CONFIG_ERROR
---
> define 
9c9
< typedef struct {
---
>  struct {
7c7
< #define BZ_CONFIG_ERROR
---
>  
9c9
< typedef struct {
---
>  struct {
(98.1 %, 3894 bytes)
9c9
< typedef struct {
---
>   
9,10c9,10
< typedef struct {
<   ;
---
>  struct {
>   
9,10c9,10
< typedef struct {
<   ;
---
>   {
>   
9,10c9,10
< typedef struct {
<   ;
---
>  struct 
>   
9,10c9,10
< typedef struct {
<   ;
---
>   
>   
9c9
< typedef struct {
---
> typedef  {
9c9
< typedef struct {
---
> typedef  
9,10c9,10
< typedef struct {
<   ;
---
> typedef  {
>   
9,10c9,10
< typedef struct {
<   ;
---
> typedef  
>   
(98.1 %, 3886 bytes)
9c9
<  struct {
---
>   {
11c11
< } bz_stream;
---
> } ;
9d8
<  struct {
11c10,11
< } bz_stream;
---
>   
> } ;
9c9
<  struct {
---
>   {
11c11
< } bz_stream;
---
>  ;
9d8
<  struct {
11c10,11
< } bz_stream;
---
>   
>  ;
9c9
<  struct {
---
>  struct 
9c9
<  struct {
---
>  struct 
11c11
< } bz_stream;
---
>  bz_stream;
(98.1 %, 3869 bytes)
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <stdio.h>
13c13
< #include <stdio.h>
---
>  <stdio.h>
13c13
< #include <stdio.h>
---
> include stdio.h>
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <.h>
13c13
< #include <stdio.h>
---
>  <.h>
13c13
< #include <stdio.h>
---
> include .h>
13c13
< #include <stdio.h>
---
>  .h>
13c13
< #include <stdio.h>
---
> # <stdio.h>
13c13
< #include <stdio.h>
---
> # stdio.h>
13c13
< #include <stdio.h>
---
> # <.h>
13c13
< #include <stdio.h>
---
> # .h>
13c13
< #include <stdio.h>
---
> # <stdioh>
13c13
< #include <stdio.h>
---
> # stdioh>
13c13
< #include <stdio.h>
---
> # <h>
13c13
< #include <stdio.h>
---
> # h>
13c13
< #include <stdio.h>
---
> #include stdio.h>
13c13
< #include <stdio.h>
---
> #include .h>
13c13
< #include <stdio.h>
---
> #include stdioh>
13c13
< #include <stdio.h>
---
> #include h>
13c13
< #include <stdio.h>
---
> #include stdio.>
13c13
< #include <stdio.h>
---
> #include .>
13c13
< #include <stdio.h>
---
> #include stdio>
13c13
< #include <stdio.h>
---
> #include >
13c13
< #include <stdio.h>
---
> #include <.h>
13c13
< #include <stdio.h>
---
> #include <h>
13c13
< #include <stdio.h>
---
> #include <.>
13c13
< #include <stdio.h>
---
> #include <>
13c13
< #include <stdio.h>
---
> #include <.h
13c13
< #include <stdio.h>
---
> #include <h
13c13
< #include <stdio.h>
---
> #include <.
13c13
< #include <stdio.h>
---
> #include <
13c13
< #include <stdio.h>
---
> #include <stdioh>
13c13
< #include <stdio.h>
---
> #include <stdio>
13c13
< #include <stdio.h>
---
> #include <stdioh
13c13
< #include <stdio.h>
---
> #include <stdio
13c13
< #include <stdio.h>
---
> #include <stdioh>
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio>
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdioh
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.>
13c13
< #include <stdio.h>
---
> #include <stdio.
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> # BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> # BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>  BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>  BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> # BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>  BZ_EXTERN BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #define  BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define  BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #  BZ_EXTERN ;
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>   BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>  BZ_EXTERN BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define  BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>   BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define BZ_EXTERN  ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>  BZ_EXTERN  ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> define   ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
>    ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> # BZ_EXTERN BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #  BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> # BZ_EXTERN  ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #   ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> # BZ_EXTERN BZ_EXTERN 
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #  BZ_EXTERN 
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> # BZ_EXTERN  
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #   
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #define  BZ_EXTERN ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #define   ;
15c15
< #define BZ_EXTERN BZ_EXTERN ;
---
> #define  BZ_EXTERN 
(98.1 %, 3860 bytes)
15c15
< #define  BZ_EXTERN ;
---
> #define   ;
15c15
< #define  BZ_EXTERN ;
---
> #define   
15c15
< #define  BZ_EXTERN ;
---
> #define   ;
17c17
< #5000
---
> 5000
15c15
< #define  BZ_EXTERN ;
---
> #define   
17c17
< #5000
---
> 5000
15c15
< #define  BZ_EXTERN ;
---
> #define   ;
17c17
< #5000
---
> #
15c15
< #define  BZ_EXTERN ;
---
> #define   
17c17
< #5000
---
> #
15c15,16
< #define  BZ_EXTERN ;
---
> #define   ;
> 
17d17
< #5000
15c15,16
< #define  BZ_EXTERN ;
---
> #define   
> 
17d17
< #5000
15c15
< #define  BZ_EXTERN ;
---
> #define  BZ_EXTERN 
15c15
< #define  BZ_EXTERN ;
---
> #define  BZ_EXTERN 
17c17
< #5000
---
> 5000
15c15
< #define  BZ_EXTERN ;
---
> #define  BZ_EXTERN 
17c17
< #5000
---
> #
(98.1 %, 3859 bytes)
17c17
< #5000
---
> 5000
17c17
< #5000
---
> 
17c17
< #5000
---
> 5000
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>  void BZFILE(int fsmall, void *unusednUnusedb);
17d16
< #5000
19c18,19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> 
>  void BZFILE(int fsmall, void *unusednUnusedb);
17c17
< #5000
---
> 5000
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE(int fsmall, void *unusednUnusedb);
17d16
< #5000
19c18,19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> 
> typedef  BZFILE(int fsmall, void *unusednUnusedb);
(98.1 %, 3854 bytes)
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>   BZFILE(int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>  void (int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>   (int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>  void BZFILEint fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>   BZFILEint fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>  void int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
>   int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE(int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  (int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILEint fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  int fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE( fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  ( fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef   fsmall, void *unusednUnusedb);
19c19
< typedef void BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef void (int fsmall, void *unusednUnusedb);
(98.1 %, 3850 bytes)
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  (int fsmall, void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  int fsmall, void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  ( fsmall, void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef   fsmall, void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  (int , void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  int , void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  ( , void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef   , void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILEint fsmall, void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE fsmall, void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILEint , void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE , void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILEint fsmall void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE fsmall void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILEint  void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE  void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE( fsmall, void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE( , void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE( fsmall void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE(  void *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE( fsmall,  *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE( ,  *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE( fsmall  *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE(   *unusednUnusedb);
19c19
< typedef  BZFILE(int fsmall, void *unusednUnusedb);
---
> typedef  BZFILE(int , void *unusednUnusedb);
(98.1 %, 3840 bytes)
19c19
< typedef  BZFILE(  void *unusednUnusedb);
---
> typedef  BZFILE(   );
19c19
< typedef  BZFILE(  void *unusednUnusedb);
---
> typedef  BZFILE(   *unusednUnusedb;
19c19
< typedef  BZFILE(  void *unusednUnusedb);
---
> typedef  BZFILE(   unusednUnusedb;
19c19
< typedef  BZFILE(  void *unusednUnusedb);
---
> typedef  BZFILE(   *;
19c19
< typedef  BZFILE(  void *unusednUnusedb);
---
> typedef  BZFILE(   ;
19c19
< typedef  BZFILE(  void *unusednUnusedb);
---
> typedef  BZFILE(  void unusednUnusedb);
(98.1 %, 3821 bytes)
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   ;
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   ;
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN void (int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void (int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> BZ_EXTERN  (int *bzerror, BZFILE , void **unused,
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   (int *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void (int *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   (int *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void int *bzerror, BZFILE , void **unused,
21c21
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   int *bzerror, BZFILE , void **unused,
(98.1 %, 3812 bytes)
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   (int *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   int *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused( *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   ( *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   BZ_APIBZ2_bzReadGetUnused *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>    *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void (int *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void int *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void ( *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void  *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void (int bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void int bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void ( bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void  bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnusedint bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnusedint *, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused *, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnusedint , BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused , BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused( *bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused( bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused( *, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused( , BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused( *bzerror BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused( bzerror BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused( * BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(  BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int bzerror, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int , BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int bzerror BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int  BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int bzerror,  , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int ,  , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int bzerror  , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int   , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int * BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,  , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *  , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int * BZFILE  void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,   void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *   void **unused,
(98.1 %, 3805 bytes)
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int * BZFILE , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *  , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int * BZFILE  void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *   void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int * BZFILE ,  **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *  ,  **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int * BZFILE   **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *    **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,  , void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,   void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,  ,  **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,    **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,  , void *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,   void *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,  ,  *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *,    *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  **unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  **,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  ,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void ,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void unused
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void 
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused,
>                                           *nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *,
>                                           *nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused
>                                           *nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *
>                                           *nUnused);
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
>                                           *nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                           *nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
>                                          int nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                          int nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
>                                           nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                           nUnused);
(98.1 %, 3799 bytes)
21c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                           *nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                          int nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                           nUnused);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                          int *);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                           *);
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                          int );
21,22c21,22
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *nUnused);
---
>  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                           );
22c22
<                                          int *nUnused);
---
>                                           *nUnused);
22c22
<                                          int *nUnused);
---
>                                           nUnused);
22c22
<                                          int *nUnused);
---
>                                           *);
22c22
<                                          int *nUnused);
---
>                                           );
22c22
<                                          int *nUnused);
---
>                                           *nUnused;
22c22
<                                          int *nUnused);
---
>                                           nUnused;
22c22
<                                          int *nUnused);
---
>                                           *;
22c22
<                                          int *nUnused);
---
>                                           ;
22c22
<                                          int *nUnused);
---
>                                          int nUnused);
22c22
<                                          int *nUnused);
---
>                                          int );
22c22
<                                          int *nUnused);
---
>                                          int nUnused;
22c22
<                                          int *nUnused);
---
>                                          int ;
22c22
<                                          int *nUnused);
---
>                                          int nUnused)
22c22
<                                          int *nUnused);
---
>                                          int )
22c22
<                                          int *nUnused);
---
>                                          int nUnused
22c22
<                                          int *nUnused);
---
>                                          int 
22c22
<                                          int *nUnused);
---
>                                          int *);
22c22
<                                          int *nUnused);
---
>                                          int *;
22c22
<                                          int *nUnused);
---
>                                          int *)
22c22
<                                          int *nUnused);
---
>                                          int *
22c22
<                                          int *nUnused);
---
>                                          int *);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *nUnused);
---
>                                          int *;
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *nUnused);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *nUnused);
---
>                                          int *
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
(98.1 %, 3792 bytes)
22c22
<                                          int *);
---
>                                          int *;
22c22
<                                          int *);
---
>                                          int *
22c22
<                                          int *);
---
>                                          int *;
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *;
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzReadint *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzReadint *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *;
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *)
22c22
<                                          int *);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzReadint *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> int *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> ( *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead *bzerror, BZFILE , void *buf, int len);
22c22
<                                          int *);
---
>                                          int *)
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
>  *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> int *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> ( *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
>  *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> (int bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> int bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> ( bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
>  bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzReadint *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzReadint bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzReadint *, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead *, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzReadint , BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead , BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( *bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( *, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( , BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( *bzerror BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( bzerror BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead( * BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(  BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int bzerror, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int , BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int bzerror BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int  BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int bzerror,  , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int ,  , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int bzerror  , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int   , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int * BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,  , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *  , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE  void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int * BZFILE  void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,   void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *   void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *bzerror BZFILE , void *buf, int len);
(98.2 %, 3785 bytes)
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int * BZFILE , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *  , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int * BZFILE  void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *   void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int * BZFILE ,  *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *  ,  *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int * BZFILE   *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *    *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,  , void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,   void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,  ,  *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,    *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,  , void buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,   void buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,  ,  buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *,    buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE  void *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE   *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE  void buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE   buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE  void *, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE   *, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE  void , int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE   , int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,  *buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,  buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,  *, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,  , int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,  *buf int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,  buf int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,  * int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE ,   int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void buf, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void , int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void buf int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void  int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void buf,  len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void ,  len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void buf  len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void   len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void * int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *  len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
(98.2 %, 3782 bytes)
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void * int len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *  len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void * int );
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *  );
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void * int len;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *  len;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void * int ;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *  ;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  len);
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  );
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  len;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  ;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  len)
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  )
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  len
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *,  
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int ;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int 
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int len);
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
(98.2 %, 3779 bytes)
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int ;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int 
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int ;
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int 
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int ;
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int 
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int ;
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int 
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *, int )
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *(int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE (int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   (int *bzerror, FILE *f,
(98.2 %, 3770 bytes)
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *(int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   (int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE (int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE BZ_APIBZ2_bzWriteOpen( *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE ( *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE BZ_APIBZ2_bzWriteOpen *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE  *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *(int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *int *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *( *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE * *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *(int bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *int bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *( bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE * bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpenint bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpenint *, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen *, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpenint , FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen , FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen( *bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen( bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen( *, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen( , FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen( *bzerror FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen( bzerror FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen( * FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(  FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int bzerror, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int , FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int bzerror FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int  FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int bzerror,  *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int ,  *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int bzerror  *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int   *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int * FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *  *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int * FILE f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *  f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE *f,
(98.2 %, 3763 bytes)
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int * FILE *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *  *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int * FILE f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *  f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int * FILE *,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *  *,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int * FILE ,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *  ,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  *f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  *,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  ,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  *f
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  f
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  *
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *,  
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE f,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE ,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE f
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE 
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE f,
>                                          blockSize100k, int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE ,
>                                          blockSize100k, int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE f
>                                          blockSize100k, int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE 
>                                          blockSize100k, int verbosity,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
>                                          blockSize100k, int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          blockSize100k, int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
>                                         int , int verbosity,
(98.2 %, 3762 bytes)
26c26
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          blockSize100k, int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                         int , int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          , int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                         int blockSize100k int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          blockSize100k int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                         int  int verbosity,
26,27c26,27
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                           int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k, int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                          , int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                           int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k,  verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                          ,  verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k  verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                            verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int , int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int  int verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int ,  verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int   verbosity,
27c27
<                                         int blockSize100k, int verbosity,
---
>                                         int , int ,
(98.2 %, 3749 bytes)
27c27
<                                         int , int verbosity,
---
>                                         int  int verbosity,
27c27
<                                         int , int verbosity,
---
>                                         int   verbosity,
27c27
<                                         int , int verbosity,
---
>                                         int  int ,
27c27
<                                         int , int verbosity,
---
>                                         int   ,
27c27
<                                         int , int verbosity,
---
>                                         int  int verbosity
27c27
<                                         int , int verbosity,
---
>                                         int   verbosity
27c27
<                                         int , int verbosity,
---
>                                         int  int 
27c27
<                                         int , int verbosity,
---
>                                         int   
27c27
<                                         int , int verbosity,
---
>                                         int ,  verbosity,
27c27
<                                         int , int verbosity,
---
>                                         int ,  ,
27c27
<                                         int , int verbosity,
---
>                                         int ,  verbosity
27c27
<                                         int , int verbosity,
---
>                                         int ,  
27,28c27,28
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  verbosity,
>                                          workFactor);
27,28c27,28
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  ,
>                                          workFactor);
27,28c27,28
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  verbosity
>                                          workFactor);
27,28c27,28
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  
>                                          workFactor);
27c27
<                                         int , int verbosity,
---
>                                         int , int ,
27c27
<                                         int , int verbosity,
---
>                                         int , int 
27,28c27,28
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int , int ,
>                                          workFactor);
27,28c27,28
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int , int 
>                                          workFactor);
27,28c27,28
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int , int ,
>                                         int );
(98.2 %, 3740 bytes)
27c27
<                                         int , int ,
---
>                                         int , int 
27,28c27,28
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          workFactor);
27,28c27,28
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                         int );
27,28c27,28
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          );
27,28c27,28
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                         int workFactor;
27,28c27,28
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          workFactor;
27,28c27,28
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                         int ;
27,28c27,28
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          ;
28c28
<                                         int workFactor);
---
>                                          workFactor);
28c28
<                                         int workFactor);
---
>                                          );
28c28
<                                         int workFactor);
---
>                                          workFactor;
28c28
<                                         int workFactor);
---
>                                          ;
28c28
<                                         int workFactor);
---
>                                          workFactor)
28c28
<                                         int workFactor);
---
>                                          )
28c28
<                                         int workFactor);
---
>                                          workFactor
28c28
<                                         int workFactor);
---
>                                          
28c28
<                                         int workFactor);
---
>                                         int );
28c28
<                                         int workFactor);
---
>                                         int ;
28c28
<                                         int workFactor);
---
>                                         int )
28c28
<                                         int workFactor);
---
>                                         int 
28c28
<                                         int workFactor);
---
>                                         int );
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
(98.2 %, 3730 bytes)
28c28
<                                         int );
---
>                                         int ;
28c28
<                                         int );
---
>                                         int 
28c28
<                                         int );
---
>                                         int ;
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int 
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int ;
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int 
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int ;
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int 
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int )
28c28
<                                         int );
---
>                                         int )
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int )
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int )
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int )
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN void (int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int )
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void (int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int )
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN  (int *bzerror, BZFILE , void *buf, int len);
28c28
<                                         int );
---
>                                         int )
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   (int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void (int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   (int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   int *bzerror, BZFILE , void *buf, int len);
30c30
< BZ_EXTERN void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
(98.2 %, 3721 bytes)
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   (int *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   int *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWrite( *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   ( *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   BZ_APIBZ2_bzWrite *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>    *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void (int *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void int *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void ( *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void  *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void (int bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void int bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void ( bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void  bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWriteint bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWriteint *, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite *, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWriteint , BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite , BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite( *bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite( bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite( *, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite( , BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite( *bzerror BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite( bzerror BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite( * BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(  BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int bzerror, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int , BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int bzerror BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int  BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int bzerror,  , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int ,  , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int bzerror  , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int   , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int * BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,  , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *  , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE  void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int * BZFILE  void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,   void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *   void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *bzerror BZFILE , void *buf, int len);
(98.2 %, 3714 bytes)
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int * BZFILE , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *  , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int * BZFILE  void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *   void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int * BZFILE ,  *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *  ,  *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int * BZFILE   *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *    *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,  , void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,   void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,  ,  *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,    *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,  , void buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,   void buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,  ,  buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *,    buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE  void *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE   *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE  void buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE   buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE  void *, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE   *, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE  void , int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE   , int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,  *buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,  buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,  *, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,  , int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,  *buf int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,  buf int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,  * int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE ,   int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void , int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void  int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf,  len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void ,  len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf  len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void   len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
(98.2 %, 3711 bytes)
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int );
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  );
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int len;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  len;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int ;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  ;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len);
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  );
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  ;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len)
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  )
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
(98.2 %, 3708 bytes)
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN void (int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void (int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  (int *bzerror, BZFILE , int abandon,
30c30
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   (int *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void (int *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   (int *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void int *bzerror, BZFILE , int abandon,
32c32
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   int *bzerror, BZFILE , int abandon,
(98.2 %, 3699 bytes)
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   (int *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   int *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose( *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   ( *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>    *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void (int *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void int *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void ( *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void  *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void (int bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void int bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void ( bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void  bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteCloseint bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteCloseint *, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose *, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteCloseint , BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose , BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose( *bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose( bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose( *, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose( , BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose( *bzerror BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose( bzerror BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose( * BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(  BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int bzerror, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int , BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int bzerror BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int  BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int bzerror,  , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int ,  , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int bzerror  , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int   , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int * BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,  , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *  , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int * BZFILE  int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,   int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *   int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *bzerror BZFILE , int abandon,
(98.2 %, 3692 bytes)
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int * BZFILE , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *  , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int * BZFILE  int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *   int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int * BZFILE ,  abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *  ,  abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int * BZFILE   abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *    abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,  , int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,   int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,  ,  abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,    abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,  , int ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,   int ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,  ,  ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *,    ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE   abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE   ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int abandon
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE   abandon
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int 
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE   
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon,
>                                        int *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  ,
>                                        int *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon
>                                        int *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  
>                                        int *nbytes_in,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
>                                        int *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                        int *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
>                                       unsigned  *nbytes_in,
(98.2 %, 3685 bytes)
32c32
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                        int *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                       unsigned  *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                         *nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                       unsigned int nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                        int nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                       unsigned  nbytes_in,
32,33c32,33
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned int *nbytes_in,
---
>  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                                         nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                        int *nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                         *nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                        int nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                         nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                        int *,
33c33
<                                       unsigned int *nbytes_in,
---
>                                         *,
33c33
<                                       unsigned int *nbytes_in,
---
>                                        int ,
33c33
<                                       unsigned int *nbytes_in,
---
>                                         ,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       unsigned  *nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       unsigned  nbytes_in,
33c33
<                                       unsigned int *nbytes_in,
---
>                                       unsigned  *,
(98.2 %, 3682 bytes)
33c33
<                                       unsigned  *nbytes_in,
---
>                                       unsigned  nbytes_in,
33c33
<                                       unsigned  *nbytes_in,
---
>                                       unsigned  ,
33c33
<                                       unsigned  *nbytes_in,
---
>                                       unsigned  nbytes_in
33c33
<                                       unsigned  *nbytes_in,
---
>                                       unsigned  
33,34c33,34
<                                       unsigned  *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  nbytes_in,
>                                        int *nbytes_out);
33,34c33,34
<                                       unsigned  *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  ,
>                                        int *nbytes_out);
33,34c33,34
<                                       unsigned  *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  nbytes_in
>                                        int *nbytes_out);
33,34c33,34
<                                       unsigned  *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  
>                                        int *nbytes_out);
33c33
<                                       unsigned  *nbytes_in,
---
>                                       unsigned  *,
33c33
<                                       unsigned  *nbytes_in,
---
>                                       unsigned  *
33,34c33,34
<                                       unsigned  *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *,
>                                        int *nbytes_out);
33,34c33,34
<                                       unsigned  *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                        int *nbytes_out);
33,34c33,34
<                                       unsigned  *nbytes_in,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *,
>                                       unsigned  *nbytes_out);
(98.2 %, 3673 bytes)
33c33
<                                       unsigned  *,
---
>                                       unsigned  *
33,34c33,34
<                                       unsigned  *,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                        int *nbytes_out);
33,34c33,34
<                                       unsigned  *,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                       unsigned  *nbytes_out);
33,34c33,34
<                                       unsigned  *,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                         *nbytes_out);
33,34c33,34
<                                       unsigned  *,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                       unsigned int nbytes_out);
33,34c33,34
<                                       unsigned  *,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                        int nbytes_out);
33,34c33,34
<                                       unsigned  *,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                       unsigned  nbytes_out);
33,34c33,34
<                                       unsigned  *,
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *
>                                         nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                        int *nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                         *nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                        int nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                         nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                        int *);
34c34
<                                       unsigned int *nbytes_out);
---
>                                         *);
34c34
<                                       unsigned int *nbytes_out);
---
>                                        int );
34c34
<                                       unsigned int *nbytes_out);
---
>                                         );
34c34
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  nbytes_out);
34c34
<                                       unsigned int *nbytes_out);
---
>                                       unsigned  *);
(98.2 %, 3670 bytes)
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  nbytes_out);
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  );
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  nbytes_out;
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  ;
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  nbytes_out)
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  )
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  nbytes_out
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  *);
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  *;
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  *)
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  *
34c34
<                                       unsigned  *nbytes_out);
---
>                                       unsigned  *);
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
(98.2 %, 3660 bytes)
34c34
<                                       unsigned  *);
---
>                                       unsigned  *;
34c34
<                                       unsigned  *);
---
>                                       unsigned  *
34c34
<                                       unsigned  *);
---
>                                       unsigned  *;
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *;
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *;
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN void (int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void (int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> BZ_EXTERN  (int *bzerror, BZFILE , int abandon,
34c34
<                                       unsigned  *);
---
>                                       unsigned  *)
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   (int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void (int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   (int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void int *bzerror, BZFILE , int abandon,
36c36
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   int *bzerror, BZFILE , int abandon,
(98.2 %, 3651 bytes)
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   (int *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   int *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64( *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   ( *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   BZ_APIBZ2_bzWriteClose64 *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>    *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void (int *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void int *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void ( *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void  *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void (int bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void int bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void ( bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void  bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64 *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64int bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64 bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64int *, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64 *, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64int , BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64 , BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64( *bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64( bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64( *, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64( , BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64( *bzerror BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64( bzerror BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64( * BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(  BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int bzerror, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int , BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int bzerror BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int  BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int bzerror,  , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int ,  , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int bzerror  , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int   , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int * BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,  , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *  , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int * BZFILE  int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,   int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *   int abandon,
(98.2 %, 3644 bytes)
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int * BZFILE , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *  , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int * BZFILE  int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *   int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int * BZFILE ,  abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *  ,  abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int * BZFILE   abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *    abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,  , int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,   int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,  ,  abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,    abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,  , int ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,   int ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,  ,  ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *,    ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int abandon
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   abandon
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int 
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon,
>                                          int *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  ,
>                                          int *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon
>                                          int *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  
>                                          int *nbytes_in_lo32,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
>                                          int *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                          int *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
>                                         unsigned  *nbytes_in_lo32,
(98.2 %, 3637 bytes)
36c36
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                          int *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                         unsigned  *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                           *nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                         unsigned int nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                          int nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                         unsigned  nbytes_in_lo32,
36,37c36,37
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned int *nbytes_in_lo32,
---
>  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                           nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                          int *nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                           *nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                          int nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                           nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                          int *,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                           *,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                          int ,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                           ,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         unsigned  *nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         unsigned  nbytes_in_lo32,
37c37
<                                         unsigned int *nbytes_in_lo32,
---
>                                         unsigned  *,
(98.2 %, 3634 bytes)
37c37
<                                         unsigned  *nbytes_in_lo32,
---
>                                         unsigned  nbytes_in_lo32,
37c37
<                                         unsigned  *nbytes_in_lo32,
---
>                                         unsigned  ,
37c37
<                                         unsigned  *nbytes_in_lo32,
---
>                                         unsigned  nbytes_in_lo32
37c37
<                                         unsigned  *nbytes_in_lo32,
---
>                                         unsigned  
37,38c37,38
<                                         unsigned  *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  nbytes_in_lo32,
>                                          int *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  ,
>                                          int *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  nbytes_in_lo32
>                                          int *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  
>                                          int *nbytes_in_hi32,
37c37
<                                         unsigned  *nbytes_in_lo32,
---
>                                         unsigned  *,
37c37
<                                         unsigned  *nbytes_in_lo32,
---
>                                         unsigned  *
37,38c37,38
<                                         unsigned  *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *,
>                                          int *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                          int *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *nbytes_in_lo32,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *,
>                                         unsigned  *nbytes_in_hi32,
(98.2 %, 3620 bytes)
37c37
<                                         unsigned  *,
---
>                                         unsigned  *
37,38c37,38
<                                         unsigned  *,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                          int *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                         unsigned  *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                           *nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                         unsigned int nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                          int nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                         unsigned  nbytes_in_hi32,
37,38c37,38
<                                         unsigned  *,
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *
>                                           nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                          int *nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                           *nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                          int nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                           nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                          int *,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                           *,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                          int ,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                           ,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  nbytes_in_hi32,
38c38
<                                         unsigned int *nbytes_in_hi32,
---
>                                         unsigned  *,
(98.2 %, 3617 bytes)
38c38
<                                         unsigned  *nbytes_in_hi32,
---
>                                         unsigned  nbytes_in_hi32,
38c38
<                                         unsigned  *nbytes_in_hi32,
---
>                                         unsigned  ,
38c38
<                                         unsigned  *nbytes_in_hi32,
---
>                                         unsigned  nbytes_in_hi32
38c38
<                                         unsigned  *nbytes_in_hi32,
---
>                                         unsigned  
38,39c38,39
<                                         unsigned  *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  nbytes_in_hi32,
>                                          int *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  ,
>                                          int *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  nbytes_in_hi32
>                                          int *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  
>                                          int *nbytes_out_lo32,
38c38
<                                         unsigned  *nbytes_in_hi32,
---
>                                         unsigned  *,
38c38
<                                         unsigned  *nbytes_in_hi32,
---
>                                         unsigned  *
38,39c38,39
<                                         unsigned  *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *,
>                                          int *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                          int *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *nbytes_in_hi32,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *,
>                                         unsigned  *nbytes_out_lo32,
(98.2 %, 3603 bytes)
38c38
<                                         unsigned  *,
---
>                                         unsigned  *
38,39c38,39
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                          int *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                         unsigned  *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                           *nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                         unsigned int nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                          int nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                         unsigned  nbytes_out_lo32,
38,39c38,39
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *
>                                           nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                          int *nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                           *nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                          int nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                           nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                          int *,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                           *,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                          int ,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                           ,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  nbytes_out_lo32,
39c39
<                                         unsigned int *nbytes_out_lo32,
---
>                                         unsigned  *,
(98.2 %, 3600 bytes)
39c39
<                                         unsigned  *nbytes_out_lo32,
---
>                                         unsigned  nbytes_out_lo32,
39c39
<                                         unsigned  *nbytes_out_lo32,
---
>                                         unsigned  ,
39c39
<                                         unsigned  *nbytes_out_lo32,
---
>                                         unsigned  nbytes_out_lo32
39c39
<                                         unsigned  *nbytes_out_lo32,
---
>                                         unsigned  
39,40c39,40
<                                         unsigned  *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  nbytes_out_lo32,
>                                          int *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  ,
>                                          int *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  nbytes_out_lo32
>                                          int *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  
>                                          int *nbytes_out_hi32);
39c39
<                                         unsigned  *nbytes_out_lo32,
---
>                                         unsigned  *,
39c39
<                                         unsigned  *nbytes_out_lo32,
---
>                                         unsigned  *
39,40c39,40
<                                         unsigned  *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *,
>                                          int *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                          int *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *nbytes_out_lo32,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *,
>                                         unsigned  *nbytes_out_hi32);
(98.3 %, 3585 bytes)
39c39
<                                         unsigned  *,
---
>                                         unsigned  *
39,40c39,40
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                          int *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                         unsigned  *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                           *nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                         unsigned int nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                          int nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                         unsigned  nbytes_out_hi32);
39,40c39,40
<                                         unsigned  *,
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *
>                                           nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                          int *nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                           *nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                          int nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                           nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                          int *);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                           *);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                          int );
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                           );
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  nbytes_out_hi32);
40c40
<                                         unsigned int *nbytes_out_hi32);
---
>                                         unsigned  *);
(98.3 %, 3582 bytes)
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  nbytes_out_hi32);
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  );
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  nbytes_out_hi32;
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  ;
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  nbytes_out_hi32)
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  )
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  nbytes_out_hi32
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *);
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *;
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *)
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *);
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *;
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *nbytes_out_hi32);
---
>                                         unsigned  *
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
(98.3 %, 3567 bytes)
40c40
<                                         unsigned  *);
---
>                                         unsigned  *;
40c40
<                                         unsigned  *);
---
>                                         unsigned  *
40c40
<                                         unsigned  *);
---
>                                         unsigned  *;
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *;
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *;
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> char *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> ( *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress *dest, unsigned int *destLen,
40c40
<                                         unsigned  *);
---
>                                         unsigned  *)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> char *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> ( *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> (char dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> char dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> ( dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar *, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress *, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar , unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress , unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( *dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( *, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( , unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( *dest unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( dest unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress( * unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(  unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char dest, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char dest unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char  unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char dest,  int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char ,  int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char dest  int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char   int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,  int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *  int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
(98.3 %, 3563 bytes)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *  int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned  *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *   *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned int destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *  int destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned  destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *   destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,  int *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,   *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,  int destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,   destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,  int *,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,   *,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,  int ,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *,   ,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
(98.3 %, 3560 bytes)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  ,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen,
>                                               *source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  ,
>                                               *source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen
>                                               *source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  
>                                               *source,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
>                                               *source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                               *source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
>                                              char source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                              char source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
>                                               source,
(98.3 %, 3553 bytes)
42c42
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                               *source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                              char source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                               source,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                              char *,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                               *,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                              char ,
42,43c42,43
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *source,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                               ,
43c43
<                                              char *source,
---
>                                               *source,
43c43
<                                              char *source,
---
>                                               source,
43c43
<                                              char *source,
---
>                                               *,
43c43
<                                              char *source,
---
>                                               ,
43c43
<                                              char *source,
---
>                                               *source
43c43
<                                              char *source,
---
>                                               source
43c43
<                                              char *source,
---
>                                               *
43c43
<                                              char *source,
---
>                                               
43c43
<                                              char *source,
---
>                                              char source,
43c43
<                                              char *source,
---
>                                              char ,
43c43
<                                              char *source,
---
>                                              char source
43c43
<                                              char *source,
---
>                                              char 
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char source,
>                                               ,
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char ,
>                                               ,
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char source
>                                               ,
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char 
>                                               ,
43c43
<                                              char *source,
---
>                                              char *,
43c43
<                                              char *source,
---
>                                              char *
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char *,
>                                               ,
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char *
>                                               ,
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char *,
>                                              unsigned 
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char *
>                                              unsigned 
43,44c43,44
<                                              char *source,
<                                              unsigned ,
---
>                                              char *,
>                                               
(98.3 %, 3547 bytes)
43c43
<                                              char *,
---
>                                              char *
43,44c43,44
<                                              char *,
<                                              unsigned ,
---
>                                              char *
>                                               ,
43,44c43,44
<                                              char *,
<                                              unsigned ,
---
>                                              char *
>                                              unsigned 
43,44c43,44
<                                              char *,
<                                              unsigned ,
---
>                                              char *
>                                               
43c43
<                                              char *,
---
>                                              char *
45c45
<                                              int blockSize100k, int verbosity,
---
>                                               blockSize100k, int verbosity,
43,45c43,45
<                                              char *,
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              char *
>                                               ,
>                                               blockSize100k, int verbosity,
43,45c43,45
<                                              char *,
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              char *
>                                              unsigned 
>                                               blockSize100k, int verbosity,
43,45c43,45
<                                              char *,
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              char *
>                                               
>                                               blockSize100k, int verbosity,
44c44
<                                              unsigned ,
---
>                                               ,
44c44
<                                              unsigned ,
---
>                                               
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                               ,
>                                               blockSize100k, int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                               
>                                               blockSize100k, int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                               ,
>                                              int , int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                               
>                                              int , int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                               ,
>                                               , int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                               
>                                               , int verbosity,
44c44
<                                              unsigned ,
---
>                                              unsigned 
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned 
>                                               blockSize100k, int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned 
>                                              int , int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned 
>                                               , int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned 
>                                              int blockSize100k int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned 
>                                               blockSize100k int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned 
>                                              int  int verbosity,
44,45c44,45
<                                              unsigned ,
<                                              int blockSize100k, int verbosity,
---
>                                              unsigned 
>                                                int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                               blockSize100k, int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                               , int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                               blockSize100k int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                                int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                               blockSize100k,  verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                               ,  verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                               blockSize100k  verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                                 verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int , int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int  int verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int ,  verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int   verbosity,
45c45
<                                              int blockSize100k, int verbosity,
---
>                                              int , int ,
(98.3 %, 3534 bytes)
45c45
<                                              int , int verbosity,
---
>                                              int  int verbosity,
45c45
<                                              int , int verbosity,
---
>                                              int   verbosity,
45c45
<                                              int , int verbosity,
---
>                                              int  int ,
45c45
<                                              int , int verbosity,
---
>                                              int   ,
45c45
<                                              int , int verbosity,
---
>                                              int  int verbosity
45c45
<                                              int , int verbosity,
---
>                                              int   verbosity
45c45
<                                              int , int verbosity,
---
>                                              int  int 
45c45
<                                              int , int verbosity,
---
>                                              int   
45c45
<                                              int , int verbosity,
---
>                                              int ,  verbosity,
45c45
<                                              int , int verbosity,
---
>                                              int ,  ,
45c45
<                                              int , int verbosity,
---
>                                              int ,  verbosity
45c45
<                                              int , int verbosity,
---
>                                              int ,  
45,46c45,46
<                                              int , int verbosity,
<                                              int workFactor);
---
>                                              int ,  verbosity,
>                                               workFactor);
45,46c45,46
<                                              int , int verbosity,
<                                              int workFactor);
---
>                                              int ,  ,
>                                               workFactor);
45,46c45,46
<                                              int , int verbosity,
<                                              int workFactor);
---
>                                              int ,  verbosity
>                                               workFactor);
45,46c45,46
<                                              int , int verbosity,
<                                              int workFactor);
---
>                                              int ,  
>                                               workFactor);
45c45
<                                              int , int verbosity,
---
>                                              int , int ,
45c45
<                                              int , int verbosity,
---
>                                              int , int 
45,46c45,46
<                                              int , int verbosity,
<                                              int workFactor);
---
>                                              int , int ,
>                                               workFactor);
45,46c45,46
<                                              int , int verbosity,
<                                              int workFactor);
---
>                                              int , int 
>                                               workFactor);
45,46c45,46
<                                              int , int verbosity,
<                                              int workFactor);
---
>                                              int , int ,
>                                              int );
(98.3 %, 3525 bytes)
45c45
<                                              int , int ,
---
>                                              int , int 
45,46c45,46
<                                              int , int ,
<                                              int workFactor);
---
>                                              int , int 
>                                               workFactor);
45,46c45,46
<                                              int , int ,
<                                              int workFactor);
---
>                                              int , int 
>                                              int );
45,46c45,46
<                                              int , int ,
<                                              int workFactor);
---
>                                              int , int 
>                                               );
45,46c45,46
<                                              int , int ,
<                                              int workFactor);
---
>                                              int , int 
>                                              int workFactor;
45,46c45,46
<                                              int , int ,
<                                              int workFactor);
---
>                                              int , int 
>                                               workFactor;
45,46c45,46
<                                              int , int ,
<                                              int workFactor);
---
>                                              int , int 
>                                              int ;
45,46c45,46
<                                              int , int ,
<                                              int workFactor);
---
>                                              int , int 
>                                               ;
46c46
<                                              int workFactor);
---
>                                               workFactor);
46c46
<                                              int workFactor);
---
>                                               );
46c46
<                                              int workFactor);
---
>                                               workFactor;
46c46
<                                              int workFactor);
---
>                                               ;
46c46
<                                              int workFactor);
---
>                                               workFactor)
46c46
<                                              int workFactor);
---
>                                               )
46c46
<                                              int workFactor);
---
>                                               workFactor
46c46
<                                              int workFactor);
---
>                                               
46c46
<                                              int workFactor);
---
>                                              int );
46c46
<                                              int workFactor);
---
>                                              int ;
46c46
<                                              int workFactor);
---
>                                              int )
46c46
<                                              int workFactor);
---
>                                              int 
46c46
<                                              int workFactor);
---
>                                              int );
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
46c46
<                                              int workFactor);
---
>                                              int ;
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
46c46
<                                              int workFactor);
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
46c46
<                                              int workFactor);
---
>                                              int 
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
(98.3 %, 3515 bytes)
46c46
<                                              int );
---
>                                              int ;
46c46
<                                              int );
---
>                                              int 
46c46
<                                              int );
---
>                                              int ;
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
46c46
<                                              int );
---
>                                              int 
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
46c46
<                                              int );
---
>                                              int ;
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar *dest,
46c46
<                                              int );
---
>                                              int 
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar *dest,
46c46
<                                              int );
---
>                                              int ;
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> char *dest,
46c46
<                                              int );
---
>                                              int 
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> char *dest,
46c46
<                                              int );
---
>                                              int )
46c46
<                                              int );
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
46c46
<                                              int );
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar *dest,
46c46
<                                              int );
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> char *dest,
46c46
<                                              int );
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( *dest,
46c46
<                                              int );
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> ( *dest,
46c46
<                                              int );
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress *dest,
46c46
<                                              int );
---
>                                              int )
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>  *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> char *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> ( *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>  *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> (char dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> char dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> ( dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
>  dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar *,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress *,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar ,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress ,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( *dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( *,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( ,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( *dest
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( dest
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( *
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress( 
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char dest,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char ,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char dest
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char 
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char dest,
>                                                 int *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char ,
>                                                 int *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char dest
>                                                 int *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char 
>                                                 int *destLen,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *,
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *,
>                                                 int *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                 int *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *dest,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *,
>                                                unsigned  *destLen,
(98.3 %, 3511 bytes)
48c48
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                 int *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                unsigned  *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                  *destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                unsigned int destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                 int destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                unsigned  destLen,
48,49c48,49
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *
>                                                  destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                 int *destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                  *destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                 int destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                  destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                 int *,
49c49
<                                                unsigned int *destLen,
---
>                                                  *,
49c49
<                                                unsigned int *destLen,
---
>                                                 int ,
49c49
<                                                unsigned int *destLen,
---
>                                                  ,
49c49
<                                                unsigned int *destLen,
---
>                                                unsigned  *destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                unsigned  destLen,
49c49
<                                                unsigned int *destLen,
---
>                                                unsigned  *,
(98.3 %, 3508 bytes)
49c49
<                                                unsigned  *destLen,
---
>                                                unsigned  destLen,
49c49
<                                                unsigned  *destLen,
---
>                                                unsigned  ,
49c49
<                                                unsigned  *destLen,
---
>                                                unsigned  destLen
49c49
<                                                unsigned  *destLen,
---
>                                                unsigned  
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  destLen,
>                                                 *source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  ,
>                                                 *source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  destLen
>                                                 *source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  
>                                                 *source,
49c49
<                                                unsigned  *destLen,
---
>                                                unsigned  *,
49c49
<                                                unsigned  *destLen,
---
>                                                unsigned  *
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  *,
>                                                 *source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  *
>                                                 *source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  *,
>                                                char source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  *
>                                                char source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  *,
>                                                 source,
49,50c49,50
<                                                unsigned  *destLen,
<                                                char *source,
---
>                                                unsigned  *
>                                                 source,
49c49
<                                                unsigned  *destLen,
---
>                                                unsigned  *destLen
(98.3 %, 3501 bytes)
49c49
<                                                unsigned  *,
---
>                                                unsigned  *
49,50c49,50
<                                                unsigned  *,
<                                                char *source,
---
>                                                unsigned  *
>                                                 *source,
49,50c49,50
<                                                unsigned  *,
<                                                char *source,
---
>                                                unsigned  *
>                                                char source,
49,50c49,50
<                                                unsigned  *,
<                                                char *source,
---
>                                                unsigned  *
>                                                 source,
49,50c49,50
<                                                unsigned  *,
<                                                char *source,
---
>                                                unsigned  *
>                                                char *,
49,50c49,50
<                                                unsigned  *,
<                                                char *source,
---
>                                                unsigned  *
>                                                 *,
49,50c49,50
<                                                unsigned  *,
<                                                char *source,
---
>                                                unsigned  *
>                                                char ,
49,50c49,50
<                                                unsigned  *,
<                                                char *source,
---
>                                                unsigned  *
>                                                 ,
50c50
<                                                char *source,
---
>                                                 *source,
50c50
<                                                char *source,
---
>                                                 source,
50c50
<                                                char *source,
---
>                                                 *,
50c50
<                                                char *source,
---
>                                                 ,
50c50
<                                                char *source,
---
>                                                 *source
50c50
<                                                char *source,
---
>                                                 source
50c50
<                                                char *source,
---
>                                                 *
50c50
<                                                char *source,
---
>                                                 
50c50
<                                                char *source,
---
>                                                char source,
50c50
<                                                char *source,
---
>                                                char ,
50c50
<                                                char *source,
---
>                                                char source
50c50
<                                                char *source,
---
>                                                char 
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char source,
>                                                 ,
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char ,
>                                                 ,
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char source
>                                                 ,
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char 
>                                                 ,
50c50
<                                                char *source,
---
>                                                char *,
50c50
<                                                char *source,
---
>                                                char *
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char *,
>                                                 ,
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char *
>                                                 ,
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char *,
>                                                unsigned 
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char *
>                                                unsigned 
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char *,
>                                                 
50,51c50,51
<                                                char *source,
<                                                unsigned ,
---
>                                                char *
>                                                 
(98.3 %, 3495 bytes)
50c50
<                                                char *,
---
>                                                char *
50,51c50,51
<                                                char *,
<                                                unsigned ,
---
>                                                char *
>                                                 ,
50,51c50,51
<                                                char *,
<                                                unsigned ,
---
>                                                char *
>                                                unsigned 
50,51c50,51
<                                                char *,
<                                                unsigned ,
---
>                                                char *
>                                                 
50c50
<                                                char *,
---
>                                                char *
52c52
<                                                int small, int verbosity);
---
>                                                 small, int verbosity);
50,52c50,52
<                                                char *,
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                char *
>                                                 ,
>                                                 small, int verbosity);
50,52c50,52
<                                                char *,
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                char *
>                                                unsigned 
>                                                 small, int verbosity);
50,52c50,52
<                                                char *,
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                char *
>                                                 
>                                                 small, int verbosity);
51c51
<                                                unsigned ,
---
>                                                 ,
51c51
<                                                unsigned ,
---
>                                                 
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                 ,
>                                                 small, int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                 
>                                                 small, int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                 ,
>                                                int , int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                 
>                                                int , int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                 ,
>                                                 , int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                 
>                                                 , int verbosity);
51c51
<                                                unsigned ,
---
>                                                unsigned 
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned 
>                                                 small, int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned 
>                                                int , int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned 
>                                                 , int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned 
>                                                int small int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned 
>                                                 small int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned 
>                                                int  int verbosity);
51,52c51,52
<                                                unsigned ,
<                                                int small, int verbosity);
---
>                                                unsigned 
>                                                  int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                 small, int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                 , int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                 small int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                  int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                 small,  verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                 ,  verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                 small  verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                   verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int , int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int  int verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int ,  verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int   verbosity);
52c52
<                                                int small, int verbosity);
---
>                                                int , int );
(98.3 %, 3490 bytes)
52c52
<                                                int , int verbosity);
---
>                                                int  int verbosity);
52c52
<                                                int , int verbosity);
---
>                                                int   verbosity);
52c52
<                                                int , int verbosity);
---
>                                                int  int );
52c52
<                                                int , int verbosity);
---
>                                                int   );
52c52
<                                                int , int verbosity);
---
>                                                int  int verbosity;
52c52
<                                                int , int verbosity);
---
>                                                int   verbosity;
52c52
<                                                int , int verbosity);
---
>                                                int  int ;
52c52
<                                                int , int verbosity);
---
>                                                int   ;
52c52
<                                                int , int verbosity);
---
>                                                int ,  verbosity);
52c52
<                                                int , int verbosity);
---
>                                                int ,  );
52c52
<                                                int , int verbosity);
---
>                                                int ,  verbosity;
52c52
<                                                int , int verbosity);
---
>                                                int ,  ;
52c52
<                                                int , int verbosity);
---
>                                                int ,  verbosity)
52c52
<                                                int , int verbosity);
---
>                                                int ,  )
52c52
<                                                int , int verbosity);
---
>                                                int ,  verbosity
52c52
<                                                int , int verbosity);
---
>                                                int ,  
52c52
<                                                int , int verbosity);
---
>                                                int , int );
52c52
<                                                int , int verbosity);
---
>                                                int , int ;
52c52
<                                                int , int verbosity);
---
>                                                int , int )
52c52
<                                                int , int verbosity);
---
>                                                int , int 
52c52
<                                                int , int verbosity);
---
>                                                int , int );
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
(98.3 %, 3481 bytes)
52c52
<                                                int , int );
---
>                                                int , int ;
52c52
<                                                int , int );
---
>                                                int , int 
52c52
<                                                int , int );
---
>                                                int , int ;
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int 
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int ;
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int 
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int ;
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int 
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int )
52c52
<                                                int , int );
---
>                                                int , int )
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int )
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int )
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int )
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int )
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int )
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN  BZ_APIBZ2_bzopen(const char *path, const char *mode);
52c52
<                                                int , int );
---
>                                                int , int )
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE (const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   (const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
> BZ_EXTERN  BZ_APIBZ2_bzopen(const char *path, const char *mode);
(98.3 %, 3472 bytes)
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *(const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   (const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *BZ_APIBZ2_bzopenconst char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   BZ_APIBZ2_bzopenconst char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   *const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>   const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE BZ_APIBZ2_bzopen(const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE (const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE BZ_APIBZ2_bzopenconst char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE BZ_APIBZ2_bzopen( char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE ( char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE BZ_APIBZ2_bzopen char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE  char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *(const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *const char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *( char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE * char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *(const  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *const  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *(  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopenconst char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopenconst  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopenconst char path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen char path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopenconst  path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen  path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen( char *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen( char path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(  path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen( char *, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(  *, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen( char , const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(  , const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const  *path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const  path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const  *, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const  , const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const  *path const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const  path const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const  * const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const   const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char path, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char , const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char path const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char  const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char path,  char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char ,  char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char path  char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char   char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char * const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,  char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *  char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char * const  *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,   *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *path, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *   *mode);
(98.3 %, 3468 bytes)
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char * const char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *  char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char * const  *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *   *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char * const char mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *  char mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char * const  mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *   mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,  char *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,   *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,  char mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,   mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,  char *);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,   *);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,  char );
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *,   );
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  *mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  *);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  );
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  *mode;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  mode;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  *;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const  ;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char );
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char ;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode)
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char )
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char 
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode;
(98.3 %, 3464 bytes)
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzreadBZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzreadBZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzreadBZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZFILE , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread( , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> ( , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread , void *buf, int len);
54c54
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
>  , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZFILE , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> ( , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
>  , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (BZFILE  void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZFILE  void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> (  void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
>   void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzreadBZFILE , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzreadBZFILE  void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread  void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzreadBZFILE ,  *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread ,  *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzreadBZFILE   *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread   *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread( , void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(  void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread( ,  *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(   *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread( , void buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(  void buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread( ,  buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(   buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE  void *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE   *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE  void buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE   buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE  void *, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE   *, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE  void , int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE   , int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,  *buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,  buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,  *, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,  , int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,  *buf int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,  buf int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,  * int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE ,   int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void buf, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void , int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void buf int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void  int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void buf,  len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void ,  len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void buf  len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void   len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void * int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *  len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *buf, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int );
(98.3 %, 3461 bytes)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void * int len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *  len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void * int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *  );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void * int len;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *  len;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void * int ;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *  ;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  len);
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  len;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  ;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  len)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  )
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  len
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *,  
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int ;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int 
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int len);
---
> BZ_APIBZ2_bzread(BZFILE , void *, int 
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
(98.3 %, 3458 bytes)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int ;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int 
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int 
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwriteBZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int 
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwriteBZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int 
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwriteBZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZFILE , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite( , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> ( , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite , void *buf, int );
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *, int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
>  , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZFILE , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> ( , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
>  , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (BZFILE  void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZFILE  void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> (  void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
>   void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwriteBZFILE , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwriteBZFILE  void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite  void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwriteBZFILE ,  *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite ,  *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwriteBZFILE   *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite   *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite( , void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(  void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite( ,  *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(   *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite( , void buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(  void buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite( ,  buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(   buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE  void *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE   *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE  void buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE   buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE  void *, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE   *, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE  void , int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE   , int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,  *buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,  buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,  *, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,  , int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,  *buf int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,  buf int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,  * int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE ,   int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void buf, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void , int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void buf int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void  int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void buf,  );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void ,  );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void buf  );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void   );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void * int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *  );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void * int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *buf, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *  ;
(98.3 %, 3455 bytes)
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void * int );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *  );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void * int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *  ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void * int )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *  )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void * int 
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *  
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  );
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  )
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  
58c58,59
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  );
> 
60d60
< ;
58c58,59
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  ;
> 
60d60
< ;
58c58,59
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  )
> 
60d60
< ;
58c58,59
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *,  
> 
60d60
< ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int 
58c58,59
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
> 
60d60
< ;
58c58,59
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int 
> 
60d60
< ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int 
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int 
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int )
58c58,59
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int )
> 
60d60
< ;
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int )
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int )
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
58c58
< BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
> BZ_APIBZ2_bzwrite(BZFILE , void *, int )
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # define BZ_VERSION "1.0.2, 30-Dec-2001"
(98.3 %, 3454 bytes)
60c60
< ;
---
> 
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> # define BZ_VERSION "1.0.2, 30-Dec-2001"
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
>  define BZ_VERSION "1.0.2, 30-Dec-2001"
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> #define  BZ_VERSION "1.0.2, 30-Dec-2001"
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> define  BZ_VERSION "1.0.2, 30-Dec-2001"
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
> #  BZ_VERSION "1.0.2, 30-Dec-2001"
60d59
< ;
62c61,62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> 
>   BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define define BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  define BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define  BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>   BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define define  "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  define  "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # define BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # define  "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
62c62
< #define define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # define BZ_VERSION 
(98.3 %, 3448 bytes)
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  BZ_VERSION "1.0.2, 30-Dec-2001"
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  BZ_VERSION 
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #   
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  BZ_VERSION "1.0.2, 30-Dec-2001"
64c64
< typedef Bool;
---
>  Bool;
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
64c64
< typedef Bool;
---
>  Bool;
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  BZ_VERSION 
64c64
< typedef Bool;
---
>  Bool;
62c62
< # define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #   
64c64
< typedef Bool;
---
>  Bool;
(98.3 %, 3412 bytes)
64c64
< typedef Bool;
---
>  
64,65c64,65
< typedef Bool;
< ;
---
>  Bool;
> 
(98.3 %, 3400 bytes)
65,66c65,66
< ;
< typedef int Int32;
---
> 
>   Int32;
65,66c65,66
< ;
< typedef int Int32;
---
> 
> typedef int ;
65,66c65,66
< ;
< typedef int Int32;
---
> 
>  int ;
65,66c65,66
< ;
< typedef int Int32;
---
> 
> typedef  ;
65,66c65,66
< ;
< typedef int Int32;
---
> 
>   ;
66c66
< typedef int Int32;
---
>  int Int32;
66c66
< typedef int Int32;
---
>   Int32;
66c66
< typedef int Int32;
---
>  int ;
66c66
< typedef int Int32;
---
>   ;
66c66
< typedef int Int32;
---
>  int Int32
66c66
< typedef int Int32;
---
>   Int32
66c66
< typedef int Int32;
---
>  int 
66c66
< typedef int Int32;
---
>   
66c66
< typedef int Int32;
---
> typedef  Int32;
66c66
< typedef int Int32;
---
> typedef  ;
66c66
< typedef int Int32;
---
> typedef  Int32
(98.3 %, 3397 bytes)
66c66
< typedef  Int32;
---
> typedef  ;
66c66
< typedef  Int32;
---
> typedef  
66,67c66,67
< typedef  Int32;
< ;
---
> typedef  ;
> 
66,67c66,67
< typedef  Int32;
< ;
---
> typedef  
> 
66c66
< typedef  Int32;
---
> typedef  ;
69c69
< #define EStateMTFA_SIZE 4096
---
> define EStateMTFA_SIZE 4096
66c66
< typedef  Int32;
---
> typedef  
69c69
< #define EStateMTFA_SIZE 4096
---
> define EStateMTFA_SIZE 4096
66,67c66
< typedef  Int32;
< ;
---
> typedef  ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> define EStateMTFA_SIZE 4096
66,67c66
< typedef  Int32;
< ;
---
> typedef  
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> define EStateMTFA_SIZE 4096
66c66
< typedef  Int32;
---
> typedef  Int32
66,67c66,67
< typedef  Int32;
< ;
---
> typedef  Int32
> 
66c66
< typedef  Int32;
---
> typedef  Int32
69c69
< #define EStateMTFA_SIZE 4096
---
> define EStateMTFA_SIZE 4096
66,67c66
< typedef  Int32;
< ;
---
> typedef  Int32
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> define EStateMTFA_SIZE 4096
66c66
< typedef  Int32;
---
> typedef  Int32
69c69
< #define EStateMTFA_SIZE 4096
---
> # EStateMTFA_SIZE 4096
66,67c66
< typedef  Int32;
< ;
---
> typedef  Int32
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> # EStateMTFA_SIZE 4096
66c66
< typedef  Int32;
---
> typedef  Int32
69c69
< #define EStateMTFA_SIZE 4096
---
>  EStateMTFA_SIZE 4096
66,67c66
< typedef  Int32;
< ;
---
> typedef  Int32
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
>  EStateMTFA_SIZE 4096
(98.3 %, 3396 bytes)
67c67
< ;
---
> 
67d66
< ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> define EStateMTFA_SIZE 4096
67d66
< ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> # EStateMTFA_SIZE 4096
67d66
< ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
>  EStateMTFA_SIZE 4096
67d66
< ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> #define  4096
67d66
< ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> define  4096
67d66
< ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
> #  4096
67d66
< ;
69c68,69
< #define EStateMTFA_SIZE 4096
---
> 
>   4096
69c69
< #define EStateMTFA_SIZE 4096
---
> define EStateMTFA_SIZE 4096
69c69
< #define EStateMTFA_SIZE 4096
---
>  EStateMTFA_SIZE 4096
69c69
< #define EStateMTFA_SIZE 4096
---
> define  4096
69c69
< #define EStateMTFA_SIZE 4096
---
>   4096
69c69
< #define EStateMTFA_SIZE 4096
---
> define EStateMTFA_SIZE 
69c69
< #define EStateMTFA_SIZE 4096
---
>  EStateMTFA_SIZE 
69c69
< #define EStateMTFA_SIZE 4096
---
> define  
69c69
< #define EStateMTFA_SIZE 4096
---
>   
69c69
< #define EStateMTFA_SIZE 4096
---
> # EStateMTFA_SIZE 4096
69c69
< #define EStateMTFA_SIZE 4096
---
> #  4096
(98.4 %, 3370 bytes)
70c70
< struct {
---
>  
72c72
<   } DState;
---
>    ;
70c70
< struct {
---
> struct 
70c70
< struct {
---
> struct 
72c72
<   } DState;
---
>    DState;
(98.4 %, 3356 bytes)
72c72
<    ;
---
>    
74c74
< #define tPosextern define BZ_SETERR
---
>   define BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> define tPosextern define BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
>  tPosextern define BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> define  define BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
>   define BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> define tPosextern  BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
>  tPosextern  BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> define   BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
>    BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> # tPosextern define BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> #  define BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> # tPosextern  BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> #   BZ_SETERR
74c74
< #define tPosextern define BZ_SETERR
---
> # tPosextern define 
74c74
< #define tPosextern define BZ_SETERR
---
> #  define 
74c74
< #define tPosextern define BZ_SETERR
---
> # tPosextern  
74c74
< #define tPosextern define BZ_SETERR
---
> #   
(98.4 %, 3340 bytes)
74c74
< #  define BZ_SETERR
---
> #   
74c74
< #  define BZ_SETERR
---
> #   BZ_SETERR
76c76
< typedef struct {
---
>  struct {
74c74
< #  define BZ_SETERR
---
> #   
76c76
< typedef struct {
---
>  struct {
74c74
< #  define BZ_SETERR
---
> #   BZ_SETERR
76c76
< typedef struct {
---
> typedef  {
74c74
< #  define BZ_SETERR
---
> #   
76c76
< typedef struct {
---
> typedef  {
74c74
< #  define BZ_SETERR
---
> #   BZ_SETERR
76c76
< typedef struct {
---
>   {
74c74
< #  define BZ_SETERR
---
> #   
76c76
< typedef struct {
---
>   {
74c74
< #  define BZ_SETERR
---
> #  define 
(98.4 %, 3325 bytes)
76c76
< typedef struct {
---
>   {
76c76
< typedef struct {
---
>  struct 
76c76
< typedef struct {
---
>   
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
>  struct {
>    lastErr;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
>   {
>    lastErr;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
>  struct 
>    lastErr;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
>   
>    lastErr;
76c76
< typedef struct {
---
> typedef  {
76c76
< typedef struct {
---
> typedef  
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef  {
>    lastErr;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef  
>    lastErr;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef  {
>   Int32 ;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef  
>   Int32 ;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef  {
>    ;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef  
>    ;
76c76
< typedef struct {
---
> typedef struct 
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef struct 
>    lastErr;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef struct 
>   Int32 ;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef struct 
>    ;
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef struct 
>   Int32 lastErr
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef struct 
>    lastErr
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef struct 
>   Int32 
76,77c76,77
< typedef struct {
<   Int32 lastErr;
---
> typedef struct 
>    
77c77
<   Int32 lastErr;
---
>    lastErr;
77c77
<   Int32 lastErr;
---
>    ;
77c77
<   Int32 lastErr;
---
>    lastErr
77c77
<   Int32 lastErr;
---
>    
(98.4 %, 3313 bytes)
77,78c77,78
<    ;
<   ;
---
>    
>   
77c77
<    ;
---
>    
79c79
< } bzFile;
---
>  bzFile;
77,79c77,79
<    ;
<   ;
< } bzFile;
---
>    
>   
>  bzFile;
77c77
<    ;
---
>    
79c79
< } bzFile;
---
> } ;
77,79c77,79
<    ;
<   ;
< } bzFile;
---
>    
>   
> } ;
77c77
<    ;
---
>    
79c79
< } bzFile;
---
>  ;
77,79c77,79
<    ;
<   ;
< } bzFile;
---
>    
>   
>  ;
(98.4 %, 3311 bytes)
79c79
< } bzFile;
---
>  ;
79c79
< } bzFile;
---
>  bzFile
79c79
< } bzFile;
---
>  
79c79
< } bzFile;
---
>  bzFile;
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
>  ;
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
>  bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
>  
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } ;
79c79
< } bzFile;
---
> } 
79c79
< } bzFile;
---
> } ;
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } 
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } ;
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } 
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } ;
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } 
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } bzFile
79c79
< } bzFile;
---
> } bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE (int *bzerror, FILE *f, int blockSize100k,
79c79
< } bzFile;
---
> } bzFile
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  (int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  (int *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
81c81
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *int *bzerror, FILE *f, int blockSize100k,
(98.4 %, 3282 bytes)
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>   , FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  ( *bzerror, FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  ( bzerror, FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  ( *, FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  ( , FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  ( *bzerror FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  ( bzerror FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  ( * FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  (  FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  (int bzerror, FILE *f, int blockSize100k,
81c81
<  (int *bzerror, FILE *f, int blockSize100k,
---
>  (int , FILE *f, int blockSize100k,
(98.4 %, 3270 bytes)
sh: 0: getcwd() failed: No such file or directory
81c81
<  (  FILE *f, int blockSize100k,
---
>  (    int blockSize100k,
81c81
<  (  FILE *f, int blockSize100k,
---
>  (  FILE f, int blockSize100k,
(98.4 %, 3263 bytes)
81,82c81,82
<  (    int blockSize100k,
<                               int verbosity, int workFactor);
---
>  (     
>                                verbosity, int workFactor);
81c81
<  (    int blockSize100k,
---
>  (    int ,
81c81
<  (    int blockSize100k,
---
>  (    int 
81,82c81,82
<  (    int blockSize100k,
<                               int verbosity, int workFactor);
---
>  (    int ,
>                                verbosity, int workFactor);
81,82c81,82
<  (    int blockSize100k,
<                               int verbosity, int workFactor);
---
>  (    int 
>                                verbosity, int workFactor);
(98.4 %, 3250 bytes)
81c81
<  (    int ,
---
>  (    int 
81,82c81,82
<  (    int ,
<                               int verbosity, int workFactor);
---
>  (    int 
>                                verbosity, int workFactor);
81,82c81,82
<  (    int ,
<                               int verbosity, int workFactor);
---
>  (    int 
>                               int , int workFactor);
81,82c81,82
<  (    int ,
<                               int verbosity, int workFactor);
---
>  (    int 
>                                , int workFactor);
(98.4 %, 3246 bytes)
82c82
<                                verbosity, int workFactor);
---
>                                 int workFactor);
82c82
<                                verbosity, int workFactor);
---
>                                ,  workFactor);
82c82
<                                verbosity, int workFactor);
---
>                                  workFactor);
82c82
<                                verbosity, int workFactor);
---
>                                , int );
82c82
<                                verbosity, int workFactor);
---
>                                 int );
(98.4 %, 3233 bytes)
82c82
<                                  workFactor);
---
>                                  
82c82
<                                  workFactor);
---
>                                  );
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  ;
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  )
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor;
82c82
<                                  workFactor);
---
>                                  workFactor
82c82
<                                  workFactor);
---
>                                  workFactor;
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor;
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void (int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void (int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor;
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  (int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  (int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor)
82c82
<                                  workFactor);
---
>                                  workFactor)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void (int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  (int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void int *bzerror, BZFILE , void *buf, int len);
82c82
<                                  workFactor);
---
>                                  workFactor)
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  int *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  (int *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  int *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite( *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  ( *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>  BZ_APIBZ2_bzWrite *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
>   *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void (int *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void int *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void ( *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void  *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void (int bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void int bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void ( bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void  bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWriteint *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWriteint bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWriteint *, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite *, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWriteint , BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite , BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite( *bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite( bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite( *, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite( , BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite( *bzerror BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite( bzerror BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite( * BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(  BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int bzerror, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int , BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int bzerror BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int  BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int bzerror,  , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int ,  , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int bzerror  , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int   , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int * BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,  , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *  , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE  void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int * BZFILE  void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,   void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *bzerror, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *   void *buf, int len);
(98.4 %, 3226 bytes)
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int * BZFILE , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *  , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int * BZFILE  void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *   void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int * BZFILE ,  *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *  ,  *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int * BZFILE   *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *    *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,  , void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,   void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,  ,  *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,    *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,  , void buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,   void buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,  ,  buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *,    buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE  void *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE   *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE  void buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE   buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE  void *, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE   *, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE  void , int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE   , int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,  *buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,  buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,  *, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,  , int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,  *buf int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,  buf int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,  * int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE ,   int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void , int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void  int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf,  len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void ,  len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void buf  len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void   len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *buf, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
(98.4 %, 3223 bytes)
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int );
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  );
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int len;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  len;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void * int ;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *  ;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len);
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  );
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  ;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len)
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  )
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  len
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *,  
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len);
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int len;
(98.4 %, 3220 bytes)
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int ;
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int 
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void int *bzerror, BZFILE , int abandon,
84c84
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int )
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  int *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  int *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose( *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  ( *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
>   *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void int *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void ( *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void  *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void (int bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void int bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void ( bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void  bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteCloseint *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteCloseint bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteCloseint *, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose *, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteCloseint , BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose , BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose( *bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose( bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose( *, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose( , BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose( *bzerror BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose( bzerror BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose( * BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(  BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int bzerror, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int , BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int bzerror BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int  BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int bzerror,  , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int ,  , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int bzerror  , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int   , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int * BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,  , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *  , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int * BZFILE  int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,   int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *   int abandon,
(98.4 %, 3213 bytes)
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int * BZFILE , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *  , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int * BZFILE  int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *   int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int * BZFILE ,  abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *  ,  abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int * BZFILE   abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *    abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,  , int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,   int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,  ,  abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,    abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,  , int ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,   int ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,  ,  ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *,    ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE   abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE   ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int abandon
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE   abandon
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE  int 
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE   
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon,
>                              int *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  ,
>                              int *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  abandon
>                              int *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE ,  
>                              int *nbytes_in, unsigned int *nbytes_out);
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
>                              int *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                              int *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int abandon,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
>                             unsigned  *nbytes_in, unsigned int *nbytes_out);
(98.4 %, 3206 bytes)
86c86
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                              int *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                             unsigned  *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                               *nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                             unsigned int nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                              int nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                             unsigned  nbytes_in, unsigned int *nbytes_out);
86,87c86,87
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
> void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int 
>                               nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                              int *nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                               *nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                              int nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                               nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                              int *, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                               *, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                              int , unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                               , unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  *nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned int *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  *, unsigned int *nbytes_out);
(98.4 %, 3203 bytes)
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  nbytes_in, unsigned int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  , unsigned int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  nbytes_in unsigned int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned   unsigned int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  nbytes_in,  int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  ,  int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  nbytes_in  int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned    int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  *, unsigned int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  * unsigned int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  *,  int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  *  int *nbytes_out);
87c87
<                             unsigned  *nbytes_in, unsigned int *nbytes_out);
---
>                             unsigned  *, unsigned  *nbytes_out);
(98.4 %, 3194 bytes)
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  * unsigned int *nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *  int *nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  * unsigned  *nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *   *nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  * unsigned int nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *  int nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  * unsigned  nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *   nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,  int *nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,   *nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,  int nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,   nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,  int *);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,   *);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,  int );
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *,   );
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *, unsigned  *nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *, unsigned  nbytes_out);
87c87
<                             unsigned  *, unsigned int *nbytes_out);
---
>                             unsigned  *, unsigned  *);
(98.4 %, 3191 bytes)
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  nbytes_out);
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  );
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  nbytes_out;
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  ;
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  nbytes_out)
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  )
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  nbytes_out
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *);
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *;
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *)
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *);
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *;
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *nbytes_out);
---
>                             unsigned  *, unsigned  *
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
(98.4 %, 3181 bytes)
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *;
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *;
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *;
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *;
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void int *bzerror, BZFILE , int abandon,
87c87
<                             unsigned  *, unsigned  *);
---
>                             unsigned  *, unsigned  *)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  (int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64( *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  ( *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>  BZ_APIBZ2_bzWriteClose64 *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
>   *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void (int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void ( *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void  *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void (int bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void int bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void ( bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void  bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64int *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64 *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64int bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64 bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64int *, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64 *, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64int , BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64 , BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64( *bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64( bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64( *, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64( , BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64( *bzerror BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64( bzerror BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64( * BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(  BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int bzerror, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int , BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int bzerror BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int  BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int bzerror,  , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int ,  , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int bzerror  , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int   , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int * BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,  , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *  , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int * BZFILE  int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,   int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *   int abandon,
(98.5 %, 3174 bytes)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int * BZFILE , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *  , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int * BZFILE  int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *   int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int * BZFILE ,  abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *  ,  abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int * BZFILE   abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *    abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,  , int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,   int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,  ,  abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,    abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,  , int ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,   int ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,  ,  ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *,    ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int abandon
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   abandon
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE  int 
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE   
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon,
>                                int *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  ,
>                                int *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  abandon
>                                int *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE ,  
>                                int *nbytes_in_lo32,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
>                                int *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                int *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int abandon,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
>                               unsigned  *nbytes_in_lo32,
(98.5 %, 3167 bytes)
89c89
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                int *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                               unsigned  *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                 *nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                               unsigned int nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                int nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                               unsigned  nbytes_in_lo32,
89,90c89,90
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned int *nbytes_in_lo32,
---
> void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int 
>                                 nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                int *nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                 *nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                int nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                 nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                int *,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                 *,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                int ,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                                 ,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                               unsigned  *nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                               unsigned  nbytes_in_lo32,
90c90
<                               unsigned int *nbytes_in_lo32,
---
>                               unsigned  *,
(98.5 %, 3164 bytes)
90c90
<                               unsigned  *nbytes_in_lo32,
---
>                               unsigned  nbytes_in_lo32,
90c90
<                               unsigned  *nbytes_in_lo32,
---
>                               unsigned  ,
90c90
<                               unsigned  *nbytes_in_lo32,
---
>                               unsigned  nbytes_in_lo32
90c90
<                               unsigned  *nbytes_in_lo32,
---
>                               unsigned  
90,91c90,91
<                               unsigned  *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  nbytes_in_lo32,
>                                int *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  ,
>                                int *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  nbytes_in_lo32
>                                int *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  
>                                int *nbytes_in_hi32,
90c90
<                               unsigned  *nbytes_in_lo32,
---
>                               unsigned  *,
90c90
<                               unsigned  *nbytes_in_lo32,
---
>                               unsigned  *
90,91c90,91
<                               unsigned  *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *,
>                                int *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                                int *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *nbytes_in_lo32,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *,
>                               unsigned  *nbytes_in_hi32,
(98.5 %, 3150 bytes)
90c90
<                               unsigned  *,
---
>                               unsigned  *
90,91c90,91
<                               unsigned  *,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                                int *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                               unsigned  *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                                 *nbytes_in_hi32,
90,91c90,91
<                               unsigned  *,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                               unsigned int nbytes_in_hi32,
90,91c90,91
<                               unsigned  *,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                                int nbytes_in_hi32,
90,91c90,91
<                               unsigned  *,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                               unsigned  nbytes_in_hi32,
90,91c90,91
<                               unsigned  *,
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *
>                                 nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                int *nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                 *nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                int nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                 nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                int *,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                 *,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                int ,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                                 ,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  nbytes_in_hi32,
91c91
<                               unsigned int *nbytes_in_hi32,
---
>                               unsigned  *,
(98.5 %, 3147 bytes)
91c91
<                               unsigned  *nbytes_in_hi32,
---
>                               unsigned  nbytes_in_hi32,
91c91
<                               unsigned  *nbytes_in_hi32,
---
>                               unsigned  ,
91c91
<                               unsigned  *nbytes_in_hi32,
---
>                               unsigned  nbytes_in_hi32
91c91
<                               unsigned  *nbytes_in_hi32,
---
>                               unsigned  
91,92c91,92
<                               unsigned  *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  nbytes_in_hi32,
>                                int *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  ,
>                                int *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  nbytes_in_hi32
>                                int *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  
>                                int *nbytes_out_lo32,
91c91
<                               unsigned  *nbytes_in_hi32,
---
>                               unsigned  *,
91c91
<                               unsigned  *nbytes_in_hi32,
---
>                               unsigned  *
91,92c91,92
<                               unsigned  *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *,
>                                int *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                                int *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *nbytes_in_hi32,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *,
>                               unsigned  *nbytes_out_lo32,
(98.5 %, 3133 bytes)
91c91
<                               unsigned  *,
---
>                               unsigned  *
91,92c91,92
<                               unsigned  *,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                                int *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                               unsigned  *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                                 *nbytes_out_lo32,
91,92c91,92
<                               unsigned  *,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                               unsigned int nbytes_out_lo32,
91,92c91,92
<                               unsigned  *,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                                int nbytes_out_lo32,
91,92c91,92
<                               unsigned  *,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                               unsigned  nbytes_out_lo32,
91,92c91,92
<                               unsigned  *,
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *
>                                 nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                int *nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                 *nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                int nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                 nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                int *,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                 *,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                int ,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                                 ,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  nbytes_out_lo32,
92c92
<                               unsigned int *nbytes_out_lo32,
---
>                               unsigned  *,
(98.5 %, 3130 bytes)
92c92
<                               unsigned  *nbytes_out_lo32,
---
>                               unsigned  nbytes_out_lo32,
92c92
<                               unsigned  *nbytes_out_lo32,
---
>                               unsigned  ,
92c92
<                               unsigned  *nbytes_out_lo32,
---
>                               unsigned  nbytes_out_lo32
92c92
<                               unsigned  *nbytes_out_lo32,
---
>                               unsigned  
92,93c92,93
<                               unsigned  *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  nbytes_out_lo32,
>                                int *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  ,
>                                int *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  nbytes_out_lo32
>                                int *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  
>                                int *nbytes_out_hi32);
92c92
<                               unsigned  *nbytes_out_lo32,
---
>                               unsigned  *,
92c92
<                               unsigned  *nbytes_out_lo32,
---
>                               unsigned  *
92,93c92,93
<                               unsigned  *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *,
>                                int *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                                int *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *nbytes_out_lo32,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *,
>                               unsigned  *nbytes_out_hi32);
(98.5 %, 3115 bytes)
92c92
<                               unsigned  *,
---
>                               unsigned  *
92,93c92,93
<                               unsigned  *,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                                int *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                               unsigned  *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                                 *nbytes_out_hi32);
92,93c92,93
<                               unsigned  *,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                               unsigned int nbytes_out_hi32);
92,93c92,93
<                               unsigned  *,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                                int nbytes_out_hi32);
92,93c92,93
<                               unsigned  *,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                               unsigned  nbytes_out_hi32);
92,93c92,93
<                               unsigned  *,
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *
>                                 nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                int *nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                 *nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                int nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                 nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                int *);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                 *);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                int );
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                                 );
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  nbytes_out_hi32);
93c93
<                               unsigned int *nbytes_out_hi32);
---
>                               unsigned  *);
(98.5 %, 3112 bytes)
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  nbytes_out_hi32);
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  );
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  nbytes_out_hi32;
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  ;
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  nbytes_out_hi32)
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  )
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  nbytes_out_hi32
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *);
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *;
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *)
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *);
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *;
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *nbytes_out_hi32;
93c93
<                               unsigned  *nbytes_out_hi32);
---
>                               unsigned  *nbytes_out_hi32
(98.5 %, 3097 bytes)
93c93
<                               unsigned  *);
---
>                               unsigned  *;
93c93
<                               unsigned  *);
---
>                               unsigned  *
93c93
<                               unsigned  *);
---
>                               unsigned  *;
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *;
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenint fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenint fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *;
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> int fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> int fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *)
93c93
<                               unsigned  *);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenint fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> int fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen( fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> ( fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen fsmall,
93c93
<                               unsigned  *);
---
>                               unsigned  *)
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
>  fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> int fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> ( fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
>  fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> (int ,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> int ,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> ( ,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
>  ,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenint fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenint ,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen ,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenint fsmall
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen fsmall
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpenint 
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen 
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen( fsmall,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen( ,
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen( fsmall
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen( 
95,96c95,96
< BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unusedb);
---
> BZ_APIBZ2_bzReadOpen( fsmall,
>                               *unusedb);
95,96c95,96
< BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unusedb);
---
> BZ_APIBZ2_bzReadOpen( ,
>                               *unusedb);
95,96c95,96
< BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unusedb);
---
> BZ_APIBZ2_bzReadOpen( fsmall
>                               *unusedb);
95,96c95,96
< BZ_APIBZ2_bzReadOpen(int fsmall,
<                              void *unusedb);
---
> BZ_APIBZ2_bzReadOpen( 
>                               *unusedb);
95c95
< BZ_APIBZ2_bzReadOpen(int fsmall,
---
> BZ_APIBZ2_bzReadOpen(int ,
(98.5 %, 3087 bytes)
96c96
<                              void *unusedb);
---
>                               );
96c96
<                              void *unusedb);
---
>                               *unusedb;
96c96
<                              void *unusedb);
---
>                               unusedb;
96c96
<                              void *unusedb);
---
>                               *;
96c96
<                              void *unusedb);
---
>                               ;
96c96
<                              void *unusedb);
---
>                              void unusedb);
(98.5 %, 3075 bytes)
96c96
<                               );
---
>                               
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               ;
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int (int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int (int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               ;
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               )
96c96
<                               );
---
>                               )
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               )
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int (int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               )
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               )
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int BZ_APIBZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               )
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               )
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int int *bzerror, BZFILE *b, void *buf, int len) {
96c96
<                               );
---
>                               )
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  int *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ( *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>   *bzerror, BZFILE *b, void *buf, int len) {
98c98
< int BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
> int (int *bzerror, BZFILE *b, void *buf, int len) {
(98.5 %, 3072 bytes)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int *bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  int *bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ( *bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>   *bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  (int bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  int bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  ( bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>   bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzReadint *bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead *bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzReadint bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzReadint *, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead *, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzReadint , BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead , BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( *bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( *, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( , BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( *bzerror BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( bzerror BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( * BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(  BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int bzerror, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int , BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int bzerror BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int  BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int bzerror,  *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int ,  *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int bzerror  *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int   *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *, BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int * BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *,  *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *  *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *, BZFILE b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int * BZFILE b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *,  b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *  b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror BZFILE *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror  *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror BZFILE b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror  b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror BZFILE *, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror  *, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror BZFILE , void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror  , void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  *b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  *, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  , void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  *b void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  b void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  * void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,   void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE  void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE ,  *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b  *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE   *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE *, void *buf, int len) {
(98.5 %, 3071 bytes)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE  void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE ,  *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE   *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE , void buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE  void buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE ,  buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE   buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b void *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b  *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b void buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b  buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b void *, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b  *, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b void , int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b  , int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  *buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  *, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  , int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  *buf int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  buf int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  * int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,   int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void buf, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void , int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void buf int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void  int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void buf,  len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void ,  len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void buf  len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void   len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *, int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void * int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *,  len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *  len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *, int ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void * int ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *,  ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *  ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf int len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf  len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf int ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf  ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf int len {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf  len {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf int  {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf   {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,  len) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,  ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,  len {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,   {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,  len) 
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,  ) 
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,  len 
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf,   
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int ) {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int  {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int ) 
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int  
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int ) {
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int  {
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int ) 
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int  
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len {
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len 
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len {
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len 
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len {
100c100
<   bzFile *bzf = (0)
---
>   bzFile bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len 
100c100
<   bzFile *bzf = (0)
---
>   bzFile bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len {
100c100
<   bzFile *bzf = (0)
---
>    bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len 
100c100
<   bzFile *bzf = (0)
---
>    bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
100c100
<   bzFile *bzf = (0)
---
>   bzFile bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
100c100
<   bzFile *bzf = (0)
---
>    bzf = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
100c100
<   bzFile *bzf = (0)
---
>   bzFile * = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
100c100
<   bzFile *bzf = (0)
---
>    * = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
100c100
<   bzFile *bzf = (0)
---
>   bzFile  = (0)
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
100c100
<   bzFile *bzf = (0)
---
>     = (0)
100c100
<   bzFile *bzf = (0)
---
>    *bzf = (0)
100c100
<   bzFile *bzf = (0)
---
>    bzf = (0)
100c100
<   bzFile *bzf = (0)
---
>    * = (0)
100c100
<   bzFile *bzf = (0)
---
>     = (0)
100c100
<   bzFile *bzf = (0)
---
>    *bzf  (0)
100c100
<   bzFile *bzf = (0)
---
>    bzf  (0)
100c100
<   bzFile *bzf = (0)
---
>    *  (0)
100c100
<   bzFile *bzf = (0)
---
>      (0)
(98.5 %, 3063 bytes)
100c100
<    bzf  (0)
---
>      0
100c100
<    bzf  (0)
---
>      (
100c100
<    bzf  (0)
---
>      
100c100
<    bzf  (0)
---
>    bzf  0)
(98.5 %, 3058 bytes)
100,101c100,101
<      0
<     ;
---
>      
>     
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
100c100
<      0
---
>      
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
100,101c100,101
<      0
<     ;
---
>      
>     
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
101c101
<     ;
---
>     
101c101
<     ;
---
>     
103c103
<   }
---
>   
101c101
<     ;
---
>     
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
101c101
<     ;
---
>     
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
101c101
<     ;
---
>     
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void (int *bzerror, BZFILE , void **unused,
101c101
<     ;
---
>     
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void (int *bzerror, BZFILE , void **unused,
101c101
<     ;
---
>     
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  (int *bzerror, BZFILE , void **unused,
101c101
<     ;
---
>     
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  (int *bzerror, BZFILE , void **unused,
103c103
<   }
---
>   
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void (int *bzerror, BZFILE , void **unused,
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  (int *bzerror, BZFILE , void **unused,
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void int *bzerror, BZFILE , void **unused,
103c103
<   }
---
>   
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  int *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  (int *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  int *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused( *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  ( *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>  BZ_APIBZ2_bzReadGetUnused *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
>   *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void (int *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void int *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void ( *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void  *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void (int bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void int bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void ( bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void  bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedint *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedint bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedint *, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused *, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnusedint , BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused , BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused( *bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused( bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused( *, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused( , BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused( *bzerror BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused( bzerror BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused( * BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(  BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int bzerror, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int , BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int bzerror BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int  BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int bzerror,  , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int ,  , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int bzerror  , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int   , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int * BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,  , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *  , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int * BZFILE  void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,   void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *bzerror, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *   void **unused,
(98.5 %, 3051 bytes)
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int * BZFILE , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *  , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int * BZFILE  void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *   void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int * BZFILE ,  **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *  ,  **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int * BZFILE   **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *    **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,  , void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,   void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,  ,  **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,    **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,  , void *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,   void *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,  ,  *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *,    *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE  void unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE   unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  **unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  **,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  *,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE ,  ,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void ,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void unused
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void 
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused,
>                                 *nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *,
>                                 *nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *unused
>                                 *nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void *
>                                 *nUnused);
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
>                                 *nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                 *nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
>                                int nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                int nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
>                                 nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **unused,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                 nUnused);
(98.5 %, 3045 bytes)
105c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                 *nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                int nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                 nUnused);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                int *);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                 *);
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                int );
105,106c105,106
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *nUnused);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **
>                                 );
106c106
<                                int *nUnused);
---
>                                 *nUnused);
106c106
<                                int *nUnused);
---
>                                 nUnused);
106c106
<                                int *nUnused);
---
>                                 *);
106c106
<                                int *nUnused);
---
>                                 );
106c106
<                                int *nUnused);
---
>                                 *nUnused;
106c106
<                                int *nUnused);
---
>                                 nUnused;
106c106
<                                int *nUnused);
---
>                                 *;
106c106
<                                int *nUnused);
---
>                                 ;
106c106
<                                int *nUnused);
---
>                                int nUnused);
106c106
<                                int *nUnused);
---
>                                int );
106c106
<                                int *nUnused);
---
>                                int nUnused;
106c106
<                                int *nUnused);
---
>                                int ;
106c106
<                                int *nUnused);
---
>                                int nUnused)
106c106
<                                int *nUnused);
---
>                                int )
106c106
<                                int *nUnused);
---
>                                int nUnused
106c106
<                                int *nUnused);
---
>                                int 
106c106
<                                int *nUnused);
---
>                                int *);
106c106
<                                int *nUnused);
---
>                                int *;
106c106
<                                int *nUnused);
---
>                                int *)
106c106
<                                int *nUnused);
---
>                                int *
106c106
<                                int *nUnused);
---
>                                int *);
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
(98.5 %, 3038 bytes)
106c106
<                                int *);
---
>                                int *;
106c106
<                                int *);
---
>                                int *
106c106
<                                int *);
---
>                                int *;
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *;
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int (char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int (char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *;
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *)
106c106
<                                int *);
---
>                                int *)
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *)
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int (char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *)
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *)
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *)
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *)
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
> int char *dest, unsigned int *destLen,
106c106
<                                int *);
---
>                                int *)
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  ( *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress *dest, unsigned int *destLen,
108c108
< int BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>   *dest, unsigned int *destLen,
(98.5 %, 3035 bytes)
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  ( *dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>   *dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  (char dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  char dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  ( dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>   dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompresschar *dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress *dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompresschar dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompresschar *, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress *, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompresschar , unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress , unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( *dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( *, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( , unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( *dest unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( dest unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress( * unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(  unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char dest, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char , unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char dest unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char  unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char dest,  int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char ,  int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char dest  int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char   int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,  int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *  int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
(98.5 %, 3031 bytes)
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *  int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned  *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *   *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned int destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *  int destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char * unsigned  destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *   destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,  int *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,   *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,  int destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,   destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,  int *,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,   *,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,  int ,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *,   ,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
(98.5 %, 3028 bytes)
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  ,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen,
>                                     *source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  ,
>                                     *source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  destLen
>                                     *source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  
>                                     *source, unsigned ,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
>                                     *source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                     *source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
>                                    char source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                    char source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
>                                     source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                     source, unsigned ,
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *destLen
(98.5 %, 3021 bytes)
108c108
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                     *source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                    char source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                     source, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                    char *, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                     *, unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                    char , unsigned ,
108,109c108,109
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *
>                                     , unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                     *source, unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                     source, unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                     *, unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                     , unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                     *source unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                     source unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                     * unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                      unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                    char source, unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                    char , unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                    char source unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                    char  unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                    char source,  ,
109c109
<                                    char *source, unsigned ,
---
>                                    char ,  ,
109c109
<                                    char *source, unsigned ,
---
>                                    char source  ,
109c109
<                                    char *source, unsigned ,
---
>                                    char   ,
109c109
<                                    char *source, unsigned ,
---
>                                    char *, unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                    char * unsigned ,
109c109
<                                    char *source, unsigned ,
---
>                                    char *,  ,
109c109
<                                    char *source, unsigned ,
---
>                                    char *  ,
109c109
<                                    char *source, unsigned ,
---
>                                    char *, unsigned 
109c109
<                                    char *source, unsigned ,
---
>                                    char * unsigned 
109c109
<                                    char *source, unsigned ,
---
>                                    char *,  
109c109
<                                    char *source, unsigned ,
---
>                                    char *  
(98.5 %, 3015 bytes)
109c109
<                                    char *, unsigned ,
---
>                                    char * unsigned ,
109c109
<                                    char *, unsigned ,
---
>                                    char *  ,
109c109
<                                    char *, unsigned ,
---
>                                    char * unsigned 
109c109
<                                    char *, unsigned ,
---
>                                    char *  
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char * unsigned ,
>                                     blockSize100k, int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *  ,
>                                     blockSize100k, int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char * unsigned 
>                                     blockSize100k, int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *  
>                                     blockSize100k, int verbosity,
109c109
<                                    char *, unsigned ,
---
>                                    char *,  ,
109c109
<                                    char *, unsigned ,
---
>                                    char *,  
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *,  ,
>                                     blockSize100k, int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *,  
>                                     blockSize100k, int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *,  ,
>                                    int , int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *,  
>                                    int , int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *,  ,
>                                     , int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *,  
>                                     , int verbosity,
109c109
<                                    char *, unsigned ,
---
>                                    char *, unsigned 
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *, unsigned 
>                                     blockSize100k, int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *, unsigned 
>                                    int , int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *, unsigned 
>                                     , int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *, unsigned 
>                                    int blockSize100k int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *, unsigned 
>                                     blockSize100k int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *, unsigned 
>                                    int  int verbosity,
109,110c109,110
<                                    char *, unsigned ,
<                                    int blockSize100k, int verbosity,
---
>                                    char *, unsigned 
>                                      int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                     blockSize100k, int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                     , int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                     blockSize100k int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                      int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                     blockSize100k,  verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                     ,  verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                     blockSize100k  verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                       verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int , int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int  int verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int ,  verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int   verbosity,
110c110
<                                    int blockSize100k, int verbosity,
---
>                                    int , int ,
(98.5 %, 3002 bytes)
110c110
<                                    int , int verbosity,
---
>                                    int  int verbosity,
110c110
<                                    int , int verbosity,
---
>                                    int   verbosity,
110c110
<                                    int , int verbosity,
---
>                                    int  int ,
110c110
<                                    int , int verbosity,
---
>                                    int   ,
110c110
<                                    int , int verbosity,
---
>                                    int  int verbosity
110c110
<                                    int , int verbosity,
---
>                                    int   verbosity
110c110
<                                    int , int verbosity,
---
>                                    int  int 
110c110
<                                    int , int verbosity,
---
>                                    int   
110c110
<                                    int , int verbosity,
---
>                                    int ,  verbosity,
110c110
<                                    int , int verbosity,
---
>                                    int ,  ,
110c110
<                                    int , int verbosity,
---
>                                    int ,  verbosity
110c110
<                                    int , int verbosity,
---
>                                    int ,  
110,111c110,111
<                                    int , int verbosity,
<                                    int workFactor);
---
>                                    int ,  verbosity,
>                                     workFactor);
110,111c110,111
<                                    int , int verbosity,
<                                    int workFactor);
---
>                                    int ,  ,
>                                     workFactor);
110,111c110,111
<                                    int , int verbosity,
<                                    int workFactor);
---
>                                    int ,  verbosity
>                                     workFactor);
110,111c110,111
<                                    int , int verbosity,
<                                    int workFactor);
---
>                                    int ,  
>                                     workFactor);
110c110
<                                    int , int verbosity,
---
>                                    int , int ,
110c110
<                                    int , int verbosity,
---
>                                    int , int 
110,111c110,111
<                                    int , int verbosity,
<                                    int workFactor);
---
>                                    int , int ,
>                                     workFactor);
110,111c110,111
<                                    int , int verbosity,
<                                    int workFactor);
---
>                                    int , int 
>                                     workFactor);
110,111c110,111
<                                    int , int verbosity,
<                                    int workFactor);
---
>                                    int , int ,
>                                    int );
(98.5 %, 2993 bytes)
110c110
<                                    int , int ,
---
>                                    int , int 
110,111c110,111
<                                    int , int ,
<                                    int workFactor);
---
>                                    int , int 
>                                     workFactor);
110,111c110,111
<                                    int , int ,
<                                    int workFactor);
---
>                                    int , int 
>                                    int );
110,111c110,111
<                                    int , int ,
<                                    int workFactor);
---
>                                    int , int 
>                                     );
110,111c110,111
<                                    int , int ,
<                                    int workFactor);
---
>                                    int , int 
>                                    int workFactor;
110,111c110,111
<                                    int , int ,
<                                    int workFactor);
---
>                                    int , int 
>                                     workFactor;
110,111c110,111
<                                    int , int ,
<                                    int workFactor);
---
>                                    int , int 
>                                    int ;
110,111c110,111
<                                    int , int ,
<                                    int workFactor);
---
>                                    int , int 
>                                     ;
111c111
<                                    int workFactor);
---
>                                     workFactor);
111c111
<                                    int workFactor);
---
>                                     );
111c111
<                                    int workFactor);
---
>                                     workFactor;
111c111
<                                    int workFactor);
---
>                                     ;
111c111
<                                    int workFactor);
---
>                                     workFactor)
111c111
<                                    int workFactor);
---
>                                     )
111c111
<                                    int workFactor);
---
>                                     workFactor
111c111
<                                    int workFactor);
---
>                                     
111c111
<                                    int workFactor);
---
>                                    int );
111c111
<                                    int workFactor);
---
>                                    int ;
111c111
<                                    int workFactor);
---
>                                    int )
111c111
<                                    int workFactor);
---
>                                    int 
111c111
<                                    int workFactor);
---
>                                    int );
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
(98.5 %, 2983 bytes)
111c111
<                                    int );
---
>                                    int ;
111c111
<                                    int );
---
>                                    int 
111c111
<                                    int );
---
>                                    int ;
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int 
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int ;
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int (char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int 
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int (char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int ;
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int 
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int )
111c111
<                                    int );
---
>                                    int )
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int )
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int (char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int )
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int )
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int BZ_APIBZ2_bzBuffToBuffDecompresschar *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int )
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompresschar *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int )
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
> int char *dest, unsigned int *destLen,
111c111
<                                    int );
---
>                                    int )
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompresschar *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  ( *dest, unsigned int *destLen,
113c113
< int BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress *dest, unsigned int *destLen,
(98.5 %, 2980 bytes)
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  (char *dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  char *dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  ( *dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>   *dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  (char dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  char dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  ( dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>   dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompresschar *dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress *dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompresschar dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompresschar *, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress *, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompresschar , unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress , unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( *dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( *, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( , unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( *dest unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( dest unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress( * unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(  unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char dest, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char , unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char dest unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char  unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char dest,  int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char ,  int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char dest  int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char   int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char * unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,  int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *  int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
(98.5 %, 2976 bytes)
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char * unsigned int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *  int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char * unsigned  *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *   *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char * unsigned int destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *  int destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char * unsigned  destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *   destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,  int *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,   *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,  int destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,   destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,  int *,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,   *,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,  int ,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *,   ,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
(98.5 %, 2973 bytes)
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  destLen,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  ,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  destLen
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  destLen,
>                                       *source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  ,
>                                       *source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  destLen
>                                       *source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  
>                                       *source, unsigned ,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
>                                       *source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                       *source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
>                                      char source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                      char source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
>                                       source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *destLen,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                       source, unsigned ,
(98.6 %, 2966 bytes)
113c113
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                       *source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                      char source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                       source, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                      char *, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                       *, unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                      char , unsigned ,
113,114c113,114
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *source, unsigned ,
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *
>                                       , unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                       *source, unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                       source, unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                       *, unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                       , unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                       *source unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                       source unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                       * unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                        unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                      char source, unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                      char , unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                      char source unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                      char  unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                      char source,  ,
114c114
<                                      char *source, unsigned ,
---
>                                      char ,  ,
114c114
<                                      char *source, unsigned ,
---
>                                      char source  ,
114c114
<                                      char *source, unsigned ,
---
>                                      char   ,
114c114
<                                      char *source, unsigned ,
---
>                                      char *, unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                      char * unsigned ,
114c114
<                                      char *source, unsigned ,
---
>                                      char *,  ,
114c114
<                                      char *source, unsigned ,
---
>                                      char *  ,
114c114
<                                      char *source, unsigned ,
---
>                                      char *, unsigned 
114c114
<                                      char *source, unsigned ,
---
>                                      char * unsigned 
114c114
<                                      char *source, unsigned ,
---
>                                      char *,  
114c114
<                                      char *source, unsigned ,
---
>                                      char *  
(98.6 %, 2960 bytes)
114c114
<                                      char *, unsigned ,
---
>                                      char * unsigned ,
114c114
<                                      char *, unsigned ,
---
>                                      char *  ,
114c114
<                                      char *, unsigned ,
---
>                                      char * unsigned 
114c114
<                                      char *, unsigned ,
---
>                                      char *  
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char * unsigned ,
>                                       small, int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *  ,
>                                       small, int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char * unsigned 
>                                       small, int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *  
>                                       small, int verbosity);
114c114
<                                      char *, unsigned ,
---
>                                      char *,  ,
114c114
<                                      char *, unsigned ,
---
>                                      char *,  
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *,  ,
>                                       small, int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *,  
>                                       small, int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *,  ,
>                                      int , int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *,  
>                                      int , int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *,  ,
>                                       , int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *,  
>                                       , int verbosity);
114c114
<                                      char *, unsigned ,
---
>                                      char *, unsigned 
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *, unsigned 
>                                       small, int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *, unsigned 
>                                      int , int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *, unsigned 
>                                       , int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *, unsigned 
>                                      int small int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *, unsigned 
>                                       small int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *, unsigned 
>                                      int  int verbosity);
114,115c114,115
<                                      char *, unsigned ,
<                                      int small, int verbosity);
---
>                                      char *, unsigned 
>                                        int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                       small, int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                       , int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                       small int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                        int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                       small,  verbosity);
115c115
<                                      int small, int verbosity);
---
>                                       ,  verbosity);
115c115
<                                      int small, int verbosity);
---
>                                       small  verbosity);
115c115
<                                      int small, int verbosity);
---
>                                         verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int , int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int  int verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int ,  verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int   verbosity);
115c115
<                                      int small, int verbosity);
---
>                                      int , int );
(98.6 %, 2955 bytes)
115c115
<                                      int , int verbosity);
---
>                                      int  int verbosity);
115c115
<                                      int , int verbosity);
---
>                                      int   verbosity);
115c115
<                                      int , int verbosity);
---
>                                      int  int );
115c115
<                                      int , int verbosity);
---
>                                      int   );
115c115
<                                      int , int verbosity);
---
>                                      int  int verbosity;
115c115
<                                      int , int verbosity);
---
>                                      int   verbosity;
115c115
<                                      int , int verbosity);
---
>                                      int  int ;
115c115
<                                      int , int verbosity);
---
>                                      int   ;
115c115
<                                      int , int verbosity);
---
>                                      int ,  verbosity);
115c115
<                                      int , int verbosity);
---
>                                      int ,  );
115c115
<                                      int , int verbosity);
---
>                                      int ,  verbosity;
115c115
<                                      int , int verbosity);
---
>                                      int ,  ;
115c115
<                                      int , int verbosity);
---
>                                      int ,  verbosity)
115c115
<                                      int , int verbosity);
---
>                                      int ,  )
115c115
<                                      int , int verbosity);
---
>                                      int ,  verbosity
115c115
<                                      int , int verbosity);
---
>                                      int ,  
115c115
<                                      int , int verbosity);
---
>                                      int , int );
115c115
<                                      int , int verbosity);
---
>                                      int , int ;
115c115
<                                      int , int verbosity);
---
>                                      int , int )
115c115
<                                      int , int verbosity);
---
>                                      int , int 
115c115
<                                      int , int verbosity);
---
>                                      int , int );
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int verbosity);
---
>                                      int , int ;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int verbosity);
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int verbosity);
---
>                                      int , int 
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int verbosity);
---
>                                      int , int verbosity;
(98.6 %, 2946 bytes)
115c115
<                                      int , int );
---
>                                      int , int ;
115c115
<                                      int , int );
---
>                                      int , int 
115c115
<                                      int , int );
---
>                                      int , int ;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int 
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int ;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int 
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int ;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int 
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int )
115c115
<                                      int , int );
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *(const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE (const char *pathfd, const char *mode);
115c115
<                                      int , int );
---
>                                      int , int )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  (const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *(const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  (const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *BZ_APIBZ2_bzopenconst char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  BZ_APIBZ2_bzopenconst char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  *const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
>  const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE (const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE BZ_APIBZ2_bzopenconst char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE BZ_APIBZ2_bzopen( char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE ( char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE BZ_APIBZ2_bzopen char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE  char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *(const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *const char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *( char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE * char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *(const  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *const  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *(  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopenconst char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopenconst  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopenconst char pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen char pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopenconst  pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen  pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen( char *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen( char pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(  pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen( char *, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(  *, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen( char , const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(  , const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const  *pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const  pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const  *, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const  , const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const  *pathfd const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const  pathfd const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const  * const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const   const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char pathfd, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char , const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char pathfd const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char  const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char pathfd,  char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char ,  char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char pathfd  char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char   char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char * const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,  char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *  char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char * const  *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,   *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *pathfd, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *   *mode);
(98.6 %, 2940 bytes)
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char * const char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *  char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char * const  *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *   *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char * const char mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *  char mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char * const  mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *   mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,  char *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,   *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,  char mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,   mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,  char *);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,   *);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,  char );
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *,   );
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  *mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  *);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  );
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  *mode;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  mode;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  *;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const  ;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char );
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char ;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode)
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char )
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char mode
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char 
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *mode);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
(98.6 %, 2936 bytes)
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzreadBZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzreadBZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *;
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzreadBZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> ( *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread *b, void *buf, int len) {
117c117
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> BZFILE *BZ_APIBZ2_bzopen(const char *, const char *)
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> ( *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> (BZFILE b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZFILE b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> ( b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
>  b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzreadBZFILE *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzreadBZFILE b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzreadBZFILE *, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread *, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzreadBZFILE , void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread , void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( *b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( *, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( , void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( *b void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( b void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( * void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(  void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE  void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE ,  *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b  *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE *b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE   *buf, int len) {
(98.6 %, 2935 bytes)
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE , void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE  void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE ,  *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE   *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE , void buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE  void buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE ,  buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE   buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b void *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b  *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b void buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b  buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b void *, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b  *, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b void , int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b  , int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  *buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  *, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  , int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  *buf int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  buf int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  * int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,   int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void buf, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void , int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void buf int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void  int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void buf,  len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void ,  len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void buf  len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void   len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *, int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void * int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *,  len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *  len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *, int ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void * int ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *,  ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *  ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf int len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf  len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf int ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf  ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf int len {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf  len {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf int  {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf   {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,  len) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,  ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,  len {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,   {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,  len) 
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,  ) 
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,  len 
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf,   
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int ) {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int  {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int ) 
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int  
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int ) {
>    bzerr;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int  {
>    bzerr;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int ) 
>    bzerr;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int  
>    bzerr;
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len {
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len 
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len {
>    bzerr;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len 
>    bzerr;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len {
>   int ;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len 
>   int ;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len {
>    ;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len 
>    ;
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
>    bzerr;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
>   int ;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
>    ;
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
>   int bzerr
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
>    bzerr
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
>   int 
119,120c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
>    
120c120
<   int bzerr;
---
>    bzerr;
120c120
<   int bzerr;
---
>    ;
120c120
<   int bzerr;
---
>    bzerr
120c120
<   int bzerr;
---
>    
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>    bzerr;
>    (((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>    ;
>    (((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>    bzerr
>    (((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>    
>    (((bzFile *)b))
120c120
<   int bzerr;
---
>   int ;
120c120
<   int bzerr;
---
>   int 
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int ;
>    (((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int 
>    (((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int ;
>   if ((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int 
>   if ((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int ;
>    ((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int 
>    ((bzFile *)b))
120c120
<   int bzerr;
---
>   int bzerr
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int bzerr
>    (((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int bzerr
>   if ((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int bzerr
>    ((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int bzerr
>   if ((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int bzerr
>    ((bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int bzerr
>   if (bzFile *)b))
120,121c120,121
<   int bzerr;
<   if (((bzFile *)b))
---
>   int bzerr
>    (bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    (((bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    ((bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    ((bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    (bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    ((bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    (bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    (bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>    bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if ((bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if (bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if (bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if (( *)b))
121c121
<   if (((bzFile *)b))
---
>   if ( *)b))
121c121
<   if (((bzFile *)b))
---
>   if ( *)b))
121c121
<   if (((bzFile *)b))
---
>   if  *)b))
121c121
<   if (((bzFile *)b))
---
>   if ((bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if (bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if (( *)b))
121c121
<   if (((bzFile *)b))
---
>   if ( *)b))
121c121
<   if (((bzFile *)b))
---
>   if ((bzFile )b))
121c121
<   if (((bzFile *)b))
---
>   if (bzFile )b))
121c121
<   if (((bzFile *)b))
---
>   if (( )b))
121c121
<   if (((bzFile *)b))
---
>   if ( )b))
121c121
<   if (((bzFile *)b))
---
>   if ((bzFile *)b))
121c121
<   if (((bzFile *)b))
---
>   if (( *)b))
121c121
<   if (((bzFile *)b))
---
>   if ((bzFile )b))
121c121
<   if (((bzFile *)b))
---
>   if (( )b))
121c121
<   if (((bzFile *)b))
---
>   if ((bzFile *b))
121c121
<   if (((bzFile *)b))
---
>   if (( *b))
121c121
<   if (((bzFile *)b))
---
>   if ((bzFile b))
121c121
<   if (((bzFile *)b))
---
>   if (( b))
(98.6 %, 2927 bytes)
121c121
<   if (( *b))
---
>   if (( )
121c121
<   if (( *b))
---
>   if (( b
121c121
<   if (( *b))
---
>   if (( 
121c121
<   if (( *b))
---
>   if (( *))
121c121
<   if (( *b))
---
>   if (( *)
121c121
<   if (( *b))
---
>   if (( *)
121c121
<   if (( *b))
---
>   if (( *
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *))
>      (bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *)
>      (bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *)
>      (bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *
>      (bzerr == BZ_STREAM_END)
121c121
<   if (( *b))
---
>   if (( *b)
121c121
<   if (( *b))
---
>   if (( *b
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>      (bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b
>      (bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>     if bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b
>     if bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>      bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b
>      bzerr == BZ_STREAM_END)
121c121
<   if (( *b))
---
>   if (( *b)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>      (bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>     if bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>      bzerr == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>     if ( == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>      ( == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>     if  == BZ_STREAM_END)
121,122c121,122
<   if (( *b))
<     if (bzerr == BZ_STREAM_END)
---
>   if (( *b)
>       == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_STREAM_END)
---
>      (bzerr == BZ_STREAM_END)
122c122
<     if (bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END)
(98.6 %, 2925 bytes)
122c122
<      (bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END)
122c122
<      (bzerr == BZ_STREAM_END)
---
>       == BZ_STREAM_END)
122c122
<      (bzerr == BZ_STREAM_END)
---
>      bzerr  BZ_STREAM_END)
122c122
<      (bzerr == BZ_STREAM_END)
---
>        BZ_STREAM_END)
122c122
<      (bzerr == BZ_STREAM_END)
---
>      bzerr == )
122c122
<      (bzerr == BZ_STREAM_END)
---
>       == )
122c122
<      (bzerr == BZ_STREAM_END)
---
>      bzerr  )
122c122
<      (bzerr == BZ_STREAM_END)
---
>        )
122c122
<      (bzerr == BZ_STREAM_END)
---
>      ( == BZ_STREAM_END)
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (  BZ_STREAM_END)
122c122
<      (bzerr == BZ_STREAM_END)
---
>      ( == )
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (  )
122c122
<      (bzerr == BZ_STREAM_END)
---
>      ( == BZ_STREAM_END
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (  BZ_STREAM_END
122c122
<      (bzerr == BZ_STREAM_END)
---
>      ( == 
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (  
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr  BZ_STREAM_END)
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr  )
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr  BZ_STREAM_END
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr  
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr  BZ_STREAM_END)
>     
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr  )
>     
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr  BZ_STREAM_END
>     
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr  
>     
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == )
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == 
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr == )
>     
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr == 
>     
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == )
124c124
< }
---
> 
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == 
124c124
< }
---
> 
122,124c122,124
<      (bzerr == BZ_STREAM_END)
<     ;
< }
---
>      (bzerr == )
>     
> 
122,124c122,124
<      (bzerr == BZ_STREAM_END)
<     ;
< }
---
>      (bzerr == 
>     
> 
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == BZ_STREAM_END
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr == BZ_STREAM_END
>     
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == BZ_STREAM_END
124c124
< }
---
> 
122,124c122,124
<      (bzerr == BZ_STREAM_END)
<     ;
< }
---
>      (bzerr == BZ_STREAM_END
>     
> 
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == BZ_STREAM_END
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
122,123c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      (bzerr == BZ_STREAM_END
>     
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
122c122
<      (bzerr == BZ_STREAM_END)
---
>      (bzerr == BZ_STREAM_END
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
122,124c122,123
<      (bzerr == BZ_STREAM_END)
<     ;
< }
---
>      (bzerr == BZ_STREAM_END
>     
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
123c123
<     ;
---
>     
123,124c123,124
<     ;
< }
---
>     
> 
123c123
<     ;
---
>     
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
123,124c123
<     ;
< }
---
>     
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
123c123
<     ;
---
>     
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int (BZFILE , void *buf, int lenbb);
123,124c123
<     ;
< }
---
>     
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
> int (BZFILE , void *buf, int lenbb);
123c123
<     ;
---
>     
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  (BZFILE , void *buf, int lenbb);
123,124c123
<     ;
< }
---
>     
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  (BZFILE , void *buf, int lenbb);
124c124
< }
---
> 
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
> int (BZFILE , void *buf, int lenbb);
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  (BZFILE , void *buf, int lenbb);
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
> int BZ_APIBZ2_bzwriteBZFILE , void *buf, int lenbb);
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  BZ_APIBZ2_bzwriteBZFILE , void *buf, int lenbb);
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
> int BZFILE , void *buf, int lenbb);
124d123
< }
126c125,126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> 
>  BZFILE , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  (BZFILE , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwriteBZFILE , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZFILE , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite( , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  ( , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>   , void *buf, int lenbb);
126c126
< int BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
> int (BZFILE , void *buf, int lenbb);
(98.6 %, 2922 bytes)
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  (BZFILE , void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZFILE , void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  ( , void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>   , void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  (BZFILE  void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZFILE  void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  (  void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>    void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwriteBZFILE , void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite , void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwriteBZFILE  void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite  void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwriteBZFILE ,  *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite ,  *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwriteBZFILE   *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite   *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite( , void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(  void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite( ,  *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(   *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite( , void buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(  void buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite( ,  buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(   buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE  void *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE   *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE  void buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE   buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE  void *, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE   *, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE  void , int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE   , int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,  *buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,  buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,  *, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,  , int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,  *buf int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,  buf int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,  * int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE ,   int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void buf, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void , int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void buf int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void  int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void buf,  lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void ,  lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void buf  lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void   lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void * int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *  lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *buf, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
(98.6 %, 2919 bytes)
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void * int lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *  lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void * int );
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *  );
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void * int lenbb;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *  lenbb;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void * int ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *  ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  lenbb);
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  );
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  lenbb;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  lenbb)
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  lenbb
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *,  
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int 
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int lenbb);
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
(98.6 %, 2914 bytes)
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int 
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int 
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int 
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int ;
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int 
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
126c126
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  BZ_APIBZ2_bzwrite(BZFILE , void *, int )
Termination check: size was 204936; now 2914
===< pass_include_includes :: 0 >===
===< pass_balanced :: curly-only >===
1c1
< 
---
>  
76c76
< typedef struct {
---
> typedef struct 
79c79
< } bzFile
---
>  bzFile
127a128
>  
\ No newline at end of file
1c1
< 
---
>  
98c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) 
103c103
<   }
---
>   
127a128
>  
\ No newline at end of file
1c1
< 
---
>  
119c119
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) 
124c124
< }
---
> 
127a128
>  
\ No newline at end of file
===< pass_balanced :: angles-only >===
1c1
< 
---
>  
13c13
< #include <stdio.h>
---
> #include stdio.h
127a128
>  
\ No newline at end of file
===< pass_clang :: param-to-local >===
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(, BZFILE , void *, int );
98c98,99
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead( BZFILE b, void *buf, int len) {
>      int * bzerror = 0;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *,  , void *, int );
98c98,99
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror,  void *buf, int len) {
>      BZFILE * b;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , , int );
98c98,99
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b,  int len) {
>      void * buf = 0;
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *, int );
---
> BZ_APIBZ2_bzRead(int *, BZFILE , void *t );
98c98,99
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf, int len) {
---
>  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
>      int len = 0;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread( , void *, int );
119c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( void *buf, int len) {
>   BZFILE * b;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , , int );
119c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  int len) {
>   void * buf = 0;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *t );
119c119,120
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf) {
>   int len = 0;
(98.6 %, 2919 bytes)
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread( , void *, int );
120c120,121
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread( void *buf, int len) {
>   BZFILE * b;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , , int );
120c120,121
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b,  int len) {
>   void * buf = 0;
56c56
< BZ_APIBZ2_bzread(BZFILE , void *, int );
---
> BZ_APIBZ2_bzread(BZFILE , void *t );
120c120,121
< BZ_APIBZ2_bzread(BZFILE b, void *buf, int len) {
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf) {
>   int len = 0;
(98.6 %, 2921 bytes)
===< pass_clang :: return-void >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-function >===
21,22c21
<  void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                          int *);
---
>  
106,107c105
< void BZ_APIBZ2_bzReadGetUnused(int *, BZFILE , void **,
<                                int *);
---
> 
24c24
< BZ_APIBZ2_bzRead(int *, BZFILE , void *t );
---
> ;
98,104c98
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
<      int len = 0;
< 
<      0
<     ;
< 
<   }
---
>  
(98.7 %, 2723 bytes)
23c23
< BZ_APIBZ2_bzRead(int *, BZFILE , void *t );
---
> ;
97,103c97
<  BZ_APIBZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
<      int len = 0;
< 
<      0
<     ;
< 
<   }
---
>  
25,27c25
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int , int ,
<                                         int );
---
>  
(98.7 %, 2591 bytes)
25,27c25
<  BZFILE *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int , int ,
<                                         int );
---
>  
29c29
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  
83c83
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> 
(98.8 %, 2448 bytes)
27c27
<  void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
>  
81c81
< void BZ_APIBZ2_bzWrite(int *, BZFILE , void *, int );
---
> 
29,31c29
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned  *,
<                                       unsigned  *);
---
>  
83,84c81
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned  *, unsigned  *);
---
> 
(98.9 %, 2342 bytes)
29,31c29
<  void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                                       unsigned  *,
<                                       unsigned  *);
---
>  
83,84c81
< void BZ_APIBZ2_bzWriteClose(int *, BZFILE , int ,
<                             unsigned  *, unsigned  *);
---
> 
33,37c33
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned  *,
<                                         unsigned  *,
<                                         unsigned  *,
<                                         unsigned  *);
---
>  
86,90c82
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned  *,
<                               unsigned  *,
<                               unsigned  *,
<                               unsigned  *);
---
> 
39,43c39
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *,
<                                              unsigned ,
<                                              int , int ,
<                                              int );
---
> 
99,102c95
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *, unsigned ,
<                                    int , int ,
<                                    int );
---
>  
(99.0 %, 2086 bytes)
31,35c31
<  void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                                         unsigned  *,
<                                         unsigned  *,
<                                         unsigned  *,
<                                         unsigned  *);
---
>  
83,87c79
< void BZ_APIBZ2_bzWriteClose64(int *, BZFILE , int ,
<                               unsigned  *,
<                               unsigned  *,
<                               unsigned  *,
<                               unsigned  *);
---
> 
37,41c37
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *,
<                                              unsigned ,
<                                              int , int ,
<                                              int );
---
> 
96,99c92
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *, unsigned ,
<                                    int , int ,
<                                    int );
---
>  
43,47c43
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned  *,
<                                                char *,
<                                                unsigned ,
<                                                int , int );
---
> 
101,103c97
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *, unsigned ,
<                                      int , int );
---
>  
(99.2 %, 1598 bytes)
33,37c33
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                              char *,
<                                              unsigned ,
<                                              int , int ,
<                                              int );
---
> 
88,91c84
<  BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned  *,
<                                    char *, unsigned ,
<                                    int , int ,
<                                    int );
---
>  
39,43c39
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned  *,
<                                                char *,
<                                                unsigned ,
<                                                int , int );
---
> 
93,95c89
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *, unsigned ,
<                                      int , int );
---
>  
(99.4 %, 1135 bytes)
35,39c35
< BZ_APIBZ2_bzBuffToBuffDecompress(char *,
<                                                unsigned  *,
<                                                char *,
<                                                unsigned ,
<                                                int , int );
---
> 
86,88c82
<  BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned  *,
<                                      char *, unsigned ,
<                                      int , int );
---
>  
41c41
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  
90c90
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> 
(99.7 %, 703 bytes)
37c37
<  BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
>  
84c84
< BZFILE *BZ_APIBZ2_bzopen(const char *, const char *);
---
> 
39c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> ;
86,92c86
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
<   int len = 0;
<   int bzerr;
<   if (( *b))
<      (bzerr == BZ_STREAM_END)
<     ;
< }
---
> 
41d40
< BZ_APIBZ2_bzwrite(BZFILE , void *, int )
43d41
< ;
94c92
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  
(99.7 %, 597 bytes)
39c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> ;
86,92c86
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
<   int len = 0;
<   int bzerr;
<   if (( *b))
<      (bzerr == BZ_STREAM_END)
<     ;
< }
---
> 
41d40
< BZ_APIBZ2_bzwrite(BZFILE , void *, int )
43d41
< ;
94c92
<  BZ_APIBZ2_bzwrite(BZFILE , void *, int );
---
>  
73,74c73
< BZ_APIBZ2_bzReadOpen( 
<                               );
---
> 
(99.7 %, 513 bytes)
71,72c71
< BZ_APIBZ2_bzReadOpen( 
<                               );
---
> 
(99.8 %, 458 bytes)
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: empty-struct-to-int >===
57,60c57
< typedef struct {
<    
<   
< } bzFile
---
> typedef int  bzFile
(99.8 %, 445 bytes)
===< pass_clang :: replace-undefined-function >===
===< pass_unifdef :: 0 >===
===< pass_special :: b >===
===< pass_ints :: a >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-5 >===
6,12d5
< #define BZ_STREAM_END 4
<  
< 
<   
<   
<  ;
< 
6,12d5
< #define BZ_STREAM_END 4
<  
< 
<   
<   
<  ;
< 
6,13c6
< #define BZ_STREAM_END 4
<  
< 
<   
<   
<  ;
< 
< #include <stdio.h>
---
> #define <stdio.h>
6,13c6
< #define BZ_STREAM_END 4
<  
< 
<   
<   
<  ;
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END stdio.h>
11,13c11
<  ;
< 
< #include <stdio.h>
---
>  .h>
13c13
< #include <stdio.h>
---
> h>
13c13
< #include <stdio.h>
---
> #>
13,15c13
< #include <stdio.h>
< 
< #define  BZ_EXTERN 
---
> #include #define  BZ_EXTERN 
13,15c13
< #include <stdio.h>
< 
< #define  BZ_EXTERN 
---
> #include <define  BZ_EXTERN 
13,15c13
< #include <stdio.h>
< 
< #define  BZ_EXTERN 
---
> #include <stdioBZ_EXTERN 
13,19c13
< #include <stdio.h>
< 
< #define  BZ_EXTERN 
< 
< 
< 
< typedef  BZFILE(   );
---
> #include <stdio.typedef  BZFILE(   );
13,19c13
< #include <stdio.h>
< 
< #define  BZ_EXTERN 
< 
< 
< 
< typedef  BZFILE(   );
---
> #include <stdio.hBZFILE(   );
15,19c15
< #define  BZ_EXTERN 
< 
< 
< 
< typedef  BZFILE(   );
---
> (   );
15,19c15
< #define  BZ_EXTERN 
< 
< 
< 
< typedef  BZFILE(   );
---
> #);
15,19c15
< #define  BZ_EXTERN 
< 
< 
< 
< typedef  BZFILE(   );
---
> #define  ;
19,22d18
< typedef  BZFILE(   );
< 
<  
< 
19,39c19
< typedef  BZFILE(   );
< 
<  
< 
< ;
< 
<  
< 
<  
< 
<  
< 
<  
< 
< 
< 
< 
< 
<  
< 
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> typedef  BZ_APIBZ2_bzread(BZFILE , void *t );
19,39c19
< typedef  BZFILE(   );
< 
<  
< 
< ;
< 
<  
< 
<  
< 
<  
< 
<  
< 
< 
< 
< 
< 
<  
< 
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> typedef  BZFILE(BZFILE , void *t );
19,39c19
< typedef  BZFILE(   );
< 
<  
< 
< ;
< 
<  
< 
<  
< 
<  
< 
<  
< 
< 
< 
< 
< 
<  
< 
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> typedef  BZFILE(   BZFILE , void *t );
19,39c19
< typedef  BZFILE(   );
< 
<  
< 
< ;
< 
<  
< 
<  
< 
<  
< 
<  
< 
< 
< 
< 
< 
<  
< 
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> typedef  BZFILE(   ), void *t );
23,39c23
< ;
< 
<  
< 
<  
< 
<  
< 
<  
< 
< 
< 
< 
< 
<  
< 
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> void *t );
39c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> *t );
39c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> BZ_APIBZ2_bzreadt );
39c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> BZ_APIBZ2_bzread();
39c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
---
> BZ_APIBZ2_bzread(BZFILE ;
39,43c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
< 
< 
< 
< #   
---
> BZ_APIBZ2_bzread(BZFILE , #   
39,46c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
< 
< 
< 
< #   
< 
<  
< ;
---
> BZ_APIBZ2_bzread(BZFILE , void ;
39,47c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
< 
< 
< 
< #   
< 
<  
< ;
< typedef  Int32
---
> BZ_APIBZ2_bzread(BZFILE , void *typedef  Int32
39,47c39
< BZ_APIBZ2_bzread(BZFILE , void *t );
< 
< 
< 
< #   
< 
<  
< ;
< typedef  Int32
---
> BZ_APIBZ2_bzread(BZFILE , void *t Int32
41,49d40
< 
< 
< #   
< 
<  
< ;
< typedef  Int32
< ;
< 
(99.8 %, 428 bytes)
39,47c39
< BZ_APIBZ2_bzread();
< 
< 
< 
< #   
< 
<  
< ;
< typedef  Int32
---
> BZ_APIBZ2_bzread(Int32
41,49d40
< 
< 
< #   
< 
<  
< ;
< typedef  Int32
< ;
< 
43,45d42
< #   
< 
<  
47,53d43
< typedef  Int32
< ;
< 
<   
<  
< 
<    ;
(99.8 %, 398 bytes)
39,48c39
< BZ_APIBZ2_bzread();
< 
<   
<  
< 
<    ;
< 
< #   
< 
< typedef int  bzFile
---
> BZ_APIBZ2_bzread()bzFile
44,50c44
<    ;
< 
< #   
< 
< typedef int  bzFile
< 
<  (    int 
---
>    (    int 
46,50c46
< #   
< 
< typedef int  bzFile
< 
<  (    int 
---
> int 
48,51c48
< typedef int  bzFile
< 
<  (    int 
<                                  workFactor);
---
> workFactor);
48,51c48
< typedef int  bzFile
< 
<  (    int 
<                                  workFactor);
---
> typedef );
48,51c48
< typedef int  bzFile
< 
<  (    int 
<                                  workFactor);
---
> typedef int  ;
50,71c50
<  (    int 
<                                  workFactor);
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>  BZ_APIBZ2_bzread(BZFILE b, void *buf) {
50,71c50
<  (    int 
<                                  workFactor);
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>  (    (BZFILE b, void *buf) {
51,71c51
<                                  workFactor);
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>                                  BZFILE b, void *buf) {
51,71c51
<                                  workFactor);
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>                                  workFactorb, void *buf) {
51,71c51
<                                  workFactor);
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>                                  workFactor), void *buf) {
71c71
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> void *buf) {
71c71
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread*buf) {
71c71
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(buf) {
(99.8 %, 335 bytes)
48,68c48
< typedef int  ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> typedef int  , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread*buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE ) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b{
68,69c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
<   int len = 0;
---
> BZ_APIBZ2_bzread(BZFILE b, int len = 0;
68,69c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
<   int len = 0;
---
> BZ_APIBZ2_bzread(BZFILE b, void len = 0;
68,69c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
<   int len = 0;
---
> BZ_APIBZ2_bzread(BZFILE b, void *= 0;
68,69c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
<   int len = 0;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf0;
68,69c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
<   int len = 0;
---
> BZ_APIBZ2_bzread(BZFILE b, void *buf) ;
69d68
<   int len = 0;
69d68
<   int len = 0;
(99.8 %, 320 bytes)
69,70c69
<   int bzerr;
<   if (( *b))
---
>   ( *b))
69,70c69
<   int bzerr;
<   if (( *b))
---
>   int *b))
69,70c69
<   int bzerr;
<   if (( *b))
---
>   int bzerrb))
70c70
<   if (( *b))
---
>   ))
70c70
<   if (( *b))
---
>   if )
70,71c70
<   if (( *b))
<      (bzerr == BZ_STREAM_END)
---
>   if ((bzerr == BZ_STREAM_END)
70,71c70
<   if (( *b))
<      (bzerr == BZ_STREAM_END)
---
>   if (( bzerr == BZ_STREAM_END)
70,71c70
<   if (( *b))
<      (bzerr == BZ_STREAM_END)
---
>   if (( *== BZ_STREAM_END)
70,71c70
<   if (( *b))
<      (bzerr == BZ_STREAM_END)
---
>   if (( *bBZ_STREAM_END)
71d70
<      (bzerr == BZ_STREAM_END)
71,72c71
<      (bzerr == BZ_STREAM_END)
<     ;
---
>      ;
71,73c71
<      (bzerr == BZ_STREAM_END)
<     ;
< }
---
>      (}
71,76c71
<      (bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
---
>      (bzerr 
\ No newline at end of file
71,76c71
<      (bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
---
>      (bzerr == 
\ No newline at end of file
71,76c71
<      (bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
---
>      (bzerr == BZ_STREAM_END
\ No newline at end of file
72,76c72
<     ;
< }
< 
<  
< 
---
>     
\ No newline at end of file
73,76d72
< }
< 
<  
< 
===< pass_clex :: rm-tok-pattern-4 >===
6c6
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 4
6c6
< #define BZ_STREAM_END 4
---
>  BZ_STREAM_END 4
6c6
< #define BZ_STREAM_END 4
---
> define  4
6c6
< #define BZ_STREAM_END 4
---
>   4
6c6
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 
6c6
< #define BZ_STREAM_END 4
---
>  BZ_STREAM_END 
6c6
< #define BZ_STREAM_END 4
---
> define  
6c6
< #define BZ_STREAM_END 4
---
>   
6c6
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 4
6c6
< #define BZ_STREAM_END 4
---
> #  4
6c6
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 
6c6
< #define BZ_STREAM_END 4
---
> #  
6c6
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 4
11c11
<  ;
---
>  
(99.8 %, 312 bytes)
6c6
<  BZ_STREAM_END 
---
>   
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> # <stdio.h>
6c6
<  BZ_STREAM_END 
---
>   
13c13
< #include <stdio.h>
---
>  <stdio.h>
6c6
<  BZ_STREAM_END 
---
>   
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
>  <stdio.h>
11c11
<  ;
---
>  
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> # <stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
>  <stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> #include stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> include stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> # stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <stdio.h>
13c13
< #include <stdio.h>
---
>  <stdio.h>
13c13
< #include <stdio.h>
---
> include stdio.h>
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <.h>
13c13
< #include <stdio.h>
---
>  <.h>
13c13
< #include <stdio.h>
---
> include .h>
13c13
< #include <stdio.h>
---
>  .h>
13c13
< #include <stdio.h>
---
> # <stdio.h>
13c13
< #include <stdio.h>
---
> # stdio.h>
13c13
< #include <stdio.h>
---
> # <.h>
13c13
< #include <stdio.h>
---
> # .h>
13c13
< #include <stdio.h>
---
> # <stdioh>
13c13
< #include <stdio.h>
---
> # stdioh>
13c13
< #include <stdio.h>
---
> # <h>
13c13
< #include <stdio.h>
---
> # h>
13c13
< #include <stdio.h>
---
> #include stdio.h>
13c13
< #include <stdio.h>
---
> #include .h>
13c13
< #include <stdio.h>
---
> #include stdioh>
13c13
< #include <stdio.h>
---
> #include h>
13c13
< #include <stdio.h>
---
> #include stdio.>
13c13
< #include <stdio.h>
---
> #include .>
13c13
< #include <stdio.h>
---
> #include stdio>
13c13
< #include <stdio.h>
---
> #include >
13c13
< #include <stdio.h>
---
> #include <.h>
13c13
< #include <stdio.h>
---
> #include <h>
13c13
< #include <stdio.h>
---
> #include <.>
13c13
< #include <stdio.h>
---
> #include <>
13c13
< #include <stdio.h>
---
> #include <.h
13c13
< #include <stdio.h>
---
> #include <h
13c13
< #include <stdio.h>
---
> #include <.
13c13
< #include <stdio.h>
---
> #include <
13c13
< #include <stdio.h>
---
> #include <stdioh>
13c13
< #include <stdio.h>
---
> #include <stdio>
13c13
< #include <stdio.h>
---
> #include <stdioh
13c13
< #include <stdio.h>
---
> #include <stdio
13c13
< #include <stdio.h>
---
> #include <stdioh>
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio>
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdioh
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.>
13c13
< #include <stdio.h>
---
> #include <stdio.
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #define  BZ_EXTERN 
---
> #  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #define  BZ_EXTERN 
---
> #  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #define  BZ_EXTERN 
---
>   BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #define  BZ_EXTERN 
---
>   BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define  BZ_EXTERN 
---
> #  BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define  BZ_EXTERN 
---
>   BZ_EXTERN 
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define  BZ_EXTERN 
---
> #define   
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define  BZ_EXTERN 
---
> define   
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define  BZ_EXTERN 
---
> #   
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #define  BZ_EXTERN 
---
>    
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
15c15
< #define  BZ_EXTERN 
---
>   BZ_EXTERN 
15c15
< #define  BZ_EXTERN 
---
> define   
15c15
< #define  BZ_EXTERN 
---
>    
15c15
< #define  BZ_EXTERN 
---
> define  BZ_EXTERN 
19c19
< typedef  BZFILE(   );
---
>   BZFILE(   );
15c15
< #define  BZ_EXTERN 
---
>   BZ_EXTERN 
19c19
< typedef  BZFILE(   );
---
>   BZFILE(   );
15c15
< #define  BZ_EXTERN 
---
> define   
19c19
< typedef  BZFILE(   );
---
>   BZFILE(   );
15c15
< #define  BZ_EXTERN 
---
>    
19c19
< typedef  BZFILE(   );
---
>   BZFILE(   );
15c15
< #define  BZ_EXTERN 
---
> #  BZ_EXTERN 
15c15
< #define  BZ_EXTERN 
---
> #   
(99.9 %, 296 bytes)
19c19
< typedef  BZFILE(   );
---
>      );
19c19
< typedef  BZFILE(   );
---
>   BZFILE(   ;
19c19
< typedef  BZFILE(   );
---
>   (   ;
19c19
< typedef  BZFILE(   );
---
>   BZFILE   ;
19c19
< typedef  BZFILE(   );
---
>      ;
19c19
< typedef  BZFILE(   );
---
> typedef  (   );
19c19
< typedef  BZFILE(   );
---
> typedef     );
19c19
< typedef  BZFILE(   );
---
> typedef  (   ;
19c19
< typedef  BZFILE(   );
---
> typedef     ;
19c19
< typedef  BZFILE(   );
---
> typedef  (   )
19c19
< typedef  BZFILE(   );
---
> typedef     )
19c19
< typedef  BZFILE(   );
---
> typedef  (   
19c19
< typedef  BZFILE(   );
---
> typedef     
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   );
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   ;
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   )
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   );
23c23
< ;
---
> 
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   ;
23c23
< ;
---
> 
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   )
23c23
< ;
---
> 
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE   
23c23
< ;
---
> 
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   ;
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   ;
23c23
< ;
---
> 
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   
23c23
< ;
---
> 
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   ;
39c39
< BZ_APIBZ2_bzread();
---
> ();
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   
39c39
< BZ_APIBZ2_bzread();
---
> ();
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   ;
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> ();
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> ();
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
23c23
< ;
---
> 
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
39c39
< BZ_APIBZ2_bzread();
---
> ();
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> ();
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
39c39
< BZ_APIBZ2_bzread();
---
> BZ_APIBZ2_bzread);
19c19
< typedef  BZFILE(   );
---
> typedef  BZFILE(   )
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> BZ_APIBZ2_bzread);
(99.9 %, 295 bytes)
23c23
< ;
---
> 
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> ();
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> BZ_APIBZ2_bzread);
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> );
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> BZ_APIBZ2_bzread(;
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> (;
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> BZ_APIBZ2_bzread;
23c23
< ;
---
> 
39c39
< BZ_APIBZ2_bzread();
---
> ;
39c39
< BZ_APIBZ2_bzread();
---
> ();
39c39
< BZ_APIBZ2_bzread();
---
> );
39c39
< BZ_APIBZ2_bzread();
---
> (;
39c39
< BZ_APIBZ2_bzread();
---
> ;
(99.9 %, 276 bytes)
39c39
< ;
---
> 
44c44
<    ;
---
>    
46c46
< #   
---
>    
48c48
< typedef int  ;
---
>  int  ;
44c44
<    ;
---
>    
44c44
<    ;
---
>    
46c46
< #   
---
>    
(99.9 %, 275 bytes)
46c46
< #   
---
>    
46c46
< #   
---
>    
48c48
< typedef int  ;
---
>  int  ;
46c46
< #   
---
>    
48c48
< typedef int  ;
---
> typedef   ;
(99.9 %, 274 bytes)
48c48
< typedef int  ;
---
>  int  ;
48c48
< typedef int  ;
---
>    ;
(99.9 %, 267 bytes)
48c48
<  int  ;
---
>    ;
48c48
<  int  ;
---
>    
(99.9 %, 264 bytes)
48c48
<    ;
---
>    
48c48
<    ;
---
>    
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> (BZFILE b, void *buf) {
48c48
<    ;
---
>    
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzreadBZFILE b, void *buf) {
48c48
<    ;
---
>    
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZFILE b, void *buf) {
48c48
<    ;
---
>    
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread( b, void *buf) {
48c48
<    ;
---
>    
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> ( b, void *buf) {
48c48
<    ;
---
>    
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread b, void *buf) {
48c48
<    ;
---
>    
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>  b, void *buf) {
(99.9 %, 263 bytes)
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> (BZFILE b, void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZFILE b, void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> ( b, void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>  b, void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> (BZFILE , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZFILE , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> ( , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
>  , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzreadBZFILE b, void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread b, void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzreadBZFILE , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzreadBZFILE b void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread b void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzreadBZFILE  void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread  void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread( b, void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread( , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread( b void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(  void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread( b,  *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread( ,  *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread( b  *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(   *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE , void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE  void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE ,  *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE   *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE , void buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE  void buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE ,  buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE   buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b void *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b  *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b void buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b  buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b void *) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b  *) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b void ) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b  ) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b,  *buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b,  buf) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b,  *) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b,  ) {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b,  *buf {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b,  buf {
68c68
< BZ_APIBZ2_bzread(BZFILE b, void *buf) {
---
> BZ_APIBZ2_bzread(BZFILE b,  * {
(99.9 %, 254 bytes)
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b   
>    ;
68c68
< BZ_APIBZ2_bzread(BZFILE b  ) {
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
>    bzerr;
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
>   int ;
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
>    ;
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
>   int bzerr
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
>    bzerr
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
>   int 
68,69c68,69
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(BZFILE b  ) 
>    
69c69
<   int bzerr;
---
>    bzerr;
69c69
<   int bzerr;
---
>    ;
69c69
<   int bzerr;
---
>    bzerr
69c69
<   int bzerr;
---
>    
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>    bzerr;
>    (( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>    ;
>    (( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>    bzerr
>    (( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>    
>    (( *b))
69c69
<   int bzerr;
---
>   int ;
69c69
<   int bzerr;
---
>   int 
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int ;
>    (( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int 
>    (( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int ;
>   if ( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int 
>   if ( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int ;
>    ( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int 
>    ( *b))
69c69
<   int bzerr;
---
>   int bzerr
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int bzerr
>    (( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int bzerr
>   if ( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int bzerr
>    ( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int bzerr
>   if ( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int bzerr
>    ( *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int bzerr
>   if  *b))
69,70c69,70
<   int bzerr;
<   if (( *b))
---
>   int bzerr
>     *b))
70c70
<   if (( *b))
---
>    (( *b))
70c70
<   if (( *b))
---
>    ( *b))
70c70
<   if (( *b))
---
>    ( *b))
70c70
<   if (( *b))
---
>     *b))
70c70
<   if (( *b))
---
>    (( b))
(99.9 %, 252 bytes)
70c70
<    (( *b))
---
>    ( *b))
70c70
<    (( *b))
---
>     *b))
70c70
<    (( *b))
---
>    ( b))
70c70
<    (( *b))
---
>     b))
70c70
<    (( *b))
---
>    ( *))
70c70
<    (( *b))
---
>     *))
70c70
<    (( *b))
---
>    ( ))
70c70
<    (( *b))
---
>     ))
70c70
<    (( *b))
---
>    ( *b))
70c70
<    (( *b))
---
>    ( b))
70c70
<    (( *b))
---
>    ( *))
70c70
<    (( *b))
---
>    ( ))
70c70
<    (( *b))
---
>    ( *b)
70c70
<    (( *b))
---
>    ( b)
(99.9 %, 250 bytes)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( b)
>      bzerr == BZ_STREAM_END)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( )
>      bzerr == BZ_STREAM_END)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( b
>      bzerr == BZ_STREAM_END)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( 
>      bzerr == BZ_STREAM_END)
70c70
<    ( *b)
---
>    ( *)
70c70
<    ( *b)
---
>    ( *
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( *)
>      bzerr == BZ_STREAM_END)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( *
>      bzerr == BZ_STREAM_END)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( *)
>      ( == BZ_STREAM_END)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( *
>      ( == BZ_STREAM_END)
70,71c70,71
<    ( *b)
<      (bzerr == BZ_STREAM_END)
---
>    ( *)
>       == BZ_STREAM_END)
(99.9 %, 246 bytes)
71c71
<      bzerr == BZ_STREAM_END)
---
>        
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr  BZ_STREAM_END)
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr  )
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr  BZ_STREAM_END
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr  
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  BZ_STREAM_END)
>     
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  )
>     
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  BZ_STREAM_END
>     
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  
>     
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == )
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == 
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == )
>     
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == 
>     
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == )
73c73
< }
---
> 
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == 
73c73
< }
---
> 
71,73c71,73
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == )
>     
> 
71,73c71,73
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == 
>     
> 
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == BZ_STREAM_END
>     
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
73c73
< }
---
> 
71,73c71,73
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == BZ_STREAM_END
>     
> 
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
71,72c71,72
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == BZ_STREAM_END
>     
71c71
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
73c73
< }
---
> 
71,73c71,73
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == BZ_STREAM_END
>     
> 
72c72
<     ;
---
>     
72,73c72,73
<     ;
< }
---
>     
> 
72c72
<     ;
---
>     
72,73c72,73
<     ;
< }
---
>     
> 
72c72
<     ;
---
>     
72,73c72,73
<     ;
< }
---
>     
> 
72c72
<     ;
---
>     
72,73c72,73
<     ;
< }
---
>     
> 
73c73
< }
---
> 
73c73
< }
---
> 
73c73
< }
---
> 
73c73
< }
---
> 
73c73
< }
---
> 
73c73
< }
---
> 
73c73
< }
---
> 
73c73
< }
---
> 
Termination check: size was 2914; now 246
===< pass_balanced :: curly3 >===
===< pass_balanced :: parens >===
1c1
< 
---
>  
19c19
< typedef  BZFILE(   )
---
> typedef  BZFILE
76a77
>  
\ No newline at end of file
1c1
< 
---
>  
68c68
< BZ_APIBZ2_bzread(BZFILE b  ) {
---
> BZ_APIBZ2_bzread {
76a77
>  
\ No newline at end of file
1c1
< 
---
>  
70,71c70
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    
76a76
>  
\ No newline at end of file
(99.9 %, 243 bytes)
68c68
< BZ_APIBZ2_bzread(BZFILE b  ) {
---
> BZ_APIBZ2_bzread {
70,71c70
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    
===< pass_balanced :: angles >===
13c13
< #include <stdio.h>
---
> #include 
===< pass_clang :: simple-inliner >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-function >===
68,73c68
< BZ_APIBZ2_bzread(BZFILE b  ) {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
> 
===< pass_clang :: remove-unused-var >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: replace-simple-typedef >===
19d18
< typedef  BZFILE
21,39d19
<  
< 
< 
< 
<  
< 
<  
< 
<  
< 
<  
< 
< 
< 
< 
< 
<  
< 
< ;
68c48
< BZ_APIBZ2_bzread(BZFILE b  ) {
---
> BZ_APIBZ2_bzread(int b  ) {
(99.9 %, 198 bytes)
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: remove-unused-field >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-array-index-var >===
===< pass_clang :: replace-dependent-name >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ints :: a >===
===< pass_clex :: rm-toks-2 >===
6,13c6
<  BZ_STREAM_END 
<  
< 
<   
<   
<  ;
< 
< #include <stdio.h>
---
>  #include <stdio.h>
11,13c11
<  ;
< 
< #include <stdio.h>
---
>  include <stdio.h>
13c13
< #include <stdio.h>
---
> <stdio.h>
13c13
< #include <stdio.h>
---
> #stdio.h>
13c13
< #include <stdio.h>
---
> #include .h>
13c13
< #include <stdio.h>
---
> #include <h>
13c13
< #include <stdio.h>
---
> #include <stdio>
13,48c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(int b  ) {
---
> #include <stdio.BZ_APIBZ2_bzread(int b  ) {
13,48c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread(int b  ) {
---
> #include <stdio.h(int b  ) {
48c48
< BZ_APIBZ2_bzread(int b  ) {
---
> int b  ) {
48c48
< BZ_APIBZ2_bzread(int b  ) {
---
> BZ_APIBZ2_bzreadb  ) {
48c48
< BZ_APIBZ2_bzread(int b  ) {
---
> BZ_APIBZ2_bzread() {
48c48
< BZ_APIBZ2_bzread(int b  ) {
---
> BZ_APIBZ2_bzread(int {
48,49c48
< BZ_APIBZ2_bzread(int b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(int b  int bzerr;
48,49c48
< BZ_APIBZ2_bzread(int b  ) {
<   int bzerr;
---
> BZ_APIBZ2_bzread(int b  ) bzerr;
49c49
<   int bzerr;
---
>   ;
49,50c49
<   int bzerr;
<    ( 
---
>   int ( 
49,51c49
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerrbzerr == BZ_STREAM_END)
50,51c50
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    == BZ_STREAM_END)
(99.9 %, 191 bytes)
48,49c48
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread(int bzerr;
48,49c48
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() bzerr;
49c49
<   int bzerr;
---
>   ;
49,50c49
<   int bzerr;
<    ( 
---
>   int ( 
49,51c49
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerrbzerr == BZ_STREAM_END)
50,51c50
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    == BZ_STREAM_END)
51c51
<      bzerr == BZ_STREAM_END)
---
>      BZ_STREAM_END)
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr )
51,52c51
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == ;
51,53c51
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == BZ_STREAM_END}
52,57c52
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
53,57d52
< }
< 
<  
< 
<  
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
6c6
<  BZ_STREAM_END 
---
>   
6c6
<  BZ_STREAM_END 
---
>   
11c11
<  ;
---
>  
6c6
<  BZ_STREAM_END 
---
>   
13c13
< #include <stdio.h>
---
> include <stdio.h>
6c6
<  BZ_STREAM_END 
---
>   
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> include <stdio.h>
6c6
<  BZ_STREAM_END 
---
>   
13c13
< #include <stdio.h>
---
> # <stdio.h>
6c6
<  BZ_STREAM_END 
---
>   
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> # <stdio.h>
6c6
<  BZ_STREAM_END 
---
>   
13c13
< #include <stdio.h>
---
>  <stdio.h>
6c6
<  BZ_STREAM_END 
---
>   
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
>  <stdio.h>
11c11
<  ;
---
>  
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> # <stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
>  <stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> #include stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> include stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> # stdio.h>
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <stdio.h>
13c13
< #include <stdio.h>
---
>  <stdio.h>
13c13
< #include <stdio.h>
---
> include stdio.h>
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <.h>
13c13
< #include <stdio.h>
---
>  <.h>
13c13
< #include <stdio.h>
---
> include .h>
13c13
< #include <stdio.h>
---
>  .h>
13c13
< #include <stdio.h>
---
> # <stdio.h>
13c13
< #include <stdio.h>
---
> # stdio.h>
13c13
< #include <stdio.h>
---
> # <.h>
13c13
< #include <stdio.h>
---
> # .h>
13c13
< #include <stdio.h>
---
> # <stdioh>
13c13
< #include <stdio.h>
---
> # stdioh>
13c13
< #include <stdio.h>
---
> # <h>
13c13
< #include <stdio.h>
---
> # h>
13c13
< #include <stdio.h>
---
> #include stdio.h>
13c13
< #include <stdio.h>
---
> #include .h>
13c13
< #include <stdio.h>
---
> #include stdioh>
13c13
< #include <stdio.h>
---
> #include h>
13c13
< #include <stdio.h>
---
> #include stdio.>
13c13
< #include <stdio.h>
---
> #include .>
13c13
< #include <stdio.h>
---
> #include stdio>
13c13
< #include <stdio.h>
---
> #include >
13c13
< #include <stdio.h>
---
> #include <.h>
13c13
< #include <stdio.h>
---
> #include <h>
13c13
< #include <stdio.h>
---
> #include <.>
13c13
< #include <stdio.h>
---
> #include <>
13c13
< #include <stdio.h>
---
> #include <.h
13c13
< #include <stdio.h>
---
> #include <h
13c13
< #include <stdio.h>
---
> #include <.
13c13
< #include <stdio.h>
---
> #include <
13c13
< #include <stdio.h>
---
> #include <stdioh>
13c13
< #include <stdio.h>
---
> #include <stdio>
13c13
< #include <stdio.h>
---
> #include <stdioh
13c13
< #include <stdio.h>
---
> #include <stdio
13c13
< #include <stdio.h>
---
> #include <stdioh>
48c48
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< #include <stdio.h>
---
> #include <stdio>
48c48
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< #include <stdio.h>
---
> #include <stdioh
48c48
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< #include <stdio.h>
---
> #include <stdio
48c48
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< #include <stdio.h>
---
> #include <stdio.>
13c13
< #include <stdio.h>
---
> #include <stdio.
13c13
< #include <stdio.h>
---
> #include <stdio.>
48c48
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< #include <stdio.h>
---
> #include <stdio.
48c48
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< #include <stdio.h>
---
> #include <stdio.>
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) {
13c13
< #include <stdio.h>
---
> #include <stdio.
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) {
13c13
< #include <stdio.h>
---
> #include <stdio.>
48c48
< BZ_APIBZ2_bzread() {
---
> ) {
13c13
< #include <stdio.h>
---
> #include <stdio.
48c48
< BZ_APIBZ2_bzread() {
---
> ) {
13c13
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #include <stdio.h>
---
> #include <stdio.h
48c48
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< #include <stdio.h>
---
> #include <stdio.h
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) {
13c13
< #include <stdio.h>
---
> #include <stdio.h
48c48
< BZ_APIBZ2_bzread() {
---
> ) {
13c13
< #include <stdio.h>
---
> #include <stdio.h
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread( {
13c13
< #include <stdio.h>
---
> #include <stdio.h
48c48
< BZ_APIBZ2_bzread() {
---
> ( {
13c13
< #include <stdio.h>
---
> #include <stdio.h
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
13c13
< #include <stdio.h>
---
> #include <stdio.h
48c48
< BZ_APIBZ2_bzread() {
---
>  {
48c48
< BZ_APIBZ2_bzread() {
---
> () {
48c48
< BZ_APIBZ2_bzread() {
---
> ) {
48c48
< BZ_APIBZ2_bzread() {
---
> ( {
48c48
< BZ_APIBZ2_bzread() {
---
>  {
48c48
< BZ_APIBZ2_bzread() {
---
> () 
48c48
< BZ_APIBZ2_bzread() {
---
> ) 
48c48
< BZ_APIBZ2_bzread() {
---
> ( 
48c48
< BZ_APIBZ2_bzread() {
---
>  
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) {
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) 
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread 
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread) {
>    bzerr;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread {
>    bzerr;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>    bzerr;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread 
>    bzerr;
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread( {
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread( 
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread( {
>    bzerr;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread( 
>    bzerr;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread( {
>   int ;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread( 
>   int ;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread( {
>    ;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread( 
>    ;
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread() 
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() 
>    bzerr;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() 
>   int ;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() 
>    ;
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() 
>   int bzerr
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() 
>    bzerr
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() 
>   int 
48,49c48,49
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() 
>    
49c49
<   int bzerr;
---
>    bzerr;
49c49
<   int bzerr;
---
>    ;
49c49
<   int bzerr;
---
>    bzerr
49c49
<   int bzerr;
---
>    
49,50c49,50
<   int bzerr;
<    ( 
---
>    bzerr;
>     
49,50c49,50
<   int bzerr;
<    ( 
---
>    ;
>     
49,50c49,50
<   int bzerr;
<    ( 
---
>    bzerr
>     
49,50c49,50
<   int bzerr;
<    ( 
---
>    
>     
49c49
<   int bzerr;
---
>   int ;
49c49
<   int bzerr;
---
>   int 
49,50c49,50
<   int bzerr;
<    ( 
---
>   int ;
>     
49,50c49,50
<   int bzerr;
<    ( 
---
>   int 
>     
49c49
<   int bzerr;
---
>   int ;
51c51
<      bzerr == BZ_STREAM_END)
---
>       == BZ_STREAM_END)
49c49
<   int bzerr;
---
>   int 
51c51
<      bzerr == BZ_STREAM_END)
---
>       == BZ_STREAM_END)
49,51c49,51
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int ;
>     
>       == BZ_STREAM_END)
49,51c49,51
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int 
>     
>       == BZ_STREAM_END)
49c49
<   int bzerr;
---
>   int bzerr
49,50c49,50
<   int bzerr;
<    ( 
---
>   int bzerr
>     
49c49
<   int bzerr;
---
>   int bzerr
51c51
<      bzerr == BZ_STREAM_END)
---
>       == BZ_STREAM_END)
49,51c49,51
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerr
>     
>       == BZ_STREAM_END)
49c49
<   int bzerr;
---
>   int bzerr
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr  BZ_STREAM_END)
49,51c49,51
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerr
>     
>      bzerr  BZ_STREAM_END)
49c49
<   int bzerr;
---
>   int bzerr
51c51
<      bzerr == BZ_STREAM_END)
---
>        BZ_STREAM_END)
49,51c49,51
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerr
>     
>        BZ_STREAM_END)
50c50
<    ( 
---
>     
50,51c50,51
<    ( 
<      bzerr == BZ_STREAM_END)
---
>     
>       == BZ_STREAM_END)
50,51c50,51
<    ( 
<      bzerr == BZ_STREAM_END)
---
>     
>      bzerr  BZ_STREAM_END)
50,51c50,51
<    ( 
<      bzerr == BZ_STREAM_END)
---
>     
>        BZ_STREAM_END)
50,51c50,51
<    ( 
<      bzerr == BZ_STREAM_END)
---
>     
>      bzerr == )
50,51c50,51
<    ( 
<      bzerr == BZ_STREAM_END)
---
>     
>       == )
50,51c50,51
<    ( 
<      bzerr == BZ_STREAM_END)
---
>     
>      bzerr  )
50,51c50,51
<    ( 
<      bzerr == BZ_STREAM_END)
---
>     
>        )
51c51
<      bzerr == BZ_STREAM_END)
---
>       == BZ_STREAM_END)
51c51
<      bzerr == BZ_STREAM_END)
---
>        BZ_STREAM_END)
51c51
<      bzerr == BZ_STREAM_END)
---
>       == )
51c51
<      bzerr == BZ_STREAM_END)
---
>        )
51c51
<      bzerr == BZ_STREAM_END)
---
>       == BZ_STREAM_END
51c51
<      bzerr == BZ_STREAM_END)
---
>        BZ_STREAM_END
51c51
<      bzerr == BZ_STREAM_END)
---
>       == 
51c51
<      bzerr == BZ_STREAM_END)
---
>        
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr  BZ_STREAM_END)
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr  )
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr  BZ_STREAM_END
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr  
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  BZ_STREAM_END)
>     
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  )
>     
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  BZ_STREAM_END
>     
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr  
>     
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == )
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == 
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == )
>     
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == 
>     
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == )
53c53
< }
---
> 
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == 
53c53
< }
---
> 
51,53c51,53
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == )
>     
> 
51,53c51,53
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == 
>     
> 
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == BZ_STREAM_END
>     
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
53c53
< }
---
> 
51,53c51,53
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == BZ_STREAM_END
>     
> 
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
51,52c51,52
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == BZ_STREAM_END
>     
51c51
<      bzerr == BZ_STREAM_END)
---
>      bzerr == BZ_STREAM_END
53c53
< }
---
> 
51,53c51,53
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == BZ_STREAM_END
>     
> 
52c52
<     ;
---
>     
52,53c52,53
<     ;
< }
---
>     
> 
52c52
<     ;
---
>     
52,53c52,53
<     ;
< }
---
>     
> 
52c52
<     ;
---
>     
52,53c52,53
<     ;
< }
---
>     
> 
52c52
<     ;
---
>     
52,53c52,53
<     ;
< }
---
>     
> 
53c53
< }
---
> 
53c53
< }
---
> 
53c53
< }
---
> 
53c53
< }
---
> 
53c53
< }
---
> 
53c53
< }
---
> 
53c53
< }
---
> 
53c53
< }
---
> 
Termination check: size was 246; now 191
===< pass_ternary :: c >===
===< pass_balanced :: parens >===
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
50,51c50
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    
===< pass_clang :: param-to-local >===
===< pass_clang :: union-to-struct >===
===< pass_clang :: simple-inliner >===
===< pass_clang :: reduce-pointer-level >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-addr-taken >===
===< pass_peep :: a >===
11c11
<  ;
---
>  
13c13
< #include <stdio.h>
---
> #include 
48c48
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
48,53c48
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
> BZ_APIBZ2_bzread() 
49c49
<   int bzerr;
---
>   int bzerr
50,51c50
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    
52c52
<     ;
---
>     
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_clex :: rm-toks-14 >===
6,49c6
<  BZ_STREAM_END 
<  
< 
<   
<   
<  ;
< 
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
>  bzerr;
12,49d11
< 
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
13,50c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
---
> ( 
13,51c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> #bzerr == BZ_STREAM_END)
13,51c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> #include == BZ_STREAM_END)
13,51c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> #include <BZ_STREAM_END)
13,51c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> #include <stdio)
13,52c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
---
> #include <stdio.;
13,53c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
> #include <stdio.h}
48,57d47
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
48,57c48
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
> BZ_APIBZ2_bzread
\ No newline at end of file
48,57c48
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
> BZ_APIBZ2_bzread(
\ No newline at end of file
48,57c48
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
> BZ_APIBZ2_bzread() 
\ No newline at end of file
49,57c49
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
49,57c49
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>   int 
\ No newline at end of file
49,57c49
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>   int bzerr
\ No newline at end of file
50,57c50
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
51,57c51
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      
\ No newline at end of file
51,57c51
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr 
\ No newline at end of file
51,57c51
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == 
\ No newline at end of file
51,57c51
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == BZ_STREAM_END
\ No newline at end of file
52,57c52
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
53,57d52
< }
< 
<  
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-7 >===
6,13c6
<  BZ_STREAM_END 
<  
< 
<   
<   
<  ;
< 
< #include <stdio.h>
---
>  h>
11,13c11
<  ;
< 
< #include <stdio.h>
---
>  >
13,47d12
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
13,48c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
---
> #() {
13,48c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
---
> #include ) {
13,48c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
---
> #include <{
13,49c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> #include <stdioint bzerr;
13,49c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> #include <stdio.bzerr;
13,49c13
< #include <stdio.h>
< 
<    
< 
< 
< 
< 
< 
<   
<  
< 
<    
< 
<    
< 
<    
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
< 
< 
< 
<  
< 
<  
< 
< 
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> #include <stdio.h;
(99.9 %, 120 bytes)
13,15c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
---
> ( 
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzreadbzerr == BZ_STREAM_END)
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzread(== BZ_STREAM_END)
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzread() BZ_STREAM_END)
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   )
14,17c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
---
>   int ;
14,18c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>   int bzerr}
15,22c15
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == BZ_STREAM_END
\ No newline at end of file
17,22c17
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,22d17
< }
< 
<  
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
6,14c6
<  BZ_STREAM_END 
<  
< 
<   
<   
<  ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
>  int bzerr;
11,14c11
<  ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
>  bzerr;
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> ;
13,15c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
---
> BZ_APIBZ2_bzread( 
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzread(bzerr == BZ_STREAM_END)
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzread() == BZ_STREAM_END)
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   BZ_STREAM_END)
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int )
15,17d14
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
15,18c15
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>    }
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == BZ_STREAM_END
\ No newline at end of file
17,22c17
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,22d17
< }
< 
<  
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-3 >===
6,13c6
<  BZ_STREAM_END 
<  
< 
<   
<   
<  ;
< 
< BZ_APIBZ2_bzread() {
---
>  () {
11,13c11
<  ;
< 
< BZ_APIBZ2_bzread() {
---
>  ) {
13c13
< BZ_APIBZ2_bzread() {
---
> {
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzreadint bzerr;
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread(bzerr;
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() ;
14,15c14
<   int bzerr;
<    ( 
---
>   ( 
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerr == BZ_STREAM_END)
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerr== BZ_STREAM_END)
15,16c15
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    BZ_STREAM_END)
16c16
<      bzerr == BZ_STREAM_END)
---
>      )
16,17c16
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr ;
16,18c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr == }
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == BZ_STREAM_END
\ No newline at end of file
17,22c17
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,22d17
< }
< 
<  
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-1 >===
6,10d5
<  BZ_STREAM_END 
<  
< 
<   
<   
11,13c11
<  ;
< 
< BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() {
13c13
< BZ_APIBZ2_bzread() {
---
> () {
13c13
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) {
13c13
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread({
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() int bzerr;
14c14
<   int bzerr;
---
>   bzerr;
14c14
<   int bzerr;
---
>   int ;
14,15c14
<   int bzerr;
<    ( 
---
>   int bzerr( 
15,16c15
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    bzerr == BZ_STREAM_END)
16c16
<      bzerr == BZ_STREAM_END)
---
>      == BZ_STREAM_END)
16c16
<      bzerr == BZ_STREAM_END)
---
>      bzerr BZ_STREAM_END)
16c16
<      bzerr == BZ_STREAM_END)
---
>      bzerr == )
16,17c16
<      bzerr == BZ_STREAM_END)
<     ;
---
>      bzerr == BZ_STREAM_END;
17,18c17
<     ;
< }
---
>     }
18,22d17
< }
< 
<  
< 
<  
\ No newline at end of file
Termination check: size was 191; now 120
===< pass_include_includes :: 0 >===
===< pass_balanced :: parens >===
13c13
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
15,16c15
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    
===< pass_clang :: remove-namespace >===
===< pass_clang :: union-to-struct >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-array >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-undefined-function >===
===< pass_ints :: c >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-16 >===
6,21d5
<  BZ_STREAM_END 
<  
< 
<   
<   
<  ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
11,21d10
<  ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
13,22d12
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
13,22c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
> BZ_APIBZ2_bzread
\ No newline at end of file
13,22c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
> BZ_APIBZ2_bzread(
\ No newline at end of file
13,22c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
> BZ_APIBZ2_bzread() 
\ No newline at end of file
14,22c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
14,22c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>   int 
\ No newline at end of file
14,22c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>   int bzerr
\ No newline at end of file
15,22c15
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == BZ_STREAM_END
\ No newline at end of file
17,22c17
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,22d17
< }
< 
<  
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-8 >===
6,10d5
<  BZ_STREAM_END 
<  
< 
<   
<   
12,14d6
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
11,15c11
<  ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
---
>  ( 
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> bzerr == BZ_STREAM_END)
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzread== BZ_STREAM_END)
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzread(BZ_STREAM_END)
13,16c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
> BZ_APIBZ2_bzread() )
14,17c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
---
>   ;
14,18c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>   int }
14,22c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>   int bzerr
\ No newline at end of file
15,22c15
<    ( 
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == BZ_STREAM_END
\ No newline at end of file
17,22c17
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,22d17
< }
< 
<  
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-4 >===
6,13c6
<  BZ_STREAM_END 
<  
< 
<   
<   
<  ;
< 
< BZ_APIBZ2_bzread() {
---
>  ) {
11,13c11
<  ;
< 
< BZ_APIBZ2_bzread() {
---
>  {
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> int bzerr;
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzreadbzerr;
13,14c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread(;
13,15c13
< BZ_APIBZ2_bzread() {
<   int bzerr;
<    ( 
---
> BZ_APIBZ2_bzread() ( 
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   bzerr == BZ_STREAM_END)
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int == BZ_STREAM_END)
14,16c14
<   int bzerr;
<    ( 
<      bzerr == BZ_STREAM_END)
---
>   int bzerrBZ_STREAM_END)
15,16c15
<    ( 
<      bzerr == BZ_STREAM_END)
---
>    )
16,17c16
<      bzerr == BZ_STREAM_END)
<     ;
---
>      ;
16,18c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
---
>      bzerr }
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == 
\ No newline at end of file
16,22c16
<      bzerr == BZ_STREAM_END)
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>      bzerr == BZ_STREAM_END
\ No newline at end of file
17,22c17
<     ;
< }
< 
<  
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,22d17
< }
< 
<  
< 
<  
\ No newline at end of file
Termination check: size was 120; now 120
===< pass_clang :: rename-fun >===
13c13
< BZ_APIBZ2_bzread() {
---
> fn1() {
(99.9 %, 107 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
6c6
<  BZ_STREAM_END 
---
>  a 
14c14
<   int bzerr;
---
>   int b;
16c16
<      bzerr == BZ_STREAM_END)
---
>      b == a)
(100.0 %, 75 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
1d0
<  
3c2
<  
---
> a;
5,13c4,5
<   
<  a 
<  
< 
<   
<   
<  ;
< 
< fn1() {
---
> fn1 (  )
> {
15,17c7
<    ( 
<      b == a)
<     ;
---
>   ( b == a );
19,22d8
< 
<  
< 
<  
\ No newline at end of file
1d0
<  
3d1
<  
5,7d2
<   
<  a 
<  
9,11c4,11
<   
<   
<  ;
---
> 
> 
> a
> 
> 
> 
> 
> ;
14,16c14,16
<   int b;
<    ( 
<      b == a)
---
>     int b;
>     (
>         b == a)
20d19
<  
22c21
<  
\ No newline at end of file
---
> 
(100.0 %, 41 bytes)
6,7c6,7
<   int b;
<   ( b == a );
---
>     int b;
>     ( b == a );
4,5c4
< fn1 (  )
< {
---
> fn1() {
7c6
<   ( b == a );
---
>   (b == a);
(100.0 %, 45 bytes)
4,7c4,6
< fn1 (  )
< {
<     int b;
<     ( b == a );
---
> fn1() {
>   int b;
>   (b == a);
(100.0 %, 36 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 1 times
  method pass_balanced :: angles-only worked 0 times and failed 1 times
  method pass_balanced :: curly worked 69 times and failed 50 times
  method pass_balanced :: curly-only worked 0 times and failed 3 times
  method pass_balanced :: curly2 worked 26 times and failed 12 times
  method pass_balanced :: curly3 worked 6 times and failed 0 times
  method pass_balanced :: parens worked 133 times and failed 127 times
  method pass_balanced :: parens-only worked 54 times and failed 67 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 1 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 2 times and failed 1 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 1 times and failed 2 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 2 times and failed 5 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 16 times and failed 3 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 40 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 1 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 1 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 147 times and failed 3568 times
  method pass_clex :: rm-toks-1 worked 0 times and failed 16 times
  method pass_clex :: rm-toks-10 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-11 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-12 worked 121 times and failed 1039 times
  method pass_clex :: rm-toks-13 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-14 worked 0 times and failed 23 times
  method pass_clex :: rm-toks-15 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-16 worked 0 times and failed 16 times
  method pass_clex :: rm-toks-2 worked 63 times and failed 602 times
  method pass_clex :: rm-toks-3 worked 0 times and failed 16 times
  method pass_clex :: rm-toks-4 worked 0 times and failed 16 times
  method pass_clex :: rm-toks-5 worked 21 times and failed 763 times
  method pass_clex :: rm-toks-6 worked 0 times and failed 16 times
  method pass_clex :: rm-toks-7 worked 36 times and failed 809 times
  method pass_clex :: rm-toks-8 worked 0 times and failed 16 times
  method pass_clex :: rm-toks-9 worked 0 times and failed 0 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 1 times and failed 0 times
  method pass_ints :: a worked 0 times and failed 0 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 7 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 13 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454556579.55239/bzip2.c' reduced to:

a;

fn1() {
  int b;
  (b == a);
}
1097.22user 227.41system 15:36.22elapsed 141%CPU (0avgtext+0avgdata 61092maxresident)k
160inputs+3726752outputs (2major+87325049minor)pagefaults 0swaps
