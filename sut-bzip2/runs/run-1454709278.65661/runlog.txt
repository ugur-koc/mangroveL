===< 22304 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
5053d5052
< #include <stdlib.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
5069d5068
< #   include <sys/stat.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
5091d5090
< #     include <fcntl.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
361,429c361
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
751,754c751
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
811,819c811
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,814c811
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
1147,1154c1147
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
---
>    while (1) ;                                             \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
1526c1526
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_balanced :: parens >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
(84.3 %, 32083 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
(84.3 %, 32079 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
(84.3 %, 32075 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
(84.4 %, 32071 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree);
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
60,65c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
67,70c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
72,74c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
76,80c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
82,84c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress) ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
98,105c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API ( 
107,110c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API ( 
112,117c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API ( 
119,124c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
126,132c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API ( 
134,139c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API ( 
141,147c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API ( 
149,157c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
162,170c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
172,179c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API (
184,186c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
188,191c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
193,196c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API (
198,202c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzread) ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API (
204,208c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API (
210,212c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API (
214,216c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API (
218,221c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) ;
248c248
< #define True  ((Bool)1)
---
> #define True  
248c248
< #define True  ((Bool)1)
---
> #define True  (1)
249c249
< #define False ((Bool)0)
---
> #define False 
249c249
< #define False ((Bool)0)
---
> #define False (0)
(84.4 %, 32065 bytes)
249c249
< #define False ((Bool)0)
---
> #define False 
249c249
< #define False ((Bool)0)
---
> #define False (0)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertH \
(84.4 %, 32059 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertH \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
(84.4 %, 32045 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
259c259
<    fprintf(stderr,zf)
---
>    fprintf
(84.4 %, 32035 bytes)
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
259c259
<    fprintf(stderr,zf)
---
>    fprintf
(84.4 %, 32031 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
(84.4 %, 32020 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
(84.4 %, 32012 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
(84.4 %, 31997 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
(84.4 %, 31985 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
(84.4 %, 31966 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
(84.4 %, 31950 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
(84.4 %, 31927 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
(84.4 %, 31907 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
(84.4 %, 31880 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
(84.5 %, 31856 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)
(84.5 %, 31825 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)
(84.5 %, 31810 bytes)
272c272
< #define BZALLOC(nnn) (strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) 
272c272
< #define BZALLOC(nnn) (strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,,1)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->bzfree)
(84.5 %, 31796 bytes)
273c273
< #define BZFREE(ppp)  (strm->opaque,(ppp))
---
> #define BZFREE(ppp)  
273c273
< #define BZFREE(ppp)  (strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->opaque,)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + )
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK 
(84.5 %, 31776 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + )
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK 
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK ( ? 1 : 0)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if                                             \
(84.5 %, 31750 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if                                             \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
(84.5 %, 31734 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
(84.5 %, 31726 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
(84.5 %, 31718 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
(84.5 %, 31706 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (s->tPos & 0xff);           \
(84.5 %, 31700 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar);           \
(84.5 %, 31693 bytes)
599c599
<     cccc = (s->tPos & 0xff);           \
---
>     cccc = ;           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
(84.5 %, 31677 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (c_tPos & 0xff);            \
(84.5 %, 31671 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar);            \
(84.5 %, 31664 bytes)
604c604
<     cccc = (c_tPos & 0xff);            \
---
>     cccc = ;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
(84.6 %, 31649 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    
(84.6 %, 31644 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ( & 0xF)
(84.6 %, 31641 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ( & 0xF)
(84.6 %, 31581 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LL                          \
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
(84.6 %, 31576 bytes)
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
(84.6 %, 31573 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ( | (GET_LL4(i) << 16))
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((s->ll16[i]) | (GET_LL4(i) << 16))
(84.6 %, 31530 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
(84.6 %, 31524 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
(84.6 %, 31503 bytes)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
(84.6 %, 31494 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
(84.6 %, 31484 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
(84.6 %, 31467 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b)  ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ( < (b)) ? (a) : (b)
(84.6 %, 31462 bytes)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin  ? (a) : (b)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin ( < (b)) ? (a) : (b)
(84.7 %, 31451 bytes)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ?  : (b)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ? (a) : 
(84.7 %, 31448 bytes)
665c665
< #define fmin  ?  : (b)
---
> #define fmin  ?  : 
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
(84.7 %, 31445 bytes)
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
(84.7 %, 31438 bytes)
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
(84.7 %, 31431 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[ >> 5] |= (1 << ((zz) & 31))
(84.7 %, 31427 bytes)
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= 
(84.7 %, 31423 bytes)
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= 
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << )
(84.7 %, 31405 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~
(84.7 %, 31401 bytes)
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~
(84.7 %, 31397 bytes)
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << )
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ( & 31))
(84.7 %, 31379 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[ >> 5] & (1 << ((zz) & 31)))
(84.7 %, 31375 bytes)
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[ >> 5] & (1 << ((zz) & 31)))
(84.7 %, 31336 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH(zz)  bhtab[ >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ((zz) & 0x01f)
(84.7 %, 31332 bytes)
692c692
< #define      WORD_BH  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[ >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  
(84.7 %, 31328 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  
(84.7 %, 31324 bytes)
693c693
< #define UNALIGNED_BH  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  
693c693
< #define UNALIGNED_BH  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ( & 0x01f)
(84.7 %, 31310 bytes)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswap \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
(84.7 %, 31300 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b)  ? (a) : (b)
(84.7 %, 31283 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b)  ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) ( < (b)) ? (a) : (b)
(84.7 %, 31278 bytes)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin  ? (a) : (b)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin ( < (b)) ? (a) : (b)
(84.7 %, 31267 bytes)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ?  : (b)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ? (a) : 
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
(84.7 %, 31264 bytes)
732c732
< #define mmin  ?  : (b)
---
> #define mmin  ?  : 
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
(84.7 %, 31261 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
(84.8 %, 31251 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) 
(84.8 %, 31241 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) 
(84.8 %, 31237 bytes)
739c739
< #define mnextsize (nextHi[az]-nextLo[az])
---
> #define mnextsize 
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
(84.8 %, 31214 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
(84.8 %, 31207 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) 
(84.8 %, 31182 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[ << 8] - ftab[(b) << 8])
(84.8 %, 31179 bytes)
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ 
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[ << 8] - ftab[(b) << 8])
(84.8 %, 31142 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~)
(84.8 %, 31133 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~)
(84.8 %, 31121 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  ((zz0) & 0xffffff00)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ( & 0xffffff00)
(84.8 %, 31116 bytes)
793c793
< #define WEIGHTOF  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  
793c793
< #define WEIGHTOF  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  ( & 0xffffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ((zz1) & 0x000000ff)
(84.8 %, 31096 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ((zz1) & 0x000000ff)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   
(84.8 %, 31091 bytes)
794c794
< #define DEPTHOF   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   
794c794
< #define DEPTHOF   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ( & 0x000000ff)
(84.8 %, 31071 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) 
(84.8 %, 31062 bytes)
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX 
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ( > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ((zz2) >  ? (zz2) : (zz3))
(84.9 %, 31031 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTS                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF+WEIGHTOF(zw2)) |                    \
(84.9 %, 31022 bytes)
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF+WEIGHTOF(zw2)) |                    \
(84.9 %, 30993 bytes)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOF,DEPTHOF(zw2)))
(84.9 %, 30955 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAP                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
(84.9 %, 30952 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
898c898
<    for (i = 0; i < 256; i++)
---
>    for 
899c899
<       if (s->inUse[i]) {
---
>       if  {
(84.9 %, 30949 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
898c898
<    for (i = 0; i < 256; i++)
---
>    for 
899c899
<       if (s->inUse[i]) {
---
>       if  {
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for  s->mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for  yy[i] = (UChar) i;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] =  i;
(84.9 %, 30945 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
898c898
<    for (i = 0; i < 256; i++)
---
>    for 
899c899
<       if (s->inUse[i]) {
---
>       if  {
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for  s->mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for  yy[i] = (UChar) i;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] =  i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for  {
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ;
(84.9 %, 30938 bytes)
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for  {
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ;
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr <= i, "generateMTFValues" );
(84.9 %, 30903 bytes)
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if  j += s->nblock;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues" );
(84.9 %, 30858 bytes)
937c937
<       if (yy[0] == ll_i) { 
---
>       if  { 
941c941
<          if (zPend > 0) 
---
>          if  
948c948
<             ryy_j = &(yy[1]);
---
>             ryy_j = &;
950c950
<             while ( rll_i != rtmp ) ;
---
>             while  ;
952c952
<             j = ryy_j - &(yy[0]);
---
>             j = ryy_j - &;
959c959
<    if (zPend > 0) 
---
>    if  
993c993
< #define RETURN(rrr)                               \
---
> #define RETURN                               \
996c996
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
(84.9 %, 30853 bytes)
996c996
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
998c998
<    while (True) 
---
>    while  
1000c1000
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
(85.0 %, 30840 bytes)
998c998
<    while (True) 
---
>    while  
1000c1000
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
1001c1001
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
(85.0 %, 30834 bytes)
1000c1000
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
1001c1001
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
1003c1003
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
(85.0 %, 30825 bytes)
1001c1001
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
1003c1003
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
(85.0 %, 30814 bytes)
1003c1003
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
1004c1004
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
(85.0 %, 30805 bytes)
1004c1004
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
1007c1007
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
(85.0 %, 30794 bytes)
1007c1007
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
1031c1031
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
1037c1037
< int bz_config_ok ( void )
---
> int bz_config_ok 
(85.0 %, 30774 bytes)
1012c1012
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
1031c1031
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
1037c1037
< int bz_config_ok ( void )
---
> int bz_config_ok 
1043c1043
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc 
1047c1047
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
(85.0 %, 30766 bytes)
1043c1043
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc 
1047c1047
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
1053c1053
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
1059c1059
< void init_RL ( EState* s )
---
> void init_RL 
1064c1064
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL 
(85.0 %, 30725 bytes)
1047c1047
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
1053c1053
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
1059c1059
< void init_RL ( EState* s )
---
> void init_RL 
1064c1064
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL 
1069c1069
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1070,1073c1070
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1078c1078
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1080,1082c1080
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
---
>    if 
1085c1085
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1086c1086
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  strm->bzalloc = default_bzalloc;
1087c1087
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  strm->bzfree = default_bzfree;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC( sizeof );
1090c1090
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  return BZ_MEM_ERROR;
1098c1098
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC;
1098c1098
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC( n                  * sizeof );
(85.0 %, 30712 bytes)
1069c1069
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1070,1073c1070
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1078c1078
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1080,1082c1080
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
---
>    if 
1085c1085
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1086c1086
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  strm->bzalloc = default_bzalloc;
1087c1087
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  strm->bzfree = default_bzfree;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC;
1089c1089
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC( sizeof );
1090c1090
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  return BZ_MEM_ERROR;
1098c1098
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC;
1098c1098
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr1 = BZALLOC( n                  * sizeof );
1099c1099
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC;
1099c1099
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC(  * sizeof(UInt32) );
1099c1099
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof );
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC;
1100c1100
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 65537              * sizeof );
1102c1102
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if  
1113c1113
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = s->arr2;
1114c1114
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = s->arr1;
1116c1116
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = s->arr1;
(85.0 %, 30704 bytes)
1114c1114
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = s->arr1;
1116c1116
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = s->arr1;
1138c1138
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
(85.0 %, 30695 bytes)
1116c1116
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = s->arr1;
1138c1138
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
(85.0 %, 30686 bytes)
1138c1138
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
1152c1152
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress 
(85.0 %, 30676 bytes)
1152c1152
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress 
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1161c1161
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1163c1163
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1164c1164
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1167c1167
<    switch (s->mode) 
---
>    switch  
1173c1173
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1173c1173
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1176c1176
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1178c1178
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1179c1179
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if  BZFREE(s->arr1);
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREE;
1182c1182
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if  BZFREE(s->arr2);
(85.0 %, 30657 bytes)
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1157c1157
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1161c1161
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1163c1163
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1164c1164
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1167c1167
<    switch (s->mode) 
---
>    switch  
1173c1173
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1173c1173
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1176c1176
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1178c1178
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1179c1179
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if  BZFREE(s->arr1);
1181c1181
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREE;
1182c1182
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if  BZFREE(s->arr2);
1182c1182
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr2 != NULL) BZFREE;
1183c1183
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if  BZFREE(s->ftab);
1183c1183
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->ftab != NULL) BZFREE;
1184c1184
<    BZFREE(strm->state);
---
>    BZFREE;
1197c1197
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API 
1198,1200c1198
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      
1204c1204
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1206c1206
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1207c1207
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1208c1208
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1210c1210
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  strm->bzalloc = default_bzalloc;
1211c1211
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  strm->bzfree = default_bzfree;
1213c1213
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC;
1213c1213
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC( sizeof );
1214c1214
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  return BZ_MEM_ERROR;
1225c1225
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = small;
1238c1238
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST 
1249c1249
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL 
1254c1254
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API ( bz_stream *strm )
1254c1254
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) 
1257c1257
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1259c1259
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1260c1260
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1262c1262
<    while (True) 
---
>    while  
(85.0 %, 30651 bytes)
1238c1238
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST 
1249c1249
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL 
1254c1254
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API ( bz_stream *strm )
1254c1254
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) 
1257c1257
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1259c1259
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1260c1260
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1262c1262
<    while (True) 
---
>    while  
1264c1264
<    AssertH ( 0, 6001 );
---
>    AssertH ;
1271c1271
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
(85.0 %, 30645 bytes)
1264c1264
<    AssertH ( 0, 6001 );
---
>    AssertH ;
1271c1271
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1271c1271
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  
1274c1274
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1276c1276
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1277c1277
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if  return BZ_PARAM_ERROR;
1279c1279
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if  BZFREE(s->tt);
1279c1279
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s->tt   != NULL) BZFREE;
1280c1280
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if  BZFREE(s->ll16);
1280c1280
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->ll16 != NULL) BZFREE;
1281c1281
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if  BZFREE(s->ll4);
1281c1281
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->ll4  != NULL) BZFREE;
1283c1283
<    BZFREE(strm->state);
---
>    BZFREE;
1294c1294
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR                    \
1315c1315
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1316,1320c1316
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1325c1325
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1327,1330c1327
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>    if 
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>         ||
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>         ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        )
1333c1333
<    if (ferror(f))
---
>    if 
1333c1333
<    if (ferror(f))
---
>    if (ferror)
(85.0 %, 30640 bytes)
1315c1315
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1316,1320c1316
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1325c1325
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1327,1330c1327
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>    if 
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>         ||
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>         ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        )
1333c1333
<    if (ferror(f))
---
>    if 
1333c1333
<    if (ferror(f))
---
>    if (ferror)
(85.1 %, 30633 bytes)
1327,1330c1327
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>    if 
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>         ||
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>         ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        )
1333c1333
<    if (ferror(f))
---
>    if 
1333c1333
<    if (ferror(f))
---
>    if (ferror)
1336c1336
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
(85.1 %, 30630 bytes)
1336c1336
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
1336c1336
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeof );
1337c1337
<    if (bzf == NULL)
---
>    if 
1340c1340
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.1 %, 30612 bytes)
1337c1337
<    if (bzf == NULL)
---
>    if 
1340c1340
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1349c1349
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1350,1351c1350
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit ;
(85.1 %, 30605 bytes)
1349c1349
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1350,1351c1350
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit ;
1350c1350
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ret = BZ2_bzCompressInit ( &, blockSize100k, 
1352c1352
<    if (ret != BZ_OK)
---
>    if 
1363c1363
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1364,1367c1364
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1370c1370
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.1 %, 30520 bytes)
1351c1351
<    if (ret != BZ_OK)
---
>    if 
1362c1362
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1363,1366c1363
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1369c1369
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1371c1371
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.1 %, 30511 bytes)
1371c1371
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1372c1372
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1374c1374
<    if (!(bzf->writing))
---
>    if 
1374c1374
<    if (!(bzf->writing))
---
>    if (!)
1376c1376
<    if (ferror(bzf->handle))
---
>    if 
1376c1376
<    if (ferror(bzf->handle))
---
>    if (ferror)
(85.1 %, 30504 bytes)
1372c1372
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1374c1374
<    if (!(bzf->writing))
---
>    if 
1374c1374
<    if (!(bzf->writing))
---
>    if (!)
1376c1376
<    if (ferror(bzf->handle))
---
>    if 
1376c1376
<    if (ferror(bzf->handle))
---
>    if (ferror)
1379c1379
<    if (len == 0)
---
>    if 
1385c1385
<    while (True) {
---
>    while  {
1389c1389
<       if (ret != BZ_RUN_OK)
---
>       if 
1392c1392
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if  
1394c1394
<       if (bzf->strm.avail_in == 0)
---
>       if 
1401c1401
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1402,1406c1402
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
1408,1409c1408
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ;
(85.1 %, 30491 bytes)
1379c1379
<    if (len == 0)
---
>    if 
1385c1385
<    while (True) {
---
>    while  {
1389c1389
<       if (ret != BZ_RUN_OK)
---
>       if 
1392c1392
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if  
1394c1394
<       if (bzf->strm.avail_in == 0)
---
>       if 
1401c1401
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1402,1406c1402
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
1408,1409c1408
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ;
1413c1413
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
1414,1420c1414
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   
1423c1423
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30408 bytes)
1412c1412
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
1413,1419c1413
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   
1422c1422
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1424c1424
<    if (bzf == NULL)
---
>    if 
1426c1426
<    if (!(bzf->writing))
---
>    if 
1426c1426
<    if (!(bzf->writing))
---
>    if (!)
1428c1428
<    if (ferror(bzf->handle))
---
>    if 
1428c1428
<    if (ferror(bzf->handle))
---
>    if (ferror)
(85.2 %, 30399 bytes)
1424c1424
<    if (bzf == NULL)
---
>    if 
1426c1426
<    if (!(bzf->writing))
---
>    if 
1426c1426
<    if (!(bzf->writing))
---
>    if (!)
1428c1428
<    if (ferror(bzf->handle))
---
>    if 
1428c1428
<    if (ferror(bzf->handle))
---
>    if (ferror)
1431c1431
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if  *nbytes_in_lo32 = 0;
1432c1432
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if  *nbytes_in_hi32 = 0;
1433c1433
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if  *nbytes_out_lo32 = 0;
1434c1434
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if  *nbytes_out_hi32 = 0;
1436c1436
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if  
1436c1436
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if ( && bzf->lastErr == BZ_OK) 
1438c1438
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  
1438c1438
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  ) 
(85.2 %, 30386 bytes)
1431c1431
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if  *nbytes_in_lo32 = 0;
1432c1432
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if  *nbytes_in_hi32 = 0;
1433c1433
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if  *nbytes_out_lo32 = 0;
1434c1434
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if  *nbytes_out_hi32 = 0;
1436c1436
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if  
1436c1436
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if ( && bzf->lastErr == BZ_OK) 
1438c1438
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  
1438c1438
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  ) 
1440c1440
<    if (nbytes_in_lo32 != NULL)
---
>    if 
1442c1442
<    if (nbytes_in_hi32 != NULL)
---
>    if 
1444c1444
<    if (nbytes_out_lo32 != NULL)
---
>    if 
1446c1446
<    if (nbytes_out_hi32 != NULL)
---
>    if 
1449c1449
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30371 bytes)
1440c1440
<    if (nbytes_in_lo32 != NULL)
---
>    if 
1442c1442
<    if (nbytes_in_hi32 != NULL)
---
>    if 
1444c1444
<    if (nbytes_out_lo32 != NULL)
---
>    if 
1446c1446
<    if (nbytes_out_hi32 != NULL)
---
>    if 
1449c1449
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1456c1456
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_API 
1457,1462c1457
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    
1467c1467
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30364 bytes)
1456c1456
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_API 
1457,1462c1457
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    
1467c1467
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1469,1473c1469
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if 
1470c1470
<        (small != 0 && small != 1) ||
---
>         ||
1471c1471
<        (verbosity < 0 || verbosity > 4) ||
---
>         ||
1472c1472
<        (unused == NULL && nUnused != 0) ||
---
>         ||
1473c1473
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
1473c1473
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && ))
1476c1476
<    if (ferror(f))
---
>    if 
1476c1476
<    if (ferror(f))
---
>    if (ferror)
(85.2 %, 30357 bytes)
1469,1473c1469
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if 
1470c1470
<        (small != 0 && small != 1) ||
---
>         ||
1471c1471
<        (verbosity < 0 || verbosity > 4) ||
---
>         ||
1472c1472
<        (unused == NULL && nUnused != 0) ||
---
>         ||
1473c1473
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
1473c1473
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && ))
1476c1476
<    if (ferror(f))
---
>    if 
1476c1476
<    if (ferror(f))
---
>    if (ferror)
1479c1479
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
(85.2 %, 30354 bytes)
1479c1479
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ;
1479c1479
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeof );
1480c1480
<    if (bzf == NULL) 
---
>    if  
1483c1483
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30336 bytes)
1480c1480
<    if (bzf == NULL) 
---
>    if  
1483c1483
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1493c1493
<    while (nUnused > 0) 
---
>    while  
1495c1495
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ;
(85.2 %, 30329 bytes)
1493c1493
<    while (nUnused > 0) 
---
>    while  
1495c1495
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ;
1495c1495
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( &, verbosity, small );
1496c1496
<    if (ret != BZ_OK)
---
>    if 
1508c1508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API ( int *bzerror, BZFILE *b )
1508c1508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) 
1510c1510
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30295 bytes)
1496c1496
<    if (ret != BZ_OK)
---
>    if 
1508c1508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API ( int *bzerror, BZFILE *b )
1508c1508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) 
1510c1510
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1512c1512
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30286 bytes)
1512c1512
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1513c1513
<    if (bzf == NULL)
---
>    if 
1516c1516
<    if (bzf->writing)
---
>    if 
1519c1519
<    if (bzf->initialisedOk)
---
>    if 
1520c1520
<       (void)0;
---
>       0;
(85.2 %, 30279 bytes)
1513c1513
<    if (bzf == NULL)
---
>    if 
1516c1516
<    if (bzf->writing)
---
>    if 
1519c1519
<    if (bzf->initialisedOk)
---
>    if 
1520c1520
<       (void)0;
---
>       0;
1526c1526
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API 
1527,1530c1527
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
1533c1533
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30273 bytes)
1526c1526
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API 
1527,1530c1527
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
1533c1533
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1535c1535
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1537c1537
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
(85.2 %, 30264 bytes)
1535c1535
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1537c1537
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1540c1540
<    if (bzf->writing)
---
>    if 
1543c1543
<    if (len == 0)
---
>    if 
1549c1549
<    while (True) 
---
>    while  
1556c1556
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1557,1560c1557
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
1562c1562
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
(85.2 %, 30257 bytes)
1537c1537
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1540c1540
<    if (bzf->writing)
---
>    if 
1543c1543
<    if (len == 0)
---
>    if 
1549c1549
<    while (True) 
---
>    while  
1556c1556
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1557,1560c1557
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
1562c1562
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1563c1563
<    if (bzf == NULL)
---
>    if 
1565c1565
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if 
1567c1567
<    if (unused == NULL || nUnused == NULL)
---
>    if 
1570c1570
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
(85.2 %, 30248 bytes)
1563c1563
<    if (bzf == NULL)
---
>    if 
1565c1565
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if 
1567c1567
<    if (unused == NULL || nUnused == NULL)
---
>    if 
1570c1570
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1581c1581
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API 
1582,1588c1582
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          
1593,1597c1593
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>    if  
1600c1600
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1605c1605
<    if (ret != BZ_OK) return ret;
---
>    if  return ret;
1613c1613
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if  goto output_overflow;
1614c1614
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if  goto errhandler;
1632c1632
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API 
1633,1638c1633
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            
(85.2 %, 30241 bytes)
1581c1581
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API 
1582,1588c1582
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          
1593,1597c1593
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>    if  
1600c1600
<    if (workFactor == 0) workFactor = 30;
---
>    if  workFactor = 30;
1605c1605
<    if (ret != BZ_OK) return ret;
---
>    if  return ret;
1613c1613
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if  goto output_overflow;
1614c1614
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if  goto errhandler;
1632c1632
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API 
1633,1638c1633
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            
1643,1646c1643
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if  
1645c1645
<        (small != 0 && small != 1) ||
---
>         ||
1653c1653
<    if (ret != BZ_OK) return ret;
---
>    if  return ret;
1661c1661
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if  goto output_overflow_or_eof;
1662c1662
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if  goto errhandler;
1670c1670
<    if (strm.avail_out > 0) {
---
>    if  {
1687c1687
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(void)
1687c1687
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)
1697,1700c1697
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                      
1706c1706
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API
1707,1708c1707
<                ( const char *path,
<                  const char *mode )
---
>                
1715c1715
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API
1716,1717c1716
<                ( int fd,
<                  const char *mode )
---
>                
1719c1719
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen;
1724c1724
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1724c1724
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1727c1727
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
1727c1727
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (->lastErr == BZ_STREAM_END) return 0;
1727c1727
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((b)->lastErr == BZ_STREAM_END) return 0;
1729c1729
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if  {
1738c1738
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1738c1738
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) 
1743c1743
<    if(bzerr == BZ_OK){
---
>    if{
1752c1752
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API (BZFILE *b)
1752c1752
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) 
(85.3 %, 30225 bytes)
1724c1724
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1724c1724
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1727c1727
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
1727c1727
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (->lastErr == BZ_STREAM_END) return 0;
1727c1727
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((b)->lastErr == BZ_STREAM_END) return 0;
1729c1729
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if  {
1738c1738
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1738c1738
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) 
1743c1743
<    if(bzerr == BZ_OK){
---
>    if{
1752c1752
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API (BZFILE *b)
1752c1752
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) 
1760c1760
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API (BZFILE* b)
1760c1760
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) 
1763c1763
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = ->handle;
1763c1763
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (b)->handle;
1765c1765
<    if (b==NULL) 
---
>    if  
1766c1766
<    if(((bzFile*)b)->writing){
---
>    if{
1766c1766
<    if(((bzFile*)b)->writing){
---
>    if(->writing){
1766c1766
<    if(((bzFile*)b)->writing){
---
>    if((b)->writing){
1767c1767
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       BZ2_bzWriteClose;
1768c1768
<       if(bzerr != BZ_OK){
---
>       if{
1769c1769
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteClose;
(85.3 %, 30203 bytes)
1768c1768
<       if(bzerr != BZ_OK){
---
>       if{
1769c1769
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteClose;
1772c1772
<    if(fp!=stdin && fp!=stdout){
---
>    if{
1773c1773
<       fclose(fp);
---
>       fclose;
(85.3 %, 30183 bytes)
1772c1772
<    if(fp!=stdin && fp!=stdout){
---
>    if{
1773c1773
<       fclose(fp);
---
>       fclose;
1800c1800
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API (BZFILE *b, int *errnum)
1800c1800
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) 
1802c1802
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ->lastErr;
1802c1802
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (b)->lastErr;
1804c1804
<    if(err>0) err = 0;
---
>    if err = 0;
1848c1848
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOF       
(85.3 %, 30179 bytes)
1800c1800
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API (BZFILE *b, int *errnum)
1800c1800
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) 
1802c1802
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ->lastErr;
1802c1802
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (b)->lastErr;
1804c1804
<    if(err>0) err = 0;
---
>    if err = 0;
1848c1848
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOF       
1849c1849
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
(85.3 %, 30176 bytes)
1849c1849
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
1850c1850
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
1866c1866
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
(85.3 %, 30173 bytes)
1850c1850
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
1866c1866
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
(85.3 %, 30170 bytes)
1866c1866
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
1867c1867
<       root=snocString((root), (name))
---
>       root=snocString
(85.3 %, 30158 bytes)
1867c1867
<       root=snocString((root), (name))
---
>       root=snocString
1867c1867
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
(85.3 %, 30142 bytes)
1869c1869
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAG \
1870c1870
<       root=snocString((root), (name))
---
>       root=snocString
1870c1870
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
(85.3 %, 30130 bytes)
1870c1870
<       root=snocString((root), (name))
---
>       root=snocString
1870c1870
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
1870c1870
<       root=snocString((root), (name))
---
>       root=snocString((root), )
(85.3 %, 30114 bytes)
1872c1872
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE 
1883c1883
< #define True  ((Bool)1)
---
> #define True  
1883c1883
< #define True  ((Bool)1)
---
> #define True  (1)
(85.3 %, 30110 bytes)
1883c1883
< #define True  ((Bool)1)
---
> #define True  
1883c1883
< #define True  ((Bool)1)
---
> #define True  (1)
(85.3 %, 30101 bytes)
1884c1884
< #define False ((Bool)0)
---
> #define False 
1884c1884
< #define False ((Bool)0)
---
> #define False (0)
2144c2144
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, (s))==0)
(85.3 %, 30092 bytes)
2144c2144
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, (s))==0)
2144c2144
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) 
2144c2144
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) (strcmp==0)
(85.3 %, 30089 bytes)
2144c2144
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG 
2144c2144
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp==0)
2144c2144
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, )==0)
(85.3 %, 30063 bytes)
2146c2146
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main 
(85.3 %, 30031 bytes)
===< pass_balanced :: angles-only >===
52c52
< #include <stdio.h>
---
> #include stdio.h
233c233
< #include <stdlib.h>
---
> #include stdlib.h
898,899c898,899
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i  256; i++)
>       if (s-inUse[i]) {
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i = EOB; i++) s-mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] =  i;
---
>    for (i = 0; i  s-nInUse; i++) yy[i] =  i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i  s-nblock; i++) {
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j  0) j += s-nblock;
1081c1081
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1082c1082
<        workFactor < 0 || workFactor > 250)
---
>        workFactor  0 || workFactor  250)
1208c1208
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity  0 || verbosity  4) return BZ_PARAM_ERROR;
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        (blockSize100k  1 || blockSize100k  9) ||
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor  0 || workFactor  250) ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity  0 || verbosity  4))
1372c1372
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1374c1374
<    if (!(bzf->writing))
---
>    if (!(bzf-writing))
1392c1392
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf->strm.avail_out  BZ_MAX_UNUSED) 
1394c1394
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf-strm.avail_in == 0)
1471c1471
<        (verbosity < 0 || verbosity > 4) ||
---
>        (verbosity  0 || verbosity  4) ||
1473c1473
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused  0 || nUnused  BZ_MAX_UNUSED)))
1537c1537
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1540c1540
<    if (bzf->writing)
---
>    if (bzf-writing)
1595c1595
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1596c1596
<        verbosity < 0 || verbosity > 4 ||
---
>        verbosity  0 || verbosity  4 ||
1597c1597
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor  0 || workFactor  250) 
1646c1646
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity  0 || verbosity  4) 
1845c1845
< #include <signal.h>
---
> #include signal.h
1846c1846
< #include <errno.h>
---
> #include errno.h
1857c1857
< #   include <fcntl.h>
---
> #   include fcntl.h
1858c1858
< #   include <utime.h>
---
> #   include utime.h
===< pass_clang :: param-to-local >===
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ( void );
1031c1031
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail ( void )
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
895a896
>    EState * s = 0;
(85.4 %, 30017 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
895a896
>    EState * s = 0;
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
909a910
>    EState * s = 0;
(85.3 %, 30031 bytes)
909c909
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
910a911
>    EState * s = 0;
1048c1048
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
(85.3 %, 30045 bytes)
1049c1049
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
1049c1049
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree ( void* opaque )
1055c1055
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
(85.3 %, 30032 bytes)
1049c1049
< void default_bzfree (  void* addr )
---
> void default_bzfree (  void )
1055c1055
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
(85.3 %, 30026 bytes)
1055c1055
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
1061c1061
< void init_RL ( EState* s )
---
> void init_RL ( void )
(85.4 %, 30021 bytes)
1061c1061
< void init_RL ( EState* s )
---
> void init_RL ( void )
1240c1240
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
(85.4 %, 30016 bytes)
1240c1240
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
1251c1251
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
(85.4 %, 30011 bytes)
1251c1251
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
1699c1699
<                ( const char *path,   
---
>                (    
(85.4 %, 30006 bytes)
1699c1699
<                ( const char *path,   
---
>                (    
1700c1700
<                  int fd,             
---
>                               
(85.4 %, 29989 bytes)
1700c1700
<                  int fd,             
---
>                               
1701c1701
<                  const char *mode,
---
>                  
(85.4 %, 29982 bytes)
1701c1701
<                  const char *mode,
---
>                  
1701,1702c1701
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
(85.4 %, 29965 bytes)
1702c1702
<                  int open_mode)      
---
>                  void)      
(85.4 %, 29956 bytes)
===< pass_clang :: union-to-struct >===
===< pass_clang :: reduce-pointer-level >===
1535c1535
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1542c1542
<    if (bzf->writing)
---
>    if (bzf.writing)
1548,1549c1548,1549
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
374c374
<       UInt32*  ptr;
---
>       UInt32  ptr;
919c919
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = &s->ptr;
1118c1118
<    s->ptr               = s->arr1;
---
>    s->ptr               = *s->arr1;
946c946
<             register UChar* ryy_j;
---
>             register UChar ryy_j;
950c950
<             ryy_j = &(yy[1]);
---
>             ryy_j = (yy[1]);
954c954
<             j = ryy_j - &(yy[0]);
---
>             j = &ryy_j - &(yy[0]);
920c920
<    UChar* block  = s->block;
---
>    UChar block  = *(s->block);
936c936
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[&block[j]];
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
1217c1217
<    s->strm                  = strm;
---
>    s->strm                  = *strm;
1262c1262
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
1279c1279
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
(85.4 %, 29957 bytes)
588c588
<       Int32*   save_gPerm;
---
>       Int32   save_gPerm;
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
(85.4 %, 29956 bytes)
911c911
<    EState * s = 0;
---
>    EState  s ;
919,921c919,921
<    UInt32* ptr   = &s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = &s.ptr;
>    UChar* block  = s.block;
>    UInt16* mtfv  = s.mtfv;
924c924
<    EOB = s->nInUse+1;
---
>    EOB = s.nInUse+1;
926c926
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i <= EOB; i++) s.mtfFreq[i] = 0;
930c930
<    for (i = 0; i < s->nInUse; i++) yy[i] =  i;
---
>    for (i = 0; i < s.nInUse; i++) yy[i] =  i;
932c932
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s.nblock; i++) {
935,936c935,936
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       j = ptr[i]-1; if (j < 0) j += s.nblock;
>       ll_i = s.unseqToSeq[block[j]];
955c955
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv[wr] = j+1; wr++; s.mtfFreq[j+1]++;
963c963
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv[wr] = EOB; wr++; s.mtfFreq[EOB]++;
965c965
<    s->nMTF = wr;
---
>    s.nMTF = wr;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
1535c1535
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1542c1542
<    if (bzf->writing)
---
>    if (bzf.writing)
1548,1549c1548,1549
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
1217c1217
<    s->strm                  = strm;
---
>    s->strm                  = *strm;
1262c1262
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
1279c1279
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
(85.4 %, 29940 bytes)
1371c1371
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1376c1376
<    if (!(bzf->writing))
---
>    if (!(bzf.writing))
1384,1385c1384,1385
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    bzf.strm.avail_in = len;
>    bzf.strm.next_in  = buf;
1388,1389c1388,1389
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf.strm.avail_out = BZ_MAX_UNUSED;
>       bzf.strm.next_out = bzf.buf;
1394c1394
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf.strm.avail_out < BZ_MAX_UNUSED) 
1396c1396
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf.strm.avail_in == 0)
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
1275c1275
<    DState* s;
---
>    DState s;
1277c1277
<    s = strm->state;
---
>    s = *strm->state;
1279c1279
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s.strm != strm) return BZ_PARAM_ERROR;
946c946
<             register UChar* ryy_j;
---
>             register UChar ryy_j;
950c950
<             ryy_j = &(yy[1]);
---
>             ryy_j = (yy[1]);
954c954
<             j = ryy_j - &(yy[0]);
---
>             j = &ryy_j - &(yy[0]);
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
1217c1217
<    s->strm                  = strm;
---
>    s->strm                  = *strm;
1262c1262
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
1279c1279
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
1093c1093
<    s->strm = strm;
---
>    s->strm = *strm;
1166c1166
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
1181c1181
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
1258c1258
<    DState* s;
---
>    DState s;
1260c1260
<    s = strm->state;
---
>    s = *strm->state;
1262c1262
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s.strm != strm) return BZ_PARAM_ERROR;
(85.4 %, 29942 bytes)
1535c1535
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1542c1542
<    if (bzf->writing)
---
>    if (bzf.writing)
1548,1549c1548,1549
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
920c920
<    UChar* block  = s.block;
---
>    UChar block  = *(s.block);
936c936
<       ll_i = s.unseqToSeq[block[j]];
---
>       ll_i = s.unseqToSeq[&block[j]];
919c919
<    UInt32* ptr   = &s.ptr;
---
>    UInt32 ptr   = s.ptr;
935c935
<       j = ptr[i]-1; if (j < 0) j += s.nblock;
---
>       j = &ptr[i]-1; if (j < 0) j += s.nblock;
1275c1275
<    DState* s;
---
>    DState s;
1277c1277
<    s = strm->state;
---
>    s = *strm->state;
1279c1279
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
37c37
<       char *next_out;
---
>       char next_out;
1389c1389
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->strm.next_out = *bzf->buf;
1549c1549
<    bzf->strm.next_out = buf;
---
>    bzf->strm.next_out = *buf;
1610c1610
<    strm.next_out = dest;
---
>    strm.next_out = *dest;
1658c1658
<    strm.next_out = dest;
---
>    strm.next_out = *dest;
1177c1177
<    EState* s;
---
>    EState s;
1179c1179
<    s = strm->state;
---
>    s = *strm->state;
1181c1181
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s.strm != strm) return BZ_PARAM_ERROR;
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
1093c1093
<    s->strm = strm;
---
>    s->strm = *strm;
1166c1166
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
1181c1181
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != strm) return BZ_PARAM_ERROR;
1162c1162
<    EState* s;
---
>    EState s;
1164c1164
<    s = strm->state;
---
>    s = *strm->state;
1166c1166
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s.strm != strm) return BZ_PARAM_ERROR;
1169c1169
<    switch (s->mode) 
---
>    switch (s.mode) 
32c32
<       char *next_in;
---
>       char next_in;
1385c1385
<    bzf->strm.next_in  = buf;
---
>    bzf->strm.next_in  = *buf;
1574c1574
<    *unused = bzf->strm.next_in;
---
>    *unused = &bzf->strm.next_in;
1609c1609
<    strm.next_in = source;
---
>    strm.next_in = *source;
1657c1657
<    strm.next_in = source;
---
>    strm.next_in = *source;
1275c1275
<    DState* s;
---
>    DState s;
1277c1277
<    s = strm->state;
---
>    s = *strm->state;
1279c1279
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
(85.4 %, 29944 bytes)
37c37
<       char *next_out;
---
>       char next_out;
1389c1389
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->strm.next_out = *bzf->buf;
1549c1549
<    bzf->strm.next_out = buf;
---
>    bzf->strm.next_out = *buf;
1610c1610
<    strm.next_out = dest;
---
>    strm.next_out = *dest;
1658c1658
<    strm.next_out = dest;
---
>    strm.next_out = *dest;
377c377
<       UChar*   zbits;
---
>       UChar   zbits;
946c946
<             register UChar* ryy_j;
---
>             register UChar ryy_j;
950c950
<             ryy_j = &(yy[1]);
---
>             ryy_j = (yy[1]);
954c954
<             j = ryy_j - &(yy[0]);
---
>             j = &ryy_j - &(yy[0]);
1162c1162
<    EState* s;
---
>    EState s;
1164c1164
<    s = strm->state;
---
>    s = *strm->state;
1166c1166
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1169c1169
<    switch (s->mode) 
---
>    switch (s.mode) 
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
(85.4 %, 29943 bytes)
1162c1162
<    EState* s;
---
>    EState s;
1164c1164
<    s = strm->state;
---
>    s = *strm->state;
1166c1166
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1169c1169
<    switch (s->mode) 
---
>    switch (s.mode) 
1177c1177
<    EState* s;
---
>    EState s;
1179c1179
<    s = strm->state;
---
>    s = *strm->state;
1181c1181
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1258c1258
<    DState* s;
---
>    DState s;
1260c1260
<    s = strm->state;
---
>    s = *strm->state;
1262c1262
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1275c1275
<    DState* s;
---
>    DState s;
1277c1277
<    s = strm->state;
---
>    s = *strm->state;
1279c1279
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
1371c1371
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1376c1376
<    if (!(bzf->writing))
---
>    if (!(bzf.writing))
1384,1385c1384,1385
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    bzf.strm.avail_in = len;
>    bzf.strm.next_in  = buf;
1388,1389c1388,1389
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf.strm.avail_out = BZ_MAX_UNUSED;
>       bzf.strm.next_out = bzf.buf;
1394c1394
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf.strm.avail_out < BZ_MAX_UNUSED) 
1396c1396
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf.strm.avail_in == 0)
1424c1424
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1428c1428
<    if (!(bzf->writing))
---
>    if (!(bzf.writing))
1512c1512
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1518c1518
<    if (bzf->writing)
---
>    if (bzf.writing)
1521c1521
<    if (bzf->initialisedOk)
---
>    if (bzf.initialisedOk)
1535c1535
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1542c1542
<    if (bzf->writing)
---
>    if (bzf.writing)
1548,1549c1548,1549
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
1564c1564
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1567c1567
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf.lastErr != BZ_STREAM_END)
1573,1574c1573,1574
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *nUnused = bzf.strm.avail_in;
>    *unused = bzf.strm.next_in;
1782,1799c1782
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char bzerrorstrings[] = {a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a};
1808c1791
<    return bzerrorstrings[err*-1];
---
>    return &bzerrorstrings[err*-1];
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: move-function-body >===
===< pass_clang :: replace-one-level-typedef-type >===
240c240
< typedef char            Char;
---
> 
1302c1302
<       Char      buf[BZ_MAX_UNUSED];
---
>       char      buf[BZ_MAX_UNUSED];
1889c1889
< typedef int IntNative;
---
> 
2148c2148
< IntNative main 
---
> int main 
(85.4 %, 29914 bytes)
1889c1889
< typedef int IntNative;
---
> 
2148c2148
< IntNative main 
---
> int main 
(85.4 %, 29886 bytes)
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: empty-struct-to-int >===
1945,1946c1945
<    struct  
<    UInt64;
---
>    
2125c2125
<    struct zzzz 
---
>     int 
(85.4 %, 29879 bytes)
===< pass_ints :: c >===
===< pass_ints :: d >===
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 66   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 90   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 104   
(85.4 %, 29877 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 90   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 104   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 48   
(85.4 %, 29875 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 104   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 48   
(85.4 %, 29874 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 48   
(85.4 %, 29872 bytes)
===< pass_ints :: e >===
2126c2126
<    Cell;
---
>    Ce;
(85.4 %, 29870 bytes)
Termination check: size was 204936; now 29870
===< pass_ternary :: c >===
===< pass_clang :: local-to-global >===
892a893
> EState *makeMaps_e_s = 0;
896c897
<    EState * s = 0;
---
>    
898c899
<    s->nInUse = 0;
---
>    makeMaps_e_s->nInUse = 0;
900,902c901,903
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (makeMaps_e_s->inUse[i]) {
>          makeMaps_e_s->unseqToSeq[i] = makeMaps_e_s->nInUse;
>          makeMaps_e_s->nInUse++;
892a893
> Int32 makeMaps_e_i;
897c898
<    Int32 i;
---
>    
899,901c900,902
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (makeMaps_e_i = 0; makeMaps_e_i < 256; makeMaps_e_i++)
>       if (s->inUse[makeMaps_e_i]) {
>          s->unseqToSeq[makeMaps_e_i] = s->nInUse;
(85.4 %, 29936 bytes)
893a894
> Int32 makeMaps_e_i;
898c899
<    Int32 i;
---
>    
900,902c901,903
<    for (i = 0; i < 256; i++)
<       if (makeMaps_e_s->inUse[i]) {
<          makeMaps_e_s->unseqToSeq[i] = makeMaps_e_s->nInUse;
---
>    for (makeMaps_e_i = 0; makeMaps_e_i < 256; makeMaps_e_i++)
>       if (makeMaps_e_s->inUse[makeMaps_e_i]) {
>          makeMaps_e_s->unseqToSeq[makeMaps_e_i] = makeMaps_e_s->nInUse;
908a909
> EState generateMTFValues_s;
912c913
<    EState  s ;
---
>    
920,922c921,923
<    UInt32* ptr   = &s.ptr;
<    UChar* block  = s.block;
<    UInt16* mtfv  = s.mtfv;
---
>    UInt32* ptr   = &generateMTFValues_s.ptr;
>    UChar* block  = generateMTFValues_s.block;
>    UInt16* mtfv  = generateMTFValues_s.mtfv;
925c926
<    EOB = s.nInUse+1;
---
>    EOB = generateMTFValues_s.nInUse+1;
927c928
<    for (i = 0; i <= EOB; i++) s.mtfFreq[i] = 0;
---
>    for (i = 0; i <= EOB; i++) generateMTFValues_s.mtfFreq[i] = 0;
931c932
<    for (i = 0; i < s.nInUse; i++) yy[i] =  i;
---
>    for (i = 0; i < generateMTFValues_s.nInUse; i++) yy[i] =  i;
933c934
<    for (i = 0; i < s.nblock; i++) {
---
>    for (i = 0; i < generateMTFValues_s.nblock; i++) {
936,937c937,938
<       j = ptr[i]-1; if (j < 0) j += s.nblock;
<       ll_i = s.unseqToSeq[block[j]];
---
>       j = ptr[i]-1; if (j < 0) j += generateMTFValues_s.nblock;
>       ll_i = generateMTFValues_s.unseqToSeq[block[j]];
956c957
<             mtfv[wr] = j+1; wr++; s.mtfFreq[j+1]++;
---
>             mtfv[wr] = j+1; wr++; generateMTFValues_s.mtfFreq[j+1]++;
964c965
<    mtfv[wr] = EOB; wr++; s.mtfFreq[EOB]++;
---
>    mtfv[wr] = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
966c967
<    s.nMTF = wr;
---
>    generateMTFValues_s.nMTF = wr;
(85.4 %, 30003 bytes)
909a910
> EState generateMTFValues_s;
913c914
<    EState  s ;
---
>    
921,923c922,924
<    UInt32* ptr   = &s.ptr;
<    UChar* block  = s.block;
<    UInt16* mtfv  = s.mtfv;
---
>    UInt32* ptr   = &generateMTFValues_s.ptr;
>    UChar* block  = generateMTFValues_s.block;
>    UInt16* mtfv  = generateMTFValues_s.mtfv;
926c927
<    EOB = s.nInUse+1;
---
>    EOB = generateMTFValues_s.nInUse+1;
928c929
<    for (i = 0; i <= EOB; i++) s.mtfFreq[i] = 0;
---
>    for (i = 0; i <= EOB; i++) generateMTFValues_s.mtfFreq[i] = 0;
932c933
<    for (i = 0; i < s.nInUse; i++) yy[i] =  i;
---
>    for (i = 0; i < generateMTFValues_s.nInUse; i++) yy[i] =  i;
934c935
<    for (i = 0; i < s.nblock; i++) {
---
>    for (i = 0; i < generateMTFValues_s.nblock; i++) {
937,938c938,939
<       j = ptr[i]-1; if (j < 0) j += s.nblock;
<       ll_i = s.unseqToSeq[block[j]];
---
>       j = ptr[i]-1; if (j < 0) j += generateMTFValues_s.nblock;
>       ll_i = generateMTFValues_s.unseqToSeq[block[j]];
957c958
<             mtfv[wr] = j+1; wr++; s.mtfFreq[j+1]++;
---
>             mtfv[wr] = j+1; wr++; generateMTFValues_s.mtfFreq[j+1]++;
965c966
<    mtfv[wr] = EOB; wr++; s.mtfFreq[EOB]++;
---
>    mtfv[wr] = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
967c968
<    s.nMTF = wr;
---
>    generateMTFValues_s.nMTF = wr;
909a910
> UChar generateMTFValues_yy[256];
914c915
<    UChar   yy[256];
---
>    
932c933
<    for (i = 0; i < s.nInUse; i++) yy[i] =  i;
---
>    for (i = 0; i < s.nInUse; i++) generateMTFValues_yy[i] =  i;
941c942
<       if (yy[0] == ll_i) { 
---
>       if (generateMTFValues_yy[0] == ll_i) { 
950,952c951,953
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
---
>             rtmp  = generateMTFValues_yy[1];
>             generateMTFValues_yy[1] = generateMTFValues_yy[0];
>             ryy_j = &(generateMTFValues_yy[1]);
955,956c956,957
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             generateMTFValues_yy[0] = rtmp;
>             j = ryy_j - &(generateMTFValues_yy[0]);
(85.2 %, 30236 bytes)
910a911
> UChar generateMTFValues_yy[256];
915c916
<    UChar   yy[256];
---
>    
933c934
<    for (i = 0; i < generateMTFValues_s.nInUse; i++) yy[i] =  i;
---
>    for (i = 0; i < generateMTFValues_s.nInUse; i++) generateMTFValues_yy[i] =  i;
942c943
<       if (yy[0] == ll_i) { 
---
>       if (generateMTFValues_yy[0] == ll_i) { 
951,953c952,954
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
---
>             rtmp  = generateMTFValues_yy[1];
>             generateMTFValues_yy[1] = generateMTFValues_yy[0];
>             ryy_j = &(generateMTFValues_yy[1]);
956,957c957,958
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             generateMTFValues_yy[0] = rtmp;
>             j = ryy_j - &(generateMTFValues_yy[0]);
910a911
> Int32 generateMTFValues_i;
916c917
<    Int32   i, j;
---
>    Int32    j;
929c930
<    for (i = 0; i <= EOB; i++) generateMTFValues_s.mtfFreq[i] = 0;
---
>    for (generateMTFValues_i = 0; generateMTFValues_i <= EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
933c934
<    for (i = 0; i < generateMTFValues_s.nInUse; i++) yy[i] =  i;
---
>    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++) yy[generateMTFValues_i] =  generateMTFValues_i;
935c936
<    for (i = 0; i < generateMTFValues_s.nblock; i++) {
---
>    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nblock; generateMTFValues_i++) {
938c939
<       j = ptr[i]-1; if (j < 0) j += generateMTFValues_s.nblock;
---
>       j = ptr[generateMTFValues_i]-1; if (j < 0) j += generateMTFValues_s.nblock;
(85.2 %, 30397 bytes)
911a912
> Int32 generateMTFValues_i;
917c918
<    Int32   i, j;
---
>    Int32    j;
930c931
<    for (i = 0; i <= EOB; i++) generateMTFValues_s.mtfFreq[i] = 0;
---
>    for (generateMTFValues_i = 0; generateMTFValues_i <= EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
934c935
<    for (i = 0; i < generateMTFValues_s.nInUse; i++) generateMTFValues_yy[i] =  i;
---
>    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++) generateMTFValues_yy[generateMTFValues_i] =  generateMTFValues_i;
936c937
<    for (i = 0; i < generateMTFValues_s.nblock; i++) {
---
>    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nblock; generateMTFValues_i++) {
939c940
<       j = ptr[i]-1; if (j < 0) j += generateMTFValues_s.nblock;
---
>       j = ptr[generateMTFValues_i]-1; if (j < 0) j += generateMTFValues_s.nblock;
911a912
> Int32 generateMTFValues_j;
917c918
<    Int32   i, j;
---
>    Int32   i;
939,940c940,941
<       j = ptr[i]-1; if (j < 0) j += generateMTFValues_s.nblock;
<       ll_i = generateMTFValues_s.unseqToSeq[block[j]];
---
>       generateMTFValues_j = ptr[i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
>       ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
958,959c959,960
<             j = ryy_j - &(generateMTFValues_yy[0]);
<             mtfv[wr] = j+1; wr++; generateMTFValues_s.mtfFreq[j+1]++;
---
>             generateMTFValues_j = ryy_j - &(generateMTFValues_yy[0]);
>             mtfv[wr] = generateMTFValues_j+1; wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
911a912
> Int32 generateMTFValues_zPend;
918c919
<    Int32   zPend;
---
>    
933c934
<    zPend = 0;
---
>    generateMTFValues_zPend = 0;
944c945
<          zPend++;
---
>          generateMTFValues_zPend++;
947c948
<          if (zPend > 0) 
---
>          if (generateMTFValues_zPend > 0) 
965c966
<    if (zPend > 0) 
---
>    if (generateMTFValues_zPend > 0) 
(85.0 %, 30656 bytes)
912a913
> Int32 generateMTFValues_j;
918c919
<    Int32    j;
---
>    
940,941c941,942
<       j = ptr[generateMTFValues_i]-1; if (j < 0) j += generateMTFValues_s.nblock;
<       ll_i = generateMTFValues_s.unseqToSeq[block[j]];
---
>       generateMTFValues_j = ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
>       ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
959,960c960,961
<             j = ryy_j - &(generateMTFValues_yy[0]);
<             mtfv[wr] = j+1; wr++; generateMTFValues_s.mtfFreq[j+1]++;
---
>             generateMTFValues_j = ryy_j - &(generateMTFValues_yy[0]);
>             mtfv[wr] = generateMTFValues_j+1; wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
912a913
> Int32 generateMTFValues_zPend;
919c920
<    Int32   zPend;
---
>    
934c935
<    zPend = 0;
---
>    generateMTFValues_zPend = 0;
945c946
<          zPend++;
---
>          generateMTFValues_zPend++;
948c949
<          if (zPend > 0) 
---
>          if (generateMTFValues_zPend > 0) 
966c967
<    if (zPend > 0) 
---
>    if (generateMTFValues_zPend > 0) 
(85.0 %, 30798 bytes)
913a914
> Int32 generateMTFValues_zPend;
920c921
<    Int32   zPend;
---
>    
935c936
<    zPend = 0;
---
>    generateMTFValues_zPend = 0;
946c947
<          zPend++;
---
>          generateMTFValues_zPend++;
949c950
<          if (zPend > 0) 
---
>          if (generateMTFValues_zPend > 0) 
967c968
<    if (zPend > 0) 
---
>    if (generateMTFValues_zPend > 0) 
913a914
> Int32 generateMTFValues_wr;
921c922
<    Int32   wr;
---
>    
934c935
<    wr = 0;
---
>    generateMTFValues_wr = 0;
961c962
<             mtfv[wr] = generateMTFValues_j+1; wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
---
>             mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
969c970
<    mtfv[wr] = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>    mtfv[generateMTFValues_wr] = EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[EOB]++;
971c972
<    generateMTFValues_s.nMTF = wr;
---
>    generateMTFValues_s.nMTF = generateMTFValues_wr;
(84.9 %, 30887 bytes)
914a915
> Int32 generateMTFValues_wr;
922c923
<    Int32   wr;
---
>    
935c936
<    wr = 0;
---
>    generateMTFValues_wr = 0;
962c963
<             mtfv[wr] = generateMTFValues_j+1; wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
---
>             mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
970c971
<    mtfv[wr] = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>    mtfv[generateMTFValues_wr] = EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[EOB]++;
972c973
<    generateMTFValues_s.nMTF = wr;
---
>    generateMTFValues_s.nMTF = generateMTFValues_wr;
914a915
> Int32 generateMTFValues_EOB;
923c924
<    Int32   EOB;
---
>    
931c932
<    EOB = generateMTFValues_s.nInUse+1;
---
>    generateMTFValues_EOB = generateMTFValues_s.nInUse+1;
933c934
<    for (generateMTFValues_i = 0; generateMTFValues_i <= EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
---
>    for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
970c971
<    mtfv[wr] = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>    mtfv[wr] = generateMTFValues_EOB; wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
(84.9 %, 31012 bytes)
915a916
> Int32 generateMTFValues_EOB;
924c925
<    Int32   EOB;
---
>    
932c933
<    EOB = generateMTFValues_s.nInUse+1;
---
>    generateMTFValues_EOB = generateMTFValues_s.nInUse+1;
934c935
<    for (generateMTFValues_i = 0; generateMTFValues_i <= EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
---
>    for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
971c972
<    mtfv[generateMTFValues_wr] = EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>    mtfv[generateMTFValues_wr] = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
915a916
> UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
927c928
<    UInt32* ptr   = &generateMTFValues_s.ptr;
---
>    
943c944
<       generateMTFValues_j = ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
---
>       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
(84.8 %, 31101 bytes)
916a917
> UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
928c929
<    UInt32* ptr   = &generateMTFValues_s.ptr;
---
>    
944c945
<       generateMTFValues_j = ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
---
>       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
916a917
> UChar *generateMTFValues_block = generateMTFValues_s.block;
929c930
<    UChar* block  = generateMTFValues_s.block;
---
>    
945c946
<       ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
---
>       ll_i = generateMTFValues_s.unseqToSeq[generateMTFValues_block[generateMTFValues_j]];
916a917
> UInt16 *generateMTFValues_mtfv = generateMTFValues_s.mtfv;
930c931
<    UInt16* mtfv  = generateMTFValues_s.mtfv;
---
>    
964c965
<             mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
---
>             generateMTFValues_mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
972c973
<    mtfv[generateMTFValues_wr] = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
>    generateMTFValues_mtfv[generateMTFValues_wr] = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
916a917
> UChar generateMTFValues_ll_i;
942c943
<       UChar ll_i;
---
>       
945c946
<       ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
---
>       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
948c949
<       if (generateMTFValues_yy[0] == ll_i) { 
---
>       if (generateMTFValues_yy[0] == generateMTFValues_ll_i) { 
960c961
<             rll_i = ll_i;
---
>             rll_i = generateMTFValues_ll_i;
(84.8 %, 31136 bytes)
917a918
> UChar *generateMTFValues_block = generateMTFValues_s.block;
930c931
<    UChar* block  = generateMTFValues_s.block;
---
>    
946c947
<       ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
---
>       ll_i = generateMTFValues_s.unseqToSeq[generateMTFValues_block[generateMTFValues_j]];
917a918
> UInt16 *generateMTFValues_mtfv = generateMTFValues_s.mtfv;
931c932
<    UInt16* mtfv  = generateMTFValues_s.mtfv;
---
>    
965c966
<             mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
---
>             generateMTFValues_mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
973c974
<    mtfv[generateMTFValues_wr] = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
>    generateMTFValues_mtfv[generateMTFValues_wr] = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
917a918
> UChar generateMTFValues_ll_i;
943c944
<       UChar ll_i;
---
>       
946c947
<       ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
---
>       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
949c950
<       if (generateMTFValues_yy[0] == ll_i) { 
---
>       if (generateMTFValues_yy[0] == generateMTFValues_ll_i) { 
961c962
<             rll_i = ll_i;
---
>             rll_i = generateMTFValues_ll_i;
917a918
> UChar generateMTFValues_rtmp;
955c956
<             register UChar  rtmp;
---
>             
958c959
<             rtmp  = generateMTFValues_yy[1];
---
>             generateMTFValues_rtmp  = generateMTFValues_yy[1];
962,963c963,964
<             while ( rll_i != rtmp ) ;
<             generateMTFValues_yy[0] = rtmp;
---
>             while ( rll_i != generateMTFValues_rtmp ) ;
>             generateMTFValues_yy[0] = generateMTFValues_rtmp;
(84.8 %, 31209 bytes)
918a919
> UChar generateMTFValues_rtmp;
956c957
<             register UChar  rtmp;
---
>             
959c960
<             rtmp  = generateMTFValues_yy[1];
---
>             generateMTFValues_rtmp  = generateMTFValues_yy[1];
963,964c964,965
<             while ( rll_i != rtmp ) ;
<             generateMTFValues_yy[0] = rtmp;
---
>             while ( rll_i != generateMTFValues_rtmp ) ;
>             generateMTFValues_yy[0] = generateMTFValues_rtmp;
918a919
> UChar *generateMTFValues_ryy_j;
957c958
<             register UChar* ryy_j;
---
>             
961c962
<             ryy_j = &(generateMTFValues_yy[1]);
---
>             generateMTFValues_ryy_j = &(generateMTFValues_yy[1]);
965c966
<             generateMTFValues_j = ryy_j - &(generateMTFValues_yy[0]);
---
>             generateMTFValues_j = generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
(84.7 %, 31272 bytes)
919a920
> UChar *generateMTFValues_ryy_j;
958c959
<             register UChar* ryy_j;
---
>             
962c963
<             ryy_j = &(generateMTFValues_yy[1]);
---
>             generateMTFValues_ryy_j = &(generateMTFValues_yy[1]);
966c967
<             generateMTFValues_j = ryy_j - &(generateMTFValues_yy[0]);
---
>             generateMTFValues_j = generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
919a920
> UChar generateMTFValues_rll_i;
959c960
<             register UChar  rll_i;
---
>             
963,964c964,965
<             rll_i = generateMTFValues_ll_i;
<             while ( rll_i != generateMTFValues_rtmp ) ;
---
>             generateMTFValues_rll_i = generateMTFValues_ll_i;
>             while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
(84.7 %, 31318 bytes)
920a921
> UChar generateMTFValues_rll_i;
960c961
<             register UChar  rll_i;
---
>             
964,965c965,966
<             rll_i = generateMTFValues_ll_i;
<             while ( rll_i != generateMTFValues_rtmp ) ;
---
>             generateMTFValues_rll_i = generateMTFValues_ll_i;
>             while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
1083a1084
> Int32 BZ2_bzCompressInit_n;
1090c1091
<    Int32   n;
---
>    
1112,1114c1113,1115
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    BZ2_bzCompressInit_n       = 100000 * blockSize100k;
>    s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
>    s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(84.7 %, 31363 bytes)
1084a1085
> Int32 BZ2_bzCompressInit_n;
1091c1092
<    Int32   n;
---
>    
1113,1115c1114,1116
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    BZ2_bzCompressInit_n       = 100000 * blockSize100k;
>    s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
>    s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1084a1085
> EState *BZ2_bzCompressInit_s;
1092c1093
<    EState* s;
---
>    
1105c1106
<    s = BZALLOC( sizeof(EState) );
---
>    BZ2_bzCompressInit_s = BZALLOC( sizeof(EState) );
1107c1108
<    s->strm = *strm;
---
>    BZ2_bzCompressInit_s->strm = *strm;
1114,1116c1115,1117
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    BZ2_bzCompressInit_s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
>    BZ2_bzCompressInit_s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
>    BZ2_bzCompressInit_s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
1121,1127c1122,1128
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    BZ2_bzCompressInit_s->state             = BZ_S_INPUT;
>    BZ2_bzCompressInit_s->mode              = BZ_M_RUNNING;
>    BZ2_bzCompressInit_s->combinedCRC       = 0;
>    BZ2_bzCompressInit_s->blockSize100k     = blockSize100k;
>    BZ2_bzCompressInit_s->nblockMAX         = 100000 * blockSize100k - 19;
>    BZ2_bzCompressInit_s->verbosity         = verbosity;
>    BZ2_bzCompressInit_s->workFactor        = workFactor;
1129,1130c1130,1131
<    s->block             = s->arr2;
<    s->mtfv              = s->arr1;
---
>    BZ2_bzCompressInit_s->block             = BZ2_bzCompressInit_s->arr2;
>    BZ2_bzCompressInit_s->mtfv              = BZ2_bzCompressInit_s->arr1;
1132c1133
<    s->ptr               = *s->arr1;
---
>    BZ2_bzCompressInit_s->ptr               = *BZ2_bzCompressInit_s->arr1;
1134c1135
<    strm->state          = s;
---
>    strm->state          = BZ2_bzCompressInit_s;
1172a1173
> EState *BZ2_bzCompress_s;
1176c1177
<    EState* s;
---
>    
1178c1179
<    s = strm->state;
---
>    BZ2_bzCompress_s = strm->state;
1180c1181
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&BZ2_bzCompress_s->strm != strm) return BZ_PARAM_ERROR;
1183c1184
<    switch (s->mode) 
---
>    switch (BZ2_bzCompress_s->mode) 
1188a1189
> EState *BZ2_bzCompressEnd_s;
1191c1192
<    EState* s;
---
>    
1193c1194
<    s = strm->state;
---
>    BZ2_bzCompressEnd_s = strm->state;
1195c1196
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&BZ2_bzCompressEnd_s->strm != strm) return BZ_PARAM_ERROR;
1212a1213
> DState *BZ2_bzDecompressInit_s;
1218c1219
<    DState* s;
---
>    
1229c1230
<    s = BZALLOC( sizeof(DState) );
---
>    BZ2_bzDecompressInit_s = BZALLOC( sizeof(DState) );
1231,1236c1232,1237
<    s->strm                  = *strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    BZ2_bzDecompressInit_s->strm                  = *strm;
>    strm->state              = BZ2_bzDecompressInit_s;
>    BZ2_bzDecompressInit_s->state                 = BZ_X_MAGIC_1;
>    BZ2_bzDecompressInit_s->bsLive                = 0;
>    BZ2_bzDecompressInit_s->bsBuff                = 0;
>    BZ2_bzDecompressInit_s->calculatedCombinedCRC = 0;
1241c1242
<    s->smallDecompress       = small;
---
>    BZ2_bzDecompressInit_s->smallDecompress       = small;
1245,1246c1246,1247
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    BZ2_bzDecompressInit_s->currBlockNo           = 0;
>    BZ2_bzDecompressInit_s->verbosity             = verbosity;
(84.7 %, 31438 bytes)
1085a1086
> EState *BZ2_bzCompressInit_s;
1093c1094
<    EState* s;
---
>    
1106c1107
<    s = BZALLOC( sizeof(EState) );
---
>    BZ2_bzCompressInit_s = BZALLOC( sizeof(EState) );
1108c1109
<    s->strm = *strm;
---
>    BZ2_bzCompressInit_s->strm = *strm;
1115,1117c1116,1118
<    s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    BZ2_bzCompressInit_s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
>    BZ2_bzCompressInit_s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
>    BZ2_bzCompressInit_s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
1122,1128c1123,1129
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    BZ2_bzCompressInit_s->state             = BZ_S_INPUT;
>    BZ2_bzCompressInit_s->mode              = BZ_M_RUNNING;
>    BZ2_bzCompressInit_s->combinedCRC       = 0;
>    BZ2_bzCompressInit_s->blockSize100k     = blockSize100k;
>    BZ2_bzCompressInit_s->nblockMAX         = 100000 * blockSize100k - 19;
>    BZ2_bzCompressInit_s->verbosity         = verbosity;
>    BZ2_bzCompressInit_s->workFactor        = workFactor;
1130,1131c1131,1132
<    s->block             = s->arr2;
<    s->mtfv              = s->arr1;
---
>    BZ2_bzCompressInit_s->block             = BZ2_bzCompressInit_s->arr2;
>    BZ2_bzCompressInit_s->mtfv              = BZ2_bzCompressInit_s->arr1;
1133c1134
<    s->ptr               = *s->arr1;
---
>    BZ2_bzCompressInit_s->ptr               = *BZ2_bzCompressInit_s->arr1;
1135c1136
<    strm->state          = s;
---
>    strm->state          = BZ2_bzCompressInit_s;
1173a1174
> EState *BZ2_bzCompress_s;
1177c1178
<    EState* s;
---
>    
1179c1180
<    s = strm->state;
---
>    BZ2_bzCompress_s = strm->state;
1181c1182
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&BZ2_bzCompress_s->strm != strm) return BZ_PARAM_ERROR;
1184c1185
<    switch (s->mode) 
---
>    switch (BZ2_bzCompress_s->mode) 
1189a1190
> EState *BZ2_bzCompressEnd_s;
1192c1193
<    EState* s;
---
>    
1194c1195
<    s = strm->state;
---
>    BZ2_bzCompressEnd_s = strm->state;
1196c1197
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&BZ2_bzCompressEnd_s->strm != strm) return BZ_PARAM_ERROR;
1213a1214
> DState *BZ2_bzDecompressInit_s;
1219c1220
<    DState* s;
---
>    
1230c1231
<    s = BZALLOC( sizeof(DState) );
---
>    BZ2_bzDecompressInit_s = BZALLOC( sizeof(DState) );
1232,1237c1233,1238
<    s->strm                  = *strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    BZ2_bzDecompressInit_s->strm                  = *strm;
>    strm->state              = BZ2_bzDecompressInit_s;
>    BZ2_bzDecompressInit_s->state                 = BZ_X_MAGIC_1;
>    BZ2_bzDecompressInit_s->bsLive                = 0;
>    BZ2_bzDecompressInit_s->bsBuff                = 0;
>    BZ2_bzDecompressInit_s->calculatedCombinedCRC = 0;
1242c1243
<    s->smallDecompress       = small;
---
>    BZ2_bzDecompressInit_s->smallDecompress       = small;
1246,1247c1247,1248
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    BZ2_bzDecompressInit_s->currBlockNo           = 0;
>    BZ2_bzDecompressInit_s->verbosity             = verbosity;
1270a1271
> DState *BZ2_bzDecompress_s;
1273c1274
<    DState* s;
---
>    
1275c1276
<    s = strm->state;
---
>    BZ2_bzDecompress_s = strm->state;
1277c1278
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&BZ2_bzDecompress_s->strm != strm) return BZ_PARAM_ERROR;
1287a1288
> DState *BZ2_bzDecompressEnd_s;
1290c1291
<    DState* s;
---
>    
1292c1293
<    s = strm->state;
---
>    BZ2_bzDecompressEnd_s = strm->state;
1294c1295
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&BZ2_bzDecompressEnd_s->strm != strm) return BZ_PARAM_ERROR;
1378a1379
> Int32 BZ2_bzWrite_ret;
1385c1386
<    Int32   ret;
---
>    
1405,1406c1406,1407
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       BZ2_bzWrite_ret = 0;
>       if (BZ2_bzWrite_ret != BZ_RUN_OK)
1378a1379
> bzFile *BZ2_bzWrite_bzf = b;
1386c1387
<    bzFile* bzf = b;
---
>    
1391c1392
<    if (!(bzf->writing))
---
>    if (!(BZ2_bzWrite_bzf->writing))
1399,1400c1400,1401
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    BZ2_bzWrite_bzf->strm.avail_in = len;
>    BZ2_bzWrite_bzf->strm.next_in  = buf;
1403,1404c1404,1405
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       BZ2_bzWrite_bzf->strm.avail_out = BZ_MAX_UNUSED;
>       BZ2_bzWrite_bzf->strm.next_out = BZ2_bzWrite_bzf->buf;
1409c1410
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (BZ2_bzWrite_bzf->strm.avail_out < BZ_MAX_UNUSED) 
1411c1412
<       if (bzf->strm.avail_in == 0)
---
>       if (BZ2_bzWrite_bzf->strm.avail_in == 0)
1428a1429
> bzFile *BZ2_bzWriteClose64_bzf = b;
1439c1440
<    bzFile* bzf = b;
---
>    
1443c1444
<    if (!(bzf->writing))
---
>    if (!(BZ2_bzWriteClose64_bzf->writing))
1524a1525
> bzFile *BZ2_bzReadClose_bzf = b;
1527c1528
<    bzFile* bzf = b;
---
>    
1533c1534
<    if (bzf->writing)
---
>    if (BZ2_bzReadClose_bzf->writing)
1536c1537
<    if (bzf->initialisedOk)
---
>    if (BZ2_bzReadClose_bzf->initialisedOk)
1542a1543
> bzFile *BZ2_bzRead_bzf = b;
1550c1551
<    bzFile* bzf = b;
---
>    
1557c1558
<    if (bzf->writing)
---
>    if (BZ2_bzRead_bzf->writing)
1563,1564c1564,1565
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ2_bzRead_bzf->strm.avail_out = len;
>    BZ2_bzRead_bzf->strm.next_out = buf;
1572a1573
> bzFile *BZ2_bzReadGetUnused_bzf = b;
1579c1580
<    bzFile* bzf = b;
---
>    
1582c1583
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (BZ2_bzReadGetUnused_bzf->lastErr != BZ_STREAM_END)
1588,1589c1589,1590
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *nUnused = BZ2_bzReadGetUnused_bzf->strm.avail_in;
>    *unused = BZ2_bzReadGetUnused_bzf->strm.next_in;
(84.6 %, 31473 bytes)
1379a1380
> bzFile *BZ2_bzWrite_bzf = b;
1387c1388
<    bzFile* bzf = b;
---
>    
1392c1393
<    if (!(bzf->writing))
---
>    if (!(BZ2_bzWrite_bzf->writing))
1400,1401c1401,1402
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    BZ2_bzWrite_bzf->strm.avail_in = len;
>    BZ2_bzWrite_bzf->strm.next_in  = buf;
1404,1405c1405,1406
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       BZ2_bzWrite_bzf->strm.avail_out = BZ_MAX_UNUSED;
>       BZ2_bzWrite_bzf->strm.next_out = BZ2_bzWrite_bzf->buf;
1410c1411
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (BZ2_bzWrite_bzf->strm.avail_out < BZ_MAX_UNUSED) 
1412c1413
<       if (bzf->strm.avail_in == 0)
---
>       if (BZ2_bzWrite_bzf->strm.avail_in == 0)
1429a1430
> bzFile *BZ2_bzWriteClose64_bzf = b;
1440c1441
<    bzFile* bzf = b;
---
>    
1444c1445
<    if (!(bzf->writing))
---
>    if (!(BZ2_bzWriteClose64_bzf->writing))
1525a1526
> bzFile *BZ2_bzReadClose_bzf = b;
1528c1529
<    bzFile* bzf = b;
---
>    
1534c1535
<    if (bzf->writing)
---
>    if (BZ2_bzReadClose_bzf->writing)
1537c1538
<    if (bzf->initialisedOk)
---
>    if (BZ2_bzReadClose_bzf->initialisedOk)
1543a1544
> bzFile *BZ2_bzRead_bzf = b;
1551c1552
<    bzFile* bzf = b;
---
>    
1558c1559
<    if (bzf->writing)
---
>    if (BZ2_bzRead_bzf->writing)
1564,1565c1565,1566
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ2_bzRead_bzf->strm.avail_out = len;
>    BZ2_bzRead_bzf->strm.next_out = buf;
1573a1574
> bzFile *BZ2_bzReadGetUnused_bzf = b;
1580c1581
<    bzFile* bzf = b;
---
>    
1583c1584
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (BZ2_bzReadGetUnused_bzf->lastErr != BZ_STREAM_END)
1589,1590c1590,1591
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *nUnused = BZ2_bzReadGetUnused_bzf->strm.avail_in;
>    *unused = BZ2_bzReadGetUnused_bzf->strm.next_in;
1598a1599
> bz_stream BZ2_bzBuffToBuffCompress_strm;
1608c1609
<    bz_stream strm;
---
>    
1625,1628c1626,1629
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    BZ2_bzBuffToBuffCompress_strm.next_in = source;
>    BZ2_bzBuffToBuffCompress_strm.next_out = dest;
>    BZ2_bzBuffToBuffCompress_strm.avail_in = sourceLen;
>    BZ2_bzBuffToBuffCompress_strm.avail_out = *destLen;
1635c1636
<    *destLen -= strm.avail_out;   
---
>    *destLen -= BZ2_bzBuffToBuffCompress_strm.avail_out;   
1598a1599
> int BZ2_bzBuffToBuffCompress_ret;
1609c1610
<    int ret;
---
>    
1622,1623c1623,1624
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    BZ2_bzBuffToBuffCompress_ret = 0;
>    if (BZ2_bzBuffToBuffCompress_ret != BZ_OK) return BZ2_bzBuffToBuffCompress_ret;
1630,1632c1631,1633
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    BZ2_bzBuffToBuffCompress_ret = 0;
>    if (BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK) goto output_overflow;
>    if (BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END) goto errhandler;
1645c1646
<    return ret;
---
>    return BZ2_bzBuffToBuffCompress_ret;
1649a1650
> bz_stream BZ2_bzBuffToBuffDecompress_strm;
1658c1659
<    bz_stream strm;
---
>    
1673,1676c1674,1677
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    BZ2_bzBuffToBuffDecompress_strm.next_in = source;
>    BZ2_bzBuffToBuffDecompress_strm.next_out = dest;
>    BZ2_bzBuffToBuffDecompress_strm.avail_in = sourceLen;
>    BZ2_bzBuffToBuffDecompress_strm.avail_out = *destLen;
1683c1684
<    *destLen -= strm.avail_out;
---
>    *destLen -= BZ2_bzBuffToBuffDecompress_strm.avail_out;
1688c1689
<    if (strm.avail_out > 0) {
---
>    if (BZ2_bzBuffToBuffDecompress_strm.avail_out > 0) {
1649a1650
> int BZ2_bzBuffToBuffDecompress_ret;
1659c1660
<    int ret;
---
>    
1670,1671c1671,1672
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    BZ2_bzBuffToBuffDecompress_ret = 0;
>    if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK) return BZ2_bzBuffToBuffDecompress_ret;
1678,1680c1679,1681
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    BZ2_bzBuffToBuffDecompress_ret = 0;
>    if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK) goto output_overflow_or_eof;
>    if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END) goto errhandler;
1695c1696
<    return ret; 
---
>    return BZ2_bzBuffToBuffDecompress_ret; 
(84.5 %, 31674 bytes)
1650a1651
> bz_stream BZ2_bzBuffToBuffDecompress_strm;
1659c1660
<    bz_stream strm;
---
>    
1674,1677c1675,1678
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    BZ2_bzBuffToBuffDecompress_strm.next_in = source;
>    BZ2_bzBuffToBuffDecompress_strm.next_out = dest;
>    BZ2_bzBuffToBuffDecompress_strm.avail_in = sourceLen;
>    BZ2_bzBuffToBuffDecompress_strm.avail_out = *destLen;
1684c1685
<    *destLen -= strm.avail_out;
---
>    *destLen -= BZ2_bzBuffToBuffDecompress_strm.avail_out;
1689c1690
<    if (strm.avail_out > 0) {
---
>    if (BZ2_bzBuffToBuffDecompress_strm.avail_out > 0) {
1650a1651
> int BZ2_bzBuffToBuffDecompress_ret;
1660c1661
<    int ret;
---
>    
1671,1672c1672,1673
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    BZ2_bzBuffToBuffDecompress_ret = 0;
>    if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK) return BZ2_bzBuffToBuffDecompress_ret;
1679,1681c1680,1682
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    BZ2_bzBuffToBuffDecompress_ret = 0;
>    if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK) goto output_overflow_or_eof;
>    if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END) goto errhandler;
1696c1697
<    return ret; 
---
>    return BZ2_bzBuffToBuffDecompress_ret; 
1742a1743
> int BZ2_bzread_bzerr;
1745c1746
<    int bzerr, nread;
---
>    int nread;
1748c1749
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
(84.4 %, 31891 bytes)
1743a1744
> int BZ2_bzread_bzerr;
1746c1747
<    int bzerr, nread;
---
>    int nread;
1749c1750
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
1743a1744
> int BZ2_bzread_nread;
1746c1747
<    int bzerr, nread;
---
>    int bzerr;
1748c1749
<    nread = 0;
---
>    BZ2_bzread_nread = 0;
1750c1751
<       return nread;
---
>       return BZ2_bzread_nread;
(84.4 %, 31928 bytes)
1744a1745
> int BZ2_bzread_nread;
1747c1748
<    int nread;
---
>    
1749c1750
<    nread = 0;
---
>    BZ2_bzread_nread = 0;
1751c1752
<       return nread;
---
>       return BZ2_bzread_nread;
1758a1759
> int BZ2_bzwrite_bzerr;
1761c1762
<    int bzerr;
---
>    
1764c1765
<    if(bzerr == BZ_OK){
---
>    if(BZ2_bzwrite_bzerr == BZ_OK){
(84.4 %, 31962 bytes)
1759a1760
> int BZ2_bzwrite_bzerr;
1762c1763
<    int bzerr;
---
>    
1765c1766
<    if(bzerr == BZ_OK){
---
>    if(BZ2_bzwrite_bzerr == BZ_OK){
1781a1782
> int BZ2_bzclose_bzerr;
1784c1785
<    int bzerr;
---
>    
1821a1822
> int BZ2_bzerror_err = ((bzFile *)b)->lastErr;
1824c1825
<    int err = ((bzFile *)b)->lastErr;
---
>    
1826,1828c1827,1829
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
---
>    if(BZ2_bzerror_err>0) BZ2_bzerror_err = 0;
>    *errnum = BZ2_bzerror_err;
>    return bzerrorstrings[BZ2_bzerror_err*-1];
===< pass_clang :: remove-nested-function >===
===< pass_clang :: simple-inliner >===
===< pass_clang :: reduce-pointer-level >===
32c32
<       char *next_in;
---
>       char next_in;
1401c1401
<    bzf->strm.next_in  = buf;
---
>    bzf->strm.next_in  = *buf;
1590c1590
<    *unused = bzf->strm.next_in;
---
>    *unused = &bzf->strm.next_in;
1626c1626
<    strm.next_in = source;
---
>    strm.next_in = *source;
1675c1675
<    strm.next_in = source;
---
>    strm.next_in = *source;
37c37
<       char *next_out;
---
>       char next_out;
1405c1405
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->strm.next_out = *bzf->buf;
1565c1565
<    bzf->strm.next_out = buf;
---
>    bzf->strm.next_out = *buf;
1627c1627
<    strm.next_out = dest;
---
>    strm.next_out = *dest;
1676c1676
<    strm.next_out = dest;
---
>    strm.next_out = *dest;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
375c375
<       UChar*   block;
---
>       UChar   block;
934c934
<    UChar* block  = generateMTFValues_s.block;
---
>    UChar* block  = &generateMTFValues_s.block;
1130c1130
<    s->block             = s->arr2;
---
>    s->block             = *s->arr2;
376c376
<       UInt16*  mtfv;
---
>       UInt16  mtfv;
935c935
<    UInt16* mtfv  = generateMTFValues_s.mtfv;
---
>    UInt16* mtfv  = &generateMTFValues_s.mtfv;
1131c1131
<    s->mtfv              = s->arr1;
---
>    s->mtfv              = *s->arr1;
(84.4 %, 31963 bytes)
376c376
<       UInt16*  mtfv;
---
>       UInt16  mtfv;
935c935
<    UInt16* mtfv  = generateMTFValues_s.mtfv;
---
>    UInt16* mtfv  = &generateMTFValues_s.mtfv;
1131c1131
<    s->mtfv              = s->arr1;
---
>    s->mtfv              = *s->arr1;
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
537c537
<       UInt16   *ll16;
---
>       UInt16   ll16;
(84.4 %, 31964 bytes)
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
537c537
<       UInt16   *ll16;
---
>       UInt16   ll16;
(84.4 %, 31963 bytes)
537c537
<       UInt16   *ll16;
---
>       UInt16   ll16;
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
(84.4 %, 31962 bytes)
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
(84.4 %, 31961 bytes)
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
587c587
<       Int32*   save_gBase;
---
>       Int32   save_gBase;
(84.4 %, 31960 bytes)
587c587
<       Int32*   save_gBase;
---
>       Int32   save_gBase;
893c893
< EState *makeMaps_e_s = 0;
---
> EState makeMaps_e_s ;
900c900
<    makeMaps_e_s->nInUse = 0;
---
>    makeMaps_e_s.nInUse = 0;
902,904c902,904
<       if (makeMaps_e_s->inUse[makeMaps_e_i]) {
<          makeMaps_e_s->unseqToSeq[makeMaps_e_i] = makeMaps_e_s->nInUse;
<          makeMaps_e_s->nInUse++;
---
>       if (makeMaps_e_s.inUse[makeMaps_e_i]) {
>          makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
>          makeMaps_e_s.nInUse++;
(84.4 %, 31959 bytes)
893c893
< EState *makeMaps_e_s = 0;
---
> EState makeMaps_e_s ;
900c900
<    makeMaps_e_s->nInUse = 0;
---
>    makeMaps_e_s.nInUse = 0;
902,904c902,904
<       if (makeMaps_e_s->inUse[makeMaps_e_i]) {
<          makeMaps_e_s->unseqToSeq[makeMaps_e_i] = makeMaps_e_s->nInUse;
<          makeMaps_e_s->nInUse++;
---
>       if (makeMaps_e_s.inUse[makeMaps_e_i]) {
>          makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
>          makeMaps_e_s.nInUse++;
917c917
< UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
---
> UInt32 generateMTFValues_ptr ;
949c949
<       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
---
>       generateMTFValues_j = &generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
920c920
< UChar *generateMTFValues_ryy_j;
---
> UChar generateMTFValues_ryy_j;
964c964
<             generateMTFValues_ryy_j = &(generateMTFValues_yy[1]);
---
>             generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
968c968
<             generateMTFValues_j = generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
---
>             generateMTFValues_j = &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
(84.4 %, 31950 bytes)
917c917
< UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
---
> UInt32 generateMTFValues_ptr ;
949c949
<       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
---
>       generateMTFValues_j = &generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
920c920
< UChar *generateMTFValues_ryy_j;
---
> UChar generateMTFValues_ryy_j;
964c964
<             generateMTFValues_ryy_j = &(generateMTFValues_yy[1]);
---
>             generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
968c968
<             generateMTFValues_j = generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
---
>             generateMTFValues_j = &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
934c934
<    UChar* block  = &generateMTFValues_s.block;
---
>    UChar block  = generateMTFValues_s.block;
950c950
<       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
---
>       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[&block[generateMTFValues_j]];
935c935
<    UInt16* mtfv  = &generateMTFValues_s.mtfv;
---
>    UInt16 mtfv  = generateMTFValues_s.mtfv;
969c969
<             mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
---
>             mtfv = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
977c977
<    mtfv[generateMTFValues_wr] = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
>    mtfv = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
(84.4 %, 31949 bytes)
934c934
<    UChar* block  = &generateMTFValues_s.block;
---
>    UChar block  = generateMTFValues_s.block;
950c950
<       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
---
>       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[&block[generateMTFValues_j]];
935c935
<    UInt16* mtfv  = &generateMTFValues_s.mtfv;
---
>    UInt16 mtfv  = generateMTFValues_s.mtfv;
969c969
<             mtfv[generateMTFValues_wr] = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
---
>             mtfv = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
977c977
<    mtfv[generateMTFValues_wr] = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
>    mtfv = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
1177c1177
<    EState* s;
---
>    EState s;
1179c1179
<    s = strm->state;
---
>    s = *strm->state;
1181c1181
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1184c1184
<    switch (s->mode) 
---
>    switch (s.mode) 
1192c1192
<    EState* s;
---
>    EState s;
1194c1194
<    s = strm->state;
---
>    s = *strm->state;
1196c1196
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1273c1273
<    DState* s;
---
>    DState s;
1275c1275
<    s = strm->state;
---
>    s = *strm->state;
1277c1277
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
(84.4 %, 31903 bytes)
1177c1177
<    EState* s;
---
>    EState s;
1179c1179
<    s = strm->state;
---
>    s = *strm->state;
1181c1181
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1184c1184
<    switch (s->mode) 
---
>    switch (s.mode) 
1192c1192
<    EState* s;
---
>    EState s;
1194c1194
<    s = strm->state;
---
>    s = *strm->state;
1196c1196
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1273c1273
<    DState* s;
---
>    DState s;
1275c1275
<    s = strm->state;
---
>    s = *strm->state;
1277c1277
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1290c1290
<    DState* s;
---
>    DState s;
1292c1292
<    s = strm->state;
---
>    s = *strm->state;
1294c1294
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s.strm != strm) return BZ_PARAM_ERROR;
1316c1316
<       FILE*     handle;
---
>       FILE     handle;
1387c1387
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1392c1392
<    if (!(bzf->writing))
---
>    if (!(bzf.writing))
1400,1401c1400,1401
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    bzf.strm.avail_in = len;
>    bzf.strm.next_in  = buf;
1404,1405c1404,1405
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf.strm.avail_out = BZ_MAX_UNUSED;
>       bzf.strm.next_out = bzf.buf;
1410c1410
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf.strm.avail_out < BZ_MAX_UNUSED) 
1412c1412
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf.strm.avail_in == 0)
1440c1440
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1444c1444
<    if (!(bzf->writing))
---
>    if (!(bzf.writing))
1528c1528
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1534c1534
<    if (bzf->writing)
---
>    if (bzf.writing)
1537c1537
<    if (bzf->initialisedOk)
---
>    if (bzf.initialisedOk)
1551c1551
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1558c1558
<    if (bzf->writing)
---
>    if (bzf.writing)
1564,1565c1564,1565
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
1580c1580
<    bzFile* bzf = b;
---
>    bzFile bzf = *b;
1583c1583
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf.lastErr != BZ_STREAM_END)
1589,1590c1589,1590
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *nUnused = bzf.strm.avail_in;
>    *unused = bzf.strm.next_in;
1802,1819c1802
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char bzerrorstrings[] = {a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a};
1828c1811
<    return bzerrorstrings[err*-1];
---
>    return &bzerrorstrings[err*-1];
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-unresolved-base >===
===< pass_clang :: empty-struct-to-int >===
1965,1966c1965
<    struct  
<    UInt64;
---
>    
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: replace-array-index-var >===
===< pass_unifdef :: 0 >===
1878d1877
< #if BZ_UNIX
1898,1899d1896
< #endif 
< 
2080,2094d2076
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
1878,1903d1877
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC \
<       root=snocString
< 
< #   define APPEND_FLAG \
<       root=snocString
< 
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
2080,2094d2053
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
(84.5 %, 31850 bytes)
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ints :: a >===
94c94
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 66   
---
> #define BZ_HDR_B 6   
(84.5 %, 31849 bytes)
94c94
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
194c194
<       int        fd,
---
>       int        d,
(84.5 %, 31848 bytes)
94c94
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 66   
---
> #define BZ_HDR_B 6   
(84.5 %, 31847 bytes)
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 66   
---
> #define BZ_HDR_B 6   
(84.5 %, 31846 bytes)
278c278
< #define BZ_HDR_B 66   
---
> #define BZ_HDR_B 6   
279c279
< #define BZ_HDR_Z 90   
---
> #define BZ_HDR_Z 0   
(84.5 %, 31845 bytes)
279c279
< #define BZ_HDR_Z 90   
---
> #define BZ_HDR_Z 0   
280c280
< #define BZ_HDR_h 104   
---
> #define BZ_HDR_h 04   
(84.5 %, 31844 bytes)
280c280
< #define BZ_HDR_h 104   
---
> #define BZ_HDR_h 04   
281c281
< #define BZ_HDR_0 48   
---
> #define BZ_HDR_0 8   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(84.5 %, 31843 bytes)
280c280
< #define BZ_HDR_h 04   
---
> #define BZ_HDR_h 4   
281c281
< #define BZ_HDR_0 48   
---
> #define BZ_HDR_0 8   
(84.5 %, 31842 bytes)
281c281
< #define BZ_HDR_0 48   
---
> #define BZ_HDR_0 8   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(84.5 %, 31841 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.5 %, 31840 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.5 %, 31839 bytes)
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
(84.5 %, 31838 bytes)
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.5 %, 31837 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.5 %, 31836 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.5 %, 31835 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.5 %, 31834 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.5 %, 31833 bytes)
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.5 %, 31832 bytes)
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.5 %, 31831 bytes)
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(84.5 %, 31830 bytes)
395c395
<       Bool     inUse[56];
---
>       Bool     inUse[6];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(84.5 %, 31829 bytes)
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.5 %, 31828 bytes)
396c396
<       UChar    unseqToSeq[56];
---
>       UChar    unseqToSeq[6];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(84.5 %, 31827 bytes)
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.5 %, 31826 bytes)
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
(84.5 %, 31825 bytes)
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
(84.5 %, 31824 bytes)
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(84.5 %, 31823 bytes)
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(84.5 %, 31822 bytes)
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
(84.5 %, 31821 bytes)
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(84.5 %, 31820 bytes)
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(84.5 %, 31819 bytes)
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
(84.5 %, 31818 bytes)
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
(84.5 %, 31817 bytes)
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
(84.5 %, 31816 bytes)
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
(84.5 %, 31815 bytes)
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(84.5 %, 31814 bytes)
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(84.5 %, 31813 bytes)
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(84.5 %, 31812 bytes)
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
(84.5 %, 31811 bytes)
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
(84.5 %, 31810 bytes)
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
(84.5 %, 31809 bytes)
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
(84.5 %, 31808 bytes)
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(84.5 %, 31807 bytes)
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(84.5 %, 31806 bytes)
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
(84.5 %, 31805 bytes)
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
(84.5 %, 31804 bytes)
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
(84.5 %, 31803 bytes)
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
(84.5 %, 31802 bytes)
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
(84.5 %, 31801 bytes)
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(84.5 %, 31800 bytes)
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(84.5 %, 31799 bytes)
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
(84.5 %, 31798 bytes)
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(84.5 %, 31797 bytes)
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(84.5 %, 31796 bytes)
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
(84.5 %, 31795 bytes)
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(84.5 %, 31794 bytes)
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(84.5 %, 31793 bytes)
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(84.5 %, 31792 bytes)
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
(84.5 %, 31791 bytes)
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(84.5 %, 31790 bytes)
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
(84.5 %, 31789 bytes)
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(84.5 %, 31788 bytes)
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
(84.5 %, 31787 bytes)
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(84.5 %, 31786 bytes)
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
(84.5 %, 31785 bytes)
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.5 %, 31784 bytes)
528c528
<       Int32    unzftab[56];
---
>       Int32    unzftab[6];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(84.5 %, 31783 bytes)
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.5 %, 31782 bytes)
530c530
<       Int32    cftab[57];
---
>       Int32    cftab[7];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.5 %, 31781 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.5 %, 31780 bytes)
531c531
<       Int32    cftabCopy[57];
---
>       Int32    cftabCopy[7];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.5 %, 31779 bytes)
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.5 %, 31778 bytes)
548c548
<       Bool     inUse[56];
---
>       Bool     inUse[6];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.5 %, 31777 bytes)
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(84.5 %, 31776 bytes)
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
599c599
<     cccc = ;           \
---
>     ccc = ;           \
(84.5 %, 31775 bytes)
550c550
<       UChar    seqToUnseq[56];
---
>       UChar    seqToUnseq[6];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
599c599
<     cccc = ;           \
---
>     ccc = ;           \
(84.5 %, 31774 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
599c599
<     cccc = ;           \
---
>     ccc = ;           \
(84.5 %, 31773 bytes)
554c554
<       Int32    mtfbase[56 / MTFL_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
599c599
<     cccc = ;           \
---
>     ccc = ;           \
(84.5 %, 31772 bytes)
599c599
<     cccc = ;           \
---
>     ccc = ;           \
604c604
<     cccc = ;            \
---
>     ccc = ;            \
(84.5 %, 31771 bytes)
599c599
<     ccc = ;           \
---
>     cc = ;           \
604c604
<     cccc = ;            \
---
>     ccc = ;            \
(84.5 %, 31770 bytes)
599c599
<     cc = ;           \
---
>     c = ;           \
604c604
<     cccc = ;            \
---
>     ccc = ;            \
(84.5 %, 31769 bytes)
604c604
<     cccc = ;            \
---
>     ccc = ;            \
620c620
<       cccc = BZ2_indexIntoF ;    \
---
>       ccc = BZ2_indexIntoF ;    \
(84.5 %, 31768 bytes)
604c604
<     ccc = ;            \
---
>     cc = ;            \
620c620
<       cccc = BZ2_indexIntoF ;    \
---
>       ccc = BZ2_indexIntoF ;    \
(84.5 %, 31767 bytes)
604c604
<     cc = ;            \
---
>     c = ;            \
620c620
<       cccc = BZ2_indexIntoF ;    \
---
>       ccc = BZ2_indexIntoF ;    \
(84.5 %, 31766 bytes)
620c620
<       cccc = BZ2_indexIntoF ;    \
---
>       ccc = BZ2_indexIntoF ;    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(84.5 %, 31765 bytes)
620c620
<       ccc = BZ2_indexIntoF ;    \
---
>       cc = BZ2_indexIntoF ;    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(84.5 %, 31764 bytes)
620c620
<       cc = BZ2_indexIntoF ;    \
---
>       c = BZ2_indexIntoF ;    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(84.5 %, 31763 bytes)
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(84.5 %, 31762 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(84.5 %, 31761 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   00
---
> #define FALLBACK_QSORT_STACK_SIZE   0
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(84.5 %, 31760 bytes)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(84.5 %, 31759 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
901c901
<    for (makeMaps_e_i = 0; makeMaps_e_i < 256; makeMaps_e_i++)
---
>    for (makeMaps_e_i = 0; makeMaps_e_i < 56; makeMaps_e_i++)
(84.5 %, 31758 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 00
---
> #define MAIN_QSORT_STACK_SIZE 0
901c901
<    for (makeMaps_e_i = 0; makeMaps_e_i < 256; makeMaps_e_i++)
---
>    for (makeMaps_e_i = 0; makeMaps_e_i < 56; makeMaps_e_i++)
(84.5 %, 31757 bytes)
901c901
<    for (makeMaps_e_i = 0; makeMaps_e_i < 256; makeMaps_e_i++)
---
>    for (makeMaps_e_i = 0; makeMaps_e_i < 56; makeMaps_e_i++)
911c911
< UChar generateMTFValues_yy[256];
---
> UChar generateMTFValues_yy[56];
(84.5 %, 31756 bytes)
901c901
<    for (makeMaps_e_i = 0; makeMaps_e_i < 56; makeMaps_e_i++)
---
>    for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
911c911
< UChar generateMTFValues_yy[256];
---
> UChar generateMTFValues_yy[56];
985c985
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.5 %, 31755 bytes)
911c911
< UChar generateMTFValues_yy[256];
---
> UChar generateMTFValues_yy[56];
985c985
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.5 %, 31754 bytes)
911c911
< UChar generateMTFValues_yy[56];
---
> UChar generateMTFValues_yy[6];
985c985
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.5 %, 31753 bytes)
985c985
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1099c1099
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
(84.5 %, 31752 bytes)
1099c1099
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1102c1102
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.5 %, 31751 bytes)
1099c1099
<        workFactor < 0 || workFactor > 50)
---
>        workFactor < 0 || workFactor > 0)
1102c1102
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1114c1114
<    BZ2_bzCompressInit_n       = 100000 * blockSize100k;
---
>    BZ2_bzCompressInit_n       = 00000 * blockSize100k;
(84.5 %, 31750 bytes)
1102c1102
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1114c1114
<    BZ2_bzCompressInit_n       = 100000 * blockSize100k;
---
>    BZ2_bzCompressInit_n       = 00000 * blockSize100k;
(84.5 %, 31749 bytes)
1114c1114
<    BZ2_bzCompressInit_n       = 100000 * blockSize100k;
---
>    BZ2_bzCompressInit_n       = 00000 * blockSize100k;
1117c1117
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.5 %, 31748 bytes)
1114c1114
<    BZ2_bzCompressInit_n       = 00000 * blockSize100k;
---
>    BZ2_bzCompressInit_n       = 0000 * blockSize100k;
1117c1117
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.5 %, 31747 bytes)
1114c1114
<    BZ2_bzCompressInit_n       = 0000 * blockSize100k;
---
>    BZ2_bzCompressInit_n       = 000 * blockSize100k;
1117c1117
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.5 %, 31746 bytes)
1114c1114
<    BZ2_bzCompressInit_n       = 000 * blockSize100k;
---
>    BZ2_bzCompressInit_n       = 00 * blockSize100k;
1117c1117
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.5 %, 31745 bytes)
1114c1114
<    BZ2_bzCompressInit_n       = 00 * blockSize100k;
---
>    BZ2_bzCompressInit_n       = 0 * blockSize100k;
1117c1117
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(84.5 %, 31744 bytes)
1117c1117
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 100000 * blockSize100k - 9;
(84.5 %, 31743 bytes)
1117c1117
<    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 537              * sizeof(UInt32) );
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.5 %, 31742 bytes)
1117c1117
<    s->ftab = BZALLOC( 537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 37              * sizeof(UInt32) );
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.5 %, 31741 bytes)
1117c1117
<    s->ftab = BZALLOC( 37              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(84.5 %, 31740 bytes)
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
1126c1126
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 100000 * blockSize100k - 9;
(84.5 %, 31739 bytes)
1126c1126
<    s->nblockMAX         = 00000 * blockSize100k - 19;
---
>    s->nblockMAX         = 0000 * blockSize100k - 19;
1126c1126
<    s->nblockMAX         = 00000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 9;
1281c1281
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.5 %, 31738 bytes)
1126c1126
<    s->nblockMAX         = 0000 * blockSize100k - 19;
---
>    s->nblockMAX         = 000 * blockSize100k - 19;
1126c1126
<    s->nblockMAX         = 0000 * blockSize100k - 19;
---
>    s->nblockMAX         = 0000 * blockSize100k - 9;
1281c1281
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.5 %, 31737 bytes)
1126c1126
<    s->nblockMAX         = 000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00 * blockSize100k - 19;
1126c1126
<    s->nblockMAX         = 000 * blockSize100k - 19;
---
>    s->nblockMAX         = 000 * blockSize100k - 9;
(84.5 %, 31736 bytes)
1126c1126
<    s->nblockMAX         = 00 * blockSize100k - 19;
---
>    s->nblockMAX         = 0 * blockSize100k - 19;
1126c1126
<    s->nblockMAX         = 00 * blockSize100k - 19;
---
>    s->nblockMAX         = 00 * blockSize100k - 9;
(84.5 %, 31735 bytes)
1126c1126
<    s->nblockMAX         = 0 * blockSize100k - 19;
---
>    s->nblockMAX         = 0 * blockSize100k - 9;
1281c1281
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.5 %, 31734 bytes)
1281c1281
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1346c1346
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.5 %, 31733 bytes)
1281c1281
<    AssertH ( 0, 001 );
---
>    AssertH ( 0, 01 );
1346c1346
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.5 %, 31732 bytes)
1281c1281
<    AssertH ( 0, 01 );
---
>    AssertH ( 0, 1 );
1346c1346
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.5 %, 31731 bytes)
1346c1346
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1366c1366
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.5 %, 31730 bytes)
1346c1346
<        (workFactor < 0 || workFactor > 50) ||
---
>        (workFactor < 0 || workFactor > 0) ||
1366c1366
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.5 %, 31729 bytes)
1366c1366
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1616c1616
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
(84.5 %, 31728 bytes)
1616c1616
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
1619c1619
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1736c1736
<                ( int fd,
---
>                ( int d,
(84.5 %, 31727 bytes)
1616c1616
<        workFactor < 0 || workFactor > 50) 
---
>        workFactor < 0 || workFactor > 0) 
1619c1619
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1736c1736
<                ( int fd,
---
>                ( int d,
(84.5 %, 31726 bytes)
1619c1619
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1736c1736
<                ( int fd,
---
>                ( int d,
(84.5 %, 31725 bytes)
1736c1736
<                ( int fd,
---
>                ( int d,
1932c1932
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
2128c2128
<    Ce;
---
>    e;
(84.5 %, 31724 bytes)
1932c1932
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
2128c2128
<    Ce;
---
>    e;
(84.5 %, 31723 bytes)
1932c1932
< #define FILE_NAME_LEN 034
---
> #define FILE_NAME_LEN 04
2128c2128
<    Ce;
---
>    e;
(84.5 %, 31722 bytes)
1932c1932
< #define FILE_NAME_LEN 04
---
> #define FILE_NAME_LEN 4
2128c2128
<    Ce;
---
>    e;
(84.5 %, 31721 bytes)
2128c2128
<    Ce;
---
>    e;
(84.5 %, 31720 bytes)
===< pass_ints :: d >===
Termination check: size was 29870; now 31720
===< pass_clang :: rename-fun >===
clang_delta: RenameFun.cpp:142: bool RenameFunVisitor::VisitDeclRefExpr(clang::DeclRefExpr*): Assertion `(I != ConsumerInstance->FunToNameMap.end()) && "Cannot find FunctionDecl!"' failed.
Aborted

***************************************************

pass_clang::rename-fun has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=rename-fun --counter=1 /tmp/creduce-MUhJHe/bzip2.c

Please consider tarring up /home/ukoc/mangroveL/sut-bzip2/runs/run-1454709278.65661/creduce_bug_000
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: rename-param >===
61,64c61,64
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
>       bz_stream* p1, 
>       int        p2, 
>       int        p3, 
>       int        p4 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream* p1, 
>       int p2 
73c73
<       bz_stream* strm 
---
>       bz_stream* p1 
77,79c77,79
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
>       bz_stream *p1, 
>       int       p2, 
>       int       p3
83c83
<       bz_stream* strm 
---
>       bz_stream* p1 
87c87
<       bz_stream *strm 
---
>       bz_stream *p1 
99,104c99,104
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int*  p1,   
>       FILE* p2, 
>       int   p3, 
>       int   p4,
>       void* p5,    
>       int   p6 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    p1, 
>       BZFILE* p2 
113,116c113,116
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    p1, 
>       BZFILE* p2, 
>       void**  p3,  
>       int*    p4 
120,123c120,123
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    p1, 
>       BZFILE* p2, 
>       void*   p3, 
>       int     p4 
127,131c127,131
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  p1,      
>       FILE* p2, 
>       int   p3, 
>       int   p4, 
>       int   p5 
135,138c135,138
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    p1, 
>       BZFILE* p2, 
>       void*   p3, 
>       int     p4 
142,146c142,146
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          p1, 
>       BZFILE*       p2, 
>       int           p3, 
>       unsigned int* p4, 
>       unsigned int* p5 
150,156c150,156
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int*          p1, 
>       BZFILE*       p2, 
>       int           p3, 
>       unsigned int* p4, 
>       unsigned int* p5, 
>       unsigned int* p6, 
>       unsigned int* p7
163,169c163,169
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         p1, 
>       unsigned int* p2,
>       char*         p3, 
>       unsigned int  p4,
>       int           p5, 
>       int           p6, 
>       int           p7 
173,178c173,178
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       char*         p1, 
>       unsigned int* p2,
>       char*         p3, 
>       unsigned int  p4,
>       int           p5, 
>       int           p6 
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *p1,
>       const char *p2
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        p1,
>       const char *p2
199,201c199,201
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
>       BZFILE* p1, 
>       void* p2, 
>       int p3 
205,207c205,207
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* p1, 
>       void*   p2, 
>       int     p3 
211c211
<       BZFILE* b
---
>       BZFILE* p1
215c215
<       BZFILE* b
---
>       BZFILE* p1
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *p1, 
>       int    *p2
1028c1028
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress ( DState* p1 )
1087,1090c1087,1090
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* p1, 
>                      int        p2,
>                      int        p3,
>                      int        p4 )
1102c1102
<    if (workFactor == 0) workFactor = 0;
---
>    if (p4 == 0) p4 = 0;
1106c1106
<    s = BZALLOC( sizeof(EState) );
---
>    s = p1;
1108c1108
<    s->strm = *strm;
---
>    s->strm = *p1;
1114,1117c1114,1117
<    BZ2_bzCompressInit_n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    BZ2_bzCompressInit_n       = 0 * p2;
>    s->arr1 = p1;
>    s->arr2 = p1;
>    s->ftab = p1;
1125,1128c1125,1128
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    s->blockSize100k     = p2;
>    s->nblockMAX         = 0 * p2 - 9;
>    s->verbosity         = p3;
>    s->workFactor        = p4;
1135,1139c1135,1139
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    p1->state          = s;
>    p1->total_in_lo32  = 0;
>    p1->total_in_hi32  = 0;
>    p1->total_out_lo32 = 0;
>    p1->total_out_hi32 = 0;
1174c1174
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *p1, int p2 )
1179c1179
<    s = strm->state;
---
>    s = p1->state;
1181c1181
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != p1) return BZ_PARAM_ERROR;
1190c1190
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *p1 )
1194c1194
<    s = strm->state;
---
>    s = p1->state;
1196c1196
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != p1) return BZ_PARAM_ERROR;
1215,1217c1215,1217
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* p1, 
>                        int        p2,
>                        int        p3 )
1224,1225c1224,1225
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (p3 != 0 && p3 != 1) return BZ_PARAM_ERROR;
>    if (p2 < 0 || p2 > 4) return BZ_PARAM_ERROR;
1230c1230
<    s = BZALLOC( sizeof(DState) );
---
>    s = p1;
1232,1233c1232,1233
<    s->strm                  = *strm;
<    strm->state              = s;
---
>    s->strm                  = *p1;
>    p1->state              = s;
1238,1242c1238,1242
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = small;
---
>    p1->total_in_lo32      = 0;
>    p1->total_in_hi32      = 0;
>    p1->total_out_lo32     = 0;
>    p1->total_out_hi32     = 0;
>    s->smallDecompress       = p3;
1247c1247
<    s->verbosity             = verbosity;
---
>    s->verbosity             = p2;
1271c1271
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *p1 )
1275c1275
<    s = strm->state;
---
>    s = p1->state;
1277c1277
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != p1) return BZ_PARAM_ERROR;
1288c1288
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *p1 )
1292c1292
<    s = strm->state;
---
>    s = p1->state;
1294c1294
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (&s->strm != p1) return BZ_PARAM_ERROR;
1381,1384c1381,1384
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    p1, 
>                BZFILE* p2, 
>                void*   p3, 
>                int     p4 )
1387c1387
<    bzFile* bzf = b;
---
>    bzFile* bzf = p2;
1394c1394
<    if (ferror)
---
>    if (p1)
1397c1397
<    if (len == 0)
---
>    if (p4 == 0)
1400,1401c1400,1401
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    bzf->strm.avail_in = p4;
>    bzf->strm.next_in  = p3;
1420,1424c1420,1424
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          p1, 
>                     BZFILE*       p2, 
>                     int           p3,
>                     unsigned int* p4,
>                     unsigned int* p5 )
1431,1437c1431,1437
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   ( int*          p1, 
>                     BZFILE*       p2, 
>                     int           p3,
>                     unsigned int* p4,
>                     unsigned int* p5,
>                     unsigned int* p6,
>                     unsigned int* p7 )
1440c1440
<    bzFile* bzf = b;
---
>    bzFile* bzf = p2;
1446c1446
<    if (ferror)
---
>    if (p1)
1526c1526
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) ( int *p1, BZFILE *p2 )
1528c1528
<    bzFile* bzf = b;
---
>    bzFile* bzf = p2;
1545,1548c1545,1548
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    p1, 
>              BZFILE* p2, 
>              void*   p3, 
>              int     p4 )
1551c1551
<    bzFile* bzf = b;
---
>    bzFile* bzf = p2;
1561c1561
<    if (len == 0)
---
>    if (p4 == 0)
1564,1565c1564,1565
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->strm.avail_out = p4;
>    bzf->strm.next_out = p3;
1575,1578c1575,1578
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    p1, 
>                        BZFILE* p2, 
>                        void**  p3, 
>                        int*    p4 )
1580c1580
<    bzFile* bzf = b;
---
>    bzFile* bzf = p2;
1589,1590c1589,1590
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *p4 = bzf->strm.avail_in;
>    *p3 = bzf->strm.next_in;
1601,1607c1601,1607
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          ( char*         p1, 
>                            unsigned int* p2,
>                            char*         p3, 
>                            unsigned int  p4,
>                            int           p5, 
>                            int           p6, 
>                            int           p7 )
1619c1619
<    if (workFactor == 0) workFactor = 0;
---
>    if (p7 == 0) p7 = 0;
1626,1629c1626,1629
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = p3;
>    strm.next_out = p1;
>    strm.avail_in = p4;
>    strm.avail_out = *p2;
1636c1636
<    *destLen -= strm.avail_out;   
---
>    *p2 -= strm.avail_out;   
1653,1658c1653,1658
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            ( char*         p1, 
>                              unsigned int* p2,
>                              char*         p3, 
>                              unsigned int  p4,
>                              int           p5,
>                              int           p6 )
1675,1678c1675,1678
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = p3;
>    strm.next_out = p1;
>    strm.avail_in = p4;
>    strm.avail_out = *p2;
1685c1685
<    *destLen -= strm.avail_out;
---
>    *p2 -= strm.avail_out;
1727,1728c1727,1728
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *p1,
>                  const char *p2 )
1736,1737c1736,1737
<                ( int d,
<                  const char *mode )
---
>                ( int p1,
>                  const char *p2 )
1746c1746
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* p1, void* p2, int p3 )
1749c1749
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)p1)->lastErr == BZ_STREAM_END) return 0;
1760c1760
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* p1, void* p2, int p3 )
1766c1766
<       return len;
---
>       return p3;
1774c1774
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) (BZFILE *p1)
1782c1782
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) (BZFILE* p1)
1822c1822
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *p1, int *p2)
1824c1824
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)p1)->lastErr;
1827c1827
<    *errnum = err;
---
>    *p2 = err;
===< pass_clang :: rename-var >===
893,894c893,894
< EState makeMaps_e_s ;
< Int32 makeMaps_e_i;
---
> EState a ;
> Int32 b;
900,904c900,904
<    makeMaps_e_s.nInUse = 0;
<    for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
<       if (makeMaps_e_s.inUse[makeMaps_e_i]) {
<          makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
<          makeMaps_e_s.nInUse++;
---
>    a.nInUse = 0;
>    for (b = 0; b < 6; b++)
>       if (a.inUse[b]) {
>          a.unseqToSeq[b] = a.nInUse;
>          a.nInUse++;
910,921c910,921
< EState generateMTFValues_s;
< UChar generateMTFValues_yy[6];
< Int32 generateMTFValues_i;
< Int32 generateMTFValues_j;
< Int32 generateMTFValues_zPend;
< Int32 generateMTFValues_wr;
< Int32 generateMTFValues_EOB;
< UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
< UChar generateMTFValues_ll_i;
< UChar generateMTFValues_rtmp;
< UChar generateMTFValues_ryy_j;
< UChar generateMTFValues_rll_i;
---
> EState c;
> UChar d[6];
> Int32 e;
> Int32 f;
> Int32 g;
> Int32 h;
> Int32 i;
> UInt32 *j = &c.ptr;
> UChar k;
> UChar l;
> UChar m;
> UChar n;
934,935c934,935
<    UChar* block  = &generateMTFValues_s.block;
<    UInt16 mtfv  = generateMTFValues_s.mtfv;
---
>    UChar* o  = &c.block;
>    UInt16 p  = c.mtfv;
938c938
<    generateMTFValues_EOB = generateMTFValues_s.nInUse+1;
---
>    i = c.nInUse+1;
940c940
<    for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
---
>    for (e = 0; e <= i; e++) c.mtfFreq[e] = 0;
942,944c942,944
<    generateMTFValues_wr = 0;
<    generateMTFValues_zPend = 0;
<    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++) generateMTFValues_yy[generateMTFValues_i] =  generateMTFValues_i;
---
>    h = 0;
>    g = 0;
>    for (e = 0; e < c.nInUse; e++) d[e] =  e;
946c946
<    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nblock; generateMTFValues_i++) {
---
>    for (e = 0; e < c.nblock; e++) {
949,950c949,950
<       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
<       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
---
>       f = j[e]-1; if (f < 0) f += c.nblock;
>       k = c.unseqToSeq[o[f]];
953,954c953,954
<       if (generateMTFValues_yy[0] == generateMTFValues_ll_i) { 
<          generateMTFValues_zPend++;
---
>       if (d[0] == k) { 
>          g++;
957c957
<          if (generateMTFValues_zPend > 0) 
---
>          if (g > 0) 
962,969c962,969
<             generateMTFValues_rtmp  = generateMTFValues_yy[1];
<             generateMTFValues_yy[1] = generateMTFValues_yy[0];
<             generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
<             generateMTFValues_rll_i = generateMTFValues_ll_i;
<             while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
<             generateMTFValues_yy[0] = generateMTFValues_rtmp;
<             generateMTFValues_j = &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
<             mtfv = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
---
>             l  = d[1];
>             d[1] = d[0];
>             m = (d[1]);
>             n = k;
>             while ( n != l ) ;
>             d[0] = l;
>             f = &m - &(d[0]);
>             p = f+1; h++; c.mtfFreq[f+1]++;
975c975
<    if (generateMTFValues_zPend > 0) 
---
>    if (g > 0) 
977c977
<    mtfv = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
>    p = i; h++; c.mtfFreq[i]++;
979c979
<    generateMTFValues_s.nMTF = generateMTFValues_wr;
---
>    c.nMTF = h;
1053c1053
< int bz_config_ok 
---
> int q 
1059c1059
< void* default_bzalloc 
---
> void* r 
1080c1080
< Bool isempty_RL 
---
> Bool t 
1085c1085
< Int32 BZ2_bzCompressInit_n;
---
> Int32 u;
1114c1114
<    BZ2_bzCompressInit_n       = 0 * blockSize100k;
---
>    u       = 0 * blockSize100k;
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
893c893
< EState makeMaps_e_s ;
---
> EState makeMaps_e_s,  generateMTFValues_s ;
910c910
< EState generateMTFValues_s;
---
> 
894c894
< Int32 makeMaps_e_i;
---
> Int32 makeMaps_e_i, generateMTFValues_i;
912c912
< Int32 generateMTFValues_i;
---
> 
(84.5 %, 31715 bytes)
894c894
< Int32 makeMaps_e_i;
---
> Int32 makeMaps_e_i, generateMTFValues_i;
912c912
< Int32 generateMTFValues_i;
---
> 
894c894
< Int32 makeMaps_e_i;
---
> Int32 makeMaps_e_i, generateMTFValues_j;
913c913
< Int32 generateMTFValues_j;
---
> 
(84.5 %, 31710 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j;
913c913
< Int32 generateMTFValues_j;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_zPend;
914c914
< Int32 generateMTFValues_zPend;
---
> 
(84.5 %, 31705 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend;
914c914
< Int32 generateMTFValues_zPend;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_wr;
915c915
< Int32 generateMTFValues_wr;
---
> 
(84.5 %, 31700 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr;
915c915
< Int32 generateMTFValues_wr;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_EOB;
916c916
< Int32 generateMTFValues_EOB;
---
> 
(84.5 %, 31695 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB;
916c916
< Int32 generateMTFValues_EOB;
---
> 
918,919c918,919
< UChar generateMTFValues_ll_i;
< UChar generateMTFValues_rtmp;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp;
> 
(84.5 %, 31690 bytes)
918,919c918,919
< UChar generateMTFValues_ll_i;
< UChar generateMTFValues_rtmp;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp;
> 
918c918
< UChar generateMTFValues_ll_i;
---
> UChar generateMTFValues_ll_i, generateMTFValues_ryy_j;
920c920
< UChar generateMTFValues_ryy_j;
---
> 
(84.5 %, 31685 bytes)
918c918,919
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j;
> 
920d920
< UChar generateMTFValues_ryy_j;
918c918
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_rll_i;
921c921
< UChar generateMTFValues_rll_i;
---
> 
(84.5 %, 31680 bytes)
918c918,919
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i;
> 
921d921
< UChar generateMTFValues_rll_i;
894c894,895
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok 
> ;
1052,1054c1053
< static
< int bz_config_ok 
< ;
---
> 
(84.5 %, 31675 bytes)
894c894,895
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok 
> ;
1052,1054c1053
< static
< int bz_config_ok 
< ;
---
> 
918c918,919
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL 
> ;
1079,1081c1080
< static
< Bool isempty_RL 
< ;
---
> 
(84.5 %, 31666 bytes)
919c919,920
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL 
> ;
1078,1080c1079
< static
< Bool isempty_RL 
< ;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n 
1084c1084
< Int32 BZ2_bzCompressInit_n;
---
> 
(84.6 %, 31655 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n 
1083c1083
< Int32 BZ2_bzCompressInit_n;
---
> 
919c919,920
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL 
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
>  
1166,1168c1167
< static
< Bool handle_compress 
< ;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzWrite_ret 
1377c1377
< Int32 BZ2_bzWrite_ret;
---
> 
(84.6 %, 31650 bytes)
919c919,920
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL 
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
>  
1166,1168c1167
< static
< Bool handle_compress 
< ;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret 
1377c1377
< Int32 BZ2_bzWrite_ret;
---
> 
(84.6 %, 31639 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret 
1376c1376
< Int32 BZ2_bzWrite_ret;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n,  BZ2_bzBuffToBuffCompress_ret 
1596c1596
< int BZ2_bzBuffToBuffCompress_ret;
---
> 
(84.6 %, 31634 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret 
1596c1596
< int BZ2_bzBuffToBuffCompress_ret;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffDecompress_ret 
1648c1648
< int BZ2_bzBuffToBuffDecompress_ret;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzread_bzerr 
1741c1741
< int BZ2_bzread_bzerr;
---
> 
(84.6 %, 31632 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret 
1648c1648
< int BZ2_bzBuffToBuffDecompress_ret;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzread_bzerr 
1741c1741
< int BZ2_bzread_bzerr;
---
> 
(84.6 %, 31630 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr 
1741c1741
< int BZ2_bzread_bzerr;
---
> 
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_nread 
1742c1742
< int BZ2_bzread_nread;
---
> 
894c894,895
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  main 
>  
2147,2148c2148
< int main 
< ;
---
> 
(84.6 %, 31628 bytes)
894c894
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread 
1742c1742
< int BZ2_bzread_nread;
---
> 
894c894,895
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  main 
>  
2147,2148c2148
< int main 
< ;
---
> 
(84.6 %, 31626 bytes)
894c894,895
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread 
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main 
>  
2147,2148c2148
< int main 
< ;
---
> 
(84.6 %, 31624 bytes)
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
424c424
<    EState;
---
>    EState,  makeMaps_e_s,  generateMTFValues_s ;
893c893
< EState makeMaps_e_s,  generateMTFValues_s ;
---
> 
===< pass_clang :: move-global-var >===
252a253,322
> struct {
>       
>       bz_stream strm;
> 
>       
>       
>       Int32    mode;
>       Int32    state;
> 
>       
>       UInt32   avail_in_expect;
> 
>       
>       UInt32*  arr1;
>       UInt32*  arr2;
>       UInt32*  ftab;
>       Int32    origPtr;
> 
>       
>       UInt32  ptr;
>       UChar   block;
>       UInt16  mtfv;
>       UChar   zbits;
> 
>       
>       Int32    workFactor;
> 
>       
>       UInt32   state_in_ch;
>       Int32    state_in_len;
>       BZ_RAND_DECLS;
> 
>       
>       Int32    nblock;
>       Int32    nblockMAX;
>       Int32    numZ;
>       Int32    state_out_pos;
> 
>       
>       Int32    nInUse;
>       Bool     inUse[6];
>       UChar    unseqToSeq[6];
> 
>       
>       UInt32   bsBuff;
>       Int32    bsLive;
> 
>       
>       UInt32   blockCRC;
>       UInt32   combinedCRC;
> 
>       
>       Int32    verbosity;
>       Int32    blockNo;
>       Int32    blockSize100k;
> 
>       
>       Int32    nMTF;
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
>       UChar    selector   [BZ_MAX_SELECTORS];
>       UChar    selectorMtf[BZ_MAX_SELECTORS];
> 
>       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       
>       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
> 
>    }
>    EState;
355,424c425
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       UChar   block;
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>    
252a253,255
> ;
> 
> ;
432d434
< ;
434d435
< ;
252a253,322
> ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #define BZ_X_IDLE        1
> #define BZ_X_OUTPUT      2
> 
> #define BZ_X_MAGIC_1     0
> #define BZ_X_MAGIC_2     1
> #define BZ_X_MAGIC_3     2
> #define BZ_X_MAGIC_4     3
> #define BZ_X_BLKHDR_1    4
> #define BZ_X_BLKHDR_2    5
> #define BZ_X_BLKHDR_3    6
> #define BZ_X_BLKHDR_4    7
> #define BZ_X_BLKHDR_5    8
> #define BZ_X_BLKHDR_6    9
> #define BZ_X_BCRC_1      0
> #define BZ_X_BCRC_2      1
> #define BZ_X_BCRC_3      2
> #define BZ_X_BCRC_4      3
> #define BZ_X_RANDBIT     4
> #define BZ_X_ORIGPTR_1   5
> #define BZ_X_ORIGPTR_2   6
> #define BZ_X_ORIGPTR_3   7
> #define BZ_X_MAPPING_1   8
> #define BZ_X_MAPPING_2   9
> #define BZ_X_SELECTOR_1  0
> #define BZ_X_SELECTOR_2  1
> #define BZ_X_SELECTOR_3  2
> #define BZ_X_CODING_1    3
> #define BZ_X_CODING_2    4
> #define BZ_X_CODING_3    5
> #define BZ_X_MTF_1       6
> #define BZ_X_MTF_2       7
> #define BZ_X_MTF_3       8
> #define BZ_X_MTF_4       9
> #define BZ_X_MTF_5       0
> #define BZ_X_MTF_6       1
> #define BZ_X_ENDHDR_2    2
> #define BZ_X_ENDHDR_3    3
> #define BZ_X_ENDHDR_4    4
> #define BZ_X_ENDHDR_5    5
> #define BZ_X_ENDHDR_6    6
> #define BZ_X_CCRC_1      7
> #define BZ_X_CCRC_2      8
> #define BZ_X_CCRC_3      9
> #define BZ_X_CCRC_4      0
> 
> 
> 
> 
> 
> #define MTFA_SIZE 4096
> #define MTFL_SIZE 6
> 
> 
> 
> 
> 
> typedef
>    struct {
>       
>       bz_stream strm;
434,442d503
< ;
< 
< 
< 
< 
< 
< 
< 
< 
444,503d504
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
252a253,343
> struct {
>       
>       bz_stream strm;
> 
>       
>       Int32    state;
> 
>       
>       UChar    state_out_ch;
>       Int32    state_out_len;
>       Bool     blockRandomised;
>       BZ_RAND_DECLS;
> 
>       
>       UInt32   bsBuff;
>       Int32    bsLive;
> 
>       
>       Int32    blockSize100k;
>       Bool     smallDecompress;
>       Int32    currBlockNo;
>       Int32    verbosity;
> 
>       
>       Int32    origPtr;
>       UInt32   tPos;
>       Int32    k0;
>       Int32    unzftab[6];
>       Int32    nblock_used;
>       Int32    cftab[7];
>       Int32    cftabCopy[7];
> 
>       
>       UInt32   tt;
> 
>       
>       UInt16   ll16;
>       UChar    ll4;
> 
>       
>       UInt32   storedBlockCRC;
>       UInt32   storedCombinedCRC;
>       UInt32   calculatedBlockCRC;
>       UInt32   calculatedCombinedCRC;
> 
>       
>       Int32    nInUse;
>       Bool     inUse[6];
>       Bool     inUse16[6];
>       UChar    seqToUnseq[6];
> 
>       
>       UChar    mtfa   [MTFA_SIZE];
>       Int32    mtfbase[6 / MTFL_SIZE];
>       UChar    selector   [BZ_MAX_SELECTORS];
>       UChar    selectorMtf[BZ_MAX_SELECTORS];
>       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    minLens[BZ_N_GROUPS];
> 
>       
>       Int32    save_i;
>       Int32    save_j;
>       Int32    save_t;
>       Int32    save_alphaSize;
>       Int32    save_nGroups;
>       Int32    save_nSelectors;
>       Int32    save_EOB;
>       Int32    save_groupNo;
>       Int32    save_groupPos;
>       Int32    save_nextSym;
>       Int32    save_nblockMAX;
>       Int32    save_nblock;
>       Int32    save_es;
>       Int32    save_N;
>       Int32    save_curr;
>       Int32    save_zt;
>       Int32    save_zn; 
>       Int32    save_zvec;
>       Int32    save_zj;
>       Int32    save_gSel;
>       Int32    save_gMinlen;
>       Int32   save_gLimit;
>       Int32   save_gBase;
>       Int32   save_gPerm;
> 
>    }
>    DState;
501,591c592
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
---
>    
252a253
> EState makeMaps_e_s,  generateMTFValues_s ;
893c894
< EState makeMaps_e_s,  generateMTFValues_s ;
---
> 
252a253,255
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main 
>  
> ;
894,896c897
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main 
<  
< ;
---
> 
(84.6 %, 31625 bytes)
255a256,346
> struct {
>       
>       bz_stream strm;
> 
>       
>       Int32    state;
> 
>       
>       UChar    state_out_ch;
>       Int32    state_out_len;
>       Bool     blockRandomised;
>       BZ_RAND_DECLS;
> 
>       
>       UInt32   bsBuff;
>       Int32    bsLive;
> 
>       
>       Int32    blockSize100k;
>       Bool     smallDecompress;
>       Int32    currBlockNo;
>       Int32    verbosity;
> 
>       
>       Int32    origPtr;
>       UInt32   tPos;
>       Int32    k0;
>       Int32    unzftab[6];
>       Int32    nblock_used;
>       Int32    cftab[7];
>       Int32    cftabCopy[7];
> 
>       
>       UInt32   tt;
> 
>       
>       UInt16   ll16;
>       UChar    ll4;
> 
>       
>       UInt32   storedBlockCRC;
>       UInt32   storedCombinedCRC;
>       UInt32   calculatedBlockCRC;
>       UInt32   calculatedCombinedCRC;
> 
>       
>       Int32    nInUse;
>       Bool     inUse[6];
>       Bool     inUse16[6];
>       UChar    seqToUnseq[6];
> 
>       
>       UChar    mtfa   [MTFA_SIZE];
>       Int32    mtfbase[6 / MTFL_SIZE];
>       UChar    selector   [BZ_MAX_SELECTORS];
>       UChar    selectorMtf[BZ_MAX_SELECTORS];
>       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       Int32    minLens[BZ_N_GROUPS];
> 
>       
>       Int32    save_i;
>       Int32    save_j;
>       Int32    save_t;
>       Int32    save_alphaSize;
>       Int32    save_nGroups;
>       Int32    save_nSelectors;
>       Int32    save_EOB;
>       Int32    save_groupNo;
>       Int32    save_groupPos;
>       Int32    save_nextSym;
>       Int32    save_nblockMAX;
>       Int32    save_nblock;
>       Int32    save_es;
>       Int32    save_N;
>       Int32    save_curr;
>       Int32    save_zt;
>       Int32    save_zn; 
>       Int32    save_zvec;
>       Int32    save_zj;
>       Int32    save_gSel;
>       Int32    save_gMinlen;
>       Int32   save_gLimit;
>       Int32   save_gBase;
>       Int32   save_gPerm;
> 
>    }
>    DState;
502,592c593
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
---
>    
255a256
> EState makeMaps_e_s,  generateMTFValues_s ;
894c895
< EState makeMaps_e_s,  generateMTFValues_s ;
---
> 
255a256,258
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main 
>  
> ;
895,897c898
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main 
<  
< ;
---
> 
255a256
> UChar generateMTFValues_yy[6];
914c915
< UChar generateMTFValues_yy[6];
---
> 
(84.6 %, 31626 bytes)
258a259
> UChar generateMTFValues_yy[6];
915c916
< UChar generateMTFValues_yy[6];
---
> 
258a259
> UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
921c922
< UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
---
> 
258a259,261
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
>  
> ;
922,924c925
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
<  
< ;
---
> 
(84.6 %, 31627 bytes)
259a260
> UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
922c923
< UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
---
> 
259a260,262
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
>  
> ;
923,925c926
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
<  
< ;
---
> 
259a260,262
> static
> void* default_bzalloc 
> ;
1063,1065c1066
< static
< void* default_bzalloc 
< ;
---
> 
(84.6 %, 31628 bytes)
262a263,265
> static
> void* default_bzalloc 
> ;
1064,1066c1067
< static
< void* default_bzalloc 
< ;
---
> 
262a263,272
> struct {
>       FILE*     handle;
>       char      buf[BZ_MAX_UNUSED];
>       Int32     bufN;
>       Bool      writing;
>       bz_stream strm;
>       Int32     lastErr;
>       Bool      initialisedOk;
>    }
>    bzFile;
1317,1326c1327
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>    
262a263,280
> static char *bzerrorstrings[] = {
>        "OK"
>       ,"SEQUENCE_ERROR"
>       ,"PARAM_ERROR"
>       ,"MEM_ERROR"
>       ,"DATA_ERROR"
>       ,"DATA_ERROR_MAGIC"
>       ,"IO_ERROR"
>       ,"UNEXPECTED_EOF"
>       ,"OUTBUFF_FULL"
>       ,"CONFIG_ERROR"
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
> };
1804,1821c1822
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> 
(84.6 %, 31629 bytes)
265a266,275
> struct {
>       FILE*     handle;
>       char      buf[BZ_MAX_UNUSED];
>       Int32     bufN;
>       Bool      writing;
>       bz_stream strm;
>       Int32     lastErr;
>       Bool      initialisedOk;
>    }
>    bzFile;
1318,1327c1328
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>    
265a266,283
> static char *bzerrorstrings[] = {
>        "OK"
>       ,"SEQUENCE_ERROR"
>       ,"PARAM_ERROR"
>       ,"MEM_ERROR"
>       ,"DATA_ERROR"
>       ,"DATA_ERROR_MAGIC"
>       ,"IO_ERROR"
>       ,"UNEXPECTED_EOF"
>       ,"OUTBUFF_FULL"
>       ,"CONFIG_ERROR"
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
> };
1805,1822c1823
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> 
265a266,267
> struct  
>    UInt64;
1965,1966c1967
<    struct  
<    UInt64;
---
>    
265a266,268
> typedef
>     int 
>    e;
2129,2131c2132
< typedef
<     int 
<    e;
---
> 
(84.6 %, 31630 bytes)
283a284,285
> struct  
>    UInt64;
1966,1967c1968
<    struct  
<    UInt64;
---
>    
283a284,286
> typedef
>     int 
>    e;
2130,2132c2133
< typedef
<     int 
<    e;
---
> 
(84.6 %, 31631 bytes)
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  ""
267c267
<        "OK"
---
>        ""
(84.6 %, 31613 bytes)
267c267
<        "OK"
---
>        ""
268c268
<       ,"SEQUENCE_ERROR"
---
>       ,""
269c269
<       ,"PARAM_ERROR"
---
>       ,""
(84.6 %, 31611 bytes)
268c268
<       ,"SEQUENCE_ERROR"
---
>       ,""
269c269
<       ,"PARAM_ERROR"
---
>       ,""
270c270
<       ,"MEM_ERROR"
---
>       ,""
(84.6 %, 31597 bytes)
269c269
<       ,"PARAM_ERROR"
---
>       ,""
270c270
<       ,"MEM_ERROR"
---
>       ,""
(84.6 %, 31586 bytes)
270c270
<       ,"MEM_ERROR"
---
>       ,""
271c271
<       ,"DATA_ERROR"
---
>       ,""
272c272
<       ,"DATA_ERROR_MAGIC"
---
>       ,""
(84.6 %, 31577 bytes)
271c271
<       ,"DATA_ERROR"
---
>       ,""
272c272
<       ,"DATA_ERROR_MAGIC"
---
>       ,""
273c273
<       ,"IO_ERROR"
---
>       ,""
(84.6 %, 31567 bytes)
272c272
<       ,"DATA_ERROR_MAGIC"
---
>       ,""
273c273
<       ,"IO_ERROR"
---
>       ,""
274c274
<       ,"UNEXPECTED_EOF"
---
>       ,""
(84.6 %, 31551 bytes)
273c273
<       ,"IO_ERROR"
---
>       ,""
274c274
<       ,"UNEXPECTED_EOF"
---
>       ,""
(84.6 %, 31543 bytes)
274c274
<       ,"UNEXPECTED_EOF"
---
>       ,""
275c275
<       ,"OUTBUFF_FULL"
---
>       ,""
276c276
<       ,"CONFIG_ERROR"
---
>       ,""
(84.6 %, 31529 bytes)
275c275
<       ,"OUTBUFF_FULL"
---
>       ,""
276c276
<       ,"CONFIG_ERROR"
---
>       ,""
(84.6 %, 31517 bytes)
276c276
<       ,"CONFIG_ERROR"
---
>       ,""
277c277
<       ,"???"   
---
>       ,""   
278c278
<       ,"???"   
---
>       ,""   
(84.6 %, 31505 bytes)
277c277
<       ,"???"   
---
>       ,""   
278c278
<       ,"???"   
---
>       ,""   
279c279
<       ,"???"   
---
>       ,""   
(84.6 %, 31502 bytes)
278c278
<       ,"???"   
---
>       ,""   
279c279
<       ,"???"   
---
>       ,""   
280c280
<       ,"???"   
---
>       ,""   
(84.6 %, 31499 bytes)
279c279
<       ,"???"   
---
>       ,""   
280c280
<       ,"???"   
---
>       ,""   
281c281
<       ,"???"   
---
>       ,""   
(84.6 %, 31496 bytes)
280c280
<       ,"???"   
---
>       ,""   
281c281
<       ,"???"   
---
>       ,""   
282c282
<       ,"???"   
---
>       ,""   
(84.6 %, 31493 bytes)
281c281
<       ,"???"   
---
>       ,""   
282c282
<       ,"???"   
---
>       ,""   
(84.6 %, 31490 bytes)
282c282
<       ,"???"   
---
>       ,""   
(84.6 %, 31487 bytes)
===< pass_indent :: final >===
1,7d0
<  
< 
< 
< 
< 
< 
< 
20c13
< #define BZ_SEQUENCE_ERROR    
---
> #define BZ_SEQUENCE_ERROR
23,25c16,18
< #define BZ_DATA_ERROR        
< #define BZ_DATA_ERROR_MAGIC  
< #define BZ_IO_ERROR          
---
> #define BZ_DATA_ERROR
> #define BZ_DATA_ERROR_MAGIC
> #define BZ_IO_ERROR
30,57c23,28
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
---
> typedef struct
> {
>   char *next_in;
>   unsigned int avail_in;
>   unsigned int total_in_lo32;
>   unsigned int total_in_hi32;
58a30,33
>   char *next_out;
>   unsigned int avail_out;
>   unsigned int total_out_lo32;
>   unsigned int total_out_hi32;
60,65c35
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>   void *state;
67,70c37,41
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
>   void *( *bzalloc ) ( void *, int, int );
>   void ( *bzfree ) ( void *, void * );
>   void *opaque;
> }
> bz_stream;
72,74c43
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
> #include <stdio.h>
76,80c45,46
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> #define BZ_API(func) func
> #define BZ_EXTERN extern
82,84c48,50
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API ( BZ2_bzCompressInit ) ( bz_stream * strm,
> 					      int blockSize100k,
> 					      int verbosity, int workFactor );
86,88c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int BZ_API ( BZ2_bzCompress ) ( bz_stream * strm, int action );
89a54
> BZ_EXTERN int BZ_API ( BZ2_bzCompressEnd ) ( bz_stream * strm );
90a56,57
> BZ_EXTERN int BZ_API ( BZ2_bzDecompressInit ) ( bz_stream * strm,
> 						int verbosity, int small );
91a59
> BZ_EXTERN int BZ_API ( BZ2_bzDecompress ) ( bz_stream * strm );
92a61
> BZ_EXTERN int BZ_API ( BZ2_bzDecompressEnd ) ( bz_stream * strm );
98,225c67,128
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
---
> BZ_EXTERN BZFILE *BZ_API ( BZ2_bzReadOpen ) ( int *bzerror,
> 					      FILE * f,
> 					      int verbosity,
> 					      int small,
> 					      void *unused, int nUnused );
> 
> BZ_EXTERN void BZ_API ( BZ2_bzReadClose ) ( int *bzerror, BZFILE * b );
> 
> BZ_EXTERN void BZ_API ( BZ2_bzReadGetUnused ) ( int *bzerror,
> 						BZFILE * b,
> 						void **unused, int *nUnused );
> 
> BZ_EXTERN int BZ_API ( BZ2_bzRead ) ( int *bzerror,
> 				      BZFILE * b, void *buf, int len );
> 
> BZ_EXTERN BZFILE *BZ_API ( BZ2_bzWriteOpen ) ( int *bzerror,
> 					       FILE * f,
> 					       int blockSize100k,
> 					       int verbosity,
> 					       int workFactor );
> 
> BZ_EXTERN void BZ_API ( BZ2_bzWrite ) ( int *bzerror,
> 					BZFILE * b, void *buf, int len );
> 
> BZ_EXTERN void BZ_API ( BZ2_bzWriteClose ) ( int *bzerror,
> 					     BZFILE * b,
> 					     int abandon,
> 					     unsigned int *nbytes_in,
> 					     unsigned int *nbytes_out );
> 
> BZ_EXTERN void BZ_API ( BZ2_bzWriteClose64 ) ( int *bzerror,
> 					       BZFILE * b,
> 					       int abandon,
> 					       unsigned int *nbytes_in_lo32,
> 					       unsigned int *nbytes_in_hi32,
> 					       unsigned int *nbytes_out_lo32,
> 					       unsigned int
> 					       *nbytes_out_hi32 );
> 
> BZ_EXTERN int BZ_API ( BZ2_bzBuffToBuffCompress ) ( char *dest,
> 						    unsigned int *destLen,
> 						    char *source,
> 						    unsigned int sourceLen,
> 						    int blockSize100k,
> 						    int verbosity,
> 						    int workFactor );
> 
> BZ_EXTERN int BZ_API ( BZ2_bzBuffToBuffDecompress ) ( char *dest,
> 						      unsigned int *destLen,
> 						      char *source,
> 						      unsigned int sourceLen,
> 						      int small,
> 						      int verbosity );
> 
> BZ_EXTERN const char *BZ_API ( BZ2_bzlibVersion ) ( void );
> 
> BZ_EXTERN BZFILE *BZ_API ( BZ2_bzopen ) ( const char *path,
> 					  const char *mode );
> 
> BZ_EXTERN BZFILE *BZ_API ( BZ2_bzdopen ) ( int d, const char *mode );
> 
> BZ_EXTERN int BZ_API ( BZ2_bzread ) ( BZFILE * b, void *buf, int len );
226a130
> BZ_EXTERN int BZ_API ( BZ2_bzwrite ) ( BZFILE * b, void *buf, int len );
227a132
> BZ_EXTERN int BZ_API ( BZ2_bzflush ) ( BZFILE * b );
228a134
> BZ_EXTERN void BZ_API ( BZ2_bzclose ) ( BZFILE * b );
229a136
> BZ_EXTERN const char *BZ_API ( BZ2_bzerror ) ( BZFILE * b, int *errnum );
235,237d141
< 
< 
< 
240,246c144,149
< 
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char Bool;
> typedef unsigned char UChar;
> typedef int Int32;
> typedef unsigned int UInt32;
> typedef short Int16;
> typedef unsigned short UInt16;
251c154
< #define __inline__  
---
> #define __inline__
256,258c159,163
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main 
<  
< ;
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j,
>   generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
>   bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
>   BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
>   BZ2_bzread_bzerr, BZ2_bzread_nread, main;
260,265c165,167
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
<  
< ;
< static
< void* default_bzalloc 
< ;
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j,
>   generateMTFValues_rll_i, isempty_RL, handle_compress;
> static void *default_bzalloc;
267,282c169
<        ""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""   
<       ,""   
<       ,""   
<       ,""   
<       ,""   
<       ,""   
---
>   "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
284,286c171
< typedef
<     int 
<    e;
---
> typedef int e;
289c174
<    
---
> 
291c176
<    
---
> 
305d189
< 
307,316c191
< #define BZFREE(ppp)  
< 
< 
< 
< 
< #define BZ_HDR_B 6   
< #define BZ_HDR_Z 0   
< #define BZ_HDR_h 4   
< #define BZ_HDR_0 8   
<   
---
> #define BZFREE(ppp)
317a193,196
> #define BZ_HDR_B 6
> #define BZ_HDR_Z 0
> #define BZ_HDR_h 4
> #define BZ_HDR_0 8
331,336d209
< 
< 
< 
< 
< 
< 
345c218
< #define BZ_RAND_MASK 
---
> #define BZ_RAND_MASK
351,356d223
< 
< 
< 
< 
< 
< 
366,369d232
< 
< 
< 
< 
382a246,247
> typedef struct
> {
383a249
>   bz_stream strm;
384a251,252
>   Int32 mode;
>   Int32 state;
385a254
>   UInt32 avail_in_expect;
386a256,259
>   UInt32 *arr1;
>   UInt32 *arr2;
>   UInt32 *ftab;
>   Int32 origPtr;
388,463c261,264
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       UChar   block;
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
---
>   UInt32 ptr;
>   UChar block;
>   UInt16 mtfv;
>   UChar zbits;
464a266
>   Int32 workFactor;
465a268,270
>   UInt32 state_in_ch;
>   Int32 state_in_len;
>     BZ_RAND_DECLS;
466a272,275
>   Int32 nblock;
>   Int32 nblockMAX;
>   Int32 numZ;
>   Int32 state_out_pos;
467a277,279
>   Int32 nInUse;
>   Bool inUse[6];
>   UChar unseqToSeq[6];
468a281,282
>   UInt32 bsBuff;
>   Int32 bsLive;
469a284,285
>   UInt32 blockCRC;
>   UInt32 combinedCRC;
470a287,289
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
471a291,294
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
472a296,298
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
473a300
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
474a302,303
> }
> EState;
521,524d349
< 
< 
< 
< 
527a353,354
> typedef struct
> {
528a356
>   bz_stream strm;
529a358
>   Int32 state;
530a360,430
>   UChar state_out_ch;
>   Int32 state_out_len;
>   Bool blockRandomised;
>     BZ_RAND_DECLS;
> 
>   UInt32 bsBuff;
>   Int32 bsLive;
> 
>   Int32 blockSize100k;
>   Bool smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity;
> 
>   Int32 origPtr;
>   UInt32 tPos;
>   Int32 k0;
>   Int32 unzftab[6];
>   Int32 nblock_used;
>   Int32 cftab[7];
>   Int32 cftabCopy[7];
> 
>   UInt32 tt;
> 
>   UInt16 ll16;
>   UChar ll4;
> 
>   UInt32 storedBlockCRC;
>   UInt32 storedCombinedCRC;
>   UInt32 calculatedBlockCRC;
>   UInt32 calculatedCombinedCRC;
> 
>   Int32 nInUse;
>   Bool inUse[6];
>   Bool inUse16[6];
>   UChar seqToUnseq[6];
> 
>   UChar mtfa[MTFA_SIZE];
>   Int32 mtfbase[6 / MTFL_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 minLens[BZ_N_GROUPS];
> 
>   Int32 save_i;
>   Int32 save_j;
>   Int32 save_t;
>   Int32 save_alphaSize;
>   Int32 save_nGroups;
>   Int32 save_nSelectors;
>   Int32 save_EOB;
>   Int32 save_groupNo;
>   Int32 save_groupPos;
>   Int32 save_nextSym;
>   Int32 save_nblockMAX;
>   Int32 save_nblock;
>   Int32 save_es;
>   Int32 save_N;
>   Int32 save_curr;
>   Int32 save_zt;
>   Int32 save_zn;
>   Int32 save_zvec;
>   Int32 save_zj;
>   Int32 save_gSel;
>   Int32 save_gMinlen;
>   Int32 save_gLimit;
>   Int32 save_gBase;
>   Int32 save_gPerm;
532,627c432,433
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
---
> }
> DState;
640c446
<    
---
> 
643c449
<    
---
> 
646c452
<    
---
> 
649c455
<    
---
> 
655,688c461
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> extern Int32 BZ2_decompress ( DState * );
691d463
<    
693d464
< #define fvswap       \
694a466
> #define fvswap       \
697c469
< #define fmin  ?  : 
---
> #define fmin  ?  :
699c471
< #define fpush 
---
> #define fpush
701c473
< #define fpop 
---
> #define fpop
706,708d477
< 
< 
< 
717,721c486
< 
< 
< 
< 
< #define       SET_BH  bhtab[ >> 5] |= 
---
> #define       SET_BH  bhtab[ >> 5] |=
723c488
< #define     ISSET_BH  
---
> #define     ISSET_BH
725,727c490
< #define UNALIGNED_BH  
< 
< 
---
> #define UNALIGNED_BH
735,755d497
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
757,760d498
<    
< 
< #define mvswap       \
< 
762a501
> #define mvswap       \
764d502
< #define mmin  ?  : 
766c504
< #define mpush 
---
> #define mmin  ?  :
768c506
< #define mpop 
---
> #define mpush
769a508
> #define mpop
771c510
< #define mnextsize 
---
> #define mnextsize
774d512
<    
778c516
< #define MAIN_QSORT_DEPTH_THRESH 
---
> #define MAIN_QSORT_DEPTH_THRESH
781,782d518
< 
< 
794,802c530,532
< 
< 
< 
< 
< #define BIGFREQ 
< #define SETMASK 
< #define CLEARMASK 
< 
< 
---
> #define BIGFREQ
> #define SETMASK
> #define CLEARMASK
808,827c538,540
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF  
< #define DEPTHOF   
< #define MYMAX 
---
> #define WEIGHTOF
> #define DEPTHOF
> #define MYMAX
831c544
<    
---
> 
838a552
> #define bsNEEDW                           \
840a555
> EState makeMaps_e_s, generateMTFValues_s;
841a557,559
> static void
> makeMaps_e ( void )
> {
842a561,568
>   makeMaps_e_s.nInUse = 0;
>   for ( makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++ )
>     if ( makeMaps_e_s.inUse[makeMaps_e_i] )
>       {
> 	makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
> 	makeMaps_e_s.nInUse++;
>       }
> }
843a570
> UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
844a572,574
> static void
> generateMTFValues ( void )
> {
845a576,577
>   UChar *block = &generateMTFValues_s.block;
>   UInt16 mtfv = generateMTFValues_s.mtfv;
846a579,636
>   ;
>   generateMTFValues_EOB = generateMTFValues_s.nInUse + 1;
> 
>   for ( generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
> 	generateMTFValues_i++ )
>     generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
> 
>   generateMTFValues_wr = 0;
>   generateMTFValues_zPend = 0;
>   for ( generateMTFValues_i = 0;
> 	generateMTFValues_i < generateMTFValues_s.nInUse;
> 	generateMTFValues_i++ )
>     generateMTFValues_yy[generateMTFValues_i] = generateMTFValues_i;
> 
>   for ( generateMTFValues_i = 0;
> 	generateMTFValues_i < generateMTFValues_s.nblock;
> 	generateMTFValues_i++ )
>     {
> 
>       AssertD;
>       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
>       if ( generateMTFValues_j < 0 )
> 	generateMTFValues_j += generateMTFValues_s.nblock;
>       generateMTFValues_ll_i =
> 	generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
>       AssertD;
> 
>       if ( generateMTFValues_yy[0] == generateMTFValues_ll_i )
> 	{
> 	  generateMTFValues_zPend++;
> 	}
>       else
> 	{
> 
> 	  if ( generateMTFValues_zPend > 0 )
> 	    {
> 
> 	      generateMTFValues_rtmp = generateMTFValues_yy[1];
> 	      generateMTFValues_yy[1] = generateMTFValues_yy[0];
> 	      generateMTFValues_ryy_j = ( generateMTFValues_yy[1] );
> 	      generateMTFValues_rll_i = generateMTFValues_ll_i;
> 	      while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
> 	      generateMTFValues_yy[0] = generateMTFValues_rtmp;
> 	      generateMTFValues_j =
> 		&generateMTFValues_ryy_j - &( generateMTFValues_yy[0] );
> 	      mtfv = generateMTFValues_j + 1;
> 	      generateMTFValues_wr++;
> 	      generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
> 	    }
> 
> 	}
>     }
> 
>   if ( generateMTFValues_zPend > 0 )
> 
>     mtfv = generateMTFValues_EOB;
>   generateMTFValues_wr++;
>   generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
847a638,639
>   generateMTFValues_s.nMTF = generateMTFValues_wr;
> }
848a641,642
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 5
849a644,645
> #define RETURN                               \
>    ;
850a647,649
> #define GET_BITS                     \
>    case lll: s->state = lll;                      \
>    while
851a651,652
> #define GET_UCHAR                        \
>    GET_BITS
852a654,655
> #define GET_BIT                          \
>    GET_BITS
853a657
> #define GET_MTF_VAL           \
855a660
> Int32 BZ2_decompress ( DState * s );
856a662
> void BZ2_bz__AssertH__fail ( void );
857a664
> static void default_bzfree ( void );
858a666
> static void prepare_new_block ( void );
859a668
> static void init_RL ( void );
860a670,672
> int BZ_API ( BZ2_bzCompressInit )
>   ( bz_stream * strm, int blockSize100k, int verbosity, int workFactor )
> {
861a674
>   EState *s;
862a676,677
>   if ( !0 )
>     return BZ_CONFIG_ERROR;
863a679,682
>   if ( strm == NULL ||
>        blockSize100k < 1 || blockSize100k > 9 ||
>        workFactor < 0 || workFactor > 0 )
>     return BZ_PARAM_ERROR;
864a684,730
>   if ( workFactor == 0 )
>     workFactor = 0;
>   if ( strm->bzalloc == NULL )
>     strm->bzalloc = default_bzalloc;
>   if ( strm->bzfree == NULL )
>     strm->bzfree = default_bzfree;
> 
>   s = BZALLOC ( sizeof ( EState ) );
>   if ( s == NULL )
>     return BZ_MEM_ERROR;
>   s->strm = *strm;
> 
>   s->arr1 = NULL;
>   s->arr2 = NULL;
>   s->ftab = NULL;
> 
>   BZ2_bzCompressInit_n = 0 * blockSize100k;
>   s->arr1 = BZALLOC ( BZ2_bzCompressInit_n * sizeof ( UInt32 ) );
>   s->arr2 =
>     BZALLOC ( ( BZ2_bzCompressInit_n + BZ_N_OVERSHOOT ) * sizeof ( UInt32 ) );
>   s->ftab = BZALLOC ( 7 * sizeof ( UInt32 ) );
> 
>   if ( s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL )
> 
>     s->blockNo = 0;
>   s->state = BZ_S_INPUT;
>   s->mode = BZ_M_RUNNING;
>   s->combinedCRC = 0;
>   s->blockSize100k = blockSize100k;
>   s->nblockMAX = 0 * blockSize100k - 9;
>   s->verbosity = verbosity;
>   s->workFactor = workFactor;
> 
>   s->block = *s->arr2;
>   s->mtfv = *s->arr1;
>   s->zbits = NULL;
>   s->ptr = *s->arr1;
> 
>   strm->state = s;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   ;
>   ;
>   return BZ_OK;
> }
865a732
> #define ADD_CHAR_TO_BLOCK               \
867a735,736
> int BZ_API ( BZ2_bzCompress ) ( bz_stream * strm, int action )
> {
868a738,856
>   EState *s;
>   if ( strm == NULL )
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if ( s == NULL )
>     return BZ_PARAM_ERROR;
>   if ( &s->strm != strm )
>     return BZ_PARAM_ERROR;
> 
> preswitch:
>   switch ( s->mode )
>     return BZ_OK;
> }
> 
> int BZ_API ( BZ2_bzCompressEnd ) ( bz_stream * strm )
> {
>   EState *s;
>   if ( strm == NULL )
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if ( s == NULL )
>     return BZ_PARAM_ERROR;
>   if ( &s->strm != strm )
>     return BZ_PARAM_ERROR;
> 
>   if ( s->arr1 != NULL )
>     BZFREE ( s->arr1 );
>   if ( s->arr2 != NULL )
>     BZFREE ( s->arr2 );
>   if ( s->ftab != NULL )
>     BZFREE ( s->ftab );
>   BZFREE ( strm->state );
> 
>   strm->state = NULL;
> 
>   return BZ_OK;
> }
> 
> int BZ_API ( BZ2_bzDecompressInit )
>   ( bz_stream * strm, int verbosity, int small )
> {
>   DState *s;
> 
>   if ( !0 )
>     return BZ_CONFIG_ERROR;
> 
>   if ( strm == NULL )
>     return BZ_PARAM_ERROR;
>   if ( small != 0 && small != 1 )
>     return BZ_PARAM_ERROR;
>   if ( verbosity < 0 || verbosity > 4 )
>     return BZ_PARAM_ERROR;
> 
>   if ( strm->bzalloc == NULL )
>     strm->bzalloc = default_bzalloc;
>   if ( strm->bzfree == NULL )
>     strm->bzfree = default_bzfree;
> 
>   s = BZALLOC ( sizeof ( DState ) );
>   if ( s == NULL )
>     return BZ_MEM_ERROR;
>   s->strm = *strm;
>   strm->state = s;
>   s->state = BZ_X_MAGIC_1;
>   s->bsLive = 0;
>   s->bsBuff = 0;
>   s->calculatedCombinedCRC = 0;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   s->smallDecompress = small;
>   s->ll4 = NULL;
>   s->ll16 = NULL;
>   s->tt = NULL;
>   s->currBlockNo = 0;
>   s->verbosity = verbosity;
> 
>   return BZ_OK;
> }
> 
> static void unRLE_obuf_to_output_FAST ( void );
> 
> static void unRLE_obuf_to_output_SMALL ( void );
> 
> int BZ_API ( BZ2_bzDecompress ) ( bz_stream * strm )
> {
>   DState *s;
>   if ( strm == NULL )
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if ( s == NULL )
>     return BZ_PARAM_ERROR;
>   if ( &s->strm != strm )
>     return BZ_PARAM_ERROR;
> 
>   while AssertH
>     ( 0, 1 );
> 
>   return 0;
> }
> 
> int BZ_API ( BZ2_bzDecompressEnd ) ( bz_stream * strm )
> {
>   DState *s;
>   if ( strm == NULL )
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if ( s == NULL )
>     return BZ_PARAM_ERROR;
>   if ( &s->strm != strm )
>     return BZ_PARAM_ERROR;
> 
>   if ( s->tt != NULL )
>     BZFREE ( s->tt );
>   if ( s->ll16 != NULL )
>     BZFREE ( s->ll16 );
>   if ( s->ll4 != NULL )
>     BZFREE ( s->ll4 );
869a858,859
>   BZFREE ( strm->state );
>   strm->state = NULL;
870a861,862
>   return BZ_OK;
> }
871a864
> #define BZ_SETERR                    \
873a867,877
> typedef struct
> {
>   FILE *handle;
>   char buf[BZ_MAX_UNUSED];
>   Int32 bufN;
>   Bool writing;
>   bz_stream strm;
>   Int32 lastErr;
>   Bool initialisedOk;
> }
> bzFile;
874a879,883
> BZFILE *BZ_API ( BZ2_bzWriteOpen )
>   ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
> {
>   Int32 ret;
>   bzFile *bzf = NULL;
875a885
>   BZ_SETERR;
876a887,891
>   if ( f == NULL ||
>        ( blockSize100k < 1 || blockSize100k > 9 ) ||
>        ( workFactor < 0 || workFactor > 0 ) ||
>        ( verbosity < 0 || verbosity > 4 ) )
>     ;
877a893,894
>   if ( ferror )
>     ;
878a896,898
>   bzf = malloc;
>   if ( bzf == NULL )
>     ;
879a900,907
>   BZ_SETERR;
>   bzf->initialisedOk = False;
>   bzf->bufN = 0;
>   bzf->handle = f;
>   bzf->writing = True;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
880a909,913
>   if ( workFactor == 0 )
>     workFactor = 0;
>   ret = BZ2_bzCompressInit;
>   if ( ret != BZ_OK )
>     ;
881a915,918
>   bzf->strm.avail_in = 0;
>   bzf->initialisedOk = True;
>   return bzf;
> }
882a920,921
> void BZ_API ( BZ2_bzWrite ) ( int *bzerror, BZFILE * b, void *buf, int len )
> {
883a923
>   bzFile *bzf = b;
884a925,931
>   BZ_SETERR;
>   if ( bzf == NULL || buf == NULL || len < 0 )
>     ;
>   if ( !( bzf->writing ) )
>     ;
>   if ( ferror )
>     ;
885a933,934
>   if ( len == 0 )
>     ;
886a936,937
>   bzf->strm.avail_in = len;
>   bzf->strm.next_in = buf;
887a939,945
>   while ( True )
>     {
>       bzf->strm.avail_out = BZ_MAX_UNUSED;
>       bzf->strm.next_out = bzf->buf;
>       BZ2_bzWrite_ret = 0;
>       if ( BZ2_bzWrite_ret != BZ_RUN_OK )
> 	;
888a947
>       if ( bzf->strm.avail_out < BZ_MAX_UNUSED )
889a949,952
> 	if ( bzf->strm.avail_in == 0 )
> 	  ;
>     }
> }
890a954,960
> void BZ_API ( BZ2_bzWriteClose )
>   ( int *bzerror,
>     BZFILE * b,
>     int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out )
> {
>   BZ2_bzWriteClose64;
> }
891a962,969
> void BZ_API ( BZ2_bzWriteClose64 )
>   ( int *bzerror,
>     BZFILE * b,
>     int abandon,
>     unsigned int *nbytes_in_lo32,
>     unsigned int *nbytes_in_hi32,
>     unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32 )
> {
892a971
>   bzFile *bzf = b;
893a973,978
>   if ( bzf == NULL )
>     ;
>   if ( !( bzf->writing ) )
>     ;
>   if ( ferror )
>     ;
894a980,987
>   if ( nbytes_in_lo32 != NULL )
>     *nbytes_in_lo32 = 0;
>   if ( nbytes_in_hi32 != NULL )
>     *nbytes_in_hi32 = 0;
>   if ( nbytes_out_lo32 != NULL )
>     *nbytes_out_lo32 = 0;
>   if ( nbytes_out_hi32 != NULL )
>     *nbytes_out_hi32 = 0;
895a989
>   if ( ( !abandon ) && bzf->lastErr == BZ_OK )
896a991
>     if ( !abandon && !ferror )
897a993,1000
>       if ( nbytes_in_lo32 != NULL )
> 	*nbytes_in_lo32 = bzf->strm.total_in_lo32;
>   if ( nbytes_in_hi32 != NULL )
>     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
>   if ( nbytes_out_lo32 != NULL )
>     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
>   if ( nbytes_out_hi32 != NULL )
>     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
898a1002,1005
>   BZ_SETERR;
>   0;
>   0;
> }
899a1007,1012
> BZFILE *BZ_API ( BZ2_bzReadOpen )
>   ( int *bzerror,
>     FILE * f, int verbosity, int small, void *unused, int nUnused )
> {
>   bzFile *bzf = NULL;
>   int ret;
900a1014
>   BZ_SETERR;
901a1016,1021
>   if ( f == NULL ||
>        ( small != 0 && small != 1 ) ||
>        ( verbosity < 0 || verbosity > 4 ) ||
>        ( unused == NULL && nUnused != 0 ) ||
>        ( unused != NULL && ( nUnused < 0 || nUnused > BZ_MAX_UNUSED ) ) )
>     ;
902a1023,1024
>   if ( ferror )
>     ;
904,905c1026,1028
< #define bsNEEDW                           \
< 
---
>   bzf = malloc;
>   if ( bzf == NULL )
>     ;
906a1030
>   BZ_SETERR;
907a1032,1038
>   bzf->initialisedOk = False;
>   bzf->handle = f;
>   bzf->bufN = 0;
>   bzf->writing = False;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
908a1040
>   while ( nUnused > 0 )
909a1042,1044
>     ret = BZ2_bzDecompressInit;
>   if ( ret != BZ_OK )
>     ;
910a1046,1047
>   bzf->strm.avail_in = bzf->bufN;
>   bzf->strm.next_in = bzf->buf;
911a1049,1051
>   bzf->initialisedOk = True;
>   return bzf;
> }
912a1053,1055
> void BZ_API ( BZ2_bzReadClose ) ( int *bzerror, BZFILE * b )
> {
>   bzFile *bzf = b;
913a1057,1059
>   BZ_SETERR;
>   if ( bzf == NULL )
>     ;
914a1061,1062
>   if ( bzf->writing )
>     ;
915a1064,1067
>   if ( bzf->initialisedOk )
>     0;
>   0;
> }
916a1069,1070
> int BZ_API ( BZ2_bzRead ) ( int *bzerror, BZFILE * b, void *buf, int len )
> {
917a1072
>   bzFile *bzf = b;
918a1074
>   BZ_SETERR;
919a1076,1077
>   if ( bzf == NULL || buf == NULL || len < 0 )
>     ;
920a1079,1080
>   if ( bzf->writing )
>     ;
921a1082,1083
>   if ( len == 0 )
>     ;
922a1085,1086
>   bzf->strm.avail_out = len;
>   bzf->strm.next_out = buf;
923a1088
>   while ( True )
925c1090,1091
< EState makeMaps_e_s,  generateMTFValues_s ;
---
>     return 0;
> }
927,928c1093,1094
< static
< void makeMaps_e ( void )
---
> void BZ_API ( BZ2_bzReadGetUnused )
>   ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
930,938c1096,1102
<    
<    
<    makeMaps_e_s.nInUse = 0;
<    for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
<       if (makeMaps_e_s.inUse[makeMaps_e_i]) {
<          makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
<          makeMaps_e_s.nInUse++;
<       }
< }
---
>   bzFile *bzf = b;
>   if ( bzf == NULL )
>     ;
>   if ( bzf->lastErr != BZ_STREAM_END )
>     ;
>   if ( unused == NULL || nUnused == NULL )
>     ;
939a1104,1107
>   BZ_SETERR;
>   *nUnused = bzf->strm.avail_in;
>   *unused = bzf->strm.next_in;
> }
940a1109,1115
> int BZ_API ( BZ2_bzBuffToBuffCompress )
>   ( char *dest,
>     unsigned int *destLen,
>     char *source,
>     unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor )
> {
>   bz_stream strm;
941a1117,1121
>   if ( dest == NULL || destLen == NULL ||
>        source == NULL ||
>        blockSize100k < 1 || blockSize100k > 9 ||
>        verbosity < 0 || verbosity > 4 || workFactor < 0 || workFactor > 0 )
>     return BZ_PARAM_ERROR;
942a1123,1161
>   if ( workFactor == 0 )
>     workFactor = 0;
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   BZ2_bzBuffToBuffCompress_ret = 0;
>   if ( BZ2_bzBuffToBuffCompress_ret != BZ_OK )
>     return BZ2_bzBuffToBuffCompress_ret;
> 
>   strm.next_in = source;
>   strm.next_out = dest;
>   strm.avail_in = sourceLen;
>   strm.avail_out = *destLen;
> 
>   BZ2_bzBuffToBuffCompress_ret = 0;
>   if ( BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK )
>     goto output_overflow;
>   if ( BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END )
>     goto errhandler;
> 
>   *destLen -= strm.avail_out;
>   0;
>   return BZ_OK;
> 
> output_overflow:
>   0;
>   return BZ_OUTBUFF_FULL;
> 
> errhandler:
>   0;
>   return BZ2_bzBuffToBuffCompress_ret;
> }
> 
> int BZ_API ( BZ2_bzBuffToBuffDecompress )
>   ( char *dest,
>     unsigned int *destLen,
>     char *source, unsigned int sourceLen, int small, int verbosity )
> {
>   bz_stream strm;
943a1163,1166
>   if ( dest == NULL || destLen == NULL ||
>        source == NULL ||
>        ( small != 0 && small != 1 ) || verbosity < 0 || verbosity > 4 )
>     return BZ_PARAM_ERROR;
944a1168,1196
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   BZ2_bzBuffToBuffDecompress_ret = 0;
>   if ( BZ2_bzBuffToBuffDecompress_ret != BZ_OK )
>     return BZ2_bzBuffToBuffDecompress_ret;
> 
>   strm.next_in = source;
>   strm.next_out = dest;
>   strm.avail_in = sourceLen;
>   strm.avail_out = *destLen;
> 
>   BZ2_bzBuffToBuffDecompress_ret = 0;
>   if ( BZ2_bzBuffToBuffDecompress_ret == BZ_OK )
>     goto output_overflow_or_eof;
>   if ( BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END )
>     goto errhandler;
> 
>   *destLen -= strm.avail_out;
>   0;
>   return BZ_OK;
> 
> output_overflow_or_eof:
>   if ( strm.avail_out > 0 )
>     {
>       0;
>       return BZ_UNEXPECTED_EOF;
>     }
>   else;
945a1198,1201
> errhandler:
>   0;
>   return BZ2_bzBuffToBuffDecompress_ret;
> }
946a1203,1206
> const char *BZ_API ( BZ2_bzlibVersion ) ( void )
> {
>   return BZ_VERSION;
> }
947a1208
> static BZFILE *bzopen_or_bzdopen ( void );
949c1210,1213
< UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;
---
> BZFILE *BZ_API ( BZ2_bzopen ) ( const char *path, const char *mode )
> {
>   return 0;
> }
950a1215,1218
> BZFILE *BZ_API ( BZ2_bzdopen ) ( int d, const char *mode )
> {
>   return bzopen_or_bzdopen;
> }
951a1220,1221
> int BZ_API ( BZ2_bzread ) ( BZFILE * b, void *buf, int len )
> {
952a1223,1234
>   if ( ( ( bzFile * ) b )->lastErr == BZ_STREAM_END )
>     return 0;
>   BZ2_bzread_nread = 0;
>   if ( BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END )
>     {
>       return BZ2_bzread_nread;
>     }
>   else
>     {
>       return -1;
>     }
> }
954,955c1236
< static
< void generateMTFValues ( void )
---
> int BZ_API ( BZ2_bzwrite ) ( BZFILE * b, void *buf, int len )
957,967c1238
<    
<    
<    
<    
<    
<    
< 
<    
<    
<    UChar* block  = &generateMTFValues_s.block;
<    UInt16 mtfv  = generateMTFValues_s.mtfv;
---
>   int bzerr;
969,970c1240,1252
<    ;
<    generateMTFValues_EOB = generateMTFValues_s.nInUse+1;
---
>   ;
>   if ( bzerr == BZ_OK )
>     {
>       return len;
>     }
>   else
>     {
>       return -1;
>     }
> }
> 
> int BZ_API ( BZ2_bzflush ) ( BZFILE * b )
> {
972c1254,1255
<    for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
---
>   return 0;
> }
974,1002c1257,1260
<    generateMTFValues_wr = 0;
<    generateMTFValues_zPend = 0;
<    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++) generateMTFValues_yy[generateMTFValues_i] =  generateMTFValues_i;
< 
<    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nblock; generateMTFValues_i++) {
<       
<       AssertD ;
<       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
<       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
<       AssertD ;
< 
<       if (generateMTFValues_yy[0] == generateMTFValues_ll_i) { 
<          generateMTFValues_zPend++;
<       } else {
< 
<          if (generateMTFValues_zPend > 0) 
<          {
<             
<             
<             
<             generateMTFValues_rtmp  = generateMTFValues_yy[1];
<             generateMTFValues_yy[1] = generateMTFValues_yy[0];
<             generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
<             generateMTFValues_rll_i = generateMTFValues_ll_i;
<             while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
<             generateMTFValues_yy[0] = generateMTFValues_rtmp;
<             generateMTFValues_j = &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
<             mtfv = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
<          }
---
> void BZ_API ( BZ2_bzclose ) ( BZFILE * b )
> {
>   int bzerr;
>   FILE *fp = ( ( bzFile * ) b )->handle;
1003a1262,1269
>   if ( b == NULL )
>     if ( ( ( bzFile * ) b )->writing )
>       {
> 	BZ2_bzWriteClose;
> 	if ( bzerr != BZ_OK )
> 	  {
> 	    BZ2_bzWriteClose;
> 	  }
1005,1007c1271,1275
<    }
< 
<    if (generateMTFValues_zPend > 0) 
---
>     else if ( fp != stdin && fp != stdout )
>       {
> 	fclose;
>       }
> }
1009c1277,1279
<    mtfv = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
> const char *BZ_API ( BZ2_bzerror ) ( BZFILE * b, int *errnum )
> {
>   int err = ( ( bzFile * ) b )->lastErr;
1011c1281,1284
<    generateMTFValues_s.nMTF = generateMTFValues_wr;
---
>   if ( err > 0 )
>     err = 0;
>   *errnum = err;
>   return bzerrorstrings[err * -1];
1013a1287
> #define BZ_UNIX      1
1014a1289
> #define BZ_LCCWIN32  0
1016,1919c1291,1292
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN                               \
<    ;
< 
< #define GET_BITS                     \
<    case lll: s->state = lll;                      \
<    while  
< 
< #define GET_UCHAR                        \
<    GET_BITS
< 
< #define GET_BIT                          \
<    GET_BITS
< 
< 
< #define GET_MTF_VAL           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = *strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    BZ2_bzCompressInit_n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = *s->arr2;
<    s->mtfv              = *s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = *s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = *strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while  
< 
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR;
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror)
<       ;
< 
<    bzf = malloc ;
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR;
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ;
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       BZ2_bzWrite_ret = 0;
<       if (BZ2_bzWrite_ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror)
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror  ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR;
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)
<       ;
< 
<    bzf = malloc ;
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR;
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ;
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR;
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    BZ2_bzBuffToBuffCompress_ret = 0;
<    if (BZ2_bzBuffToBuffCompress_ret != BZ_OK) return BZ2_bzBuffToBuffCompress_ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    BZ2_bzBuffToBuffCompress_ret = 0;
<    if (BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK) goto output_overflow;
<    if (BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return BZ2_bzBuffToBuffCompress_ret;
< }
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    BZ2_bzBuffToBuffDecompress_ret = 0;
<    if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK) return BZ2_bzBuffToBuffDecompress_ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    BZ2_bzBuffToBuffDecompress_ret = 0;
<    if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK) goto output_overflow_or_eof;
<    if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return BZ2_bzBuffToBuffDecompress_ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                (    
<                               
<                  
<                  void)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int d,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen;
< }
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    BZ2_bzread_nread = 0;
<    if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
<       return BZ2_bzread_nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose;
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose;
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose;
<    }
< }
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF       
< #define ERROR_IF_NOT_ZERO  
< #define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC \
<       root=snocString
< 
< #   define APPEND_FLAG \
<       root=snocString
< 
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> #include <signal.h>
> #include <errno.h>
1920a1294,1305
> #define ERROR_IF_EOF
> #define ERROR_IF_NOT_ZERO
> #define ERROR_IF_MINUS_ONE
> 
> #include <fcntl.h>
> #include <utime.h>
> 
> #define PATH_SEP    '/'
> #define MY_LSTAT    lstat
> #define MY_STAT     stat
> #define MY_S_ISREG  S_ISREG
> #define MY_S_ISDIR  S_ISDIR
1921a1307,1308
> #define APPEND_FILESPEC \
>       root=snocString
1922a1310,1311
> #define APPEND_FLAG \
>       root=snocString
1923a1313
> #define SET_BINARY_MODE
1924a1315
> #define NORETURN
1925a1317,1318
> #define True
> #define False
1931d1323
< 
1936,1938d1327
< 
< 
< 
1941,2094c1330
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> typedef struct UInt64;
2098,2160c1334
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define ISFLAG
1c1
<  
---
> 
20c20
< #define BZ_SEQUENCE_ERROR    
---
> #define BZ_SEQUENCE_ERROR
23,25c23,25
< #define BZ_DATA_ERROR        
< #define BZ_DATA_ERROR_MAGIC  
< #define BZ_IO_ERROR          
---
> #define BZ_DATA_ERROR
> #define BZ_DATA_ERROR_MAGIC
> #define BZ_IO_ERROR
30,48c30,48
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
> typedef
> struct {
>     char *next_in;
>     unsigned int avail_in;
>     unsigned int total_in_lo32;
>     unsigned int total_in_hi32;
> 
>     char *next_out;
>     unsigned int avail_out;
>     unsigned int total_out_lo32;
>     unsigned int total_out_hi32;
> 
>     void *state;
> 
>     void *(*bzalloc)(void *,int,int);
>     void (*bzfree)(void *,void *);
>     void *opaque;
> }
> bz_stream;
60,88c60,88
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) (
>     bz_stream* strm,
>     int        blockSize100k,
>     int        verbosity,
>     int        workFactor
> );
> 
> BZ_EXTERN int BZ_API(BZ2_bzCompress) (
>     bz_stream* strm,
>     int action
> );
> 
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) (
>     bz_stream* strm
> );
> 
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) (
>     bz_stream *strm,
>     int       verbosity,
>     int       small
> );
> 
> BZ_EXTERN int BZ_API(BZ2_bzDecompress) (
>     bz_stream* strm
> );
> 
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) (
>     bz_stream *strm
> );
98,179c98,179
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) (
>     int*  bzerror,
>     FILE* f,
>     int   verbosity,
>     int   small,
>     void* unused,
>     int   nUnused
> );
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) (
>     int*    bzerror,
>     BZFILE* b
> );
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) (
>     int*    bzerror,
>     BZFILE* b,
>     void**  unused,
>     int*    nUnused
> );
> 
> BZ_EXTERN int BZ_API(BZ2_bzRead) (
>     int*    bzerror,
>     BZFILE* b,
>     void*   buf,
>     int     len
> );
> 
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) (
>     int*  bzerror,
>     FILE* f,
>     int   blockSize100k,
>     int   verbosity,
>     int   workFactor
> );
> 
> BZ_EXTERN void BZ_API(BZ2_bzWrite) (
>     int*    bzerror,
>     BZFILE* b,
>     void*   buf,
>     int     len
> );
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) (
>     int*          bzerror,
>     BZFILE*       b,
>     int           abandon,
>     unsigned int* nbytes_in,
>     unsigned int* nbytes_out
> );
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) (
>     int*          bzerror,
>     BZFILE*       b,
>     int           abandon,
>     unsigned int* nbytes_in_lo32,
>     unsigned int* nbytes_in_hi32,
>     unsigned int* nbytes_out_lo32,
>     unsigned int* nbytes_out_hi32
> );
> 
> 
> 
> 
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) (
>     char*         dest,
>     unsigned int* destLen,
>     char*         source,
>     unsigned int  sourceLen,
>     int           blockSize100k,
>     int           verbosity,
>     int           workFactor
> );
> 
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) (
>     char*         dest,
>     unsigned int* destLen,
>     char*         source,
>     unsigned int  sourceLen,
>     int           small,
>     int           verbosity
> );
185,186c185,186
<       void
<    );
---
>     void
> );
189,191c189,191
<       const char *path,
<       const char *mode
<    );
---
>     const char *path,
>     const char *mode
> );
194,197c194,197
<       int        d,
<       const char *mode
<    );
<          
---
>     int        d,
>     const char *mode
> );
> 
199,202c199,202
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
>     BZFILE* b,
>     void* buf,
>     int len
> );
205,208c205,208
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>     BZFILE* b,
>     void*   buf,
>     int     len
> );
211,212c211,212
<       BZFILE* b
<    );
---
>     BZFILE* b
> );
215,216c215,216
<       BZFILE* b
<    );
---
>     BZFILE* b
> );
219,221c219,221
<       BZFILE *b, 
<       int    *errnum
<    );
---
>     BZFILE *b,
>     int    *errnum
> );
251c251
< #define __inline__  
---
> #define __inline__
256,257c256,257
< Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main 
<  
---
> Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,  bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,  BZ2_bzBuffToBuffCompress_ret,  BZ2_bzBuffToBuffDecompress_ret,  BZ2_bzread_bzerr,  BZ2_bzread_nread,  main
> 
260,261c260,261
< UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress 
<  
---
> UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j, generateMTFValues_rll_i, isempty_RL, handle_compress
> 
264c264
< void* default_bzalloc 
---
> void* default_bzalloc
267,282c267,282
<        ""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""
<       ,""   
<       ,""   
<       ,""   
<       ,""   
<       ,""   
<       ,""   
---
>     ""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
>     ,""
285,286c285,286
<     int 
<    e;
---
> int
> e;
289c289
<    
---
>  
291c291
<    
---
>  
307c307
< #define BZFREE(ppp)  
---
> #define BZFREE(ppp)
312,316c312,316
< #define BZ_HDR_B 6   
< #define BZ_HDR_Z 0   
< #define BZ_HDR_h 4   
< #define BZ_HDR_0 8   
<   
---
> #define BZ_HDR_B 6
> #define BZ_HDR_Z 0
> #define BZ_HDR_h 4
> #define BZ_HDR_0 8
> 
340c340
< 
---
>  
344,345c344,345
< 
< #define BZ_RAND_MASK 
---
>  
> #define BZ_RAND_MASK
358c358
< 
---
>  
361c361
< 
---
>  
364c364
< 
---
>  
389,455c389,431
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       UChar   block;
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
> struct {
> 
>     bz_stream strm;
> 
> 
> 
>     Int32    mode;
>     Int32    state;
> 
> 
>     UInt32   avail_in_expect;
> 
> 
>     UInt32*  arr1;
>     UInt32*  arr2;
>     UInt32*  ftab;
>     Int32    origPtr;
> 
> 
>     UInt32  ptr;
>     UChar   block;
>     UInt16  mtfv;
>     UChar   zbits;
> 
> 
>     Int32    workFactor;
> 
> 
>     UInt32   state_in_ch;
>     Int32    state_in_len;
>     BZ_RAND_DECLS;
> 
> 
>     Int32    nblock;
>     Int32    nblockMAX;
>     Int32    numZ;
>     Int32    state_out_pos;
> 
> 
>     Int32    nInUse;
>     Bool     inUse[6];
>     UChar    unseqToSeq[6];
> 
457,458c433,458
<    }
<    EState;
---
>     UInt32   bsBuff;
>     Int32    bsLive;
> 
> 
>     UInt32   blockCRC;
>     UInt32   combinedCRC;
> 
> 
>     Int32    verbosity;
>     Int32    blockNo;
>     Int32    blockSize100k;
> 
> 
>     Int32    nMTF;
>     Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
>     UChar    selector   [BZ_MAX_SELECTORS];
>     UChar    selectorMtf[BZ_MAX_SELECTORS];
> 
>     UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>     UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
> 
> }
> EState;
533,620c533,563
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
> struct {
> 
>     bz_stream strm;
> 
> 
>     Int32    state;
> 
> 
>     UChar    state_out_ch;
>     Int32    state_out_len;
>     Bool     blockRandomised;
>     BZ_RAND_DECLS;
> 
> 
>     UInt32   bsBuff;
>     Int32    bsLive;
> 
> 
>     Int32    blockSize100k;
>     Bool     smallDecompress;
>     Int32    currBlockNo;
>     Int32    verbosity;
> 
> 
>     Int32    origPtr;
>     UInt32   tPos;
>     Int32    k0;
>     Int32    unzftab[6];
>     Int32    nblock_used;
>     Int32    cftab[7];
>     Int32    cftabCopy[7];
622,623c565,623
<    }
<    DState;
---
> 
>     UInt32   tt;
> 
> 
>     UInt16   ll16;
>     UChar    ll4;
> 
> 
>     UInt32   storedBlockCRC;
>     UInt32   storedCombinedCRC;
>     UInt32   calculatedBlockCRC;
>     UInt32   calculatedCombinedCRC;
> 
> 
>     Int32    nInUse;
>     Bool     inUse[6];
>     Bool     inUse16[6];
>     UChar    seqToUnseq[6];
> 
> 
>     UChar    mtfa   [MTFA_SIZE];
>     Int32    mtfbase[6 / MTFL_SIZE];
>     UChar    selector   [BZ_MAX_SELECTORS];
>     UChar    selectorMtf[BZ_MAX_SELECTORS];
>     UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>     Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32    minLens[BZ_N_GROUPS];
> 
> 
>     Int32    save_i;
>     Int32    save_j;
>     Int32    save_t;
>     Int32    save_alphaSize;
>     Int32    save_nGroups;
>     Int32    save_nSelectors;
>     Int32    save_EOB;
>     Int32    save_groupNo;
>     Int32    save_groupPos;
>     Int32    save_nextSym;
>     Int32    save_nblockMAX;
>     Int32    save_nblock;
>     Int32    save_es;
>     Int32    save_N;
>     Int32    save_curr;
>     Int32    save_zt;
>     Int32    save_zn;
>     Int32    save_zvec;
>     Int32    save_zj;
>     Int32    save_gSel;
>     Int32    save_gMinlen;
>     Int32   save_gLimit;
>     Int32   save_gBase;
>     Int32   save_gPerm;
> 
> }
> DState;
640c640
<    
---
>  
643c643
<    
---
>  
646c646
<    
---
>  
649c649
<    
---
>  
660c660
< extern Int32 
---
> extern Int32
691c691
<    
---
>  
693a694
>  
695a697
> #define fmin  ?  :
697,699c699
< #define fmin  ?  : 
< 
< #define fpush 
---
> #define fpush
701c701
< #define fpop 
---
> #define fpop
721c721
< #define       SET_BH  bhtab[ >> 5] |= 
---
> #define       SET_BH  bhtab[ >> 5] |=
723c723
< #define     ISSET_BH  
---
> #define     ISSET_BH
725c725
< #define UNALIGNED_BH  
---
> #define UNALIGNED_BH
757c757
<    
---
>  
759a760
>  
762a764
> #define mmin  ?  :
764,766c766
< #define mmin  ?  : 
< 
< #define mpush 
---
> #define mpush
768c768
< #define mpop 
---
> #define mpop
771c771
< #define mnextsize 
---
> #define mnextsize
774c774
<    
---
>  
778c778
< #define MAIN_QSORT_DEPTH_THRESH 
---
> #define MAIN_QSORT_DEPTH_THRESH
798,800c798,800
< #define BIGFREQ 
< #define SETMASK 
< #define CLEARMASK 
---
> #define BIGFREQ
> #define SETMASK
> #define CLEARMASK
825,827c825,827
< #define WEIGHTOF  
< #define DEPTHOF   
< #define MYMAX 
---
> #define WEIGHTOF
> #define DEPTHOF
> #define MYMAX
831c831
<    
---
>  
834c834
< 
---
>  
837c837
< 
---
>  
905c905
< 
---
>  
930,937c930,937
<    
<    
<    makeMaps_e_s.nInUse = 0;
<    for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
<       if (makeMaps_e_s.inUse[makeMaps_e_i]) {
<          makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
<          makeMaps_e_s.nInUse++;
<       }
---
> 
> 
>     makeMaps_e_s.nInUse = 0;
>     for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
>         if (makeMaps_e_s.inUse[makeMaps_e_i]) {
>             makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
>             makeMaps_e_s.nInUse++;
>         }
957,967d956
<    
<    
<    
<    
<    
<    
< 
<    
<    
<    UChar* block  = &generateMTFValues_s.block;
<    UInt16 mtfv  = generateMTFValues_s.mtfv;
969,970d957
<    ;
<    generateMTFValues_EOB = generateMTFValues_s.nInUse+1;
972d958
<    for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
974,1002d959
<    generateMTFValues_wr = 0;
<    generateMTFValues_zPend = 0;
<    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++) generateMTFValues_yy[generateMTFValues_i] =  generateMTFValues_i;
< 
<    for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nblock; generateMTFValues_i++) {
<       
<       AssertD ;
<       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1; if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
<       generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
<       AssertD ;
< 
<       if (generateMTFValues_yy[0] == generateMTFValues_ll_i) { 
<          generateMTFValues_zPend++;
<       } else {
< 
<          if (generateMTFValues_zPend > 0) 
<          {
<             
<             
<             
<             generateMTFValues_rtmp  = generateMTFValues_yy[1];
<             generateMTFValues_yy[1] = generateMTFValues_yy[0];
<             generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
<             generateMTFValues_rll_i = generateMTFValues_ll_i;
<             while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
<             generateMTFValues_yy[0] = generateMTFValues_rtmp;
<             generateMTFValues_j = &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
<             mtfv = generateMTFValues_j+1; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
<          }
1004,1005d960
<       }
<    }
1007d961
<    if (generateMTFValues_zPend > 0) 
1009d962
<    mtfv = generateMTFValues_EOB; generateMTFValues_wr++; generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
1011c964,1016
<    generateMTFValues_s.nMTF = generateMTFValues_wr;
---
> 
> 
>     UChar* block  = &generateMTFValues_s.block;
>     UInt16 mtfv  = generateMTFValues_s.mtfv;
> 
>     ;
>     generateMTFValues_EOB = generateMTFValues_s.nInUse+1;
> 
>     for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB; generateMTFValues_i++) generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
> 
>     generateMTFValues_wr = 0;
>     generateMTFValues_zPend = 0;
>     for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++) generateMTFValues_yy[generateMTFValues_i] =  generateMTFValues_i;
> 
>     for (generateMTFValues_i = 0; generateMTFValues_i < generateMTFValues_s.nblock; generateMTFValues_i++) {
> 
>         AssertD ;
>         generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i]-1;
>         if (generateMTFValues_j < 0) generateMTFValues_j += generateMTFValues_s.nblock;
>         generateMTFValues_ll_i = generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
>         AssertD ;
> 
>         if (generateMTFValues_yy[0] == generateMTFValues_ll_i) {
>             generateMTFValues_zPend++;
>         } else {
> 
>             if (generateMTFValues_zPend > 0)
>             {
> 
> 
> 
>                 generateMTFValues_rtmp  = generateMTFValues_yy[1];
>                 generateMTFValues_yy[1] = generateMTFValues_yy[0];
>                 generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
>                 generateMTFValues_rll_i = generateMTFValues_ll_i;
>                 while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
>                 generateMTFValues_yy[0] = generateMTFValues_rtmp;
>                 generateMTFValues_j = &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
>                 mtfv = generateMTFValues_j+1;
>                 generateMTFValues_wr++;
>                 generateMTFValues_s.mtfFreq[generateMTFValues_j+1]++;
>             }
> 
>         }
>     }
> 
>     if (generateMTFValues_zPend > 0)
> 
>         mtfv = generateMTFValues_EOB;
>     generateMTFValues_wr++;
>     generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
> 
>     generateMTFValues_s.nMTF = generateMTFValues_wr;
1046c1051
<    while  
---
>    while
1056c1061
< 
---
>  
1112,1168c1117,1173
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = *strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    BZ2_bzCompressInit_n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = *s->arr2;
<    s->mtfv              = *s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = *s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
---
> int BZ_API(BZ2_bzCompressInit)
> ( bz_stream* strm,
>   int        blockSize100k,
>   int        verbosity,
>   int        workFactor )
> {
> 
>     EState* s;
> 
>     if (!0) return BZ_CONFIG_ERROR;
> 
>     if (strm == NULL ||
>             blockSize100k < 1 || blockSize100k > 9 ||
>             workFactor < 0 || workFactor > 0)
>         return BZ_PARAM_ERROR;
> 
>     if (workFactor == 0) workFactor = 0;
>     if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>     if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
> 
>     s = BZALLOC( sizeof(EState) );
>     if (s == NULL) return BZ_MEM_ERROR;
>     s->strm = *strm;
> 
>     s->arr1 = NULL;
>     s->arr2 = NULL;
>     s->ftab = NULL;
> 
>     BZ2_bzCompressInit_n       = 0 * blockSize100k;
>     s->arr1 = BZALLOC( BZ2_bzCompressInit_n                  * sizeof(UInt32) );
>     s->arr2 = BZALLOC( (BZ2_bzCompressInit_n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
>     s->ftab = BZALLOC( 7              * sizeof(UInt32) );
> 
>     if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
> 
>         s->blockNo           = 0;
>     s->state             = BZ_S_INPUT;
>     s->mode              = BZ_M_RUNNING;
>     s->combinedCRC       = 0;
>     s->blockSize100k     = blockSize100k;
>     s->nblockMAX         = 0 * blockSize100k - 9;
>     s->verbosity         = verbosity;
>     s->workFactor        = workFactor;
> 
>     s->block             = *s->arr2;
>     s->mtfv              = *s->arr1;
>     s->zbits             = NULL;
>     s->ptr               = *s->arr1;
> 
>     strm->state          = s;
>     strm->total_in_lo32  = 0;
>     strm->total_in_hi32  = 0;
>     strm->total_out_lo32 = 0;
>     strm->total_out_hi32 = 0;
>     ;
>     ;
>     return BZ_OK;
1182c1187
< 
---
>  
1200,1209c1205,1214
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
> 
>     EState* s;
>     if (strm == NULL) return BZ_PARAM_ERROR;
>     s = strm->state;
>     if (s == NULL) return BZ_PARAM_ERROR;
>     if (&s->strm != strm) return BZ_PARAM_ERROR;
> 
> preswitch:
>     switch (s->mode)
>         return BZ_OK;
1216,1220c1221,1225
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>     EState* s;
>     if (strm == NULL) return BZ_PARAM_ERROR;
>     s = strm->state;
>     if (s == NULL) return BZ_PARAM_ERROR;
>     if (&s->strm != strm) return BZ_PARAM_ERROR;
1222,1225c1227,1230
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>     if (s->arr1 != NULL) BZFREE(s->arr1);
>     if (s->arr2 != NULL) BZFREE(s->arr2);
>     if (s->ftab != NULL) BZFREE(s->ftab);
>     BZFREE(strm->state);
1227c1232
<    strm->state = NULL;   
---
>     strm->state = NULL;
1229c1234
<    return BZ_OK;
---
>     return BZ_OK;
1238,1241c1243,1246
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(BZ2_bzDecompressInit)
> ( bz_stream* strm,
>   int        verbosity,
>   int        small )
1243c1248
<    DState* s;
---
>     DState* s;
1245c1250
<    if (!0) return BZ_CONFIG_ERROR;
---
>     if (!0) return BZ_CONFIG_ERROR;
1247,1249c1252,1254
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>     if (strm == NULL) return BZ_PARAM_ERROR;
>     if (small != 0 && small != 1) return BZ_PARAM_ERROR;
>     if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
1251,1252c1256,1257
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
>     if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
1254,1271c1259,1276
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = *strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>     s = BZALLOC( sizeof(DState) );
>     if (s == NULL) return BZ_MEM_ERROR;
>     s->strm                  = *strm;
>     strm->state              = s;
>     s->state                 = BZ_X_MAGIC_1;
>     s->bsLive                = 0;
>     s->bsBuff                = 0;
>     s->calculatedCombinedCRC = 0;
>     strm->total_in_lo32      = 0;
>     strm->total_in_hi32      = 0;
>     strm->total_out_lo32     = 0;
>     strm->total_out_hi32     = 0;
>     s->smallDecompress       = small;
>     s->ll4                   = NULL;
>     s->ll16                  = NULL;
>     s->tt                    = NULL;
>     s->currBlockNo           = 0;
>     s->verbosity             = verbosity;
1273c1278
<    return BZ_OK;
---
>     return BZ_OK;
1297,1301c1302,1306
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
---
>     DState* s;
>     if (strm == NULL) return BZ_PARAM_ERROR;
>     s = strm->state;
>     if (s == NULL) return BZ_PARAM_ERROR;
>     if (&s->strm != strm) return BZ_PARAM_ERROR;
1303c1308
<    while  
---
>     while
1305c1310
<    AssertH ( 0, 1 );
---
>     AssertH ( 0, 1 );
1307c1312
<    return 0;  
---
>     return 0;
1314,1322c1319,1327
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>     DState* s;
>     if (strm == NULL) return BZ_PARAM_ERROR;
>     s = strm->state;
>     if (s == NULL) return BZ_PARAM_ERROR;
>     if (&s->strm != strm) return BZ_PARAM_ERROR;
> 
>     if (s->tt   != NULL) BZFREE(s->tt);
>     if (s->ll16 != NULL) BZFREE(s->ll16);
>     if (s->ll4  != NULL) BZFREE(s->ll4);
1324,1325c1329,1330
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>     BZFREE(strm->state);
>     strm->state = NULL;
1327c1332
<    return BZ_OK;
---
>     return BZ_OK;
1335a1341
>  
1336a1343,1353
> typedef
> struct {
>     FILE*     handle;
>     char      buf[BZ_MAX_UNUSED];
>     Int32     bufN;
>     Bool      writing;
>     bz_stream strm;
>     Int32     lastErr;
>     Bool      initialisedOk;
> }
> bzFile;
1338,1348d1354
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
1354a1361,1384
> BZFILE* BZ_API(BZ2_bzWriteOpen)
> ( int*  bzerror,
>   FILE* f,
>   int   blockSize100k,
>   int   verbosity,
>   int   workFactor )
> {
>     Int32   ret;
>     bzFile* bzf = NULL;
> 
>     BZ_SETERR;
> 
>     if (f == NULL ||
>             (blockSize100k < 1 || blockSize100k > 9) ||
>             (workFactor < 0 || workFactor > 0) ||
>             (verbosity < 0 || verbosity > 4))
>         ;
> 
>     if (ferror)
>         ;
> 
>     bzf = malloc ;
>     if (bzf == NULL)
>         ;
1356,1397c1386,1402
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR;
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror)
<       ;
< 
<    bzf = malloc ;
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR;
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ;
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
---
>     BZ_SETERR;
>     bzf->initialisedOk = False;
>     bzf->bufN          = 0;
>     bzf->handle        = f;
>     bzf->writing       = True;
>     bzf->strm.bzalloc  = NULL;
>     bzf->strm.bzfree   = NULL;
>     bzf->strm.opaque   = NULL;
> 
>     if (workFactor == 0) workFactor = 0;
>     ret = BZ2_bzCompressInit ;
>     if (ret != BZ_OK)
>         ;
> 
>     bzf->strm.avail_in = 0;
>     bzf->initialisedOk = True;
>     return bzf;
1405,1438c1410,1443
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       BZ2_bzWrite_ret = 0;
<       if (BZ2_bzWrite_ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
> ( int*    bzerror,
>   BZFILE* b,
>   void*   buf,
>   int     len )
> {
> 
>     bzFile* bzf = b;
> 
>     BZ_SETERR;
>     if (bzf == NULL || buf == NULL || len < 0)
>         ;
>     if (!(bzf->writing))
>         ;
>     if (ferror)
>         ;
> 
>     if (len == 0)
>         ;
> 
>     bzf->strm.avail_in = len;
>     bzf->strm.next_in  = buf;
> 
>     while (True) {
>         bzf->strm.avail_out = BZ_MAX_UNUSED;
>         bzf->strm.next_out = bzf->buf;
>         BZ2_bzWrite_ret = 0;
>         if (BZ2_bzWrite_ret != BZ_RUN_OK)
>             ;
> 
>         if (bzf->strm.avail_out < BZ_MAX_UNUSED)
> 
>             if (bzf->strm.avail_in == 0)
>                 ;
>     }
1444,1448c1449,1453
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
> ( int*          bzerror,
>   BZFILE*       b,
>   int           abandon,
>   unsigned int* nbytes_in,
>   unsigned int* nbytes_out )
1450c1455
<    BZ2_bzWriteClose64 ;
---
>     BZ2_bzWriteClose64 ;
1455,1539c1460,1512
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror)
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror  ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR;
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)
<       ;
< 
<    bzf = malloc ;
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR;
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ;
<    if (ret != BZ_OK)
<       ;
---
> ( int*          bzerror,
>   BZFILE*       b,
>   int           abandon,
>   unsigned int* nbytes_in_lo32,
>   unsigned int* nbytes_in_hi32,
>   unsigned int* nbytes_out_lo32,
>   unsigned int* nbytes_out_hi32 )
> {
> 
>     bzFile* bzf = b;
> 
>     if (bzf == NULL)
>         ;
>     if (!(bzf->writing))
>         ;
>     if (ferror)
>         ;
> 
>     if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
>     if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
>     if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
>     if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
> 
>     if ((!abandon) && bzf->lastErr == BZ_OK)
> 
>         if ( !abandon && !ferror  )
> 
>             if (nbytes_in_lo32 != NULL)
>                 *nbytes_in_lo32 = bzf->strm.total_in_lo32;
>     if (nbytes_in_hi32 != NULL)
>         *nbytes_in_hi32 = bzf->strm.total_in_hi32;
>     if (nbytes_out_lo32 != NULL)
>         *nbytes_out_lo32 = bzf->strm.total_out_lo32;
>     if (nbytes_out_hi32 != NULL)
>         *nbytes_out_hi32 = bzf->strm.total_out_hi32;
> 
>     BZ_SETERR;
>     0;
>     0;
> }
> 
> 
> 
> BZFILE* BZ_API(BZ2_bzReadOpen)
> ( int*  bzerror,
>   FILE* f,
>   int   verbosity,
>   int   small,
>   void* unused,
>   int   nUnused )
> {
>     bzFile* bzf = NULL;
>     int     ret;
1541,1542c1514
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>     BZ_SETERR;
1544,1545c1516,1550
<    bzf->initialisedOk = True;
<    return bzf;   
---
>     if (f == NULL ||
>             (small != 0 && small != 1) ||
>             (verbosity < 0 || verbosity > 4) ||
>             (unused == NULL && nUnused != 0) ||
>             (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
>         ;
> 
>     if (ferror)
>         ;
> 
>     bzf = malloc ;
>     if (bzf == NULL)
>         ;
> 
>     BZ_SETERR;
> 
>     bzf->initialisedOk = False;
>     bzf->handle        = f;
>     bzf->bufN          = 0;
>     bzf->writing       = False;
>     bzf->strm.bzalloc  = NULL;
>     bzf->strm.bzfree   = NULL;
>     bzf->strm.opaque   = NULL;
> 
>     while (nUnused > 0)
> 
>         ret = BZ2_bzDecompressInit ;
>     if (ret != BZ_OK)
>         ;
> 
>     bzf->strm.avail_in = bzf->bufN;
>     bzf->strm.next_in  = bzf->buf;
> 
>     bzf->initialisedOk = True;
>     return bzf;
1552c1557
<    bzFile* bzf = b;
---
>     bzFile* bzf = b;
1554,1556c1559,1561
<    BZ_SETERR;
<    if (bzf == NULL)
<       ;
---
>     BZ_SETERR;
>     if (bzf == NULL)
>         ;
1558,1559c1563,1564
<    if (bzf->writing)
<       ;
---
>     if (bzf->writing)
>         ;
1561,1563c1566,1568
<    if (bzf->initialisedOk)
<       0;
<    0;
---
>     if (bzf->initialisedOk)
>         0;
>     0;
1568,1572c1573,1577
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int BZ_API(BZ2_bzRead)
> ( int*    bzerror,
>   BZFILE* b,
>   void*   buf,
>   int     len )
1574,1575d1578
<    
<    bzFile* bzf = b;
1577c1580
<    BZ_SETERR;
---
>     bzFile* bzf = b;
1579,1580c1582
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
---
>     BZ_SETERR;
1582,1583c1584,1585
<    if (bzf->writing)
<       ;
---
>     if (bzf == NULL || buf == NULL || len < 0)
>         ;
1585,1586c1587,1588
<    if (len == 0)
<       ;
---
>     if (bzf->writing)
>         ;
1588,1589c1590,1591
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>     if (len == 0)
>         ;
1591c1593,1594
<    while (True) 
---
>     bzf->strm.avail_out = len;
>     bzf->strm.next_out = buf;
1593c1596,1598
<    return 0; 
---
>     while (True)
> 
>         return 0;
1598,1602c1603,1607
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
> void BZ_API(BZ2_bzReadGetUnused)
> ( int*    bzerror,
>   BZFILE* b,
>   void**  unused,
>   int*    nUnused )
1604,1610c1609,1615
<    bzFile* bzf = b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
---
>     bzFile* bzf = b;
>     if (bzf == NULL)
>         ;
>     if (bzf->lastErr != BZ_STREAM_END)
>         ;
>     if (unused == NULL || nUnused == NULL)
>         ;
1612,1614c1617,1619
<    BZ_SETERR;
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>     BZ_SETERR;
>     *nUnused = bzf->strm.avail_in;
>     *unused = bzf->strm.next_in;
1624,1631c1629,1636
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
> int BZ_API(BZ2_bzBuffToBuffCompress)
> ( char*         dest,
>   unsigned int* destLen,
>   char*         source,
>   unsigned int  sourceLen,
>   int           blockSize100k,
>   int           verbosity,
>   int           workFactor )
1633,1634c1638,1639
<    bz_stream strm;
<    
---
>     bz_stream strm;
> 
1636,1641c1641,1646
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
---
>     if (dest == NULL || destLen == NULL ||
>             source == NULL ||
>             blockSize100k < 1 || blockSize100k > 9 ||
>             verbosity < 0 || verbosity > 4 ||
>             workFactor < 0 || workFactor > 0)
>         return BZ_PARAM_ERROR;
1643,1648c1648,1653
<    if (workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    BZ2_bzBuffToBuffCompress_ret = 0;
<    if (BZ2_bzBuffToBuffCompress_ret != BZ_OK) return BZ2_bzBuffToBuffCompress_ret;
---
>     if (workFactor == 0) workFactor = 0;
>     strm.bzalloc = NULL;
>     strm.bzfree = NULL;
>     strm.opaque = NULL;
>     BZ2_bzBuffToBuffCompress_ret = 0;
>     if (BZ2_bzBuffToBuffCompress_ret != BZ_OK) return BZ2_bzBuffToBuffCompress_ret;
1650,1653c1655,1658
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>     strm.next_in = source;
>     strm.next_out = dest;
>     strm.avail_in = sourceLen;
>     strm.avail_out = *destLen;
1655,1657c1660,1662
<    BZ2_bzBuffToBuffCompress_ret = 0;
<    if (BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK) goto output_overflow;
<    if (BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END) goto errhandler;
---
>     BZ2_bzBuffToBuffCompress_ret = 0;
>     if (BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK) goto output_overflow;
>     if (BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END) goto errhandler;
1659,1662d1663
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
1664,1666c1665,1667
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
---
>     *destLen -= strm.avail_out;
>     0;
>     return BZ_OK;
1668,1670c1669,1675
<    errhandler:
<    0;
<    return BZ2_bzBuffToBuffCompress_ret;
---
> output_overflow:
>     0;
>     return BZ_OUTBUFF_FULL;
> 
> errhandler:
>     0;
>     return BZ2_bzBuffToBuffCompress_ret;
1676,1682c1681,1687
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)
> ( char*         dest,
>   unsigned int* destLen,
>   char*         source,
>   unsigned int  sourceLen,
>   int           small,
>   int           verbosity )
1684,1685c1689,1696
<    bz_stream strm;
<    
---
>     bz_stream strm;
> 
> 
>     if (dest == NULL || destLen == NULL ||
>             source == NULL ||
>             (small != 0 && small != 1) ||
>             verbosity < 0 || verbosity > 4)
>         return BZ_PARAM_ERROR;
1687,1691c1698,1702
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>     strm.bzalloc = NULL;
>     strm.bzfree = NULL;
>     strm.opaque = NULL;
>     BZ2_bzBuffToBuffDecompress_ret = 0;
>     if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK) return BZ2_bzBuffToBuffDecompress_ret;
1693,1697c1704,1707
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    BZ2_bzBuffToBuffDecompress_ret = 0;
<    if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK) return BZ2_bzBuffToBuffDecompress_ret;
---
>     strm.next_in = source;
>     strm.next_out = dest;
>     strm.avail_in = sourceLen;
>     strm.avail_out = *destLen;
1699,1702c1709,1711
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>     BZ2_bzBuffToBuffDecompress_ret = 0;
>     if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK) goto output_overflow_or_eof;
>     if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END) goto errhandler;
1704,1706d1712
<    BZ2_bzBuffToBuffDecompress_ret = 0;
<    if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK) goto output_overflow_or_eof;
<    if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END) goto errhandler;
1708,1711c1714,1716
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
---
>     *destLen -= strm.avail_out;
>     0;
>     return BZ_OK;
1713,1717c1718,1722
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
> output_overflow_or_eof:
>     if (strm.avail_out > 0) {
>         0;
>         return BZ_UNEXPECTED_EOF;
>     } else ;
1719,1721c1724,1726
<    errhandler:
<    0;
<    return BZ2_bzBuffToBuffDecompress_ret; 
---
> errhandler:
>     0;
>     return BZ2_bzBuffToBuffDecompress_ret;
1733c1738
<    return BZ_VERSION;
---
>     return BZ_VERSION;
1741,1744c1746,1749
<                (    
<                               
<                  
<                  void)      
---
> (
> 
> 
>     void)
1751,1752c1756,1757
<                ( const char *path,
<                  const char *mode )
---
> ( const char *path,
>   const char *mode )
1754c1759
<    return 0;
---
>     return 0;
1760,1761c1765,1766
<                ( int d,
<                  const char *mode )
---
> ( int d,
>   const char *mode )
1763c1768
<    return bzopen_or_bzdopen;
---
>     return bzopen_or_bzdopen;
1772,1779c1777,1784
<    
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    BZ2_bzread_nread = 0;
<    if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
<       return BZ2_bzread_nread;
<    } else {
<       return -1;
<    }
---
> 
>     if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
>     BZ2_bzread_nread = 0;
>     if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
>         return BZ2_bzread_nread;
>     } else {
>         return -1;
>     }
1786c1791
<    int bzerr;
---
>     int bzerr;
1788,1793c1793,1798
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
---
>     ;
>     if(bzerr == BZ_OK) {
>         return len;
>     } else {
>         return -1;
>     }
1800,1801c1805,1806
<    
<    return 0;
---
> 
>     return 0;
1808,1820c1813,1824
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose;
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose;
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose;
<    }
---
>     int bzerr;
>     FILE *fp = ((bzFile *)b)->handle;
> 
>     if (b==NULL)
>         if(((bzFile*)b)->writing) {
>             BZ2_bzWriteClose;
>             if(bzerr != BZ_OK) {
>                 BZ2_bzWriteClose;
>             }
>         } else if(fp!=stdin && fp!=stdout) {
>             fclose;
>         }
1831c1835
<    int err = ((bzFile *)b)->lastErr;
---
>     int err = ((bzFile *)b)->lastErr;
1833,1835c1837,1839
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
---
>     if(err>0) err = 0;
>     *errnum = err;
>     return bzerrorstrings[err*-1];
1877,1879c1881,1883
< #define ERROR_IF_EOF       
< #define ERROR_IF_NOT_ZERO  
< #define ERROR_IF_MINUS_ONE 
---
> #define ERROR_IF_EOF
> #define ERROR_IF_NOT_ZERO
> #define ERROR_IF_MINUS_ONE
1900c1904,1906
< #   define SET_BINARY_MODE 
---
> #   define SET_BINARY_MODE
> 
> #      define NORETURN
1902d1907
< #      define NORETURN 
1908,1910c1913,1914
<                                        
< #define True  
< #define False 
---
> #define True
> #define False
1969,1970c1973,1974
<    struct  
<    UInt64;
---
> struct
>         UInt64;
2153c2157
< #define ISFLAG 
---
> #define ISFLAG
2160d2163
<  
\ No newline at end of file
(86.7 %, 27158 bytes)
25,39c25,39
<   char *next_in;
<   unsigned int avail_in;
<   unsigned int total_in_lo32;
<   unsigned int total_in_hi32;
< 
<   char *next_out;
<   unsigned int avail_out;
<   unsigned int total_out_lo32;
<   unsigned int total_out_hi32;
< 
<   void *state;
< 
<   void *( *bzalloc ) ( void *, int, int );
<   void ( *bzfree ) ( void *, void * );
<   void *opaque;
---
>     char *next_in;
>     unsigned int avail_in;
>     unsigned int total_in_lo32;
>     unsigned int total_in_hi32;
> 
>     char *next_out;
>     unsigned int avail_out;
>     unsigned int total_out_lo32;
>     unsigned int total_out_hi32;
> 
>     void *state;
> 
>     void *( *bzalloc ) ( void *, int, int );
>     void ( *bzfree ) ( void *, void * );
>     void *opaque;
49,50c49,50
< 					      int blockSize100k,
< 					      int verbosity, int workFactor );
---
>         int blockSize100k,
>         int verbosity, int workFactor );
57c57
< 						int verbosity, int small );
---
>         int verbosity, int small );
68,71c68,71
< 					      FILE * f,
< 					      int verbosity,
< 					      int small,
< 					      void *unused, int nUnused );
---
>         FILE * f,
>         int verbosity,
>         int small,
>         void *unused, int nUnused );
76,77c76,77
< 						BZFILE * b,
< 						void **unused, int *nUnused );
---
>         BZFILE * b,
>         void **unused, int *nUnused );
80c80
< 				      BZFILE * b, void *buf, int len );
---
>                                       BZFILE * b, void *buf, int len );
83,86c83,86
< 					       FILE * f,
< 					       int blockSize100k,
< 					       int verbosity,
< 					       int workFactor );
---
>         FILE * f,
>         int blockSize100k,
>         int verbosity,
>         int workFactor );
89c89
< 					BZFILE * b, void *buf, int len );
---
>                                         BZFILE * b, void *buf, int len );
92,95c92,95
< 					     BZFILE * b,
< 					     int abandon,
< 					     unsigned int *nbytes_in,
< 					     unsigned int *nbytes_out );
---
>         BZFILE * b,
>         int abandon,
>         unsigned int *nbytes_in,
>         unsigned int *nbytes_out );
98,104c98,104
< 					       BZFILE * b,
< 					       int abandon,
< 					       unsigned int *nbytes_in_lo32,
< 					       unsigned int *nbytes_in_hi32,
< 					       unsigned int *nbytes_out_lo32,
< 					       unsigned int
< 					       *nbytes_out_hi32 );
---
>         BZFILE * b,
>         int abandon,
>         unsigned int *nbytes_in_lo32,
>         unsigned int *nbytes_in_hi32,
>         unsigned int *nbytes_out_lo32,
>         unsigned int
>         *nbytes_out_hi32 );
107,112c107,112
< 						    unsigned int *destLen,
< 						    char *source,
< 						    unsigned int sourceLen,
< 						    int blockSize100k,
< 						    int verbosity,
< 						    int workFactor );
---
>         unsigned int *destLen,
>         char *source,
>         unsigned int sourceLen,
>         int blockSize100k,
>         int verbosity,
>         int workFactor );
115,119c115,119
< 						      unsigned int *destLen,
< 						      char *source,
< 						      unsigned int sourceLen,
< 						      int small,
< 						      int verbosity );
---
>         unsigned int *destLen,
>         char *source,
>         unsigned int sourceLen,
>         int small,
>         int verbosity );
124c124
< 					  const char *mode );
---
>         const char *mode );
160,163c160,163
<   generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
<   bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
<   BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
<   BZ2_bzread_bzerr, BZ2_bzread_nread, main;
---
>       generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
>       bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
>       BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
>       BZ2_bzread_bzerr, BZ2_bzread_nread, main;
166c166
<   generateMTFValues_rll_i, isempty_RL, handle_compress;
---
>       generateMTFValues_rll_i, isempty_RL, handle_compress;
169c169
<   "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
---
>     "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
174c174
< 
---
>  
176c176
< 
---
>  
213c213
< 
---
>  
217c217
< 
---
>  
225c225
< 
---
>  
228c228
< 
---
>  
231c231
< 
---
>  
249c249
<   bz_stream strm;
---
>     bz_stream strm;
251,252c251,252
<   Int32 mode;
<   Int32 state;
---
>     Int32 mode;
>     Int32 state;
254c254
<   UInt32 avail_in_expect;
---
>     UInt32 avail_in_expect;
256,259c256,259
<   UInt32 *arr1;
<   UInt32 *arr2;
<   UInt32 *ftab;
<   Int32 origPtr;
---
>     UInt32 *arr1;
>     UInt32 *arr2;
>     UInt32 *ftab;
>     Int32 origPtr;
261,264c261,264
<   UInt32 ptr;
<   UChar block;
<   UInt16 mtfv;
<   UChar zbits;
---
>     UInt32 ptr;
>     UChar block;
>     UInt16 mtfv;
>     UChar zbits;
266c266
<   Int32 workFactor;
---
>     Int32 workFactor;
268,269c268,269
<   UInt32 state_in_ch;
<   Int32 state_in_len;
---
>     UInt32 state_in_ch;
>     Int32 state_in_len;
272,298c272,298
<   Int32 nblock;
<   Int32 nblockMAX;
<   Int32 numZ;
<   Int32 state_out_pos;
< 
<   Int32 nInUse;
<   Bool inUse[6];
<   UChar unseqToSeq[6];
< 
<   UInt32 bsBuff;
<   Int32 bsLive;
< 
<   UInt32 blockCRC;
<   UInt32 combinedCRC;
< 
<   Int32 verbosity;
<   Int32 blockNo;
<   Int32 blockSize100k;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
< 
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>     Int32 nblock;
>     Int32 nblockMAX;
>     Int32 numZ;
>     Int32 state_out_pos;
> 
>     Int32 nInUse;
>     Bool inUse[6];
>     UChar unseqToSeq[6];
> 
>     UInt32 bsBuff;
>     Int32 bsLive;
> 
>     UInt32 blockCRC;
>     UInt32 combinedCRC;
> 
>     Int32 verbosity;
>     Int32 blockNo;
>     Int32 blockSize100k;
> 
>     Int32 nMTF;
>     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>     UChar selector[BZ_MAX_SELECTORS];
>     UChar selectorMtf[BZ_MAX_SELECTORS];
> 
>     UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
300c300
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>     UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
356c356
<   bz_stream strm;
---
>     bz_stream strm;
358c358
<   Int32 state;
---
>     Int32 state;
360,362c360,362
<   UChar state_out_ch;
<   Int32 state_out_len;
<   Bool blockRandomised;
---
>     UChar state_out_ch;
>     Int32 state_out_len;
>     Bool blockRandomised;
365,366c365,366
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>     UInt32 bsBuff;
>     Int32 bsLive;
368,430c368,430
<   Int32 blockSize100k;
<   Bool smallDecompress;
<   Int32 currBlockNo;
<   Int32 verbosity;
< 
<   Int32 origPtr;
<   UInt32 tPos;
<   Int32 k0;
<   Int32 unzftab[6];
<   Int32 nblock_used;
<   Int32 cftab[7];
<   Int32 cftabCopy[7];
< 
<   UInt32 tt;
< 
<   UInt16 ll16;
<   UChar ll4;
< 
<   UInt32 storedBlockCRC;
<   UInt32 storedCombinedCRC;
<   UInt32 calculatedBlockCRC;
<   UInt32 calculatedCombinedCRC;
< 
<   Int32 nInUse;
<   Bool inUse[6];
<   Bool inUse16[6];
<   UChar seqToUnseq[6];
< 
<   UChar mtfa[MTFA_SIZE];
<   Int32 mtfbase[6 / MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
<   UChar selectorMtf[BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<   Int32 minLens[BZ_N_GROUPS];
< 
<   Int32 save_i;
<   Int32 save_j;
<   Int32 save_t;
<   Int32 save_alphaSize;
<   Int32 save_nGroups;
<   Int32 save_nSelectors;
<   Int32 save_EOB;
<   Int32 save_groupNo;
<   Int32 save_groupPos;
<   Int32 save_nextSym;
<   Int32 save_nblockMAX;
<   Int32 save_nblock;
<   Int32 save_es;
<   Int32 save_N;
<   Int32 save_curr;
<   Int32 save_zt;
<   Int32 save_zn;
<   Int32 save_zvec;
<   Int32 save_zj;
<   Int32 save_gSel;
<   Int32 save_gMinlen;
<   Int32 save_gLimit;
<   Int32 save_gBase;
<   Int32 save_gPerm;
---
>     Int32 blockSize100k;
>     Bool smallDecompress;
>     Int32 currBlockNo;
>     Int32 verbosity;
> 
>     Int32 origPtr;
>     UInt32 tPos;
>     Int32 k0;
>     Int32 unzftab[6];
>     Int32 nblock_used;
>     Int32 cftab[7];
>     Int32 cftabCopy[7];
> 
>     UInt32 tt;
> 
>     UInt16 ll16;
>     UChar ll4;
> 
>     UInt32 storedBlockCRC;
>     UInt32 storedCombinedCRC;
>     UInt32 calculatedBlockCRC;
>     UInt32 calculatedCombinedCRC;
> 
>     Int32 nInUse;
>     Bool inUse[6];
>     Bool inUse16[6];
>     UChar seqToUnseq[6];
> 
>     UChar mtfa[MTFA_SIZE];
>     Int32 mtfbase[6 / MTFL_SIZE];
>     UChar selector[BZ_MAX_SELECTORS];
>     UChar selectorMtf[BZ_MAX_SELECTORS];
>     UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>     Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>     Int32 minLens[BZ_N_GROUPS];
> 
>     Int32 save_i;
>     Int32 save_j;
>     Int32 save_t;
>     Int32 save_alphaSize;
>     Int32 save_nGroups;
>     Int32 save_nSelectors;
>     Int32 save_EOB;
>     Int32 save_groupNo;
>     Int32 save_groupPos;
>     Int32 save_nextSym;
>     Int32 save_nblockMAX;
>     Int32 save_nblock;
>     Int32 save_es;
>     Int32 save_N;
>     Int32 save_curr;
>     Int32 save_zt;
>     Int32 save_zn;
>     Int32 save_zvec;
>     Int32 save_zj;
>     Int32 save_gSel;
>     Int32 save_gMinlen;
>     Int32 save_gLimit;
>     Int32 save_gBase;
>     Int32 save_gPerm;
446c446
< 
---
>  
449c449
< 
---
>  
452c452
< 
---
>  
455c455
< 
---
>  
464c464
< 
---
>  
467c467
< 
---
>  
499c499
< 
---
>  
502c502
< 
---
>  
513c513
< 
---
>  
544c544
< 
---
>  
547c547
< 
---
>  
550c550
< 
---
>  
553c553
< 
---
>  
561,567c561,567
<   makeMaps_e_s.nInUse = 0;
<   for ( makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++ )
<     if ( makeMaps_e_s.inUse[makeMaps_e_i] )
<       {
< 	makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
< 	makeMaps_e_s.nInUse++;
<       }
---
>     makeMaps_e_s.nInUse = 0;
>     for ( makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++ )
>         if ( makeMaps_e_s.inUse[makeMaps_e_i] )
>         {
>             makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
>             makeMaps_e_s.nInUse++;
>         }
576,577c576,577
<   UChar *block = &generateMTFValues_s.block;
<   UInt16 mtfv = generateMTFValues_s.mtfv;
---
>     UChar *block = &generateMTFValues_s.block;
>     UInt16 mtfv = generateMTFValues_s.mtfv;
579,580c579,580
<   ;
<   generateMTFValues_EOB = generateMTFValues_s.nInUse + 1;
---
>     ;
>     generateMTFValues_EOB = generateMTFValues_s.nInUse + 1;
582,595c582,595
<   for ( generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
< 	generateMTFValues_i++ )
<     generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
< 
<   generateMTFValues_wr = 0;
<   generateMTFValues_zPend = 0;
<   for ( generateMTFValues_i = 0;
< 	generateMTFValues_i < generateMTFValues_s.nInUse;
< 	generateMTFValues_i++ )
<     generateMTFValues_yy[generateMTFValues_i] = generateMTFValues_i;
< 
<   for ( generateMTFValues_i = 0;
< 	generateMTFValues_i < generateMTFValues_s.nblock;
< 	generateMTFValues_i++ )
---
>     for ( generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
>             generateMTFValues_i++ )
>         generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
> 
>     generateMTFValues_wr = 0;
>     generateMTFValues_zPend = 0;
>     for ( generateMTFValues_i = 0;
>             generateMTFValues_i < generateMTFValues_s.nInUse;
>             generateMTFValues_i++ )
>         generateMTFValues_yy[generateMTFValues_i] = generateMTFValues_i;
> 
>     for ( generateMTFValues_i = 0;
>             generateMTFValues_i < generateMTFValues_s.nblock;
>             generateMTFValues_i++ )
598,627c598,627
<       AssertD;
<       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
<       if ( generateMTFValues_j < 0 )
< 	generateMTFValues_j += generateMTFValues_s.nblock;
<       generateMTFValues_ll_i =
< 	generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
<       AssertD;
< 
<       if ( generateMTFValues_yy[0] == generateMTFValues_ll_i )
< 	{
< 	  generateMTFValues_zPend++;
< 	}
<       else
< 	{
< 
< 	  if ( generateMTFValues_zPend > 0 )
< 	    {
< 
< 	      generateMTFValues_rtmp = generateMTFValues_yy[1];
< 	      generateMTFValues_yy[1] = generateMTFValues_yy[0];
< 	      generateMTFValues_ryy_j = ( generateMTFValues_yy[1] );
< 	      generateMTFValues_rll_i = generateMTFValues_ll_i;
< 	      while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
< 	      generateMTFValues_yy[0] = generateMTFValues_rtmp;
< 	      generateMTFValues_j =
< 		&generateMTFValues_ryy_j - &( generateMTFValues_yy[0] );
< 	      mtfv = generateMTFValues_j + 1;
< 	      generateMTFValues_wr++;
< 	      generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
< 	    }
---
>         AssertD;
>         generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
>         if ( generateMTFValues_j < 0 )
>             generateMTFValues_j += generateMTFValues_s.nblock;
>         generateMTFValues_ll_i =
>             generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
>         AssertD;
> 
>         if ( generateMTFValues_yy[0] == generateMTFValues_ll_i )
>         {
>             generateMTFValues_zPend++;
>         }
>         else
>         {
> 
>             if ( generateMTFValues_zPend > 0 )
>             {
> 
>                 generateMTFValues_rtmp = generateMTFValues_yy[1];
>                 generateMTFValues_yy[1] = generateMTFValues_yy[0];
>                 generateMTFValues_ryy_j = ( generateMTFValues_yy[1] );
>                 generateMTFValues_rll_i = generateMTFValues_ll_i;
>                 while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
>                 generateMTFValues_yy[0] = generateMTFValues_rtmp;
>                 generateMTFValues_j =
>                     &generateMTFValues_ryy_j - &( generateMTFValues_yy[0] );
>                 mtfv = generateMTFValues_j + 1;
>                 generateMTFValues_wr++;
>                 generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
>             }
629c629
< 	}
---
>         }
632c632
<   if ( generateMTFValues_zPend > 0 )
---
>     if ( generateMTFValues_zPend > 0 )
634,636c634,636
<     mtfv = generateMTFValues_EOB;
<   generateMTFValues_wr++;
<   generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
>         mtfv = generateMTFValues_EOB;
>     generateMTFValues_wr++;
>     generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
638c638
<   generateMTFValues_s.nMTF = generateMTFValues_wr;
---
>     generateMTFValues_s.nMTF = generateMTFValues_wr;
658c658
< 
---
>  
671c671
<   ( bz_stream * strm, int blockSize100k, int verbosity, int workFactor )
---
> ( bz_stream * strm, int blockSize100k, int verbosity, int workFactor )
674c674
<   EState *s;
---
>     EState *s;
676,677c676,677
<   if ( !0 )
<     return BZ_CONFIG_ERROR;
---
>     if ( !0 )
>         return BZ_CONFIG_ERROR;
679,729c679,729
<   if ( strm == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0 )
<     return BZ_PARAM_ERROR;
< 
<   if ( workFactor == 0 )
<     workFactor = 0;
<   if ( strm->bzalloc == NULL )
<     strm->bzalloc = default_bzalloc;
<   if ( strm->bzfree == NULL )
<     strm->bzfree = default_bzfree;
< 
<   s = BZALLOC ( sizeof ( EState ) );
<   if ( s == NULL )
<     return BZ_MEM_ERROR;
<   s->strm = *strm;
< 
<   s->arr1 = NULL;
<   s->arr2 = NULL;
<   s->ftab = NULL;
< 
<   BZ2_bzCompressInit_n = 0 * blockSize100k;
<   s->arr1 = BZALLOC ( BZ2_bzCompressInit_n * sizeof ( UInt32 ) );
<   s->arr2 =
<     BZALLOC ( ( BZ2_bzCompressInit_n + BZ_N_OVERSHOOT ) * sizeof ( UInt32 ) );
<   s->ftab = BZALLOC ( 7 * sizeof ( UInt32 ) );
< 
<   if ( s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL )
< 
<     s->blockNo = 0;
<   s->state = BZ_S_INPUT;
<   s->mode = BZ_M_RUNNING;
<   s->combinedCRC = 0;
<   s->blockSize100k = blockSize100k;
<   s->nblockMAX = 0 * blockSize100k - 9;
<   s->verbosity = verbosity;
<   s->workFactor = workFactor;
< 
<   s->block = *s->arr2;
<   s->mtfv = *s->arr1;
<   s->zbits = NULL;
<   s->ptr = *s->arr1;
< 
<   strm->state = s;
<   strm->total_in_lo32 = 0;
<   strm->total_in_hi32 = 0;
<   strm->total_out_lo32 = 0;
<   strm->total_out_hi32 = 0;
<   ;
<   ;
<   return BZ_OK;
---
>     if ( strm == NULL ||
>             blockSize100k < 1 || blockSize100k > 9 ||
>             workFactor < 0 || workFactor > 0 )
>         return BZ_PARAM_ERROR;
> 
>     if ( workFactor == 0 )
>         workFactor = 0;
>     if ( strm->bzalloc == NULL )
>         strm->bzalloc = default_bzalloc;
>     if ( strm->bzfree == NULL )
>         strm->bzfree = default_bzfree;
> 
>     s = BZALLOC ( sizeof ( EState ) );
>     if ( s == NULL )
>         return BZ_MEM_ERROR;
>     s->strm = *strm;
> 
>     s->arr1 = NULL;
>     s->arr2 = NULL;
>     s->ftab = NULL;
> 
>     BZ2_bzCompressInit_n = 0 * blockSize100k;
>     s->arr1 = BZALLOC ( BZ2_bzCompressInit_n * sizeof ( UInt32 ) );
>     s->arr2 =
>         BZALLOC ( ( BZ2_bzCompressInit_n + BZ_N_OVERSHOOT ) * sizeof ( UInt32 ) );
>     s->ftab = BZALLOC ( 7 * sizeof ( UInt32 ) );
> 
>     if ( s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL )
> 
>         s->blockNo = 0;
>     s->state = BZ_S_INPUT;
>     s->mode = BZ_M_RUNNING;
>     s->combinedCRC = 0;
>     s->blockSize100k = blockSize100k;
>     s->nblockMAX = 0 * blockSize100k - 9;
>     s->verbosity = verbosity;
>     s->workFactor = workFactor;
> 
>     s->block = *s->arr2;
>     s->mtfv = *s->arr1;
>     s->zbits = NULL;
>     s->ptr = *s->arr1;
> 
>     strm->state = s;
>     strm->total_in_lo32 = 0;
>     strm->total_in_hi32 = 0;
>     strm->total_out_lo32 = 0;
>     strm->total_out_hi32 = 0;
>     ;
>     ;
>     return BZ_OK;
733c733
< 
---
>  
738,745c738,745
<   EState *s;
<   if ( strm == NULL )
<     return BZ_PARAM_ERROR;
<   s = strm->state;
<   if ( s == NULL )
<     return BZ_PARAM_ERROR;
<   if ( &s->strm != strm )
<     return BZ_PARAM_ERROR;
---
>     EState *s;
>     if ( strm == NULL )
>         return BZ_PARAM_ERROR;
>     s = strm->state;
>     if ( s == NULL )
>         return BZ_PARAM_ERROR;
>     if ( &s->strm != strm )
>         return BZ_PARAM_ERROR;
748,749c748,749
<   switch ( s->mode )
<     return BZ_OK;
---
>     switch ( s->mode )
>         return BZ_OK;
754,769c754,769
<   EState *s;
<   if ( strm == NULL )
<     return BZ_PARAM_ERROR;
<   s = strm->state;
<   if ( s == NULL )
<     return BZ_PARAM_ERROR;
<   if ( &s->strm != strm )
<     return BZ_PARAM_ERROR;
< 
<   if ( s->arr1 != NULL )
<     BZFREE ( s->arr1 );
<   if ( s->arr2 != NULL )
<     BZFREE ( s->arr2 );
<   if ( s->ftab != NULL )
<     BZFREE ( s->ftab );
<   BZFREE ( strm->state );
---
>     EState *s;
>     if ( strm == NULL )
>         return BZ_PARAM_ERROR;
>     s = strm->state;
>     if ( s == NULL )
>         return BZ_PARAM_ERROR;
>     if ( &s->strm != strm )
>         return BZ_PARAM_ERROR;
> 
>     if ( s->arr1 != NULL )
>         BZFREE ( s->arr1 );
>     if ( s->arr2 != NULL )
>         BZFREE ( s->arr2 );
>     if ( s->ftab != NULL )
>         BZFREE ( s->ftab );
>     BZFREE ( strm->state );
771c771
<   strm->state = NULL;
---
>     strm->state = NULL;
773c773
<   return BZ_OK;
---
>     return BZ_OK;
777c777
<   ( bz_stream * strm, int verbosity, int small )
---
> ( bz_stream * strm, int verbosity, int small )
779c779
<   DState *s;
---
>     DState *s;
781,782c781,782
<   if ( !0 )
<     return BZ_CONFIG_ERROR;
---
>     if ( !0 )
>         return BZ_CONFIG_ERROR;
784,814c784,814
<   if ( strm == NULL )
<     return BZ_PARAM_ERROR;
<   if ( small != 0 && small != 1 )
<     return BZ_PARAM_ERROR;
<   if ( verbosity < 0 || verbosity > 4 )
<     return BZ_PARAM_ERROR;
< 
<   if ( strm->bzalloc == NULL )
<     strm->bzalloc = default_bzalloc;
<   if ( strm->bzfree == NULL )
<     strm->bzfree = default_bzfree;
< 
<   s = BZALLOC ( sizeof ( DState ) );
<   if ( s == NULL )
<     return BZ_MEM_ERROR;
<   s->strm = *strm;
<   strm->state = s;
<   s->state = BZ_X_MAGIC_1;
<   s->bsLive = 0;
<   s->bsBuff = 0;
<   s->calculatedCombinedCRC = 0;
<   strm->total_in_lo32 = 0;
<   strm->total_in_hi32 = 0;
<   strm->total_out_lo32 = 0;
<   strm->total_out_hi32 = 0;
<   s->smallDecompress = small;
<   s->ll4 = NULL;
<   s->ll16 = NULL;
<   s->tt = NULL;
<   s->currBlockNo = 0;
<   s->verbosity = verbosity;
---
>     if ( strm == NULL )
>         return BZ_PARAM_ERROR;
>     if ( small != 0 && small != 1 )
>         return BZ_PARAM_ERROR;
>     if ( verbosity < 0 || verbosity > 4 )
>         return BZ_PARAM_ERROR;
> 
>     if ( strm->bzalloc == NULL )
>         strm->bzalloc = default_bzalloc;
>     if ( strm->bzfree == NULL )
>         strm->bzfree = default_bzfree;
> 
>     s = BZALLOC ( sizeof ( DState ) );
>     if ( s == NULL )
>         return BZ_MEM_ERROR;
>     s->strm = *strm;
>     strm->state = s;
>     s->state = BZ_X_MAGIC_1;
>     s->bsLive = 0;
>     s->bsBuff = 0;
>     s->calculatedCombinedCRC = 0;
>     strm->total_in_lo32 = 0;
>     strm->total_in_hi32 = 0;
>     strm->total_out_lo32 = 0;
>     strm->total_out_hi32 = 0;
>     s->smallDecompress = small;
>     s->ll4 = NULL;
>     s->ll16 = NULL;
>     s->tt = NULL;
>     s->currBlockNo = 0;
>     s->verbosity = verbosity;
816c816
<   return BZ_OK;
---
>     return BZ_OK;
825,832c825,832
<   DState *s;
<   if ( strm == NULL )
<     return BZ_PARAM_ERROR;
<   s = strm->state;
<   if ( s == NULL )
<     return BZ_PARAM_ERROR;
<   if ( &s->strm != strm )
<     return BZ_PARAM_ERROR;
---
>     DState *s;
>     if ( strm == NULL )
>         return BZ_PARAM_ERROR;
>     s = strm->state;
>     if ( s == NULL )
>         return BZ_PARAM_ERROR;
>     if ( &s->strm != strm )
>         return BZ_PARAM_ERROR;
834c834
<   while AssertH
---
>     while AssertH
837c837
<   return 0;
---
>     return 0;
842,856c842,856
<   DState *s;
<   if ( strm == NULL )
<     return BZ_PARAM_ERROR;
<   s = strm->state;
<   if ( s == NULL )
<     return BZ_PARAM_ERROR;
<   if ( &s->strm != strm )
<     return BZ_PARAM_ERROR;
< 
<   if ( s->tt != NULL )
<     BZFREE ( s->tt );
<   if ( s->ll16 != NULL )
<     BZFREE ( s->ll16 );
<   if ( s->ll4 != NULL )
<     BZFREE ( s->ll4 );
---
>     DState *s;
>     if ( strm == NULL )
>         return BZ_PARAM_ERROR;
>     s = strm->state;
>     if ( s == NULL )
>         return BZ_PARAM_ERROR;
>     if ( &s->strm != strm )
>         return BZ_PARAM_ERROR;
> 
>     if ( s->tt != NULL )
>         BZFREE ( s->tt );
>     if ( s->ll16 != NULL )
>         BZFREE ( s->ll16 );
>     if ( s->ll4 != NULL )
>         BZFREE ( s->ll4 );
858,859c858,859
<   BZFREE ( strm->state );
<   strm->state = NULL;
---
>     BZFREE ( strm->state );
>     strm->state = NULL;
861c861
<   return BZ_OK;
---
>     return BZ_OK;
865c865
< 
---
>  
869,875c869,875
<   FILE *handle;
<   char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
>     FILE *handle;
>     char buf[BZ_MAX_UNUSED];
>     Int32 bufN;
>     Bool writing;
>     bz_stream strm;
>     Int32 lastErr;
>     Bool initialisedOk;
880c880
<   ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
---
> ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
882,894c882,883
<   Int32 ret;
<   bzFile *bzf = NULL;
< 
<   BZ_SETERR;
< 
<   if ( f == NULL ||
<        ( blockSize100k < 1 || blockSize100k > 9 ) ||
<        ( workFactor < 0 || workFactor > 0 ) ||
<        ( verbosity < 0 || verbosity > 4 ) )
<     ;
< 
<   if ( ferror )
<     ;
---
>     Int32 ret;
>     bzFile *bzf = NULL;
896,898c885
<   bzf = malloc;
<   if ( bzf == NULL )
<     ;
---
>     BZ_SETERR;
900,917c887,917
<   BZ_SETERR;
<   bzf->initialisedOk = False;
<   bzf->bufN = 0;
<   bzf->handle = f;
<   bzf->writing = True;
<   bzf->strm.bzalloc = NULL;
<   bzf->strm.bzfree = NULL;
<   bzf->strm.opaque = NULL;
< 
<   if ( workFactor == 0 )
<     workFactor = 0;
<   ret = BZ2_bzCompressInit;
<   if ( ret != BZ_OK )
<     ;
< 
<   bzf->strm.avail_in = 0;
<   bzf->initialisedOk = True;
<   return bzf;
---
>     if ( f == NULL ||
>             ( blockSize100k < 1 || blockSize100k > 9 ) ||
>             ( workFactor < 0 || workFactor > 0 ) ||
>             ( verbosity < 0 || verbosity > 4 ) )
>         ;
> 
>     if ( ferror )
>         ;
> 
>     bzf = malloc;
>     if ( bzf == NULL )
>         ;
> 
>     BZ_SETERR;
>     bzf->initialisedOk = False;
>     bzf->bufN = 0;
>     bzf->handle = f;
>     bzf->writing = True;
>     bzf->strm.bzalloc = NULL;
>     bzf->strm.bzfree = NULL;
>     bzf->strm.opaque = NULL;
> 
>     if ( workFactor == 0 )
>         workFactor = 0;
>     ret = BZ2_bzCompressInit;
>     if ( ret != BZ_OK )
>         ;
> 
>     bzf->strm.avail_in = 0;
>     bzf->initialisedOk = True;
>     return bzf;
923c923
<   bzFile *bzf = b;
---
>     bzFile *bzf = b;
925,931c925,931
<   BZ_SETERR;
<   if ( bzf == NULL || buf == NULL || len < 0 )
<     ;
<   if ( !( bzf->writing ) )
<     ;
<   if ( ferror )
<     ;
---
>     BZ_SETERR;
>     if ( bzf == NULL || buf == NULL || len < 0 )
>         ;
>     if ( !( bzf->writing ) )
>         ;
>     if ( ferror )
>         ;
933,934c933,934
<   if ( len == 0 )
<     ;
---
>     if ( len == 0 )
>         ;
936,937c936,937
<   bzf->strm.avail_in = len;
<   bzf->strm.next_in = buf;
---
>     bzf->strm.avail_in = len;
>     bzf->strm.next_in = buf;
939c939
<   while ( True )
---
>     while ( True )
941,945c941,945
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       BZ2_bzWrite_ret = 0;
<       if ( BZ2_bzWrite_ret != BZ_RUN_OK )
< 	;
---
>         bzf->strm.avail_out = BZ_MAX_UNUSED;
>         bzf->strm.next_out = bzf->buf;
>         BZ2_bzWrite_ret = 0;
>         if ( BZ2_bzWrite_ret != BZ_RUN_OK )
>             ;
947c947
<       if ( bzf->strm.avail_out < BZ_MAX_UNUSED )
---
>         if ( bzf->strm.avail_out < BZ_MAX_UNUSED )
949,950c949,950
< 	if ( bzf->strm.avail_in == 0 )
< 	  ;
---
>             if ( bzf->strm.avail_in == 0 )
>                 ;
955,957c955,957
<   ( int *bzerror,
<     BZFILE * b,
<     int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out )
---
> ( int *bzerror,
>   BZFILE * b,
>   int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out )
959c959
<   BZ2_bzWriteClose64;
---
>     BZ2_bzWriteClose64;
963,971c963,1000
<   ( int *bzerror,
<     BZFILE * b,
<     int abandon,
<     unsigned int *nbytes_in_lo32,
<     unsigned int *nbytes_in_hi32,
<     unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32 )
< {
< 
<   bzFile *bzf = b;
---
> ( int *bzerror,
>   BZFILE * b,
>   int abandon,
>   unsigned int *nbytes_in_lo32,
>   unsigned int *nbytes_in_hi32,
>   unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32 )
> {
> 
>     bzFile *bzf = b;
> 
>     if ( bzf == NULL )
>         ;
>     if ( !( bzf->writing ) )
>         ;
>     if ( ferror )
>         ;
> 
>     if ( nbytes_in_lo32 != NULL )
>         *nbytes_in_lo32 = 0;
>     if ( nbytes_in_hi32 != NULL )
>         *nbytes_in_hi32 = 0;
>     if ( nbytes_out_lo32 != NULL )
>         *nbytes_out_lo32 = 0;
>     if ( nbytes_out_hi32 != NULL )
>         *nbytes_out_hi32 = 0;
> 
>     if ( ( !abandon ) && bzf->lastErr == BZ_OK )
> 
>         if ( !abandon && !ferror )
> 
>             if ( nbytes_in_lo32 != NULL )
>                 *nbytes_in_lo32 = bzf->strm.total_in_lo32;
>     if ( nbytes_in_hi32 != NULL )
>         *nbytes_in_hi32 = bzf->strm.total_in_hi32;
>     if ( nbytes_out_lo32 != NULL )
>         *nbytes_out_lo32 = bzf->strm.total_out_lo32;
>     if ( nbytes_out_hi32 != NULL )
>         *nbytes_out_hi32 = bzf->strm.total_out_hi32;
973,1004c1002,1004
<   if ( bzf == NULL )
<     ;
<   if ( !( bzf->writing ) )
<     ;
<   if ( ferror )
<     ;
< 
<   if ( nbytes_in_lo32 != NULL )
<     *nbytes_in_lo32 = 0;
<   if ( nbytes_in_hi32 != NULL )
<     *nbytes_in_hi32 = 0;
<   if ( nbytes_out_lo32 != NULL )
<     *nbytes_out_lo32 = 0;
<   if ( nbytes_out_hi32 != NULL )
<     *nbytes_out_hi32 = 0;
< 
<   if ( ( !abandon ) && bzf->lastErr == BZ_OK )
< 
<     if ( !abandon && !ferror )
< 
<       if ( nbytes_in_lo32 != NULL )
< 	*nbytes_in_lo32 = bzf->strm.total_in_lo32;
<   if ( nbytes_in_hi32 != NULL )
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<   if ( nbytes_out_lo32 != NULL )
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<   if ( nbytes_out_hi32 != NULL )
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<   BZ_SETERR;
<   0;
<   0;
---
>     BZ_SETERR;
>     0;
>     0;
1008,1009c1008,1009
<   ( int *bzerror,
<     FILE * f, int verbosity, int small, void *unused, int nUnused )
---
> ( int *bzerror,
>   FILE * f, int verbosity, int small, void *unused, int nUnused )
1011,1012c1011,1012
<   bzFile *bzf = NULL;
<   int ret;
---
>     bzFile *bzf = NULL;
>     int ret;
1014c1014
<   BZ_SETERR;
---
>     BZ_SETERR;
1016,1021c1016,1021
<   if ( f == NULL ||
<        ( small != 0 && small != 1 ) ||
<        ( verbosity < 0 || verbosity > 4 ) ||
<        ( unused == NULL && nUnused != 0 ) ||
<        ( unused != NULL && ( nUnused < 0 || nUnused > BZ_MAX_UNUSED ) ) )
<     ;
---
>     if ( f == NULL ||
>             ( small != 0 && small != 1 ) ||
>             ( verbosity < 0 || verbosity > 4 ) ||
>             ( unused == NULL && nUnused != 0 ) ||
>             ( unused != NULL && ( nUnused < 0 || nUnused > BZ_MAX_UNUSED ) ) )
>         ;
1023,1024c1023,1024
<   if ( ferror )
<     ;
---
>     if ( ferror )
>         ;
1026,1028c1026,1028
<   bzf = malloc;
<   if ( bzf == NULL )
<     ;
---
>     bzf = malloc;
>     if ( bzf == NULL )
>         ;
1030c1030
<   BZ_SETERR;
---
>     BZ_SETERR;
1032,1038c1032,1038
<   bzf->initialisedOk = False;
<   bzf->handle = f;
<   bzf->bufN = 0;
<   bzf->writing = False;
<   bzf->strm.bzalloc = NULL;
<   bzf->strm.bzfree = NULL;
<   bzf->strm.opaque = NULL;
---
>     bzf->initialisedOk = False;
>     bzf->handle = f;
>     bzf->bufN = 0;
>     bzf->writing = False;
>     bzf->strm.bzalloc = NULL;
>     bzf->strm.bzfree = NULL;
>     bzf->strm.opaque = NULL;
1040c1040
<   while ( nUnused > 0 )
---
>     while ( nUnused > 0 )
1042,1044c1042,1044
<     ret = BZ2_bzDecompressInit;
<   if ( ret != BZ_OK )
<     ;
---
>         ret = BZ2_bzDecompressInit;
>     if ( ret != BZ_OK )
>         ;
1046,1047c1046,1047
<   bzf->strm.avail_in = bzf->bufN;
<   bzf->strm.next_in = bzf->buf;
---
>     bzf->strm.avail_in = bzf->bufN;
>     bzf->strm.next_in = bzf->buf;
1049,1050c1049,1050
<   bzf->initialisedOk = True;
<   return bzf;
---
>     bzf->initialisedOk = True;
>     return bzf;
1055c1055
<   bzFile *bzf = b;
---
>     bzFile *bzf = b;
1057,1059c1057,1059
<   BZ_SETERR;
<   if ( bzf == NULL )
<     ;
---
>     BZ_SETERR;
>     if ( bzf == NULL )
>         ;
1061,1062c1061,1062
<   if ( bzf->writing )
<     ;
---
>     if ( bzf->writing )
>         ;
1064c1064,1065
<   if ( bzf->initialisedOk )
---
>     if ( bzf->initialisedOk )
>         0;
1066d1066
<   0;
1072c1072
<   bzFile *bzf = b;
---
>     bzFile *bzf = b;
1074c1074
<   BZ_SETERR;
---
>     BZ_SETERR;
1076,1077c1076,1077
<   if ( bzf == NULL || buf == NULL || len < 0 )
<     ;
---
>     if ( bzf == NULL || buf == NULL || len < 0 )
>         ;
1079,1080c1079,1080
<   if ( bzf->writing )
<     ;
---
>     if ( bzf->writing )
>         ;
1082,1083c1082,1083
<   if ( len == 0 )
<     ;
---
>     if ( len == 0 )
>         ;
1085,1086c1085,1086
<   bzf->strm.avail_out = len;
<   bzf->strm.next_out = buf;
---
>     bzf->strm.avail_out = len;
>     bzf->strm.next_out = buf;
1088c1088
<   while ( True )
---
>     while ( True )
1090c1090
<     return 0;
---
>         return 0;
1094c1094
<   ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
---
> ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
1096,1106c1096,1106
<   bzFile *bzf = b;
<   if ( bzf == NULL )
<     ;
<   if ( bzf->lastErr != BZ_STREAM_END )
<     ;
<   if ( unused == NULL || nUnused == NULL )
<     ;
< 
<   BZ_SETERR;
<   *nUnused = bzf->strm.avail_in;
<   *unused = bzf->strm.next_in;
---
>     bzFile *bzf = b;
>     if ( bzf == NULL )
>         ;
>     if ( bzf->lastErr != BZ_STREAM_END )
>         ;
>     if ( unused == NULL || nUnused == NULL )
>         ;
> 
>     BZ_SETERR;
>     *nUnused = bzf->strm.avail_in;
>     *unused = bzf->strm.next_in;
1110,1130c1110,1141
<   ( char *dest,
<     unsigned int *destLen,
<     char *source,
<     unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor )
< {
<   bz_stream strm;
< 
<   if ( dest == NULL || destLen == NULL ||
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 || workFactor < 0 || workFactor > 0 )
<     return BZ_PARAM_ERROR;
< 
<   if ( workFactor == 0 )
<     workFactor = 0;
<   strm.bzalloc = NULL;
<   strm.bzfree = NULL;
<   strm.opaque = NULL;
<   BZ2_bzBuffToBuffCompress_ret = 0;
<   if ( BZ2_bzBuffToBuffCompress_ret != BZ_OK )
<     return BZ2_bzBuffToBuffCompress_ret;
---
> ( char *dest,
>   unsigned int *destLen,
>   char *source,
>   unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor )
> {
>     bz_stream strm;
> 
>     if ( dest == NULL || destLen == NULL ||
>             source == NULL ||
>             blockSize100k < 1 || blockSize100k > 9 ||
>             verbosity < 0 || verbosity > 4 || workFactor < 0 || workFactor > 0 )
>         return BZ_PARAM_ERROR;
> 
>     if ( workFactor == 0 )
>         workFactor = 0;
>     strm.bzalloc = NULL;
>     strm.bzfree = NULL;
>     strm.opaque = NULL;
>     BZ2_bzBuffToBuffCompress_ret = 0;
>     if ( BZ2_bzBuffToBuffCompress_ret != BZ_OK )
>         return BZ2_bzBuffToBuffCompress_ret;
> 
>     strm.next_in = source;
>     strm.next_out = dest;
>     strm.avail_in = sourceLen;
>     strm.avail_out = *destLen;
> 
>     BZ2_bzBuffToBuffCompress_ret = 0;
>     if ( BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK )
>         goto output_overflow;
>     if ( BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END )
>         goto errhandler;
1132,1145c1143,1145
<   strm.next_in = source;
<   strm.next_out = dest;
<   strm.avail_in = sourceLen;
<   strm.avail_out = *destLen;
< 
<   BZ2_bzBuffToBuffCompress_ret = 0;
<   if ( BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK )
<     goto output_overflow;
<   if ( BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END )
<     goto errhandler;
< 
<   *destLen -= strm.avail_out;
<   0;
<   return BZ_OK;
---
>     *destLen -= strm.avail_out;
>     0;
>     return BZ_OK;
1148,1149c1148,1149
<   0;
<   return BZ_OUTBUFF_FULL;
---
>     0;
>     return BZ_OUTBUFF_FULL;
1152,1153c1152,1153
<   0;
<   return BZ2_bzBuffToBuffCompress_ret;
---
>     0;
>     return BZ2_bzBuffToBuffCompress_ret;
1157,1173c1157,1184
<   ( char *dest,
<     unsigned int *destLen,
<     char *source, unsigned int sourceLen, int small, int verbosity )
< {
<   bz_stream strm;
< 
<   if ( dest == NULL || destLen == NULL ||
<        source == NULL ||
<        ( small != 0 && small != 1 ) || verbosity < 0 || verbosity > 4 )
<     return BZ_PARAM_ERROR;
< 
<   strm.bzalloc = NULL;
<   strm.bzfree = NULL;
<   strm.opaque = NULL;
<   BZ2_bzBuffToBuffDecompress_ret = 0;
<   if ( BZ2_bzBuffToBuffDecompress_ret != BZ_OK )
<     return BZ2_bzBuffToBuffDecompress_ret;
---
> ( char *dest,
>   unsigned int *destLen,
>   char *source, unsigned int sourceLen, int small, int verbosity )
> {
>     bz_stream strm;
> 
>     if ( dest == NULL || destLen == NULL ||
>             source == NULL ||
>             ( small != 0 && small != 1 ) || verbosity < 0 || verbosity > 4 )
>         return BZ_PARAM_ERROR;
> 
>     strm.bzalloc = NULL;
>     strm.bzfree = NULL;
>     strm.opaque = NULL;
>     BZ2_bzBuffToBuffDecompress_ret = 0;
>     if ( BZ2_bzBuffToBuffDecompress_ret != BZ_OK )
>         return BZ2_bzBuffToBuffDecompress_ret;
> 
>     strm.next_in = source;
>     strm.next_out = dest;
>     strm.avail_in = sourceLen;
>     strm.avail_out = *destLen;
> 
>     BZ2_bzBuffToBuffDecompress_ret = 0;
>     if ( BZ2_bzBuffToBuffDecompress_ret == BZ_OK )
>         goto output_overflow_or_eof;
>     if ( BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END )
>         goto errhandler;
1175,1188c1186,1188
<   strm.next_in = source;
<   strm.next_out = dest;
<   strm.avail_in = sourceLen;
<   strm.avail_out = *destLen;
< 
<   BZ2_bzBuffToBuffDecompress_ret = 0;
<   if ( BZ2_bzBuffToBuffDecompress_ret == BZ_OK )
<     goto output_overflow_or_eof;
<   if ( BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END )
<     goto errhandler;
< 
<   *destLen -= strm.avail_out;
<   0;
<   return BZ_OK;
---
>     *destLen -= strm.avail_out;
>     0;
>     return BZ_OK;
1191c1191
<   if ( strm.avail_out > 0 )
---
>     if ( strm.avail_out > 0 )
1193,1194c1193,1194
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>         0;
>         return BZ_UNEXPECTED_EOF;
1196c1196
<   else;
---
>     else;
1199,1200c1199,1200
<   0;
<   return BZ2_bzBuffToBuffDecompress_ret;
---
>     0;
>     return BZ2_bzBuffToBuffDecompress_ret;
1205c1205
<   return BZ_VERSION;
---
>     return BZ_VERSION;
1212c1212
<   return 0;
---
>     return 0;
1217c1217
<   return bzopen_or_bzdopen;
---
>     return bzopen_or_bzdopen;
1223,1226c1223,1226
<   if ( ( ( bzFile * ) b )->lastErr == BZ_STREAM_END )
<     return 0;
<   BZ2_bzread_nread = 0;
<   if ( BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END )
---
>     if ( ( ( bzFile * ) b )->lastErr == BZ_STREAM_END )
>         return 0;
>     BZ2_bzread_nread = 0;
>     if ( BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END )
1228c1228
<       return BZ2_bzread_nread;
---
>         return BZ2_bzread_nread;
1230c1230
<   else
---
>     else
1232c1232
<       return -1;
---
>         return -1;
1238c1238
<   int bzerr;
---
>     int bzerr;
1240,1241c1240,1241
<   ;
<   if ( bzerr == BZ_OK )
---
>     ;
>     if ( bzerr == BZ_OK )
1243c1243
<       return len;
---
>         return len;
1245c1245
<   else
---
>     else
1247c1247
<       return -1;
---
>         return -1;
1254c1254
<   return 0;
---
>     return 0;
1259,1260c1259,1260
<   int bzerr;
<   FILE *fp = ( ( bzFile * ) b )->handle;
---
>     int bzerr;
>     FILE *fp = ( ( bzFile * ) b )->handle;
1262,1274c1262,1274
<   if ( b == NULL )
<     if ( ( ( bzFile * ) b )->writing )
<       {
< 	BZ2_bzWriteClose;
< 	if ( bzerr != BZ_OK )
< 	  {
< 	    BZ2_bzWriteClose;
< 	  }
<       }
<     else if ( fp != stdin && fp != stdout )
<       {
< 	fclose;
<       }
---
>     if ( b == NULL )
>         if ( ( ( bzFile * ) b )->writing )
>         {
>             BZ2_bzWriteClose;
>             if ( bzerr != BZ_OK )
>             {
>                 BZ2_bzWriteClose;
>             }
>         }
>         else if ( fp != stdin && fp != stdout )
>         {
>             fclose;
>         }
1279c1279
<   int err = ( ( bzFile * ) b )->lastErr;
---
>     int err = ( ( bzFile * ) b )->lastErr;
1281,1284c1281,1284
<   if ( err > 0 )
<     err = 0;
<   *errnum = err;
<   return bzerrorstrings[err * -1];
---
>     if ( err > 0 )
>         err = 0;
>     *errnum = err;
>     return bzerrorstrings[err * -1];
4,12c4,12
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_RUN 0
> #define BZ_FLUSH 1
> #define BZ_FINISH 2
> 
> #define BZ_OK 0
> #define BZ_RUN_OK 1
> #define BZ_FLUSH_OK 2
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
14,15c14,15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR (-2)
> #define BZ_MEM_ERROR (-3)
19,21c19,21
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF (-7)
> #define BZ_OUTBUFF_FULL (-8)
> #define BZ_CONFIG_ERROR (-9)
23,24c23
< typedef struct
< {
---
> typedef struct {
37,38c36,37
<   void *( *bzalloc ) ( void *, int, int );
<   void ( *bzfree ) ( void *, void * );
---
>   void *(*bzalloc)(void *, int, int);
>   void (*bzfree)(void *, void *);
40,41c39
< }
< bz_stream;
---
> } bz_stream;
48,50c46,47
< BZ_EXTERN int BZ_API ( BZ2_bzCompressInit ) ( bz_stream * strm,
< 					      int blockSize100k,
< 					      int verbosity, int workFactor );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                          int verbosity, int workFactor);
52c49
< BZ_EXTERN int BZ_API ( BZ2_bzCompress ) ( bz_stream * strm, int action );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
54c51
< BZ_EXTERN int BZ_API ( BZ2_bzCompressEnd ) ( bz_stream * strm );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
56,57c53,54
< BZ_EXTERN int BZ_API ( BZ2_bzDecompressInit ) ( bz_stream * strm,
< 						int verbosity, int small );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
>                                            int small);
59c56
< BZ_EXTERN int BZ_API ( BZ2_bzDecompress ) ( bz_stream * strm );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
61c58
< BZ_EXTERN int BZ_API ( BZ2_bzDecompressEnd ) ( bz_stream * strm );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
67,128c64,88
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzReadOpen ) ( int *bzerror,
< 					      FILE * f,
< 					      int verbosity,
< 					      int small,
< 					      void *unused, int nUnused );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzReadClose ) ( int *bzerror, BZFILE * b );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzReadGetUnused ) ( int *bzerror,
< 						BZFILE * b,
< 						void **unused, int *nUnused );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzRead ) ( int *bzerror,
< 				      BZFILE * b, void *buf, int len );
< 
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzWriteOpen ) ( int *bzerror,
< 					       FILE * f,
< 					       int blockSize100k,
< 					       int verbosity,
< 					       int workFactor );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzWrite ) ( int *bzerror,
< 					BZFILE * b, void *buf, int len );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzWriteClose ) ( int *bzerror,
< 					     BZFILE * b,
< 					     int abandon,
< 					     unsigned int *nbytes_in,
< 					     unsigned int *nbytes_out );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzWriteClose64 ) ( int *bzerror,
< 					       BZFILE * b,
< 					       int abandon,
< 					       unsigned int *nbytes_in_lo32,
< 					       unsigned int *nbytes_in_hi32,
< 					       unsigned int *nbytes_out_lo32,
< 					       unsigned int
< 					       *nbytes_out_hi32 );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzBuffToBuffCompress ) ( char *dest,
< 						    unsigned int *destLen,
< 						    char *source,
< 						    unsigned int sourceLen,
< 						    int blockSize100k,
< 						    int verbosity,
< 						    int workFactor );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzBuffToBuffDecompress ) ( char *dest,
< 						      unsigned int *destLen,
< 						      char *source,
< 						      unsigned int sourceLen,
< 						      int small,
< 						      int verbosity );
< 
< BZ_EXTERN const char *BZ_API ( BZ2_bzlibVersion ) ( void );
< 
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzopen ) ( const char *path,
< 					  const char *mode );
< 
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzdopen ) ( int d, const char *mode );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzread ) ( BZFILE * b, void *buf, int len );
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
>                                          int small, void *unused, int nUnused);
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
>                                            void **unused, int *nUnused);
> 
> BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
>                                           int blockSize100k, int verbosity,
>                                           int workFactor);
> 
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                                         unsigned int *nbytes_in,
>                                         unsigned int *nbytes_out);
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                           unsigned int *nbytes_in_lo32,
>                                           unsigned int *nbytes_in_hi32,
>                                           unsigned int *nbytes_out_lo32,
>                                           unsigned int *nbytes_out_hi32);
130c90,92
< BZ_EXTERN int BZ_API ( BZ2_bzwrite ) ( BZFILE * b, void *buf, int len );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
>     int blockSize100k, int verbosity, int workFactor);
132c94,98
< BZ_EXTERN int BZ_API ( BZ2_bzflush ) ( BZFILE * b );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
>                                                  unsigned int *destLen,
>                                                  char *source,
>                                                  unsigned int sourceLen,
>                                                  int small, int verbosity);
134c100
< BZ_EXTERN void BZ_API ( BZ2_bzclose ) ( BZFILE * b );
---
> BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
136c102,114
< BZ_EXTERN const char *BZ_API ( BZ2_bzerror ) ( BZFILE * b, int *errnum );
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
> 
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int d, const char *mode);
> 
> BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
> 
> BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);
> 
> BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
142c120
< #define BZ_VERSION  ""
---
> #define BZ_VERSION ""
151c129
< #define True  (1)
---
> #define True (1)
160,163c138,141
<   generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
<   bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
<   BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
<   BZ2_bzread_bzerr, BZ2_bzread_nread, main;
---
>     generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
>     bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
>     BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
>     BZ2_bzread_bzerr, BZ2_bzread_nread, main;
166c144
<   generateMTFValues_rll_i, isempty_RL, handle_compress;
---
>     generateMTFValues_rll_i, isempty_RL, handle_compress;
168,170c146,147
< static char *bzerrorstrings[] = {
<   "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
< };
---
> static char *bzerrorstrings[] = {"", "", "", "", "", "", "", "",
>                                  "", "", "", "", "", "", "", ""};
172,173c149,150
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH \
---
> extern void BZ2_bz__AssertH__fail(void);
> #define AssertH
175c152
< #define AssertD \
---
> #define AssertD
177,188c154,159
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
<    fprintf
< #define VPrintf3 \
<    fprintf
< #define VPrintf4 \
<    fprintf
< #define VPrintf5 \
<    fprintf
---
> #define VPrintf0 fprintf
> #define VPrintf1 fprintf
> #define VPrintf2 fprintf
> #define VPrintf3 fprintf
> #define VPrintf4 fprintf
> #define VPrintf5 fprintf
190c161
< #define BZALLOC(nnn) (strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
199c170
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_CODE_LEN 3
205,206c176,177
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE 50
> #define BZ_N_ITERS 4
210,216c181,187
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #define BZ_RAND_DECLS                                                          \
>   Int32 rNToGo;                                                                \
>   Int32 rTPos
> 
> #define BZ_RAND_INIT_MASK                                                      \
>   s->rNToGo = 0;                                                               \
>   s->rTPos = 0
220,224c191,193
< #define BZ_RAND_UPD_MASK                       \
<    if                                             \
<    s->rNToGo--;
< 
< #define BZ_INITIALISE_CRC              \
---
> #define BZ_RAND_UPD_MASK                                                       \
>   if                                                                           \
>     s->rNToGo--;
225a195
> #define BZ_INITIALISE_CRC
227c197
< #define BZ_FINALISE_CRC                \
---
> #define BZ_FINALISE_CRC
228a199
> #define BZ_UPDATE_CRC
230,235c201,203
< #define BZ_UPDATE_CRC              \
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_IDLE 1
> #define BZ_M_RUNNING 2
> #define BZ_M_FLUSHING 3
238,239c206,207
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_S_OUTPUT 1
> #define BZ_S_INPUT 2
246,247c214
< typedef struct
< {
---
> typedef struct {
270c237
<     BZ_RAND_DECLS;
---
>   BZ_RAND_DECLS;
302,303c269
< }
< EState;
---
> } EState;
305,306c271,272
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
> #define BZ_X_IDLE 1
> #define BZ_X_OUTPUT 2
308,348c274,314
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> #define BZ_X_MAGIC_1 0
> #define BZ_X_MAGIC_2 1
> #define BZ_X_MAGIC_3 2
> #define BZ_X_MAGIC_4 3
> #define BZ_X_BLKHDR_1 4
> #define BZ_X_BLKHDR_2 5
> #define BZ_X_BLKHDR_3 6
> #define BZ_X_BLKHDR_4 7
> #define BZ_X_BLKHDR_5 8
> #define BZ_X_BLKHDR_6 9
> #define BZ_X_BCRC_1 0
> #define BZ_X_BCRC_2 1
> #define BZ_X_BCRC_3 2
> #define BZ_X_BCRC_4 3
> #define BZ_X_RANDBIT 4
> #define BZ_X_ORIGPTR_1 5
> #define BZ_X_ORIGPTR_2 6
> #define BZ_X_ORIGPTR_3 7
> #define BZ_X_MAPPING_1 8
> #define BZ_X_MAPPING_2 9
> #define BZ_X_SELECTOR_1 0
> #define BZ_X_SELECTOR_2 1
> #define BZ_X_SELECTOR_3 2
> #define BZ_X_CODING_1 3
> #define BZ_X_CODING_2 4
> #define BZ_X_CODING_3 5
> #define BZ_X_MTF_1 6
> #define BZ_X_MTF_2 7
> #define BZ_X_MTF_3 8
> #define BZ_X_MTF_4 9
> #define BZ_X_MTF_5 0
> #define BZ_X_MTF_6 1
> #define BZ_X_ENDHDR_2 2
> #define BZ_X_ENDHDR_3 3
> #define BZ_X_ENDHDR_4 4
> #define BZ_X_ENDHDR_5 5
> #define BZ_X_ENDHDR_6 6
> #define BZ_X_CCRC_1 7
> #define BZ_X_CCRC_2 8
> #define BZ_X_CCRC_3 9
> #define BZ_X_CCRC_4 0
353,354c319
< typedef struct
< {
---
> typedef struct {
363c328
<     BZ_RAND_DECLS;
---
>   BZ_RAND_DECLS;
432,446c397
< }
< DState;
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
<     c = ;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C                   \
<     c_tPos = c_tt[c_tPos];                    \
<     c = ;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4                                          \
< 
---
> } DState;
448c399,402
< #define GET_LL4                             \
---
> #define BZ_GET_FAST                                                            \
>   s->tPos = s->tt[s->tPos];                                                    \
>   c = ;                                                                        \
>   s->tPos >>= 8;
449a404,407
> #define BZ_GET_FAST_C                                                          \
>   c_tPos = c_tt[c_tPos];                                                       \
>   c = ;                                                                        \
>   c_tPos >>= 8;
451c409
< #define SET_LL                          \
---
> #define SET_LL4
452a411
> #define GET_LL4
454c413
< #define GET_LL \
---
> #define SET_LL
455a415
> #define GET_LL
457,459c417,419
< #define BZ_GET_SMALL                            \
<       c = BZ2_indexIntoF ;    \
<       s->tPos = GET_LL;
---
> #define BZ_GET_SMALL                                                           \
>   c = BZ2_indexIntoF;                                                          \
>   s->tPos = GET_LL;
461c421
< extern Int32 BZ2_decompress ( DState * );
---
> extern Int32 BZ2_decompress(DState *);
463c423
< #define fswap \
---
> #define fswap
464a425
> #define fvswap
466,469c427
< #define fvswap       \
< 
< 
< #define fmin  ?  :
---
> #define fmin ?:
476c434
< #define FALLBACK_QSORT_STACK_SIZE   0
---
> #define FALLBACK_QSORT_STACK_SIZE 0
486,489c444,447
< #define       SET_BH  bhtab[ >> 5] |=
< #define     CLEAR_BH  bhtab[ >> 5] &= ~
< #define     ISSET_BH
< #define      WORD_BH  bhtab[ >> 5]
---
> #define SET_BH bhtab[ >> 5] |=
> #define CLEAR_BH bhtab[ >> 5] &= ~
> #define ISSET_BH
> #define WORD_BH bhtab[ >> 5]
492,495c450,453
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #undef SET_BH
> #undef CLEAR_BH
> #undef ISSET_BH
> #undef WORD_BH
498,501c456
< #define mswap \
< 
< 
< #define mvswap       \
---
> #define mswap
502a458
> #define mvswap
504c460
< #define mmin  ?  :
---
> #define mmin ?:
512,513c468
< #define mnextswap                                        \
< 
---
> #define mnextswap
542,546c497
< #define ADDWEIGHTS                           \
<     |                    \
< 
< 
< #define UPHEAP                                     \
---
> #define ADDWEIGHTS |
547a499
> #define UPHEAP
549,552c501
< #define DOWNHEAP                                   \
< 
< 
< #define bsNEEDW                           \
---
> #define DOWNHEAP
553a503
> #define bsNEEDW
557,559c507
< static void
< makeMaps_e ( void )
< {
---
> static void makeMaps_e(void) {
562,567c510,514
<   for ( makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++ )
<     if ( makeMaps_e_s.inUse[makeMaps_e_i] )
<       {
< 	makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
< 	makeMaps_e_s.nInUse++;
<       }
---
>   for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
>     if (makeMaps_e_s.inUse[makeMaps_e_i]) {
>       makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
>       makeMaps_e_s.nInUse++;
>     }
572,574c519
< static void
< generateMTFValues ( void )
< {
---
> static void generateMTFValues(void) {
582,583c527,528
<   for ( generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
< 	generateMTFValues_i++ )
---
>   for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
>        generateMTFValues_i++)
588,590c533,534
<   for ( generateMTFValues_i = 0;
< 	generateMTFValues_i < generateMTFValues_s.nInUse;
< 	generateMTFValues_i++ )
---
>   for (generateMTFValues_i = 0;
>        generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++)
593,629c537,567
<   for ( generateMTFValues_i = 0;
< 	generateMTFValues_i < generateMTFValues_s.nblock;
< 	generateMTFValues_i++ )
<     {
< 
<       AssertD;
<       generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
<       if ( generateMTFValues_j < 0 )
< 	generateMTFValues_j += generateMTFValues_s.nblock;
<       generateMTFValues_ll_i =
< 	generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
<       AssertD;
< 
<       if ( generateMTFValues_yy[0] == generateMTFValues_ll_i )
< 	{
< 	  generateMTFValues_zPend++;
< 	}
<       else
< 	{
< 
< 	  if ( generateMTFValues_zPend > 0 )
< 	    {
< 
< 	      generateMTFValues_rtmp = generateMTFValues_yy[1];
< 	      generateMTFValues_yy[1] = generateMTFValues_yy[0];
< 	      generateMTFValues_ryy_j = ( generateMTFValues_yy[1] );
< 	      generateMTFValues_rll_i = generateMTFValues_ll_i;
< 	      while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
< 	      generateMTFValues_yy[0] = generateMTFValues_rtmp;
< 	      generateMTFValues_j =
< 		&generateMTFValues_ryy_j - &( generateMTFValues_yy[0] );
< 	      mtfv = generateMTFValues_j + 1;
< 	      generateMTFValues_wr++;
< 	      generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
< 	    }
< 
< 	}
---
>   for (generateMTFValues_i = 0;
>        generateMTFValues_i < generateMTFValues_s.nblock;
>        generateMTFValues_i++) {
> 
>     AssertD;
>     generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
>     if (generateMTFValues_j < 0)
>       generateMTFValues_j += generateMTFValues_s.nblock;
>     generateMTFValues_ll_i =
>         generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
>     AssertD;
> 
>     if (generateMTFValues_yy[0] == generateMTFValues_ll_i) {
>       generateMTFValues_zPend++;
>     } else {
> 
>       if (generateMTFValues_zPend > 0) {
> 
>         generateMTFValues_rtmp = generateMTFValues_yy[1];
>         generateMTFValues_yy[1] = generateMTFValues_yy[0];
>         generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
>         generateMTFValues_rll_i = generateMTFValues_ll_i;
>         while (generateMTFValues_rll_i != generateMTFValues_rtmp)
>           ;
>         generateMTFValues_yy[0] = generateMTFValues_rtmp;
>         generateMTFValues_j =
>             &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
>         mtfv = generateMTFValues_j + 1;
>         generateMTFValues_wr++;
>         generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
>       }
630a569
>   }
632c571
<   if ( generateMTFValues_zPend > 0 )
---
>   if (generateMTFValues_zPend > 0)
641c580
< #define BZ_LESSER_ICOST  0
---
> #define BZ_LESSER_ICOST 0
644,645c583
< #define RETURN                               \
<    ;
---
> #define RETURN ;
647,649c585,588
< #define GET_BITS                     \
<    case lll: s->state = lll;                      \
<    while
---
> #define GET_BITS                                                               \
>   case lll:                                                                    \
>     s->state = lll;                                                            \
>     while
651,652c590
< #define GET_UCHAR                        \
<    GET_BITS
---
> #define GET_UCHAR GET_BITS
654,655c592
< #define GET_BIT                          \
<    GET_BITS
---
> #define GET_BIT GET_BITS
657c594
< #define GET_MTF_VAL           \
---
> #define GET_MTF_VAL
658a596
> Int32 BZ2_decompress(DState *s);
660c598
< Int32 BZ2_decompress ( DState * s );
---
> void BZ2_bz__AssertH__fail(void);
662c600
< void BZ2_bz__AssertH__fail ( void );
---
> static void default_bzfree(void);
664c602
< static void default_bzfree ( void );
---
> static void prepare_new_block(void);
666c604
< static void prepare_new_block ( void );
---
> static void init_RL(void);
668,672c606,607
< static void init_RL ( void );
< 
< int BZ_API ( BZ2_bzCompressInit )
<   ( bz_stream * strm, int blockSize100k, int verbosity, int workFactor )
< {
---
> int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                int verbosity, int workFactor) {
676c611
<   if ( !0 )
---
>   if (!0)
679,681c614,615
<   if ( strm == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0 )
---
>   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
>       workFactor < 0 || workFactor > 0)
684c618
<   if ( workFactor == 0 )
---
>   if (workFactor == 0)
686c620
<   if ( strm->bzalloc == NULL )
---
>   if (strm->bzalloc == NULL)
688c622
<   if ( strm->bzfree == NULL )
---
>   if (strm->bzfree == NULL)
691,692c625,626
<   s = BZALLOC ( sizeof ( EState ) );
<   if ( s == NULL )
---
>   s = BZALLOC(sizeof(EState));
>   if (s == NULL)
701,704c635,637
<   s->arr1 = BZALLOC ( BZ2_bzCompressInit_n * sizeof ( UInt32 ) );
<   s->arr2 =
<     BZALLOC ( ( BZ2_bzCompressInit_n + BZ_N_OVERSHOOT ) * sizeof ( UInt32 ) );
<   s->ftab = BZALLOC ( 7 * sizeof ( UInt32 ) );
---
>   s->arr1 = BZALLOC(BZ2_bzCompressInit_n * sizeof(UInt32));
>   s->arr2 = BZALLOC((BZ2_bzCompressInit_n + BZ_N_OVERSHOOT) * sizeof(UInt32));
>   s->ftab = BZALLOC(7 * sizeof(UInt32));
706c639
<   if ( s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL )
---
>   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
732,733c665
< #define ADD_CHAR_TO_BLOCK               \
< 
---
> #define ADD_CHAR_TO_BLOCK
735,736c667
< int BZ_API ( BZ2_bzCompress ) ( bz_stream * strm, int action )
< {
---
> int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
739c670
<   if ( strm == NULL )
---
>   if (strm == NULL)
742c673
<   if ( s == NULL )
---
>   if (s == NULL)
744c675
<   if ( &s->strm != strm )
---
>   if (&s->strm != strm)
748c679
<   switch ( s->mode )
---
>   switch (s->mode)
752,753c683
< int BZ_API ( BZ2_bzCompressEnd ) ( bz_stream * strm )
< {
---
> int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
755c685
<   if ( strm == NULL )
---
>   if (strm == NULL)
758c688
<   if ( s == NULL )
---
>   if (s == NULL)
760c690
<   if ( &s->strm != strm )
---
>   if (&s->strm != strm)
763,769c693,699
<   if ( s->arr1 != NULL )
<     BZFREE ( s->arr1 );
<   if ( s->arr2 != NULL )
<     BZFREE ( s->arr2 );
<   if ( s->ftab != NULL )
<     BZFREE ( s->ftab );
<   BZFREE ( strm->state );
---
>   if (s->arr1 != NULL)
>     BZFREE(s->arr1);
>   if (s->arr2 != NULL)
>     BZFREE(s->arr2);
>   if (s->ftab != NULL)
>     BZFREE(s->ftab);
>   BZFREE(strm->state);
776,778c706
< int BZ_API ( BZ2_bzDecompressInit )
<   ( bz_stream * strm, int verbosity, int small )
< {
---
> int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
781c709
<   if ( !0 )
---
>   if (!0)
784c712
<   if ( strm == NULL )
---
>   if (strm == NULL)
786c714
<   if ( small != 0 && small != 1 )
---
>   if (small != 0 && small != 1)
788c716
<   if ( verbosity < 0 || verbosity > 4 )
---
>   if (verbosity < 0 || verbosity > 4)
791c719
<   if ( strm->bzalloc == NULL )
---
>   if (strm->bzalloc == NULL)
793c721
<   if ( strm->bzfree == NULL )
---
>   if (strm->bzfree == NULL)
796,797c724,725
<   s = BZALLOC ( sizeof ( DState ) );
<   if ( s == NULL )
---
>   s = BZALLOC(sizeof(DState));
>   if (s == NULL)
819c747
< static void unRLE_obuf_to_output_FAST ( void );
---
> static void unRLE_obuf_to_output_FAST(void);
821c749
< static void unRLE_obuf_to_output_SMALL ( void );
---
> static void unRLE_obuf_to_output_SMALL(void);
823,824c751
< int BZ_API ( BZ2_bzDecompress ) ( bz_stream * strm )
< {
---
> int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
826c753
<   if ( strm == NULL )
---
>   if (strm == NULL)
829c756
<   if ( s == NULL )
---
>   if (s == NULL)
831c758
<   if ( &s->strm != strm )
---
>   if (&s->strm != strm)
834,835c761,762
<   while AssertH
<     ( 0, 1 );
---
>   while
>     AssertH(0, 1);
840,841c767
< int BZ_API ( BZ2_bzDecompressEnd ) ( bz_stream * strm )
< {
---
> int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
843c769
<   if ( strm == NULL )
---
>   if (strm == NULL)
846c772
<   if ( s == NULL )
---
>   if (s == NULL)
848c774
<   if ( &s->strm != strm )
---
>   if (&s->strm != strm)
851,856c777,782
<   if ( s->tt != NULL )
<     BZFREE ( s->tt );
<   if ( s->ll16 != NULL )
<     BZFREE ( s->ll16 );
<   if ( s->ll4 != NULL )
<     BZFREE ( s->ll4 );
---
>   if (s->tt != NULL)
>     BZFREE(s->tt);
>   if (s->ll16 != NULL)
>     BZFREE(s->ll16);
>   if (s->ll4 != NULL)
>     BZFREE(s->ll4);
858c784
<   BZFREE ( strm->state );
---
>   BZFREE(strm->state);
864c790
< #define BZ_SETERR                    \
---
> #define BZ_SETERR
866,868c792
< 
< typedef struct
< {
---
> typedef struct {
876,877c800
< }
< bzFile;
---
> } bzFile;
879,881c802,803
< BZFILE *BZ_API ( BZ2_bzWriteOpen )
<   ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
< {
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
>                                 int verbosity, int workFactor) {
887,890c809,810
<   if ( f == NULL ||
<        ( blockSize100k < 1 || blockSize100k > 9 ) ||
<        ( workFactor < 0 || workFactor > 0 ) ||
<        ( verbosity < 0 || verbosity > 4 ) )
---
>   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
>       (workFactor < 0 || workFactor > 0) || (verbosity < 0 || verbosity > 4))
893c813
<   if ( ferror )
---
>   if (ferror)
897c817
<   if ( bzf == NULL )
---
>   if (bzf == NULL)
909c829
<   if ( workFactor == 0 )
---
>   if (workFactor == 0)
912c832
<   if ( ret != BZ_OK )
---
>   if (ret != BZ_OK)
920,921c840
< void BZ_API ( BZ2_bzWrite ) ( int *bzerror, BZFILE * b, void *buf, int len )
< {
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
926c845
<   if ( bzf == NULL || buf == NULL || len < 0 )
---
>   if (bzf == NULL || buf == NULL || len < 0)
928c847
<   if ( !( bzf->writing ) )
---
>   if (!(bzf->writing))
930c849
<   if ( ferror )
---
>   if (ferror)
933c852
<   if ( len == 0 )
---
>   if (len == 0)
939,958c858,874
<   while ( True )
<     {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       BZ2_bzWrite_ret = 0;
<       if ( BZ2_bzWrite_ret != BZ_RUN_OK )
< 	;
< 
<       if ( bzf->strm.avail_out < BZ_MAX_UNUSED )
< 
< 	if ( bzf->strm.avail_in == 0 )
< 	  ;
<     }
< }
< 
< void BZ_API ( BZ2_bzWriteClose )
<   ( int *bzerror,
<     BZFILE * b,
<     int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out )
< {
---
>   while (True) {
>     bzf->strm.avail_out = BZ_MAX_UNUSED;
>     bzf->strm.next_out = bzf->buf;
>     BZ2_bzWrite_ret = 0;
>     if (BZ2_bzWrite_ret != BZ_RUN_OK)
>       ;
> 
>     if (bzf->strm.avail_out < BZ_MAX_UNUSED)
> 
>       if (bzf->strm.avail_in == 0)
>         ;
>   }
> }
> 
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                               unsigned int *nbytes_in,
>                               unsigned int *nbytes_out) {
962,969c878,882
< void BZ_API ( BZ2_bzWriteClose64 )
<   ( int *bzerror,
<     BZFILE * b,
<     int abandon,
<     unsigned int *nbytes_in_lo32,
<     unsigned int *nbytes_in_hi32,
<     unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32 )
< {
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                 unsigned int *nbytes_in_lo32,
>                                 unsigned int *nbytes_in_hi32,
>                                 unsigned int *nbytes_out_lo32,
>                                 unsigned int *nbytes_out_hi32) {
973c886
<   if ( bzf == NULL )
---
>   if (bzf == NULL)
975c888
<   if ( !( bzf->writing ) )
---
>   if (!(bzf->writing))
977c890
<   if ( ferror )
---
>   if (ferror)
980c893
<   if ( nbytes_in_lo32 != NULL )
---
>   if (nbytes_in_lo32 != NULL)
982c895
<   if ( nbytes_in_hi32 != NULL )
---
>   if (nbytes_in_hi32 != NULL)
984c897
<   if ( nbytes_out_lo32 != NULL )
---
>   if (nbytes_out_lo32 != NULL)
986c899
<   if ( nbytes_out_hi32 != NULL )
---
>   if (nbytes_out_hi32 != NULL)
989c902
<   if ( ( !abandon ) && bzf->lastErr == BZ_OK )
---
>   if ((!abandon) && bzf->lastErr == BZ_OK)
991c904
<     if ( !abandon && !ferror )
---
>     if (!abandon && !ferror)
993,995c906,908
<       if ( nbytes_in_lo32 != NULL )
< 	*nbytes_in_lo32 = bzf->strm.total_in_lo32;
<   if ( nbytes_in_hi32 != NULL )
---
>       if (nbytes_in_lo32 != NULL)
>         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
>   if (nbytes_in_hi32 != NULL)
997c910
<   if ( nbytes_out_lo32 != NULL )
---
>   if (nbytes_out_lo32 != NULL)
999c912
<   if ( nbytes_out_hi32 != NULL )
---
>   if (nbytes_out_hi32 != NULL)
1007,1010c920,921
< BZFILE *BZ_API ( BZ2_bzReadOpen )
<   ( int *bzerror,
<     FILE * f, int verbosity, int small, void *unused, int nUnused )
< {
---
> BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
>                                void *unused, int nUnused) {
1016,1020c927,929
<   if ( f == NULL ||
<        ( small != 0 && small != 1 ) ||
<        ( verbosity < 0 || verbosity > 4 ) ||
<        ( unused == NULL && nUnused != 0 ) ||
<        ( unused != NULL && ( nUnused < 0 || nUnused > BZ_MAX_UNUSED ) ) )
---
>   if (f == NULL || (small != 0 && small != 1) ||
>       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
>       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
1023c932
<   if ( ferror )
---
>   if (ferror)
1027c936
<   if ( bzf == NULL )
---
>   if (bzf == NULL)
1040c949
<   while ( nUnused > 0 )
---
>   while (nUnused > 0)
1043c952
<   if ( ret != BZ_OK )
---
>   if (ret != BZ_OK)
1053,1054c962
< void BZ_API ( BZ2_bzReadClose ) ( int *bzerror, BZFILE * b )
< {
---
> void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
1058c966
<   if ( bzf == NULL )
---
>   if (bzf == NULL)
1061c969
<   if ( bzf->writing )
---
>   if (bzf->writing)
1064c972
<   if ( bzf->initialisedOk )
---
>   if (bzf->initialisedOk)
1069,1070c977
< int BZ_API ( BZ2_bzRead ) ( int *bzerror, BZFILE * b, void *buf, int len )
< {
---
> int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
1076c983
<   if ( bzf == NULL || buf == NULL || len < 0 )
---
>   if (bzf == NULL || buf == NULL || len < 0)
1079c986
<   if ( bzf->writing )
---
>   if (bzf->writing)
1082c989
<   if ( len == 0 )
---
>   if (len == 0)
1088c995
<   while ( True )
---
>   while (True)
1093,1095c1000,1001
< void BZ_API ( BZ2_bzReadGetUnused )
<   ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
< {
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
>                                  int *nUnused) {
1097c1003
<   if ( bzf == NULL )
---
>   if (bzf == NULL)
1099c1005
<   if ( bzf->lastErr != BZ_STREAM_END )
---
>   if (bzf->lastErr != BZ_STREAM_END)
1101c1007
<   if ( unused == NULL || nUnused == NULL )
---
>   if (unused == NULL || nUnused == NULL)
1109,1114c1015,1018
< int BZ_API ( BZ2_bzBuffToBuffCompress )
<   ( char *dest,
<     unsigned int *destLen,
<     char *source,
<     unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor )
< {
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
>                                      char *source, unsigned int sourceLen,
>                                      int blockSize100k, int verbosity,
>                                      int workFactor) {
1117,1120c1021,1023
<   if ( dest == NULL || destLen == NULL ||
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 || workFactor < 0 || workFactor > 0 )
---
>   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
>       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
>       workFactor > 0)
1123c1026
<   if ( workFactor == 0 )
---
>   if (workFactor == 0)
1129c1032
<   if ( BZ2_bzBuffToBuffCompress_ret != BZ_OK )
---
>   if (BZ2_bzBuffToBuffCompress_ret != BZ_OK)
1138c1041
<   if ( BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK )
---
>   if (BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK)
1140c1043
<   if ( BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END )
---
>   if (BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END)
1156,1160c1059,1061
< int BZ_API ( BZ2_bzBuffToBuffDecompress )
<   ( char *dest,
<     unsigned int *destLen,
<     char *source, unsigned int sourceLen, int small, int verbosity )
< {
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
>                                        char *source, unsigned int sourceLen,
>                                        int small, int verbosity) {
1163,1165c1064,1065
<   if ( dest == NULL || destLen == NULL ||
<        source == NULL ||
<        ( small != 0 && small != 1 ) || verbosity < 0 || verbosity > 4 )
---
>   if (dest == NULL || destLen == NULL || source == NULL ||
>       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
1172c1072
<   if ( BZ2_bzBuffToBuffDecompress_ret != BZ_OK )
---
>   if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK)
1181c1081
<   if ( BZ2_bzBuffToBuffDecompress_ret == BZ_OK )
---
>   if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK)
1183c1083
<   if ( BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END )
---
>   if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END)
1191,1196c1091,1095
<   if ( strm.avail_out > 0 )
<     {
<       0;
<       return BZ_UNEXPECTED_EOF;
<     }
<   else;
---
>   if (strm.avail_out > 0) {
>     0;
>     return BZ_UNEXPECTED_EOF;
>   } else
>     ;
1203,1206c1102
< const char *BZ_API ( BZ2_bzlibVersion ) ( void )
< {
<   return BZ_VERSION;
< }
---
> const char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1208c1104
< static BZFILE *bzopen_or_bzdopen ( void );
---
> static BZFILE *bzopen_or_bzdopen(void);
1210,1213c1106
< BZFILE *BZ_API ( BZ2_bzopen ) ( const char *path, const char *mode )
< {
<   return 0;
< }
---
> BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1215,1216c1108
< BZFILE *BZ_API ( BZ2_bzdopen ) ( int d, const char *mode )
< {
---
> BZFILE *BZ_API(BZ2_bzdopen)(int d, const char *mode) {
1220,1221c1112
< int BZ_API ( BZ2_bzread ) ( BZFILE * b, void *buf, int len )
< {
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
1223c1114
<   if ( ( ( bzFile * ) b )->lastErr == BZ_STREAM_END )
---
>   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
1226,1233c1117,1121
<   if ( BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END )
<     {
<       return BZ2_bzread_nread;
<     }
<   else
<     {
<       return -1;
<     }
---
>   if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
>     return BZ2_bzread_nread;
>   } else {
>     return -1;
>   }
1236,1237c1124
< int BZ_API ( BZ2_bzwrite ) ( BZFILE * b, void *buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
1241,1248c1128,1132
<   if ( bzerr == BZ_OK )
<     {
<       return len;
<     }
<   else
<     {
<       return -1;
<     }
---
>   if (bzerr == BZ_OK) {
>     return len;
>   } else {
>     return -1;
>   }
1251,1252c1135
< int BZ_API ( BZ2_bzflush ) ( BZFILE * b )
< {
---
> int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
1254,1258c1137
<   return 0;
< }
< 
< void BZ_API ( BZ2_bzclose ) ( BZFILE * b )
< {
---
> void BZ_API(BZ2_bzclose)(BZFILE *b) {
1260c1139
<   FILE *fp = ( ( bzFile * ) b )->handle;
---
>   FILE *fp = ((bzFile *)b)->handle;
1262,1273c1141,1145
<   if ( b == NULL )
<     if ( ( ( bzFile * ) b )->writing )
<       {
< 	BZ2_bzWriteClose;
< 	if ( bzerr != BZ_OK )
< 	  {
< 	    BZ2_bzWriteClose;
< 	  }
<       }
<     else if ( fp != stdin && fp != stdout )
<       {
< 	fclose;
---
>   if (b == NULL)
>     if (((bzFile *)b)->writing) {
>       BZ2_bzWriteClose;
>       if (bzerr != BZ_OK) {
>         BZ2_bzWriteClose;
1274a1147,1149
>     } else if (fp != stdin && fp != stdout) {
>       fclose;
>     }
1277,1279c1152,1153
< const char *BZ_API ( BZ2_bzerror ) ( BZFILE * b, int *errnum )
< {
<   int err = ( ( bzFile * ) b )->lastErr;
---
> const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
>   int err = ((bzFile *)b)->lastErr;
1281c1155
<   if ( err > 0 )
---
>   if (err > 0)
1287c1161
< #define BZ_UNIX      1
---
> #define BZ_UNIX 1
1289c1163
< #define BZ_LCCWIN32  0
---
> #define BZ_LCCWIN32 0
1301,1305c1175,1179
< #define PATH_SEP    '/'
< #define MY_LSTAT    lstat
< #define MY_STAT     stat
< #define MY_S_ISREG  S_ISREG
< #define MY_S_ISDIR  S_ISDIR
---
> #define PATH_SEP '/'
> #define MY_LSTAT lstat
> #define MY_STAT stat
> #define MY_S_ISREG S_ISREG
> #define MY_S_ISDIR S_ISDIR
1307,1308c1181
< #define APPEND_FILESPEC \
<       root=snocString
---
> #define APPEND_FILESPEC root = snocString
1310,1311c1183
< #define APPEND_FLAG \
<       root=snocString
---
> #define APPEND_FLAG root = snocString
1320,1326c1192,1198
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> #define SM_I2O 1
> #define SM_F2O 2
> #define SM_F2F 3
> 
> #define OM_Z 1
> #define OM_UNZ 2
> #define OM_TEST 3
(86.0 %, 28734 bytes)
4,12c4,12
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_RUN 0
> #define BZ_FLUSH 1
> #define BZ_FINISH 2
> 
> #define BZ_OK 0
> #define BZ_RUN_OK 1
> #define BZ_FLUSH_OK 2
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
14,15c14,15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR (-2)
> #define BZ_MEM_ERROR (-3)
19,41c19,39
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef struct
< {
<     char *next_in;
<     unsigned int avail_in;
<     unsigned int total_in_lo32;
<     unsigned int total_in_hi32;
< 
<     char *next_out;
<     unsigned int avail_out;
<     unsigned int total_out_lo32;
<     unsigned int total_out_hi32;
< 
<     void *state;
< 
<     void *( *bzalloc ) ( void *, int, int );
<     void ( *bzfree ) ( void *, void * );
<     void *opaque;
< }
< bz_stream;
---
> #define BZ_UNEXPECTED_EOF (-7)
> #define BZ_OUTBUFF_FULL (-8)
> #define BZ_CONFIG_ERROR (-9)
> 
> typedef struct {
>   char *next_in;
>   unsigned int avail_in;
>   unsigned int total_in_lo32;
>   unsigned int total_in_hi32;
> 
>   char *next_out;
>   unsigned int avail_out;
>   unsigned int total_out_lo32;
>   unsigned int total_out_hi32;
> 
>   void *state;
> 
>   void *(*bzalloc)(void *, int, int);
>   void (*bzfree)(void *, void *);
>   void *opaque;
> } bz_stream;
48,50c46,47
< BZ_EXTERN int BZ_API ( BZ2_bzCompressInit ) ( bz_stream * strm,
<         int blockSize100k,
<         int verbosity, int workFactor );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                          int verbosity, int workFactor);
52c49
< BZ_EXTERN int BZ_API ( BZ2_bzCompress ) ( bz_stream * strm, int action );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);
54c51
< BZ_EXTERN int BZ_API ( BZ2_bzCompressEnd ) ( bz_stream * strm );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);
56,57c53,54
< BZ_EXTERN int BZ_API ( BZ2_bzDecompressInit ) ( bz_stream * strm,
<         int verbosity, int small );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
>                                            int small);
59c56
< BZ_EXTERN int BZ_API ( BZ2_bzDecompress ) ( bz_stream * strm );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);
61c58
< BZ_EXTERN int BZ_API ( BZ2_bzDecompressEnd ) ( bz_stream * strm );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);
67,128c64,88
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzReadOpen ) ( int *bzerror,
<         FILE * f,
<         int verbosity,
<         int small,
<         void *unused, int nUnused );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzReadClose ) ( int *bzerror, BZFILE * b );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzReadGetUnused ) ( int *bzerror,
<         BZFILE * b,
<         void **unused, int *nUnused );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzRead ) ( int *bzerror,
<                                       BZFILE * b, void *buf, int len );
< 
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzWriteOpen ) ( int *bzerror,
<         FILE * f,
<         int blockSize100k,
<         int verbosity,
<         int workFactor );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzWrite ) ( int *bzerror,
<                                         BZFILE * b, void *buf, int len );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzWriteClose ) ( int *bzerror,
<         BZFILE * b,
<         int abandon,
<         unsigned int *nbytes_in,
<         unsigned int *nbytes_out );
< 
< BZ_EXTERN void BZ_API ( BZ2_bzWriteClose64 ) ( int *bzerror,
<         BZFILE * b,
<         int abandon,
<         unsigned int *nbytes_in_lo32,
<         unsigned int *nbytes_in_hi32,
<         unsigned int *nbytes_out_lo32,
<         unsigned int
<         *nbytes_out_hi32 );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzBuffToBuffCompress ) ( char *dest,
<         unsigned int *destLen,
<         char *source,
<         unsigned int sourceLen,
<         int blockSize100k,
<         int verbosity,
<         int workFactor );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzBuffToBuffDecompress ) ( char *dest,
<         unsigned int *destLen,
<         char *source,
<         unsigned int sourceLen,
<         int small,
<         int verbosity );
< 
< BZ_EXTERN const char *BZ_API ( BZ2_bzlibVersion ) ( void );
< 
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzopen ) ( const char *path,
<         const char *mode );
< 
< BZ_EXTERN BZFILE *BZ_API ( BZ2_bzdopen ) ( int d, const char *mode );
< 
< BZ_EXTERN int BZ_API ( BZ2_bzread ) ( BZFILE * b, void *buf, int len );
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
>                                          int small, void *unused, int nUnused);
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
>                                            void **unused, int *nUnused);
> 
> BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
>                                           int blockSize100k, int verbosity,
>                                           int workFactor);
> 
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                                         unsigned int *nbytes_in,
>                                         unsigned int *nbytes_out);
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                           unsigned int *nbytes_in_lo32,
>                                           unsigned int *nbytes_in_hi32,
>                                           unsigned int *nbytes_out_lo32,
>                                           unsigned int *nbytes_out_hi32);
130c90,92
< BZ_EXTERN int BZ_API ( BZ2_bzwrite ) ( BZFILE * b, void *buf, int len );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
>     int blockSize100k, int verbosity, int workFactor);
132c94,98
< BZ_EXTERN int BZ_API ( BZ2_bzflush ) ( BZFILE * b );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
>                                                  unsigned int *destLen,
>                                                  char *source,
>                                                  unsigned int sourceLen,
>                                                  int small, int verbosity);
134c100
< BZ_EXTERN void BZ_API ( BZ2_bzclose ) ( BZFILE * b );
---
> BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);
136c102,114
< BZ_EXTERN const char *BZ_API ( BZ2_bzerror ) ( BZFILE * b, int *errnum );
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);
> 
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int d, const char *mode);
> 
> BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
> 
> BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);
> 
> BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);
> 
> BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);
142c120
< #define BZ_VERSION  ""
---
> #define BZ_VERSION ""
151c129
< #define True  (1)
---
> #define True (1)
160,163c138,141
<       generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
<       bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
<       BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
<       BZ2_bzread_bzerr, BZ2_bzread_nread, main;
---
>     generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
>     bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
>     BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
>     BZ2_bzread_bzerr, BZ2_bzread_nread, main;
166c144
<       generateMTFValues_rll_i, isempty_RL, handle_compress;
---
>     generateMTFValues_rll_i, isempty_RL, handle_compress;
168,170c146,147
< static char *bzerrorstrings[] = {
<     "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
< };
---
> static char *bzerrorstrings[] = {"", "", "", "", "", "", "", "",
>                                  "", "", "", "", "", "", "", ""};
172,188c149,159
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH \
<  
< #define AssertD \
<  
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
<    fprintf
< #define VPrintf3 \
<    fprintf
< #define VPrintf4 \
<    fprintf
< #define VPrintf5 \
<    fprintf
---
> extern void BZ2_bz__AssertH__fail(void);
> #define AssertH
> 
> #define AssertD
> 
> #define VPrintf0 fprintf
> #define VPrintf1 fprintf
> #define VPrintf2 fprintf
> #define VPrintf3 fprintf
> #define VPrintf4 fprintf
> #define VPrintf5 fprintf
190c161
< #define BZALLOC(nnn) (strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque, (nnn), 1)
199c170
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_CODE_LEN 3
205,206c176,177
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE 50
> #define BZ_N_ITERS 4
210,217c181,188
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
<  
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
<  
---
> #define BZ_RAND_DECLS                                                          \
>   Int32 rNToGo;                                                                \
>   Int32 rTPos
> 
> #define BZ_RAND_INIT_MASK                                                      \
>   s->rNToGo = 0;                                                               \
>   s->rTPos = 0
> 
220,235c191,203
< #define BZ_RAND_UPD_MASK                       \
<    if                                             \
<    s->rNToGo--;
< 
< #define BZ_INITIALISE_CRC              \
<  
< 
< #define BZ_FINALISE_CRC                \
<  
< 
< #define BZ_UPDATE_CRC              \
<  
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_RAND_UPD_MASK                                                       \
>   if                                                                           \
>     s->rNToGo--;
> 
> #define BZ_INITIALISE_CRC
> 
> #define BZ_FINALISE_CRC
> 
> #define BZ_UPDATE_CRC
> 
> #define BZ_M_IDLE 1
> #define BZ_M_RUNNING 2
> #define BZ_M_FLUSHING 3
238,239c206,207
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_S_OUTPUT 1
> #define BZ_S_INPUT 2
246,247c214,216
< typedef struct
< {
---
> typedef struct {
> 
>   bz_stream strm;
249c218,219
<     bz_stream strm;
---
>   Int32 mode;
>   Int32 state;
251,252c221
<     Int32 mode;
<     Int32 state;
---
>   UInt32 avail_in_expect;
254,348c223,314
<     UInt32 avail_in_expect;
< 
<     UInt32 *arr1;
<     UInt32 *arr2;
<     UInt32 *ftab;
<     Int32 origPtr;
< 
<     UInt32 ptr;
<     UChar block;
<     UInt16 mtfv;
<     UChar zbits;
< 
<     Int32 workFactor;
< 
<     UInt32 state_in_ch;
<     Int32 state_in_len;
<     BZ_RAND_DECLS;
< 
<     Int32 nblock;
<     Int32 nblockMAX;
<     Int32 numZ;
<     Int32 state_out_pos;
< 
<     Int32 nInUse;
<     Bool inUse[6];
<     UChar unseqToSeq[6];
< 
<     UInt32 bsBuff;
<     Int32 bsLive;
< 
<     UInt32 blockCRC;
<     UInt32 combinedCRC;
< 
<     Int32 verbosity;
<     Int32 blockNo;
<     Int32 blockSize100k;
< 
<     Int32 nMTF;
<     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<     UChar selector[BZ_MAX_SELECTORS];
<     UChar selectorMtf[BZ_MAX_SELECTORS];
< 
<     UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<     Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<     Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<     UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
< }
< EState;
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
>   UInt32 *arr1;
>   UInt32 *arr2;
>   UInt32 *ftab;
>   Int32 origPtr;
> 
>   UInt32 ptr;
>   UChar block;
>   UInt16 mtfv;
>   UChar zbits;
> 
>   Int32 workFactor;
> 
>   UInt32 state_in_ch;
>   Int32 state_in_len;
>   BZ_RAND_DECLS;
> 
>   Int32 nblock;
>   Int32 nblockMAX;
>   Int32 numZ;
>   Int32 state_out_pos;
> 
>   Int32 nInUse;
>   Bool inUse[6];
>   UChar unseqToSeq[6];
> 
>   UInt32 bsBuff;
>   Int32 bsLive;
> 
>   UInt32 blockCRC;
>   UInt32 combinedCRC;
> 
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
> 
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
> 
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
> 
> } EState;
> 
> #define BZ_X_IDLE 1
> #define BZ_X_OUTPUT 2
> 
> #define BZ_X_MAGIC_1 0
> #define BZ_X_MAGIC_2 1
> #define BZ_X_MAGIC_3 2
> #define BZ_X_MAGIC_4 3
> #define BZ_X_BLKHDR_1 4
> #define BZ_X_BLKHDR_2 5
> #define BZ_X_BLKHDR_3 6
> #define BZ_X_BLKHDR_4 7
> #define BZ_X_BLKHDR_5 8
> #define BZ_X_BLKHDR_6 9
> #define BZ_X_BCRC_1 0
> #define BZ_X_BCRC_2 1
> #define BZ_X_BCRC_3 2
> #define BZ_X_BCRC_4 3
> #define BZ_X_RANDBIT 4
> #define BZ_X_ORIGPTR_1 5
> #define BZ_X_ORIGPTR_2 6
> #define BZ_X_ORIGPTR_3 7
> #define BZ_X_MAPPING_1 8
> #define BZ_X_MAPPING_2 9
> #define BZ_X_SELECTOR_1 0
> #define BZ_X_SELECTOR_2 1
> #define BZ_X_SELECTOR_3 2
> #define BZ_X_CODING_1 3
> #define BZ_X_CODING_2 4
> #define BZ_X_CODING_3 5
> #define BZ_X_MTF_1 6
> #define BZ_X_MTF_2 7
> #define BZ_X_MTF_3 8
> #define BZ_X_MTF_4 9
> #define BZ_X_MTF_5 0
> #define BZ_X_MTF_6 1
> #define BZ_X_ENDHDR_2 2
> #define BZ_X_ENDHDR_3 3
> #define BZ_X_ENDHDR_4 4
> #define BZ_X_ENDHDR_5 5
> #define BZ_X_ENDHDR_6 6
> #define BZ_X_CCRC_1 7
> #define BZ_X_CCRC_2 8
> #define BZ_X_CCRC_3 9
> #define BZ_X_CCRC_4 0
353,354c319
< typedef struct
< {
---
> typedef struct {
356c321
<     bz_stream strm;
---
>   bz_stream strm;
358c323
<     Int32 state;
---
>   Int32 state;
360,461c325,419
<     UChar state_out_ch;
<     Int32 state_out_len;
<     Bool blockRandomised;
<     BZ_RAND_DECLS;
< 
<     UInt32 bsBuff;
<     Int32 bsLive;
< 
<     Int32 blockSize100k;
<     Bool smallDecompress;
<     Int32 currBlockNo;
<     Int32 verbosity;
< 
<     Int32 origPtr;
<     UInt32 tPos;
<     Int32 k0;
<     Int32 unzftab[6];
<     Int32 nblock_used;
<     Int32 cftab[7];
<     Int32 cftabCopy[7];
< 
<     UInt32 tt;
< 
<     UInt16 ll16;
<     UChar ll4;
< 
<     UInt32 storedBlockCRC;
<     UInt32 storedCombinedCRC;
<     UInt32 calculatedBlockCRC;
<     UInt32 calculatedCombinedCRC;
< 
<     Int32 nInUse;
<     Bool inUse[6];
<     Bool inUse16[6];
<     UChar seqToUnseq[6];
< 
<     UChar mtfa[MTFA_SIZE];
<     Int32 mtfbase[6 / MTFL_SIZE];
<     UChar selector[BZ_MAX_SELECTORS];
<     UChar selectorMtf[BZ_MAX_SELECTORS];
<     UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<     Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<     Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<     Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<     Int32 minLens[BZ_N_GROUPS];
< 
<     Int32 save_i;
<     Int32 save_j;
<     Int32 save_t;
<     Int32 save_alphaSize;
<     Int32 save_nGroups;
<     Int32 save_nSelectors;
<     Int32 save_EOB;
<     Int32 save_groupNo;
<     Int32 save_groupPos;
<     Int32 save_nextSym;
<     Int32 save_nblockMAX;
<     Int32 save_nblock;
<     Int32 save_es;
<     Int32 save_N;
<     Int32 save_curr;
<     Int32 save_zt;
<     Int32 save_zn;
<     Int32 save_zvec;
<     Int32 save_zj;
<     Int32 save_gSel;
<     Int32 save_gMinlen;
<     Int32 save_gLimit;
<     Int32 save_gBase;
<     Int32 save_gPerm;
< 
< }
< DState;
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
<     c = ;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C                   \
<     c_tPos = c_tt[c_tPos];                    \
<     c = ;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4                                          \
<  
< 
< #define GET_LL4                             \
<  
< 
< #define SET_LL                          \
<  
< 
< #define GET_LL \
<  
< 
< #define BZ_GET_SMALL                            \
<       c = BZ2_indexIntoF ;    \
<       s->tPos = GET_LL;
< 
< extern Int32 BZ2_decompress ( DState * );
---
>   UChar state_out_ch;
>   Int32 state_out_len;
>   Bool blockRandomised;
>   BZ_RAND_DECLS;
> 
>   UInt32 bsBuff;
>   Int32 bsLive;
> 
>   Int32 blockSize100k;
>   Bool smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity;
> 
>   Int32 origPtr;
>   UInt32 tPos;
>   Int32 k0;
>   Int32 unzftab[6];
>   Int32 nblock_used;
>   Int32 cftab[7];
>   Int32 cftabCopy[7];
> 
>   UInt32 tt;
> 
>   UInt16 ll16;
>   UChar ll4;
> 
>   UInt32 storedBlockCRC;
>   UInt32 storedCombinedCRC;
>   UInt32 calculatedBlockCRC;
>   UInt32 calculatedCombinedCRC;
> 
>   Int32 nInUse;
>   Bool inUse[6];
>   Bool inUse16[6];
>   UChar seqToUnseq[6];
> 
>   UChar mtfa[MTFA_SIZE];
>   Int32 mtfbase[6 / MTFL_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 minLens[BZ_N_GROUPS];
> 
>   Int32 save_i;
>   Int32 save_j;
>   Int32 save_t;
>   Int32 save_alphaSize;
>   Int32 save_nGroups;
>   Int32 save_nSelectors;
>   Int32 save_EOB;
>   Int32 save_groupNo;
>   Int32 save_groupPos;
>   Int32 save_nextSym;
>   Int32 save_nblockMAX;
>   Int32 save_nblock;
>   Int32 save_es;
>   Int32 save_N;
>   Int32 save_curr;
>   Int32 save_zt;
>   Int32 save_zn;
>   Int32 save_zvec;
>   Int32 save_zj;
>   Int32 save_gSel;
>   Int32 save_gMinlen;
>   Int32 save_gLimit;
>   Int32 save_gBase;
>   Int32 save_gPerm;
> 
> } DState;
> 
> #define BZ_GET_FAST                                                            \
>   s->tPos = s->tt[s->tPos];                                                    \
>   c = ;                                                                        \
>   s->tPos >>= 8;
> 
> #define BZ_GET_FAST_C                                                          \
>   c_tPos = c_tt[c_tPos];                                                       \
>   c = ;                                                                        \
>   c_tPos >>= 8;
> 
> #define SET_LL4
> 
> #define GET_LL4
> 
> #define SET_LL
> 
> #define GET_LL
> 
> #define BZ_GET_SMALL                                                           \
>   c = BZ2_indexIntoF;                                                          \
>   s->tPos = GET_LL;
463,464c421
< #define fswap \
<  
---
> extern Int32 BZ2_decompress(DState *);
466,467c423
< #define fvswap       \
<  
---
> #define fswap
469c425,427
< #define fmin  ?  :
---
> #define fvswap
> 
> #define fmin ?:
476c434
< #define FALLBACK_QSORT_STACK_SIZE   0
---
> #define FALLBACK_QSORT_STACK_SIZE 0
486,489c444,447
< #define       SET_BH  bhtab[ >> 5] |=
< #define     CLEAR_BH  bhtab[ >> 5] &= ~
< #define     ISSET_BH
< #define      WORD_BH  bhtab[ >> 5]
---
> #define SET_BH bhtab[ >> 5] |=
> #define CLEAR_BH bhtab[ >> 5] &= ~
> #define ISSET_BH
> #define WORD_BH bhtab[ >> 5]
492,495c450,453
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #undef SET_BH
> #undef CLEAR_BH
> #undef ISSET_BH
> #undef WORD_BH
498,499c456
< #define mswap \
<  
---
> #define mswap
501,502c458
< #define mvswap       \
<  
---
> #define mvswap
504c460
< #define mmin  ?  :
---
> #define mmin ?:
512,513c468
< #define mnextswap                                        \
<  
---
> #define mnextswap
542,544c497
< #define ADDWEIGHTS                           \
<     |                    \
<  
---
> #define ADDWEIGHTS |
546,547c499
< #define UPHEAP                                     \
<  
---
> #define UPHEAP
549,550c501
< #define DOWNHEAP                                   \
<  
---
> #define DOWNHEAP
552,553c503
< #define bsNEEDW                           \
<  
---
> #define bsNEEDW
557,567c507,514
< static void
< makeMaps_e ( void )
< {
< 
<     makeMaps_e_s.nInUse = 0;
<     for ( makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++ )
<         if ( makeMaps_e_s.inUse[makeMaps_e_i] )
<         {
<             makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
<             makeMaps_e_s.nInUse++;
<         }
---
> static void makeMaps_e(void) {
> 
>   makeMaps_e_s.nInUse = 0;
>   for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
>     if (makeMaps_e_s.inUse[makeMaps_e_i]) {
>       makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
>       makeMaps_e_s.nInUse++;
>     }
572,627c519,522
< static void
< generateMTFValues ( void )
< {
< 
<     UChar *block = &generateMTFValues_s.block;
<     UInt16 mtfv = generateMTFValues_s.mtfv;
< 
<     ;
<     generateMTFValues_EOB = generateMTFValues_s.nInUse + 1;
< 
<     for ( generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
<             generateMTFValues_i++ )
<         generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
< 
<     generateMTFValues_wr = 0;
<     generateMTFValues_zPend = 0;
<     for ( generateMTFValues_i = 0;
<             generateMTFValues_i < generateMTFValues_s.nInUse;
<             generateMTFValues_i++ )
<         generateMTFValues_yy[generateMTFValues_i] = generateMTFValues_i;
< 
<     for ( generateMTFValues_i = 0;
<             generateMTFValues_i < generateMTFValues_s.nblock;
<             generateMTFValues_i++ )
<     {
< 
<         AssertD;
<         generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
<         if ( generateMTFValues_j < 0 )
<             generateMTFValues_j += generateMTFValues_s.nblock;
<         generateMTFValues_ll_i =
<             generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
<         AssertD;
< 
<         if ( generateMTFValues_yy[0] == generateMTFValues_ll_i )
<         {
<             generateMTFValues_zPend++;
<         }
<         else
<         {
< 
<             if ( generateMTFValues_zPend > 0 )
<             {
< 
<                 generateMTFValues_rtmp = generateMTFValues_yy[1];
<                 generateMTFValues_yy[1] = generateMTFValues_yy[0];
<                 generateMTFValues_ryy_j = ( generateMTFValues_yy[1] );
<                 generateMTFValues_rll_i = generateMTFValues_ll_i;
<                 while ( generateMTFValues_rll_i != generateMTFValues_rtmp ) ;
<                 generateMTFValues_yy[0] = generateMTFValues_rtmp;
<                 generateMTFValues_j =
<                     &generateMTFValues_ryy_j - &( generateMTFValues_yy[0] );
<                 mtfv = generateMTFValues_j + 1;
<                 generateMTFValues_wr++;
<                 generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
<             }
---
> static void generateMTFValues(void) {
> 
>   UChar *block = &generateMTFValues_s.block;
>   UInt16 mtfv = generateMTFValues_s.mtfv;
629c524,567
<         }
---
>   ;
>   generateMTFValues_EOB = generateMTFValues_s.nInUse + 1;
> 
>   for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
>        generateMTFValues_i++)
>     generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;
> 
>   generateMTFValues_wr = 0;
>   generateMTFValues_zPend = 0;
>   for (generateMTFValues_i = 0;
>        generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++)
>     generateMTFValues_yy[generateMTFValues_i] = generateMTFValues_i;
> 
>   for (generateMTFValues_i = 0;
>        generateMTFValues_i < generateMTFValues_s.nblock;
>        generateMTFValues_i++) {
> 
>     AssertD;
>     generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
>     if (generateMTFValues_j < 0)
>       generateMTFValues_j += generateMTFValues_s.nblock;
>     generateMTFValues_ll_i =
>         generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
>     AssertD;
> 
>     if (generateMTFValues_yy[0] == generateMTFValues_ll_i) {
>       generateMTFValues_zPend++;
>     } else {
> 
>       if (generateMTFValues_zPend > 0) {
> 
>         generateMTFValues_rtmp = generateMTFValues_yy[1];
>         generateMTFValues_yy[1] = generateMTFValues_yy[0];
>         generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
>         generateMTFValues_rll_i = generateMTFValues_ll_i;
>         while (generateMTFValues_rll_i != generateMTFValues_rtmp)
>           ;
>         generateMTFValues_yy[0] = generateMTFValues_rtmp;
>         generateMTFValues_j =
>             &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
>         mtfv = generateMTFValues_j + 1;
>         generateMTFValues_wr++;
>         generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
>       }
630a569
>   }
632c571
<     if ( generateMTFValues_zPend > 0 )
---
>   if (generateMTFValues_zPend > 0)
634,636c573,575
<         mtfv = generateMTFValues_EOB;
<     generateMTFValues_wr++;
<     generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
---
>     mtfv = generateMTFValues_EOB;
>   generateMTFValues_wr++;
>   generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;
638c577
<     generateMTFValues_s.nMTF = generateMTFValues_wr;
---
>   generateMTFValues_s.nMTF = generateMTFValues_wr;
641c580
< #define BZ_LESSER_ICOST  0
---
> #define BZ_LESSER_ICOST 0
644,645c583
< #define RETURN                               \
<    ;
---
> #define RETURN ;
647,649c585,588
< #define GET_BITS                     \
<    case lll: s->state = lll;                      \
<    while
---
> #define GET_BITS                                                               \
>   case lll:                                                                    \
>     s->state = lll;                                                            \
>     while
651,652c590
< #define GET_UCHAR                        \
<    GET_BITS
---
> #define GET_UCHAR GET_BITS
654,655c592
< #define GET_BIT                          \
<    GET_BITS
---
> #define GET_BIT GET_BITS
657,658c594
< #define GET_MTF_VAL           \
<  
---
> #define GET_MTF_VAL
660c596
< Int32 BZ2_decompress ( DState * s );
---
> Int32 BZ2_decompress(DState *s);
662c598
< void BZ2_bz__AssertH__fail ( void );
---
> void BZ2_bz__AssertH__fail(void);
664c600
< static void default_bzfree ( void );
---
> static void default_bzfree(void);
666c602
< static void prepare_new_block ( void );
---
> static void prepare_new_block(void);
668c604
< static void init_RL ( void );
---
> static void init_RL(void);
670,672c606,607
< int BZ_API ( BZ2_bzCompressInit )
< ( bz_stream * strm, int blockSize100k, int verbosity, int workFactor )
< {
---
> int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                int verbosity, int workFactor) {
674c609
<     EState *s;
---
>   EState *s;
676,677c611,612
<     if ( !0 )
<         return BZ_CONFIG_ERROR;
---
>   if (!0)
>     return BZ_CONFIG_ERROR;
679,682c614,616
<     if ( strm == NULL ||
<             blockSize100k < 1 || blockSize100k > 9 ||
<             workFactor < 0 || workFactor > 0 )
<         return BZ_PARAM_ERROR;
---
>   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
>       workFactor < 0 || workFactor > 0)
>     return BZ_PARAM_ERROR;
684,689c618,623
<     if ( workFactor == 0 )
<         workFactor = 0;
<     if ( strm->bzalloc == NULL )
<         strm->bzalloc = default_bzalloc;
<     if ( strm->bzfree == NULL )
<         strm->bzfree = default_bzfree;
---
>   if (workFactor == 0)
>     workFactor = 0;
>   if (strm->bzalloc == NULL)
>     strm->bzalloc = default_bzalloc;
>   if (strm->bzfree == NULL)
>     strm->bzfree = default_bzfree;
691,694c625,628
<     s = BZALLOC ( sizeof ( EState ) );
<     if ( s == NULL )
<         return BZ_MEM_ERROR;
<     s->strm = *strm;
---
>   s = BZALLOC(sizeof(EState));
>   if (s == NULL)
>     return BZ_MEM_ERROR;
>   s->strm = *strm;
696,698c630,632
<     s->arr1 = NULL;
<     s->arr2 = NULL;
<     s->ftab = NULL;
---
>   s->arr1 = NULL;
>   s->arr2 = NULL;
>   s->ftab = NULL;
700,704c634,637
<     BZ2_bzCompressInit_n = 0 * blockSize100k;
<     s->arr1 = BZALLOC ( BZ2_bzCompressInit_n * sizeof ( UInt32 ) );
<     s->arr2 =
<         BZALLOC ( ( BZ2_bzCompressInit_n + BZ_N_OVERSHOOT ) * sizeof ( UInt32 ) );
<     s->ftab = BZALLOC ( 7 * sizeof ( UInt32 ) );
---
>   BZ2_bzCompressInit_n = 0 * blockSize100k;
>   s->arr1 = BZALLOC(BZ2_bzCompressInit_n * sizeof(UInt32));
>   s->arr2 = BZALLOC((BZ2_bzCompressInit_n + BZ_N_OVERSHOOT) * sizeof(UInt32));
>   s->ftab = BZALLOC(7 * sizeof(UInt32));
706c639
<     if ( s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL )
---
>   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
708,715c641,648
<         s->blockNo = 0;
<     s->state = BZ_S_INPUT;
<     s->mode = BZ_M_RUNNING;
<     s->combinedCRC = 0;
<     s->blockSize100k = blockSize100k;
<     s->nblockMAX = 0 * blockSize100k - 9;
<     s->verbosity = verbosity;
<     s->workFactor = workFactor;
---
>     s->blockNo = 0;
>   s->state = BZ_S_INPUT;
>   s->mode = BZ_M_RUNNING;
>   s->combinedCRC = 0;
>   s->blockSize100k = blockSize100k;
>   s->nblockMAX = 0 * blockSize100k - 9;
>   s->verbosity = verbosity;
>   s->workFactor = workFactor;
717,720c650,653
<     s->block = *s->arr2;
<     s->mtfv = *s->arr1;
<     s->zbits = NULL;
<     s->ptr = *s->arr1;
---
>   s->block = *s->arr2;
>   s->mtfv = *s->arr1;
>   s->zbits = NULL;
>   s->ptr = *s->arr1;
722,729c655,662
<     strm->state = s;
<     strm->total_in_lo32 = 0;
<     strm->total_in_hi32 = 0;
<     strm->total_out_lo32 = 0;
<     strm->total_out_hi32 = 0;
<     ;
<     ;
<     return BZ_OK;
---
>   strm->state = s;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   ;
>   ;
>   return BZ_OK;
732,733c665
< #define ADD_CHAR_TO_BLOCK               \
<  
---
> #define ADD_CHAR_TO_BLOCK
735,736c667
< int BZ_API ( BZ2_bzCompress ) ( bz_stream * strm, int action )
< {
---
> int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {
738,745c669,676
<     EState *s;
<     if ( strm == NULL )
<         return BZ_PARAM_ERROR;
<     s = strm->state;
<     if ( s == NULL )
<         return BZ_PARAM_ERROR;
<     if ( &s->strm != strm )
<         return BZ_PARAM_ERROR;
---
>   EState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (&s->strm != strm)
>     return BZ_PARAM_ERROR;
748,772c679
<     switch ( s->mode )
<         return BZ_OK;
< }
< 
< int BZ_API ( BZ2_bzCompressEnd ) ( bz_stream * strm )
< {
<     EState *s;
<     if ( strm == NULL )
<         return BZ_PARAM_ERROR;
<     s = strm->state;
<     if ( s == NULL )
<         return BZ_PARAM_ERROR;
<     if ( &s->strm != strm )
<         return BZ_PARAM_ERROR;
< 
<     if ( s->arr1 != NULL )
<         BZFREE ( s->arr1 );
<     if ( s->arr2 != NULL )
<         BZFREE ( s->arr2 );
<     if ( s->ftab != NULL )
<         BZFREE ( s->ftab );
<     BZFREE ( strm->state );
< 
<     strm->state = NULL;
< 
---
>   switch (s->mode)
776,814c683,805
< int BZ_API ( BZ2_bzDecompressInit )
< ( bz_stream * strm, int verbosity, int small )
< {
<     DState *s;
< 
<     if ( !0 )
<         return BZ_CONFIG_ERROR;
< 
<     if ( strm == NULL )
<         return BZ_PARAM_ERROR;
<     if ( small != 0 && small != 1 )
<         return BZ_PARAM_ERROR;
<     if ( verbosity < 0 || verbosity > 4 )
<         return BZ_PARAM_ERROR;
< 
<     if ( strm->bzalloc == NULL )
<         strm->bzalloc = default_bzalloc;
<     if ( strm->bzfree == NULL )
<         strm->bzfree = default_bzfree;
< 
<     s = BZALLOC ( sizeof ( DState ) );
<     if ( s == NULL )
<         return BZ_MEM_ERROR;
<     s->strm = *strm;
<     strm->state = s;
<     s->state = BZ_X_MAGIC_1;
<     s->bsLive = 0;
<     s->bsBuff = 0;
<     s->calculatedCombinedCRC = 0;
<     strm->total_in_lo32 = 0;
<     strm->total_in_hi32 = 0;
<     strm->total_out_lo32 = 0;
<     strm->total_out_hi32 = 0;
<     s->smallDecompress = small;
<     s->ll4 = NULL;
<     s->ll16 = NULL;
<     s->tt = NULL;
<     s->currBlockNo = 0;
<     s->verbosity = verbosity;
---
> int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
>   EState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (&s->strm != strm)
>     return BZ_PARAM_ERROR;
> 
>   if (s->arr1 != NULL)
>     BZFREE(s->arr1);
>   if (s->arr2 != NULL)
>     BZFREE(s->arr2);
>   if (s->ftab != NULL)
>     BZFREE(s->ftab);
>   BZFREE(strm->state);
> 
>   strm->state = NULL;
> 
>   return BZ_OK;
> }
> 
> int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
>   DState *s;
> 
>   if (!0)
>     return BZ_CONFIG_ERROR;
> 
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   if (small != 0 && small != 1)
>     return BZ_PARAM_ERROR;
>   if (verbosity < 0 || verbosity > 4)
>     return BZ_PARAM_ERROR;
> 
>   if (strm->bzalloc == NULL)
>     strm->bzalloc = default_bzalloc;
>   if (strm->bzfree == NULL)
>     strm->bzfree = default_bzfree;
> 
>   s = BZALLOC(sizeof(DState));
>   if (s == NULL)
>     return BZ_MEM_ERROR;
>   s->strm = *strm;
>   strm->state = s;
>   s->state = BZ_X_MAGIC_1;
>   s->bsLive = 0;
>   s->bsBuff = 0;
>   s->calculatedCombinedCRC = 0;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   s->smallDecompress = small;
>   s->ll4 = NULL;
>   s->ll16 = NULL;
>   s->tt = NULL;
>   s->currBlockNo = 0;
>   s->verbosity = verbosity;
> 
>   return BZ_OK;
> }
> 
> static void unRLE_obuf_to_output_FAST(void);
> 
> static void unRLE_obuf_to_output_SMALL(void);
> 
> int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
>   DState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (&s->strm != strm)
>     return BZ_PARAM_ERROR;
> 
>   while
>     AssertH(0, 1);
> 
>   return 0;
> }
> 
> int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
>   DState *s;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   if (&s->strm != strm)
>     return BZ_PARAM_ERROR;
> 
>   if (s->tt != NULL)
>     BZFREE(s->tt);
>   if (s->ll16 != NULL)
>     BZFREE(s->ll16);
>   if (s->ll4 != NULL)
>     BZFREE(s->ll4);
> 
>   BZFREE(strm->state);
>   strm->state = NULL;
> 
>   return BZ_OK;
> }
> 
> #define BZ_SETERR
> 
> typedef struct {
>   FILE *handle;
>   char buf[BZ_MAX_UNUSED];
>   Int32 bufN;
>   Bool writing;
>   bz_stream strm;
>   Int32 lastErr;
>   Bool initialisedOk;
> } bzFile;
> 
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
>                                 int verbosity, int workFactor) {
>   Int32 ret;
>   bzFile *bzf = NULL;
816,817c807
<     return BZ_OK;
< }
---
>   BZ_SETERR;
819c809,811
< static void unRLE_obuf_to_output_FAST ( void );
---
>   if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
>       (workFactor < 0 || workFactor > 0) || (verbosity < 0 || verbosity > 4))
>     ;
821c813,814
< static void unRLE_obuf_to_output_SMALL ( void );
---
>   if (ferror)
>     ;
823,832c816,818
< int BZ_API ( BZ2_bzDecompress ) ( bz_stream * strm )
< {
<     DState *s;
<     if ( strm == NULL )
<         return BZ_PARAM_ERROR;
<     s = strm->state;
<     if ( s == NULL )
<         return BZ_PARAM_ERROR;
<     if ( &s->strm != strm )
<         return BZ_PARAM_ERROR;
---
>   bzf = malloc;
>   if (bzf == NULL)
>     ;
834,835c820,833
<     while AssertH
<     ( 0, 1 );
---
>   BZ_SETERR;
>   bzf->initialisedOk = False;
>   bzf->bufN = 0;
>   bzf->handle = f;
>   bzf->writing = True;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
> 
>   if (workFactor == 0)
>     workFactor = 0;
>   ret = BZ2_bzCompressInit;
>   if (ret != BZ_OK)
>     ;
837c835,837
<     return 0;
---
>   bzf->strm.avail_in = 0;
>   bzf->initialisedOk = True;
>   return bzf;
840,856c840
< int BZ_API ( BZ2_bzDecompressEnd ) ( bz_stream * strm )
< {
<     DState *s;
<     if ( strm == NULL )
<         return BZ_PARAM_ERROR;
<     s = strm->state;
<     if ( s == NULL )
<         return BZ_PARAM_ERROR;
<     if ( &s->strm != strm )
<         return BZ_PARAM_ERROR;
< 
<     if ( s->tt != NULL )
<         BZFREE ( s->tt );
<     if ( s->ll16 != NULL )
<         BZFREE ( s->ll16 );
<     if ( s->ll4 != NULL )
<         BZFREE ( s->ll4 );
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {
858,859c842
<     BZFREE ( strm->state );
<     strm->state = NULL;
---
>   bzFile *bzf = b;
861,862c844,850
<     return BZ_OK;
< }
---
>   BZ_SETERR;
>   if (bzf == NULL || buf == NULL || len < 0)
>     ;
>   if (!(bzf->writing))
>     ;
>   if (ferror)
>     ;
864,865c852,853
< #define BZ_SETERR                    \
<  
---
>   if (len == 0)
>     ;
867,891c855,856
< typedef struct
< {
<     FILE *handle;
<     char buf[BZ_MAX_UNUSED];
<     Int32 bufN;
<     Bool writing;
<     bz_stream strm;
<     Int32 lastErr;
<     Bool initialisedOk;
< }
< bzFile;
< 
< BZFILE *BZ_API ( BZ2_bzWriteOpen )
< ( int *bzerror, FILE * f, int blockSize100k, int verbosity, int workFactor )
< {
<     Int32 ret;
<     bzFile *bzf = NULL;
< 
<     BZ_SETERR;
< 
<     if ( f == NULL ||
<             ( blockSize100k < 1 || blockSize100k > 9 ) ||
<             ( workFactor < 0 || workFactor > 0 ) ||
<             ( verbosity < 0 || verbosity > 4 ) )
<         ;
---
>   bzf->strm.avail_in = len;
>   bzf->strm.next_in = buf;
893,894c858,863
<     if ( ferror )
<         ;
---
>   while (True) {
>     bzf->strm.avail_out = BZ_MAX_UNUSED;
>     bzf->strm.next_out = bzf->buf;
>     BZ2_bzWrite_ret = 0;
>     if (BZ2_bzWrite_ret != BZ_RUN_OK)
>       ;
896,898c865
<     bzf = malloc;
<     if ( bzf == NULL )
<         ;
---
>     if (bzf->strm.avail_out < BZ_MAX_UNUSED)
900,912c867
<     BZ_SETERR;
<     bzf->initialisedOk = False;
<     bzf->bufN = 0;
<     bzf->handle = f;
<     bzf->writing = True;
<     bzf->strm.bzalloc = NULL;
<     bzf->strm.bzfree = NULL;
<     bzf->strm.opaque = NULL;
< 
<     if ( workFactor == 0 )
<         workFactor = 0;
<     ret = BZ2_bzCompressInit;
<     if ( ret != BZ_OK )
---
>       if (bzf->strm.avail_in == 0)
914,917c869
< 
<     bzf->strm.avail_in = 0;
<     bzf->initialisedOk = True;
<     return bzf;
---
>   }
920,951c872,875
< void BZ_API ( BZ2_bzWrite ) ( int *bzerror, BZFILE * b, void *buf, int len )
< {
< 
<     bzFile *bzf = b;
< 
<     BZ_SETERR;
<     if ( bzf == NULL || buf == NULL || len < 0 )
<         ;
<     if ( !( bzf->writing ) )
<         ;
<     if ( ferror )
<         ;
< 
<     if ( len == 0 )
<         ;
< 
<     bzf->strm.avail_in = len;
<     bzf->strm.next_in = buf;
< 
<     while ( True )
<     {
<         bzf->strm.avail_out = BZ_MAX_UNUSED;
<         bzf->strm.next_out = bzf->buf;
<         BZ2_bzWrite_ret = 0;
<         if ( BZ2_bzWrite_ret != BZ_RUN_OK )
<             ;
< 
<         if ( bzf->strm.avail_out < BZ_MAX_UNUSED )
< 
<             if ( bzf->strm.avail_in == 0 )
<                 ;
<     }
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                               unsigned int *nbytes_in,
>                               unsigned int *nbytes_out) {
>   BZ2_bzWriteClose64;
954,969c878,882
< void BZ_API ( BZ2_bzWriteClose )
< ( int *bzerror,
<   BZFILE * b,
<   int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out )
< {
<     BZ2_bzWriteClose64;
< }
< 
< void BZ_API ( BZ2_bzWriteClose64 )
< ( int *bzerror,
<   BZFILE * b,
<   int abandon,
<   unsigned int *nbytes_in_lo32,
<   unsigned int *nbytes_in_hi32,
<   unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32 )
< {
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                 unsigned int *nbytes_in_lo32,
>                                 unsigned int *nbytes_in_hi32,
>                                 unsigned int *nbytes_out_lo32,
>                                 unsigned int *nbytes_out_hi32) {
971c884
<     bzFile *bzf = b;
---
>   bzFile *bzf = b;
973,1005c886,891
<     if ( bzf == NULL )
<         ;
<     if ( !( bzf->writing ) )
<         ;
<     if ( ferror )
<         ;
< 
<     if ( nbytes_in_lo32 != NULL )
<         *nbytes_in_lo32 = 0;
<     if ( nbytes_in_hi32 != NULL )
<         *nbytes_in_hi32 = 0;
<     if ( nbytes_out_lo32 != NULL )
<         *nbytes_out_lo32 = 0;
<     if ( nbytes_out_hi32 != NULL )
<         *nbytes_out_hi32 = 0;
< 
<     if ( ( !abandon ) && bzf->lastErr == BZ_OK )
< 
<         if ( !abandon && !ferror )
< 
<             if ( nbytes_in_lo32 != NULL )
<                 *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<     if ( nbytes_in_hi32 != NULL )
<         *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<     if ( nbytes_out_lo32 != NULL )
<         *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<     if ( nbytes_out_hi32 != NULL )
<         *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<     BZ_SETERR;
<     0;
<     0;
< }
---
>   if (bzf == NULL)
>     ;
>   if (!(bzf->writing))
>     ;
>   if (ferror)
>     ;
1007,1021c893,930
< BZFILE *BZ_API ( BZ2_bzReadOpen )
< ( int *bzerror,
<   FILE * f, int verbosity, int small, void *unused, int nUnused )
< {
<     bzFile *bzf = NULL;
<     int ret;
< 
<     BZ_SETERR;
< 
<     if ( f == NULL ||
<             ( small != 0 && small != 1 ) ||
<             ( verbosity < 0 || verbosity > 4 ) ||
<             ( unused == NULL && nUnused != 0 ) ||
<             ( unused != NULL && ( nUnused < 0 || nUnused > BZ_MAX_UNUSED ) ) )
<         ;
---
>   if (nbytes_in_lo32 != NULL)
>     *nbytes_in_lo32 = 0;
>   if (nbytes_in_hi32 != NULL)
>     *nbytes_in_hi32 = 0;
>   if (nbytes_out_lo32 != NULL)
>     *nbytes_out_lo32 = 0;
>   if (nbytes_out_hi32 != NULL)
>     *nbytes_out_hi32 = 0;
> 
>   if ((!abandon) && bzf->lastErr == BZ_OK)
> 
>     if (!abandon && !ferror)
> 
>       if (nbytes_in_lo32 != NULL)
>         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
>   if (nbytes_in_hi32 != NULL)
>     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
>   if (nbytes_out_lo32 != NULL)
>     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
>   if (nbytes_out_hi32 != NULL)
>     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
> 
>   BZ_SETERR;
>   0;
>   0;
> }
> 
> BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
>                                void *unused, int nUnused) {
>   bzFile *bzf = NULL;
>   int ret;
> 
>   BZ_SETERR;
> 
>   if (f == NULL || (small != 0 && small != 1) ||
>       (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
>       (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
>     ;
1023,1024c932,933
<     if ( ferror )
<         ;
---
>   if (ferror)
>     ;
1026,1028c935,937
<     bzf = malloc;
<     if ( bzf == NULL )
<         ;
---
>   bzf = malloc;
>   if (bzf == NULL)
>     ;
1030c939
<     BZ_SETERR;
---
>   BZ_SETERR;
1032,1038c941,947
<     bzf->initialisedOk = False;
<     bzf->handle = f;
<     bzf->bufN = 0;
<     bzf->writing = False;
<     bzf->strm.bzalloc = NULL;
<     bzf->strm.bzfree = NULL;
<     bzf->strm.opaque = NULL;
---
>   bzf->initialisedOk = False;
>   bzf->handle = f;
>   bzf->bufN = 0;
>   bzf->writing = False;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
1040c949
<     while ( nUnused > 0 )
---
>   while (nUnused > 0)
1042,1044c951,953
<         ret = BZ2_bzDecompressInit;
<     if ( ret != BZ_OK )
<         ;
---
>     ret = BZ2_bzDecompressInit;
>   if (ret != BZ_OK)
>     ;
1046,1047c955,956
<     bzf->strm.avail_in = bzf->bufN;
<     bzf->strm.next_in = bzf->buf;
---
>   bzf->strm.avail_in = bzf->bufN;
>   bzf->strm.next_in = bzf->buf;
1049,1050c958,959
<     bzf->initialisedOk = True;
<     return bzf;
---
>   bzf->initialisedOk = True;
>   return bzf;
1053,1055c962,963
< void BZ_API ( BZ2_bzReadClose ) ( int *bzerror, BZFILE * b )
< {
<     bzFile *bzf = b;
---
> void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
>   bzFile *bzf = b;
1057,1059c965,967
<     BZ_SETERR;
<     if ( bzf == NULL )
<         ;
---
>   BZ_SETERR;
>   if (bzf == NULL)
>     ;
1061,1062c969,970
<     if ( bzf->writing )
<         ;
---
>   if (bzf->writing)
>     ;
1064,1065c972
<     if ( bzf->initialisedOk )
<         0;
---
>   if (bzf->initialisedOk)
1066a974
>   0;
1069,1070c977
< int BZ_API ( BZ2_bzRead ) ( int *bzerror, BZFILE * b, void *buf, int len )
< {
---
> int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {
1072c979
<     bzFile *bzf = b;
---
>   bzFile *bzf = b;
1074c981
<     BZ_SETERR;
---
>   BZ_SETERR;
1076,1077c983,984
<     if ( bzf == NULL || buf == NULL || len < 0 )
<         ;
---
>   if (bzf == NULL || buf == NULL || len < 0)
>     ;
1079,1080c986,987
<     if ( bzf->writing )
<         ;
---
>   if (bzf->writing)
>     ;
1082,1083c989,990
<     if ( len == 0 )
<         ;
---
>   if (len == 0)
>     ;
1085,1086c992,993
<     bzf->strm.avail_out = len;
<     bzf->strm.next_out = buf;
---
>   bzf->strm.avail_out = len;
>   bzf->strm.next_out = buf;
1088c995
<     while ( True )
---
>   while (True)
1090c997
<         return 0;
---
>     return 0;
1093,1102c1000,1008
< void BZ_API ( BZ2_bzReadGetUnused )
< ( int *bzerror, BZFILE * b, void **unused, int *nUnused )
< {
<     bzFile *bzf = b;
<     if ( bzf == NULL )
<         ;
<     if ( bzf->lastErr != BZ_STREAM_END )
<         ;
<     if ( unused == NULL || nUnused == NULL )
<         ;
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
>                                  int *nUnused) {
>   bzFile *bzf = b;
>   if (bzf == NULL)
>     ;
>   if (bzf->lastErr != BZ_STREAM_END)
>     ;
>   if (unused == NULL || nUnused == NULL)
>     ;
1104,1141c1010,1033
<     BZ_SETERR;
<     *nUnused = bzf->strm.avail_in;
<     *unused = bzf->strm.next_in;
< }
< 
< int BZ_API ( BZ2_bzBuffToBuffCompress )
< ( char *dest,
<   unsigned int *destLen,
<   char *source,
<   unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor )
< {
<     bz_stream strm;
< 
<     if ( dest == NULL || destLen == NULL ||
<             source == NULL ||
<             blockSize100k < 1 || blockSize100k > 9 ||
<             verbosity < 0 || verbosity > 4 || workFactor < 0 || workFactor > 0 )
<         return BZ_PARAM_ERROR;
< 
<     if ( workFactor == 0 )
<         workFactor = 0;
<     strm.bzalloc = NULL;
<     strm.bzfree = NULL;
<     strm.opaque = NULL;
<     BZ2_bzBuffToBuffCompress_ret = 0;
<     if ( BZ2_bzBuffToBuffCompress_ret != BZ_OK )
<         return BZ2_bzBuffToBuffCompress_ret;
< 
<     strm.next_in = source;
<     strm.next_out = dest;
<     strm.avail_in = sourceLen;
<     strm.avail_out = *destLen;
< 
<     BZ2_bzBuffToBuffCompress_ret = 0;
<     if ( BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK )
<         goto output_overflow;
<     if ( BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END )
<         goto errhandler;
---
>   BZ_SETERR;
>   *nUnused = bzf->strm.avail_in;
>   *unused = bzf->strm.next_in;
> }
> 
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
>                                      char *source, unsigned int sourceLen,
>                                      int blockSize100k, int verbosity,
>                                      int workFactor) {
>   bz_stream strm;
> 
>   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
>       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
>       workFactor > 0)
>     return BZ_PARAM_ERROR;
> 
>   if (workFactor == 0)
>     workFactor = 0;
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   BZ2_bzBuffToBuffCompress_ret = 0;
>   if (BZ2_bzBuffToBuffCompress_ret != BZ_OK)
>     return BZ2_bzBuffToBuffCompress_ret;
1143,1145c1035,1048
<     *destLen -= strm.avail_out;
<     0;
<     return BZ_OK;
---
>   strm.next_in = source;
>   strm.next_out = dest;
>   strm.avail_in = sourceLen;
>   strm.avail_out = *destLen;
> 
>   BZ2_bzBuffToBuffCompress_ret = 0;
>   if (BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK)
>     goto output_overflow;
>   if (BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END)
>     goto errhandler;
> 
>   *destLen -= strm.avail_out;
>   0;
>   return BZ_OK;
1148,1149c1051,1052
<     0;
<     return BZ_OUTBUFF_FULL;
---
>   0;
>   return BZ_OUTBUFF_FULL;
1152,1153c1055,1056
<     0;
<     return BZ2_bzBuffToBuffCompress_ret;
---
>   0;
>   return BZ2_bzBuffToBuffCompress_ret;
1156,1184c1059,1073
< int BZ_API ( BZ2_bzBuffToBuffDecompress )
< ( char *dest,
<   unsigned int *destLen,
<   char *source, unsigned int sourceLen, int small, int verbosity )
< {
<     bz_stream strm;
< 
<     if ( dest == NULL || destLen == NULL ||
<             source == NULL ||
<             ( small != 0 && small != 1 ) || verbosity < 0 || verbosity > 4 )
<         return BZ_PARAM_ERROR;
< 
<     strm.bzalloc = NULL;
<     strm.bzfree = NULL;
<     strm.opaque = NULL;
<     BZ2_bzBuffToBuffDecompress_ret = 0;
<     if ( BZ2_bzBuffToBuffDecompress_ret != BZ_OK )
<         return BZ2_bzBuffToBuffDecompress_ret;
< 
<     strm.next_in = source;
<     strm.next_out = dest;
<     strm.avail_in = sourceLen;
<     strm.avail_out = *destLen;
< 
<     BZ2_bzBuffToBuffDecompress_ret = 0;
<     if ( BZ2_bzBuffToBuffDecompress_ret == BZ_OK )
<         goto output_overflow_or_eof;
<     if ( BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END )
<         goto errhandler;
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
>                                        char *source, unsigned int sourceLen,
>                                        int small, int verbosity) {
>   bz_stream strm;
> 
>   if (dest == NULL || destLen == NULL || source == NULL ||
>       (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
>     return BZ_PARAM_ERROR;
> 
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   BZ2_bzBuffToBuffDecompress_ret = 0;
>   if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK)
>     return BZ2_bzBuffToBuffDecompress_ret;
1186,1188c1075,1088
<     *destLen -= strm.avail_out;
<     0;
<     return BZ_OK;
---
>   strm.next_in = source;
>   strm.next_out = dest;
>   strm.avail_in = sourceLen;
>   strm.avail_out = *destLen;
> 
>   BZ2_bzBuffToBuffDecompress_ret = 0;
>   if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK)
>     goto output_overflow_or_eof;
>   if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END)
>     goto errhandler;
> 
>   *destLen -= strm.avail_out;
>   0;
>   return BZ_OK;
1191,1198c1091
<     if ( strm.avail_out > 0 )
<     {
<         0;
<         return BZ_UNEXPECTED_EOF;
<     }
<     else;
< 
< errhandler:
---
>   if (strm.avail_out > 0) {
1200,1201c1093,1095
<     return BZ2_bzBuffToBuffDecompress_ret;
< }
---
>     return BZ_UNEXPECTED_EOF;
>   } else
>     ;
1203,1205c1097,1099
< const char *BZ_API ( BZ2_bzlibVersion ) ( void )
< {
<     return BZ_VERSION;
---
> errhandler:
>   0;
>   return BZ2_bzBuffToBuffDecompress_ret;
1208c1102
< static BZFILE *bzopen_or_bzdopen ( void );
---
> const char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }
1210,1213c1104
< BZFILE *BZ_API ( BZ2_bzopen ) ( const char *path, const char *mode )
< {
<     return 0;
< }
---
> static BZFILE *bzopen_or_bzdopen(void);
1215,1218c1106
< BZFILE *BZ_API ( BZ2_bzdopen ) ( int d, const char *mode )
< {
<     return bzopen_or_bzdopen;
< }
---
> BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }
1220,1233c1108,1109
< int BZ_API ( BZ2_bzread ) ( BZFILE * b, void *buf, int len )
< {
< 
<     if ( ( ( bzFile * ) b )->lastErr == BZ_STREAM_END )
<         return 0;
<     BZ2_bzread_nread = 0;
<     if ( BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END )
<     {
<         return BZ2_bzread_nread;
<     }
<     else
<     {
<         return -1;
<     }
---
> BZFILE *BZ_API(BZ2_bzdopen)(int d, const char *mode) {
>   return bzopen_or_bzdopen;
1236,1238c1112
< int BZ_API ( BZ2_bzwrite ) ( BZFILE * b, void *buf, int len )
< {
<     int bzerr;
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
1240,1247c1114,1148
<     ;
<     if ( bzerr == BZ_OK )
<     {
<         return len;
<     }
<     else
<     {
<         return -1;
---
>   if (((bzFile *)b)->lastErr == BZ_STREAM_END)
>     return 0;
>   BZ2_bzread_nread = 0;
>   if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
>     return BZ2_bzread_nread;
>   } else {
>     return -1;
>   }
> }
> 
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
>   int bzerr;
> 
>   ;
>   if (bzerr == BZ_OK) {
>     return len;
>   } else {
>     return -1;
>   }
> }
> 
> int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }
> 
> void BZ_API(BZ2_bzclose)(BZFILE *b) {
>   int bzerr;
>   FILE *fp = ((bzFile *)b)->handle;
> 
>   if (b == NULL)
>     if (((bzFile *)b)->writing) {
>       BZ2_bzWriteClose;
>       if (bzerr != BZ_OK) {
>         BZ2_bzWriteClose;
>       }
>     } else if (fp != stdin && fp != stdout) {
>       fclose;
1251,1255c1152,1153
< int BZ_API ( BZ2_bzflush ) ( BZFILE * b )
< {
< 
<     return 0;
< }
---
> const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
>   int err = ((bzFile *)b)->lastErr;
1257,1284c1155,1158
< void BZ_API ( BZ2_bzclose ) ( BZFILE * b )
< {
<     int bzerr;
<     FILE *fp = ( ( bzFile * ) b )->handle;
< 
<     if ( b == NULL )
<         if ( ( ( bzFile * ) b )->writing )
<         {
<             BZ2_bzWriteClose;
<             if ( bzerr != BZ_OK )
<             {
<                 BZ2_bzWriteClose;
<             }
<         }
<         else if ( fp != stdin && fp != stdout )
<         {
<             fclose;
<         }
< }
< 
< const char *BZ_API ( BZ2_bzerror ) ( BZFILE * b, int *errnum )
< {
<     int err = ( ( bzFile * ) b )->lastErr;
< 
<     if ( err > 0 )
<         err = 0;
<     *errnum = err;
<     return bzerrorstrings[err * -1];
---
>   if (err > 0)
>     err = 0;
>   *errnum = err;
>   return bzerrorstrings[err * -1];
1287c1161
< #define BZ_UNIX      1
---
> #define BZ_UNIX 1
1289c1163
< #define BZ_LCCWIN32  0
---
> #define BZ_LCCWIN32 0
1301,1305c1175,1179
< #define PATH_SEP    '/'
< #define MY_LSTAT    lstat
< #define MY_STAT     stat
< #define MY_S_ISREG  S_ISREG
< #define MY_S_ISDIR  S_ISDIR
---
> #define PATH_SEP '/'
> #define MY_LSTAT lstat
> #define MY_STAT stat
> #define MY_S_ISREG S_ISREG
> #define MY_S_ISDIR S_ISDIR
1307,1308c1181
< #define APPEND_FILESPEC \
<       root=snocString
---
> #define APPEND_FILESPEC root = snocString
1310,1311c1183
< #define APPEND_FLAG \
<       root=snocString
---
> #define APPEND_FLAG root = snocString
1320,1326c1192,1198
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> #define SM_I2O 1
> #define SM_F2O 2
> #define SM_F2F 3
> 
> #define OM_Z 1
> #define OM_UNZ 2
> #define OM_TEST 3
(86.9 %, 26800 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 0 times
  method pass_balanced :: angles-only worked 0 times and failed 26 times
  method pass_balanced :: curly worked 69 times and failed 50 times
  method pass_balanced :: curly-only worked 0 times and failed 0 times
  method pass_balanced :: parens worked 155 times and failed 271 times
  method pass_balanced :: parens-only worked 0 times and failed 0 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 23 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 19 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 1 times and failed 2 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 20 times and failed 18 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 7 times and failed 6 times
  method pass_clang :: param-to-global worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 13 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 16 times and failed 44 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 1 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 38 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 0 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 1 times
  method pass_clang :: rename-var worked 0 times and failed 1 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 2 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 1 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 17 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 0 times and failed 0 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 0 times and failed 0 times
  method pass_ints :: a worked 130 times and failed 2 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 4 times and failed 0 times
  method pass_ints :: e worked 1 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 0 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 14 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454709278.65661/bzip2.c' reduced to:

#define _BZLIB_H

#define BZ_RUN 0
#define BZ_FLUSH 1
#define BZ_FINISH 2

#define BZ_OK 0
#define BZ_RUN_OK 1
#define BZ_FLUSH_OK 2
#define BZ_FINISH_OK 3
#define BZ_STREAM_END 4
#define BZ_SEQUENCE_ERROR
#define BZ_PARAM_ERROR (-2)
#define BZ_MEM_ERROR (-3)
#define BZ_DATA_ERROR
#define BZ_DATA_ERROR_MAGIC
#define BZ_IO_ERROR
#define BZ_UNEXPECTED_EOF (-7)
#define BZ_OUTBUFF_FULL (-8)
#define BZ_CONFIG_ERROR (-9)

typedef struct {
  char *next_in;
  unsigned int avail_in;
  unsigned int total_in_lo32;
  unsigned int total_in_hi32;

  char *next_out;
  unsigned int avail_out;
  unsigned int total_out_lo32;
  unsigned int total_out_hi32;

  void *state;

  void *(*bzalloc)(void *, int, int);
  void (*bzfree)(void *, void *);
  void *opaque;
} bz_stream;

#include <stdio.h>

#define BZ_API(func) func
#define BZ_EXTERN extern

BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
                                         int verbosity, int workFactor);

BZ_EXTERN int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action);

BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm);

BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity,
                                           int small);

BZ_EXTERN int BZ_API(BZ2_bzDecompress)(bz_stream *strm);

BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm);

#define BZ_MAX_UNUSED 0

typedef void BZFILE;

BZ_EXTERN BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity,
                                         int small, void *unused, int nUnused);

BZ_EXTERN void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b);

BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
                                           void **unused, int *nUnused);

BZ_EXTERN int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len);

BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
                                          int blockSize100k, int verbosity,
                                          int workFactor);

BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);

BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
                                        unsigned int *nbytes_in,
                                        unsigned int *nbytes_out);

BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
                                          unsigned int *nbytes_in_lo32,
                                          unsigned int *nbytes_in_hi32,
                                          unsigned int *nbytes_out_lo32,
                                          unsigned int *nbytes_out_hi32);

BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
    char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
    int blockSize100k, int verbosity, int workFactor);

BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
                                                 unsigned int *destLen,
                                                 char *source,
                                                 unsigned int sourceLen,
                                                 int small, int verbosity);

BZ_EXTERN const char *BZ_API(BZ2_bzlibVersion)(void);

BZ_EXTERN BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode);

BZ_EXTERN BZFILE *BZ_API(BZ2_bzdopen)(int d, const char *mode);

BZ_EXTERN int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);

BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);

BZ_EXTERN int BZ_API(BZ2_bzflush)(BZFILE *b);

BZ_EXTERN void BZ_API(BZ2_bzclose)(BZFILE *b);

BZ_EXTERN const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum);

#define _BZLIB_PRIVATE_H

#include <stdlib.h>

#define BZ_VERSION ""

typedef unsigned char Bool;
typedef unsigned char UChar;
typedef int Int32;
typedef unsigned int UInt32;
typedef short Int16;
typedef unsigned short UInt16;

#define True (1)
#define False (0)

#define __inline__

;

;
Int32 makeMaps_e_i, generateMTFValues_i, generateMTFValues_j,
    generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
    bz_config_ok, BZ2_bzCompressInit_n, BZ2_bzWrite_ret,
    BZ2_bzBuffToBuffCompress_ret, BZ2_bzBuffToBuffDecompress_ret,
    BZ2_bzread_bzerr, BZ2_bzread_nread, main;
UChar generateMTFValues_yy[6];
UChar generateMTFValues_ll_i, generateMTFValues_rtmp, generateMTFValues_ryy_j,
    generateMTFValues_rll_i, isempty_RL, handle_compress;
static void *default_bzalloc;
static char *bzerrorstrings[] = {"", "", "", "", "", "", "", "",
                                 "", "", "", "", "", "", "", ""};
typedef int e;
extern void BZ2_bz__AssertH__fail(void);
#define AssertH

#define AssertD

#define VPrintf0 fprintf
#define VPrintf1 fprintf
#define VPrintf2 fprintf
#define VPrintf3 fprintf
#define VPrintf4 fprintf
#define VPrintf5 fprintf

#define BZALLOC(nnn) (strm->opaque, (nnn), 1)
#define BZFREE(ppp)

#define BZ_HDR_B 6
#define BZ_HDR_Z 0
#define BZ_HDR_h 4
#define BZ_HDR_0 8

#define BZ_MAX_ALPHA_SIZE 8
#define BZ_MAX_CODE_LEN 3

#define BZ_RUNA 0
#define BZ_RUNB 1

#define BZ_N_GROUPS 6
#define BZ_G_SIZE 50
#define BZ_N_ITERS 4

#define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))

#define BZ_RAND_DECLS                                                          \
  Int32 rNToGo;                                                                \
  Int32 rTPos

#define BZ_RAND_INIT_MASK                                                      \
  s->rNToGo = 0;                                                               \
  s->rTPos = 0

#define BZ_RAND_MASK

#define BZ_RAND_UPD_MASK                                                       \
  if                                                                           \
    s->rNToGo--;

#define BZ_INITIALISE_CRC

#define BZ_FINALISE_CRC

#define BZ_UPDATE_CRC

#define BZ_M_IDLE 1
#define BZ_M_RUNNING 2
#define BZ_M_FLUSHING 3
#define BZ_M_FINISHING 4

#define BZ_S_OUTPUT 1
#define BZ_S_INPUT 2

#define BZ_N_RADIX 2
#define BZ_N_QSORT 2
#define BZ_N_SHELL 8
#define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)

typedef struct {

  bz_stream strm;

  Int32 mode;
  Int32 state;

  UInt32 avail_in_expect;

  UInt32 *arr1;
  UInt32 *arr2;
  UInt32 *ftab;
  Int32 origPtr;

  UInt32 ptr;
  UChar block;
  UInt16 mtfv;
  UChar zbits;

  Int32 workFactor;

  UInt32 state_in_ch;
  Int32 state_in_len;
  BZ_RAND_DECLS;

  Int32 nblock;
  Int32 nblockMAX;
  Int32 numZ;
  Int32 state_out_pos;

  Int32 nInUse;
  Bool inUse[6];
  UChar unseqToSeq[6];

  UInt32 bsBuff;
  Int32 bsLive;

  UInt32 blockCRC;
  UInt32 combinedCRC;

  Int32 verbosity;
  Int32 blockNo;
  Int32 blockSize100k;

  Int32 nMTF;
  Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
  UChar selector[BZ_MAX_SELECTORS];
  UChar selectorMtf[BZ_MAX_SELECTORS];

  UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
  Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
  Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];

  UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];

} EState;

#define BZ_X_IDLE 1
#define BZ_X_OUTPUT 2

#define BZ_X_MAGIC_1 0
#define BZ_X_MAGIC_2 1
#define BZ_X_MAGIC_3 2
#define BZ_X_MAGIC_4 3
#define BZ_X_BLKHDR_1 4
#define BZ_X_BLKHDR_2 5
#define BZ_X_BLKHDR_3 6
#define BZ_X_BLKHDR_4 7
#define BZ_X_BLKHDR_5 8
#define BZ_X_BLKHDR_6 9
#define BZ_X_BCRC_1 0
#define BZ_X_BCRC_2 1
#define BZ_X_BCRC_3 2
#define BZ_X_BCRC_4 3
#define BZ_X_RANDBIT 4
#define BZ_X_ORIGPTR_1 5
#define BZ_X_ORIGPTR_2 6
#define BZ_X_ORIGPTR_3 7
#define BZ_X_MAPPING_1 8
#define BZ_X_MAPPING_2 9
#define BZ_X_SELECTOR_1 0
#define BZ_X_SELECTOR_2 1
#define BZ_X_SELECTOR_3 2
#define BZ_X_CODING_1 3
#define BZ_X_CODING_2 4
#define BZ_X_CODING_3 5
#define BZ_X_MTF_1 6
#define BZ_X_MTF_2 7
#define BZ_X_MTF_3 8
#define BZ_X_MTF_4 9
#define BZ_X_MTF_5 0
#define BZ_X_MTF_6 1
#define BZ_X_ENDHDR_2 2
#define BZ_X_ENDHDR_3 3
#define BZ_X_ENDHDR_4 4
#define BZ_X_ENDHDR_5 5
#define BZ_X_ENDHDR_6 6
#define BZ_X_CCRC_1 7
#define BZ_X_CCRC_2 8
#define BZ_X_CCRC_3 9
#define BZ_X_CCRC_4 0

#define MTFA_SIZE 4096
#define MTFL_SIZE 6

typedef struct {

  bz_stream strm;

  Int32 state;

  UChar state_out_ch;
  Int32 state_out_len;
  Bool blockRandomised;
  BZ_RAND_DECLS;

  UInt32 bsBuff;
  Int32 bsLive;

  Int32 blockSize100k;
  Bool smallDecompress;
  Int32 currBlockNo;
  Int32 verbosity;

  Int32 origPtr;
  UInt32 tPos;
  Int32 k0;
  Int32 unzftab[6];
  Int32 nblock_used;
  Int32 cftab[7];
  Int32 cftabCopy[7];

  UInt32 tt;

  UInt16 ll16;
  UChar ll4;

  UInt32 storedBlockCRC;
  UInt32 storedCombinedCRC;
  UInt32 calculatedBlockCRC;
  UInt32 calculatedCombinedCRC;

  Int32 nInUse;
  Bool inUse[6];
  Bool inUse16[6];
  UChar seqToUnseq[6];

  UChar mtfa[MTFA_SIZE];
  Int32 mtfbase[6 / MTFL_SIZE];
  UChar selector[BZ_MAX_SELECTORS];
  UChar selectorMtf[BZ_MAX_SELECTORS];
  UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];

  Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
  Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
  Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
  Int32 minLens[BZ_N_GROUPS];

  Int32 save_i;
  Int32 save_j;
  Int32 save_t;
  Int32 save_alphaSize;
  Int32 save_nGroups;
  Int32 save_nSelectors;
  Int32 save_EOB;
  Int32 save_groupNo;
  Int32 save_groupPos;
  Int32 save_nextSym;
  Int32 save_nblockMAX;
  Int32 save_nblock;
  Int32 save_es;
  Int32 save_N;
  Int32 save_curr;
  Int32 save_zt;
  Int32 save_zn;
  Int32 save_zvec;
  Int32 save_zj;
  Int32 save_gSel;
  Int32 save_gMinlen;
  Int32 save_gLimit;
  Int32 save_gBase;
  Int32 save_gPerm;

} DState;

#define BZ_GET_FAST                                                            \
  s->tPos = s->tt[s->tPos];                                                    \
  c = ;                                                                        \
  s->tPos >>= 8;

#define BZ_GET_FAST_C                                                          \
  c_tPos = c_tt[c_tPos];                                                       \
  c = ;                                                                        \
  c_tPos >>= 8;

#define SET_LL4

#define GET_LL4

#define SET_LL

#define GET_LL

#define BZ_GET_SMALL                                                           \
  c = BZ2_indexIntoF;                                                          \
  s->tPos = GET_LL;

extern Int32 BZ2_decompress(DState *);

#define fswap

#define fvswap

#define fmin ?:

#define fpush

#define fpop

#define FALLBACK_QSORT_SMALL_THRESH 0
#define FALLBACK_QSORT_STACK_SIZE 0

#undef fmin
#undef fpush
#undef fpop
#undef fswap
#undef fvswap
#undef FALLBACK_QSORT_SMALL_THRESH
#undef FALLBACK_QSORT_STACK_SIZE

#define SET_BH bhtab[ >> 5] |=
#define CLEAR_BH bhtab[ >> 5] &= ~
#define ISSET_BH
#define WORD_BH bhtab[ >> 5]
#define UNALIGNED_BH

#undef SET_BH
#undef CLEAR_BH
#undef ISSET_BH
#undef WORD_BH
#undef UNALIGNED_BH

#define mswap

#define mvswap

#define mmin ?:

#define mpush

#define mpop

#define mnextsize

#define mnextswap

#define MAIN_QSORT_SMALL_THRESH 0
#define MAIN_QSORT_DEPTH_THRESH
#define MAIN_QSORT_STACK_SIZE 0

#undef mswap
#undef mvswap
#undef mpush
#undef mpop
#undef mmin
#undef mnextsize
#undef mnextswap
#undef MAIN_QSORT_SMALL_THRESH
#undef MAIN_QSORT_DEPTH_THRESH
#undef MAIN_QSORT_STACK_SIZE

#define BIGFREQ
#define SETMASK
#define CLEARMASK

#undef BIGFREQ
#undef SETMASK
#undef CLEARMASK

#define WEIGHTOF
#define DEPTHOF
#define MYMAX

#define ADDWEIGHTS |

#define UPHEAP

#define DOWNHEAP

#define bsNEEDW

EState makeMaps_e_s, generateMTFValues_s;

static void makeMaps_e(void) {

  makeMaps_e_s.nInUse = 0;
  for (makeMaps_e_i = 0; makeMaps_e_i < 6; makeMaps_e_i++)
    if (makeMaps_e_s.inUse[makeMaps_e_i]) {
      makeMaps_e_s.unseqToSeq[makeMaps_e_i] = makeMaps_e_s.nInUse;
      makeMaps_e_s.nInUse++;
    }
}

UInt32 *generateMTFValues_ptr = &generateMTFValues_s.ptr;

static void generateMTFValues(void) {

  UChar *block = &generateMTFValues_s.block;
  UInt16 mtfv = generateMTFValues_s.mtfv;

  ;
  generateMTFValues_EOB = generateMTFValues_s.nInUse + 1;

  for (generateMTFValues_i = 0; generateMTFValues_i <= generateMTFValues_EOB;
       generateMTFValues_i++)
    generateMTFValues_s.mtfFreq[generateMTFValues_i] = 0;

  generateMTFValues_wr = 0;
  generateMTFValues_zPend = 0;
  for (generateMTFValues_i = 0;
       generateMTFValues_i < generateMTFValues_s.nInUse; generateMTFValues_i++)
    generateMTFValues_yy[generateMTFValues_i] = generateMTFValues_i;

  for (generateMTFValues_i = 0;
       generateMTFValues_i < generateMTFValues_s.nblock;
       generateMTFValues_i++) {

    AssertD;
    generateMTFValues_j = generateMTFValues_ptr[generateMTFValues_i] - 1;
    if (generateMTFValues_j < 0)
      generateMTFValues_j += generateMTFValues_s.nblock;
    generateMTFValues_ll_i =
        generateMTFValues_s.unseqToSeq[block[generateMTFValues_j]];
    AssertD;

    if (generateMTFValues_yy[0] == generateMTFValues_ll_i) {
      generateMTFValues_zPend++;
    } else {

      if (generateMTFValues_zPend > 0) {

        generateMTFValues_rtmp = generateMTFValues_yy[1];
        generateMTFValues_yy[1] = generateMTFValues_yy[0];
        generateMTFValues_ryy_j = (generateMTFValues_yy[1]);
        generateMTFValues_rll_i = generateMTFValues_ll_i;
        while (generateMTFValues_rll_i != generateMTFValues_rtmp)
          ;
        generateMTFValues_yy[0] = generateMTFValues_rtmp;
        generateMTFValues_j =
            &generateMTFValues_ryy_j - &(generateMTFValues_yy[0]);
        mtfv = generateMTFValues_j + 1;
        generateMTFValues_wr++;
        generateMTFValues_s.mtfFreq[generateMTFValues_j + 1]++;
      }
    }
  }

  if (generateMTFValues_zPend > 0)

    mtfv = generateMTFValues_EOB;
  generateMTFValues_wr++;
  generateMTFValues_s.mtfFreq[generateMTFValues_EOB]++;

  generateMTFValues_s.nMTF = generateMTFValues_wr;
}

#define BZ_LESSER_ICOST 0
#define BZ_GREATER_ICOST 5

#define RETURN ;

#define GET_BITS                                                               \
  case lll:                                                                    \
    s->state = lll;                                                            \
    while

#define GET_UCHAR GET_BITS

#define GET_BIT GET_BITS

#define GET_MTF_VAL

Int32 BZ2_decompress(DState *s);

void BZ2_bz__AssertH__fail(void);

static void default_bzfree(void);

static void prepare_new_block(void);

static void init_RL(void);

int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
                               int verbosity, int workFactor) {

  EState *s;

  if (!0)
    return BZ_CONFIG_ERROR;

  if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
      workFactor < 0 || workFactor > 0)
    return BZ_PARAM_ERROR;

  if (workFactor == 0)
    workFactor = 0;
  if (strm->bzalloc == NULL)
    strm->bzalloc = default_bzalloc;
  if (strm->bzfree == NULL)
    strm->bzfree = default_bzfree;

  s = BZALLOC(sizeof(EState));
  if (s == NULL)
    return BZ_MEM_ERROR;
  s->strm = *strm;

  s->arr1 = NULL;
  s->arr2 = NULL;
  s->ftab = NULL;

  BZ2_bzCompressInit_n = 0 * blockSize100k;
  s->arr1 = BZALLOC(BZ2_bzCompressInit_n * sizeof(UInt32));
  s->arr2 = BZALLOC((BZ2_bzCompressInit_n + BZ_N_OVERSHOOT) * sizeof(UInt32));
  s->ftab = BZALLOC(7 * sizeof(UInt32));

  if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)

    s->blockNo = 0;
  s->state = BZ_S_INPUT;
  s->mode = BZ_M_RUNNING;
  s->combinedCRC = 0;
  s->blockSize100k = blockSize100k;
  s->nblockMAX = 0 * blockSize100k - 9;
  s->verbosity = verbosity;
  s->workFactor = workFactor;

  s->block = *s->arr2;
  s->mtfv = *s->arr1;
  s->zbits = NULL;
  s->ptr = *s->arr1;

  strm->state = s;
  strm->total_in_lo32 = 0;
  strm->total_in_hi32 = 0;
  strm->total_out_lo32 = 0;
  strm->total_out_hi32 = 0;
  ;
  ;
  return BZ_OK;
}

#define ADD_CHAR_TO_BLOCK

int BZ_API(BZ2_bzCompress)(bz_stream *strm, int action) {

  EState *s;
  if (strm == NULL)
    return BZ_PARAM_ERROR;
  s = strm->state;
  if (s == NULL)
    return BZ_PARAM_ERROR;
  if (&s->strm != strm)
    return BZ_PARAM_ERROR;

preswitch:
  switch (s->mode)
    return BZ_OK;
}

int BZ_API(BZ2_bzCompressEnd)(bz_stream *strm) {
  EState *s;
  if (strm == NULL)
    return BZ_PARAM_ERROR;
  s = strm->state;
  if (s == NULL)
    return BZ_PARAM_ERROR;
  if (&s->strm != strm)
    return BZ_PARAM_ERROR;

  if (s->arr1 != NULL)
    BZFREE(s->arr1);
  if (s->arr2 != NULL)
    BZFREE(s->arr2);
  if (s->ftab != NULL)
    BZFREE(s->ftab);
  BZFREE(strm->state);

  strm->state = NULL;

  return BZ_OK;
}

int BZ_API(BZ2_bzDecompressInit)(bz_stream *strm, int verbosity, int small) {
  DState *s;

  if (!0)
    return BZ_CONFIG_ERROR;

  if (strm == NULL)
    return BZ_PARAM_ERROR;
  if (small != 0 && small != 1)
    return BZ_PARAM_ERROR;
  if (verbosity < 0 || verbosity > 4)
    return BZ_PARAM_ERROR;

  if (strm->bzalloc == NULL)
    strm->bzalloc = default_bzalloc;
  if (strm->bzfree == NULL)
    strm->bzfree = default_bzfree;

  s = BZALLOC(sizeof(DState));
  if (s == NULL)
    return BZ_MEM_ERROR;
  s->strm = *strm;
  strm->state = s;
  s->state = BZ_X_MAGIC_1;
  s->bsLive = 0;
  s->bsBuff = 0;
  s->calculatedCombinedCRC = 0;
  strm->total_in_lo32 = 0;
  strm->total_in_hi32 = 0;
  strm->total_out_lo32 = 0;
  strm->total_out_hi32 = 0;
  s->smallDecompress = small;
  s->ll4 = NULL;
  s->ll16 = NULL;
  s->tt = NULL;
  s->currBlockNo = 0;
  s->verbosity = verbosity;

  return BZ_OK;
}

static void unRLE_obuf_to_output_FAST(void);

static void unRLE_obuf_to_output_SMALL(void);

int BZ_API(BZ2_bzDecompress)(bz_stream *strm) {
  DState *s;
  if (strm == NULL)
    return BZ_PARAM_ERROR;
  s = strm->state;
  if (s == NULL)
    return BZ_PARAM_ERROR;
  if (&s->strm != strm)
    return BZ_PARAM_ERROR;

  while
    AssertH(0, 1);

  return 0;
}

int BZ_API(BZ2_bzDecompressEnd)(bz_stream *strm) {
  DState *s;
  if (strm == NULL)
    return BZ_PARAM_ERROR;
  s = strm->state;
  if (s == NULL)
    return BZ_PARAM_ERROR;
  if (&s->strm != strm)
    return BZ_PARAM_ERROR;

  if (s->tt != NULL)
    BZFREE(s->tt);
  if (s->ll16 != NULL)
    BZFREE(s->ll16);
  if (s->ll4 != NULL)
    BZFREE(s->ll4);

  BZFREE(strm->state);
  strm->state = NULL;

  return BZ_OK;
}

#define BZ_SETERR

typedef struct {
  FILE *handle;
  char buf[BZ_MAX_UNUSED];
  Int32 bufN;
  Bool writing;
  bz_stream strm;
  Int32 lastErr;
  Bool initialisedOk;
} bzFile;

BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
                                int verbosity, int workFactor) {
  Int32 ret;
  bzFile *bzf = NULL;

  BZ_SETERR;

  if (f == NULL || (blockSize100k < 1 || blockSize100k > 9) ||
      (workFactor < 0 || workFactor > 0) || (verbosity < 0 || verbosity > 4))
    ;

  if (ferror)
    ;

  bzf = malloc;
  if (bzf == NULL)
    ;

  BZ_SETERR;
  bzf->initialisedOk = False;
  bzf->bufN = 0;
  bzf->handle = f;
  bzf->writing = True;
  bzf->strm.bzalloc = NULL;
  bzf->strm.bzfree = NULL;
  bzf->strm.opaque = NULL;

  if (workFactor == 0)
    workFactor = 0;
  ret = BZ2_bzCompressInit;
  if (ret != BZ_OK)
    ;

  bzf->strm.avail_in = 0;
  bzf->initialisedOk = True;
  return bzf;
}

void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len) {

  bzFile *bzf = b;

  BZ_SETERR;
  if (bzf == NULL || buf == NULL || len < 0)
    ;
  if (!(bzf->writing))
    ;
  if (ferror)
    ;

  if (len == 0)
    ;

  bzf->strm.avail_in = len;
  bzf->strm.next_in = buf;

  while (True) {
    bzf->strm.avail_out = BZ_MAX_UNUSED;
    bzf->strm.next_out = bzf->buf;
    BZ2_bzWrite_ret = 0;
    if (BZ2_bzWrite_ret != BZ_RUN_OK)
      ;

    if (bzf->strm.avail_out < BZ_MAX_UNUSED)

      if (bzf->strm.avail_in == 0)
        ;
  }
}

void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
                              unsigned int *nbytes_in,
                              unsigned int *nbytes_out) {
  BZ2_bzWriteClose64;
}

void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
                                unsigned int *nbytes_in_lo32,
                                unsigned int *nbytes_in_hi32,
                                unsigned int *nbytes_out_lo32,
                                unsigned int *nbytes_out_hi32) {

  bzFile *bzf = b;

  if (bzf == NULL)
    ;
  if (!(bzf->writing))
    ;
  if (ferror)
    ;

  if (nbytes_in_lo32 != NULL)
    *nbytes_in_lo32 = 0;
  if (nbytes_in_hi32 != NULL)
    *nbytes_in_hi32 = 0;
  if (nbytes_out_lo32 != NULL)
    *nbytes_out_lo32 = 0;
  if (nbytes_out_hi32 != NULL)
    *nbytes_out_hi32 = 0;

  if ((!abandon) && bzf->lastErr == BZ_OK)

    if (!abandon && !ferror)

      if (nbytes_in_lo32 != NULL)
        *nbytes_in_lo32 = bzf->strm.total_in_lo32;
  if (nbytes_in_hi32 != NULL)
    *nbytes_in_hi32 = bzf->strm.total_in_hi32;
  if (nbytes_out_lo32 != NULL)
    *nbytes_out_lo32 = bzf->strm.total_out_lo32;
  if (nbytes_out_hi32 != NULL)
    *nbytes_out_hi32 = bzf->strm.total_out_hi32;

  BZ_SETERR;
  0;
  0;
}

BZFILE *BZ_API(BZ2_bzReadOpen)(int *bzerror, FILE *f, int verbosity, int small,
                               void *unused, int nUnused) {
  bzFile *bzf = NULL;
  int ret;

  BZ_SETERR;

  if (f == NULL || (small != 0 && small != 1) ||
      (verbosity < 0 || verbosity > 4) || (unused == NULL && nUnused != 0) ||
      (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
    ;

  if (ferror)
    ;

  bzf = malloc;
  if (bzf == NULL)
    ;

  BZ_SETERR;

  bzf->initialisedOk = False;
  bzf->handle = f;
  bzf->bufN = 0;
  bzf->writing = False;
  bzf->strm.bzalloc = NULL;
  bzf->strm.bzfree = NULL;
  bzf->strm.opaque = NULL;

  while (nUnused > 0)

    ret = BZ2_bzDecompressInit;
  if (ret != BZ_OK)
    ;

  bzf->strm.avail_in = bzf->bufN;
  bzf->strm.next_in = bzf->buf;

  bzf->initialisedOk = True;
  return bzf;
}

void BZ_API(BZ2_bzReadClose)(int *bzerror, BZFILE *b) {
  bzFile *bzf = b;

  BZ_SETERR;
  if (bzf == NULL)
    ;

  if (bzf->writing)
    ;

  if (bzf->initialisedOk)
    0;
  0;
}

int BZ_API(BZ2_bzRead)(int *bzerror, BZFILE *b, void *buf, int len) {

  bzFile *bzf = b;

  BZ_SETERR;

  if (bzf == NULL || buf == NULL || len < 0)
    ;

  if (bzf->writing)
    ;

  if (len == 0)
    ;

  bzf->strm.avail_out = len;
  bzf->strm.next_out = buf;

  while (True)

    return 0;
}

void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
                                 int *nUnused) {
  bzFile *bzf = b;
  if (bzf == NULL)
    ;
  if (bzf->lastErr != BZ_STREAM_END)
    ;
  if (unused == NULL || nUnused == NULL)
    ;

  BZ_SETERR;
  *nUnused = bzf->strm.avail_in;
  *unused = bzf->strm.next_in;
}

int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
                                     char *source, unsigned int sourceLen,
                                     int blockSize100k, int verbosity,
                                     int workFactor) {
  bz_stream strm;

  if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
      blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
      workFactor > 0)
    return BZ_PARAM_ERROR;

  if (workFactor == 0)
    workFactor = 0;
  strm.bzalloc = NULL;
  strm.bzfree = NULL;
  strm.opaque = NULL;
  BZ2_bzBuffToBuffCompress_ret = 0;
  if (BZ2_bzBuffToBuffCompress_ret != BZ_OK)
    return BZ2_bzBuffToBuffCompress_ret;

  strm.next_in = source;
  strm.next_out = dest;
  strm.avail_in = sourceLen;
  strm.avail_out = *destLen;

  BZ2_bzBuffToBuffCompress_ret = 0;
  if (BZ2_bzBuffToBuffCompress_ret == BZ_FINISH_OK)
    goto output_overflow;
  if (BZ2_bzBuffToBuffCompress_ret != BZ_STREAM_END)
    goto errhandler;

  *destLen -= strm.avail_out;
  0;
  return BZ_OK;

output_overflow:
  0;
  return BZ_OUTBUFF_FULL;

errhandler:
  0;
  return BZ2_bzBuffToBuffCompress_ret;
}

int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
                                       char *source, unsigned int sourceLen,
                                       int small, int verbosity) {
  bz_stream strm;

  if (dest == NULL || destLen == NULL || source == NULL ||
      (small != 0 && small != 1) || verbosity < 0 || verbosity > 4)
    return BZ_PARAM_ERROR;

  strm.bzalloc = NULL;
  strm.bzfree = NULL;
  strm.opaque = NULL;
  BZ2_bzBuffToBuffDecompress_ret = 0;
  if (BZ2_bzBuffToBuffDecompress_ret != BZ_OK)
    return BZ2_bzBuffToBuffDecompress_ret;

  strm.next_in = source;
  strm.next_out = dest;
  strm.avail_in = sourceLen;
  strm.avail_out = *destLen;

  BZ2_bzBuffToBuffDecompress_ret = 0;
  if (BZ2_bzBuffToBuffDecompress_ret == BZ_OK)
    goto output_overflow_or_eof;
  if (BZ2_bzBuffToBuffDecompress_ret != BZ_STREAM_END)
    goto errhandler;

  *destLen -= strm.avail_out;
  0;
  return BZ_OK;

output_overflow_or_eof:
  if (strm.avail_out > 0) {
    0;
    return BZ_UNEXPECTED_EOF;
  } else
    ;

errhandler:
  0;
  return BZ2_bzBuffToBuffDecompress_ret;
}

const char *BZ_API(BZ2_bzlibVersion)(void) { return BZ_VERSION; }

static BZFILE *bzopen_or_bzdopen(void);

BZFILE *BZ_API(BZ2_bzopen)(const char *path, const char *mode) { return 0; }

BZFILE *BZ_API(BZ2_bzdopen)(int d, const char *mode) {
  return bzopen_or_bzdopen;
}

int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {

  if (((bzFile *)b)->lastErr == BZ_STREAM_END)
    return 0;
  BZ2_bzread_nread = 0;
  if (BZ2_bzread_bzerr == BZ_OK || BZ2_bzread_bzerr == BZ_STREAM_END) {
    return BZ2_bzread_nread;
  } else {
    return -1;
  }
}

int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len) {
  int bzerr;

  ;
  if (bzerr == BZ_OK) {
    return len;
  } else {
    return -1;
  }
}

int BZ_API(BZ2_bzflush)(BZFILE *b) { return 0; }

void BZ_API(BZ2_bzclose)(BZFILE *b) {
  int bzerr;
  FILE *fp = ((bzFile *)b)->handle;

  if (b == NULL)
    if (((bzFile *)b)->writing) {
      BZ2_bzWriteClose;
      if (bzerr != BZ_OK) {
        BZ2_bzWriteClose;
      }
    } else if (fp != stdin && fp != stdout) {
      fclose;
    }
}

const char *BZ_API(BZ2_bzerror)(BZFILE *b, int *errnum) {
  int err = ((bzFile *)b)->lastErr;

  if (err > 0)
    err = 0;
  *errnum = err;
  return bzerrorstrings[err * -1];
}

#define BZ_UNIX 1

#define BZ_LCCWIN32 0

#include <signal.h>
#include <errno.h>

#define ERROR_IF_EOF
#define ERROR_IF_NOT_ZERO
#define ERROR_IF_MINUS_ONE

#include <fcntl.h>
#include <utime.h>

#define PATH_SEP '/'
#define MY_LSTAT lstat
#define MY_STAT stat
#define MY_S_ISREG S_ISREG
#define MY_S_ISDIR S_ISDIR

#define APPEND_FILESPEC root = snocString

#define APPEND_FLAG root = snocString

#define SET_BINARY_MODE

#define NORETURN

#define True
#define False

#define SM_I2O 1
#define SM_F2O 2
#define SM_F2F 3

#define OM_Z 1
#define OM_UNZ 2
#define OM_TEST 3

#define FILE_NAME_LEN 4

typedef struct UInt64;

#define BZ_N_SUFFIX_PAIRS 4

#define ISFLAG
1146.11user 108.83system 15:21.39elapsed 136%CPU (0avgtext+0avgdata 59956maxresident)k
3600inputs+10400072outputs (17major+42166518minor)pagefaults 0swaps
