===< 17501 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
5053d5052
< #include <string.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
5054d5053
< #include <math.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
5054d5053
< #include <errno.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
5069d5068
< #   include <sys/stat.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
5105d5104
< #     include <io.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
111d110
< #ifdef _WIN32
118,121d116
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4985,4991d4984
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5049d5041
< #   ifdef __CYGWIN__
5057d5048
< #   endif
5049,5057d5048
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
361,429c361
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
507,596c507
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
614,617c614
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
721,723c721
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
1086,1089c1086
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
---
>          if (zPend & 1)  else {
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1273,1280c1273
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1639,1640d1638
< {
<    bzFile* bzf = (bzFile*)b;
1642,1652d1639
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1644c1644
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1978c1978
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_balanced :: angles-only >===
52c52
< #include <stdio.h>
---
> #include stdio.h
233c233
< #include <stdlib.h>
---
> #include stdlib.h
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) < 2) & 0x4)) & 0xF)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s-tPos = GET_LL(s->tPos);
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) < 2) & 0x4)) & 0xF)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) < 16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ( s->tPos, s-cftab );    \
(84.3 %, 32085 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) < 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) < 16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ( s->tPos, s-cftab );    \
(84.3 %, 32083 bytes)
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) < 16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ( s->tPos, s-cftab );    \
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) < 16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ( s-tPos, s->cftab );    \
(84.3 %, 32081 bytes)
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i) < 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s-cftab );    \
---
>       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ((a)  (b)) ? (a) : (b)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
(84.3 %, 32079 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ((a)  (b)) ? (a) : (b)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 < ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
(84.3 %, 32077 bytes)
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 < ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 < ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
(84.3 %, 32075 bytes)
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 < ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 << ((zz) & 31))
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 < ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
(84.3 %, 32073 bytes)
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 < ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 < ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
(84.4 %, 32071 bytes)
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 < ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 << ((zz) & 31)))
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
(84.4 %, 32069 bytes)
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
(84.4 %, 32067 bytes)
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 < ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) > 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz)  5]
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) ((a)  (b)) ? (a) : (b)
918c918
<    UChar* block  = s->block;
---
>    UChar* block  = s-block;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
917c917
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = s-ptr;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
901c901
<          s->nInUse++;
---
>          s-nInUse++;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = s-nInUse;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s-unseqToSeq[i] = s->nInUse;
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 < 21)
897c897
<    s->nInUse = 0;
---
>    s-nInUse = 0;
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 < 21)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
(84.4 %, 32065 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) ((a)  (b)) ? (a) : (b)
918c918
<    UChar* block  = s->block;
---
>    UChar* block  = s-block;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
917c917
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = s-ptr;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
901c901
<          s->nInUse++;
---
>          s-nInUse++;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = s-nInUse;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
900c900
<          s->unseqToSeq[i] = s->nInUse;
---
>          s-unseqToSeq[i] = s->nInUse;
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 < 21)
897c897
<    s->nInUse = 0;
---
>    s-nInUse = 0;
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 < 21)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
898,899c898,899
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i  256; i++)
>       if (s-inUse[i]) {
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i = EOB; i++) s-mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i  s-nInUse; i++) yy[i] = (UChar) i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i  s-nblock; i++) {
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr = i, "generateMTFValues(1)" );
934c934
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s-unseqToSeq[block[j]];
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j  0) j += s-nblock;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(2a)" );
(84.4 %, 32063 bytes)
898,899c898,899
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i  256; i++)
>       if (s-inUse[i]) {
924c924
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i = EOB; i++) s-mtfFreq[i] = 0;
928c928
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i  s-nInUse; i++) yy[i] = (UChar) i;
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i  s-nblock; i++) {
932c932
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr = i, "generateMTFValues(1)" );
934c934
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s-unseqToSeq[block[j]];
933c933
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j  0) j += s-nblock;
935c935
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(2a)" );
1081c1081
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1082c1082
<        workFactor < 0 || workFactor > 250)
---
>        workFactor  0 || workFactor  250)
1208c1208
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity  0 || verbosity  4) return BZ_PARAM_ERROR;
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        (blockSize100k  1 || blockSize100k  9) ||
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor  0 || workFactor  250) ||
(84.4 %, 32061 bytes)
1081c1081
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1082c1082
<        workFactor < 0 || workFactor > 250)
---
>        workFactor  0 || workFactor  250)
1208c1208
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity  0 || verbosity  4) return BZ_PARAM_ERROR;
1328c1328
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        (blockSize100k  1 || blockSize100k  9) ||
1329c1329
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor  0 || workFactor  250) ||
1330c1330
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity  0 || verbosity  4))
1373c1373
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1375c1375
<    if (!(bzf->writing))
---
>    if (!(bzf-writing))
1393c1393
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf->strm.avail_out  BZ_MAX_UNUSED) 
1395c1395
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf-strm.avail_in == 0)
1473c1473
<        (verbosity < 0 || verbosity > 4) ||
---
>        (verbosity  0 || verbosity  4) ||
1475c1475
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused  0 || nUnused  BZ_MAX_UNUSED)))
1539c1539
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1542c1542
<    if (bzf->writing)
---
>    if (bzf-writing)
1597c1597
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1598c1598
<        verbosity < 0 || verbosity > 4 ||
---
>        verbosity  0 || verbosity  4 ||
1599c1599
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor  0 || workFactor  250) 
1648c1648
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity  0 || verbosity  4) 
1847c1847
< #include <signal.h>
---
> #include signal.h
1848c1848
< #include <errno.h>
---
> #include errno.h
1859c1859
< #   include <fcntl.h>
---
> #   include fcntl.h
1860c1860
< #   include <utime.h>
---
> #   include utime.h
===< pass_clang :: remove-namespace >===
===< pass_clang :: param-to-local >===
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ( void );
1031c1031
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail ( void )
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
895a896
>    EState * s = 0;
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
909a910
>    EState * s = 0;
(84.4 %, 32047 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
895a896
>    EState * s = 0;
908c908
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
909a910
>    EState * s = 0;
(84.4 %, 32061 bytes)
909c909
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
910a911
>    EState * s = 0;
1044c1044
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items, Int32 size )
(84.3 %, 32075 bytes)
1045c1045
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items, Int32 size )
1045c1045
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc ( void* opaque,  Int32 size )
1045c1045
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc ( void* opaque, Int32 items )
(84.4 %, 32062 bytes)
1045c1045
< void* default_bzalloc (  Int32 items, Int32 size )
---
> void* default_bzalloc (   Int32 size )
1045c1045
< void* default_bzalloc (  Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items )
(84.4 %, 32050 bytes)
1045c1045
< void* default_bzalloc (   Int32 size )
---
> void* default_bzalloc (   void )
1049c1049
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
(84.4 %, 32044 bytes)
1049c1049
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
1049c1049
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree ( void* opaque )
(84.4 %, 32031 bytes)
1049c1049
< void default_bzfree (  void* addr )
---
> void default_bzfree (  void )
1055c1055
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
(84.4 %, 32025 bytes)
1055c1055
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
1061c1061
< void init_RL ( EState* s )
---
> void init_RL ( void )
1066c1066
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( void )
(84.4 %, 32020 bytes)
1061c1061
< void init_RL ( EState* s )
---
> void init_RL ( void )
1066c1066
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( void )
(84.4 %, 32015 bytes)
1066c1066
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( void )
1154c1154
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress ( void )
(84.4 %, 32010 bytes)
1154c1154
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress ( void )
1240c1240
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
(84.4 %, 31999 bytes)
1240c1240
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
1251c1251
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
1701c1701
<                ( const char *path,   
---
>                (    
1702c1702
<                  int fd,             
---
>                               
(84.4 %, 31994 bytes)
1251c1251
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
1701c1701
<                ( const char *path,   
---
>                (    
1702c1702
<                  int fd,             
---
>                               
1703c1703
<                  const char *mode,
---
>                  
1703,1704c1703
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
2150c2150
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main (  Char *argv[] )
(84.4 %, 31989 bytes)
1701c1701
<                ( const char *path,   
---
>                (    
1702c1702
<                  int fd,             
---
>                               
1703c1703
<                  const char *mode,
---
>                  
1703,1704c1703
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
2150c2150
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main (  Char *argv[] )
2150c2150
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main ( IntNative argc )
(84.4 %, 31975 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-simple-typedef >===
30,48c30
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
> 
61c43
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
68c50
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
73c55
<       bz_stream* strm 
---
>       struct bz_stream* strm 
77c59
<       bz_stream *strm, 
---
>       struct bz_stream *strm, 
83c65
<       bz_stream* strm 
---
>       struct bz_stream* strm 
87c69
<       bz_stream *strm 
---
>       struct bz_stream *strm 
357c339
<       bz_stream* strm;
---
>       struct bz_stream* strm;
503c485
<       bz_stream* strm;
---
>       struct bz_stream* strm;
1072c1054
<                     ( bz_stream* strm, 
---
>                     ( struct bz_stream* strm, 
1159c1141
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) ( struct bz_stream *strm, int action )
1175c1157
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  ( struct bz_stream *strm )
1200c1182
<                      ( bz_stream* strm, 
---
>                      ( struct bz_stream* strm, 
1256c1238
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) ( struct bz_stream *strm )
1273c1255
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  ( struct bz_stream *strm )
1305c1287
<       bz_stream strm;
---
>       struct bz_stream strm;
1594c1576
<    bz_stream strm;
---
>    struct bz_stream strm;
1644c1626
<    bz_stream strm;
---
>    struct bz_stream strm;
240c240
< typedef char            Char;
---
> 
1302c1302
<       Char      buf[BZ_MAX_UNUSED];
---
>       char      buf[BZ_MAX_UNUSED];
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1066c1066
< Bool isempty_RL ( void )
---
> unsigned char isempty_RL ( void )
1154c1154
< Bool handle_compress ( void )
---
> unsigned char handle_compress ( void )
1227c1227
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = (unsigned char)small;
1304c1304
<       Bool      writing;
---
>       unsigned char      writing;
1307c1307
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
912c912
<    UChar   yy[256];
---
>    unsigned char   yy[256];
920c920
<    UChar* block  = s->block;
---
>    unsigned char* block  = s->block;
930c930
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
933c933
<       UChar ll_i;
---
>       unsigned char ll_i;
945,947c945,947
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1115c1115
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (unsigned char*)s->arr2;
(84.4 %, 31946 bytes)
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1066c1066
< Bool isempty_RL ( void )
---
> unsigned char isempty_RL ( void )
1154c1154
< Bool handle_compress ( void )
---
> unsigned char handle_compress ( void )
1227c1227
<    s->smallDecompress       = (Bool)small;
---
>    s->smallDecompress       = (unsigned char)small;
1304c1304
<       Bool      writing;
---
>       unsigned char      writing;
1307c1307
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
912c912
<    UChar   yy[256];
---
>    unsigned char   yy[256];
920c920
<    UChar* block  = s->block;
---
>    unsigned char* block  = s->block;
930c930
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
933c933
<       UChar ll_i;
---
>       unsigned char ll_i;
945,947c945,947
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1115c1115
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (unsigned char*)s->arr2;
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
628c628
< extern Int32 
---
> extern int 
897c897
<    Int32 i;
---
>    int i;
913,916c913,916
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1014c1014
< Int32 BZ2_decompress ( DState* s )
---
> int BZ2_decompress ( DState* s )
1077c1077
<    Int32   n;
---
>    int   n;
1303c1303
<       Int32     bufN;
---
>       int     bufN;
1306c1306
<       Int32     lastErr;
---
>       int     lastErr;
1371c1371
<    Int32   ret;
---
>    int   ret;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
919c919
<    UInt32* ptr   = s->ptr;
---
>    unsigned int* ptr   = s->ptr;
1118c1118
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (unsigned int*)s->arr1;
245c245
< typedef short           Int16;
---
> 
(84.3 %, 32084 bytes)
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
628c628
< extern Int32 
---
> extern int 
897c897
<    Int32 i;
---
>    int i;
913,916c913,916
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1014c1014
< Int32 BZ2_decompress ( DState* s )
---
> int BZ2_decompress ( DState* s )
1077c1077
<    Int32   n;
---
>    int   n;
1303c1303
<       Int32     bufN;
---
>       int     bufN;
1306c1306
<       Int32     lastErr;
---
>       int     lastErr;
1371c1371
<    Int32   ret;
---
>    int   ret;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
919c919
<    UInt32* ptr   = s->ptr;
---
>    unsigned int* ptr   = s->ptr;
1118c1118
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (unsigned int*)s->arr1;
245c245
< typedef short           Int16;
---
> 
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
921c921
<    UInt16* mtfv  = s->mtfv;
---
>    unsigned short* mtfv  = s->mtfv;
1116c1116
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s->arr1;
(84.4 %, 32054 bytes)
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
921c921
<    UInt16* mtfv  = s->mtfv;
---
>    unsigned short* mtfv  = s->mtfv;
1116c1116
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (unsigned short*)s->arr1;
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       UInt16*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
896c826
<    EState * s = 0;
---
>    struct EState * s = 0;
911c841
<    EState * s = 0;
---
>    struct EState * s = 0;
1078c1008
<    EState* s;
---
>    struct EState* s;
1162c1092
<    EState* s;
---
>    struct EState* s;
1177c1107
<    EState* s;
---
>    struct EState* s;
500,588d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
590,591d500
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1014c923
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress ( struct DState* s )
1204c1113
<    DState* s;
---
>    struct DState* s;
1258c1167
<    DState* s;
---
>    struct DState* s;
1275c1184
<    DState* s;
---
>    struct DState* s;
1299,1309c1299
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1372c1362
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1426c1416
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1514c1504
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1537c1527
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1566c1556
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1731c1721
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1806c1796
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1891c1891
< typedef int IntNative;
---
> 
2150c2150
< IntNative main ( IntNative argc )
---
> int main ( int argc )
(84.4 %, 32055 bytes)
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
896c826
<    EState * s = 0;
---
>    struct EState * s = 0;
911c841
<    EState * s = 0;
---
>    struct EState * s = 0;
1078c1008
<    EState* s;
---
>    struct EState* s;
1162c1092
<    EState* s;
---
>    struct EState* s;
1177c1107
<    EState* s;
---
>    struct EState* s;
500,588d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
590,591d500
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1014c923
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress ( struct DState* s )
1204c1113
<    DState* s;
---
>    struct DState* s;
1258c1167
<    DState* s;
---
>    struct DState* s;
1275c1184
<    DState* s;
---
>    struct DState* s;
1299,1309c1299
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1372c1362
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1426c1416
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1514c1504
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1537c1527
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1566c1556
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1731c1721
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1806c1796
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1891c1891
< typedef int IntNative;
---
> 
2150c2150
< IntNative main ( IntNative argc )
---
> int main ( int argc )
2126,2128c2126
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.4 %, 32021 bytes)
2126,2128c2126
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.4 %, 31989 bytes)
===< pass_clang :: remove-unused-field >===
365c365
<       UInt32   avail_in_expect;
---
>       
371c371
<       Int32    origPtr;
---
>       
383c383
<       UInt32   state_in_ch;
---
>       
(84.4 %, 31964 bytes)
371c371
<       Int32    origPtr;
---
>       
383c383
<       UInt32   state_in_ch;
---
>       
(84.4 %, 31947 bytes)
383c383
<       UInt32   state_in_ch;
---
>       
384c384
<       Int32    state_in_len;
---
>       
390c390
<       Int32    numZ;
---
>       
(84.4 %, 31926 bytes)
384c384
<       Int32    state_in_len;
---
>       
390c390
<       Int32    numZ;
---
>       
(84.4 %, 31904 bytes)
390c390
<       Int32    numZ;
---
>       
391c391
<       Int32    state_out_pos;
---
>       
399c399
<       UInt32   bsBuff;
---
>       
(84.4 %, 31890 bytes)
391c391
<       Int32    state_out_pos;
---
>       
399c399
<       UInt32   bsBuff;
---
>       
(84.5 %, 31867 bytes)
399c399
<       UInt32   bsBuff;
---
>       
400c400
<       Int32    bsLive;
---
>       
(84.5 %, 31851 bytes)
400c400
<       Int32    bsLive;
---
>       
403c403
<       UInt32   blockCRC;
---
>       
(84.5 %, 31835 bytes)
403c403
<       UInt32   blockCRC;
---
>       
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       
(84.5 %, 31817 bytes)
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>       
(84.5 %, 31770 bytes)
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>       
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(84.5 %, 31723 bytes)
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(84.5 %, 31665 bytes)
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(84.6 %, 31615 bytes)
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       
(84.6 %, 31565 bytes)
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       
509c509
<       unsigned char    state_out_ch;
---
>       
(84.6 %, 31525 bytes)
509c509
<       unsigned char    state_out_ch;
---
>       
510c510
<       Int32    state_out_len;
---
>       
(84.6 %, 31495 bytes)
510c510
<       Int32    state_out_len;
---
>       
511c511
<       Bool     blockRandomised;
---
>       
(84.6 %, 31472 bytes)
511c511
<       Bool     blockRandomised;
---
>       
519c519
<       Int32    blockSize100k;
---
>       
(84.7 %, 31447 bytes)
519c519
<       Int32    blockSize100k;
---
>       
525c525
<       Int32    origPtr;
---
>       
(84.7 %, 31424 bytes)
525c525
<       Int32    origPtr;
---
>       
526c526
<       UInt32   tPos;
---
>       
(84.7 %, 31407 bytes)
526c526
<       UInt32   tPos;
---
>       
527c527
<       Int32    k0;
---
>       
528c528
<       Int32    unzftab[256];
---
>       
(84.7 %, 31393 bytes)
527c527
<       Int32    k0;
---
>       
528c528
<       Int32    unzftab[256];
---
>       
(84.7 %, 31381 bytes)
528c528
<       Int32    unzftab[256];
---
>       
529c529
<       Int32    nblock_used;
---
>       
(84.7 %, 31359 bytes)
529c529
<       Int32    nblock_used;
---
>       
530c530
<       Int32    cftab[257];
---
>       
(84.7 %, 31338 bytes)
530c530
<       Int32    cftab[257];
---
>       
531c531
<       Int32    cftabCopy[257];
---
>       
(84.7 %, 31318 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       
541c541
<       UInt32   storedBlockCRC;
---
>       
(84.7 %, 31294 bytes)
541c541
<       UInt32   storedBlockCRC;
---
>       
542c542
<       UInt32   storedCombinedCRC;
---
>       
(84.7 %, 31270 bytes)
542c542
<       UInt32   storedCombinedCRC;
---
>       
543c543
<       UInt32   calculatedBlockCRC;
---
>       
(84.8 %, 31243 bytes)
543c543
<       UInt32   calculatedBlockCRC;
---
>       
547c547
<       Int32    nInUse;
---
>       
(84.8 %, 31215 bytes)
547c547
<       Int32    nInUse;
---
>       
548c548
<       Bool     inUse[256];
---
>       
(84.8 %, 31199 bytes)
548c548
<       Bool     inUse[256];
---
>       
549c549
<       Bool     inUse16[16];
---
>       
(84.8 %, 31179 bytes)
549c549
<       Bool     inUse16[16];
---
>       
550c550
<       unsigned char    seqToUnseq[256];
---
>       
(84.8 %, 31158 bytes)
550c550
<       unsigned char    seqToUnseq[256];
---
>       
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>       
(84.8 %, 31125 bytes)
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>       
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       
(84.8 %, 31089 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       
(84.8 %, 31055 bytes)
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       
556c556
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>       
(84.9 %, 31008 bytes)
556c556
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>       
557c557
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(84.9 %, 30961 bytes)
557c557
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(84.9 %, 30906 bytes)
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(84.9 %, 30857 bytes)
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       
(85.0 %, 30808 bytes)
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       
(85.0 %, 30759 bytes)
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       
565c565
<       Int32    save_i;
---
>       
566c566
<       Int32    save_j;
---
>       
(85.0 %, 30729 bytes)
565c565
<       Int32    save_i;
---
>       
566c566
<       Int32    save_j;
---
>       
(85.0 %, 30713 bytes)
566c566
<       Int32    save_j;
---
>       
567c567
<       Int32    save_t;
---
>       
(85.0 %, 30697 bytes)
567c567
<       Int32    save_t;
---
>       
568c568
<       Int32    save_alphaSize;
---
>       
(85.0 %, 30681 bytes)
568c568
<       Int32    save_alphaSize;
---
>       
569c569
<       Int32    save_nGroups;
---
>       
(85.0 %, 30657 bytes)
569c569
<       Int32    save_nGroups;
---
>       
570c570
<       Int32    save_nSelectors;
---
>       
(85.1 %, 30635 bytes)
570c570
<       Int32    save_nSelectors;
---
>       
571c571
<       Int32    save_EOB;
---
>       
(85.1 %, 30610 bytes)
571c571
<       Int32    save_EOB;
---
>       
572c572
<       Int32    save_groupNo;
---
>       
(85.1 %, 30592 bytes)
572c572
<       Int32    save_groupNo;
---
>       
573c573
<       Int32    save_groupPos;
---
>       
(85.1 %, 30570 bytes)
573c573
<       Int32    save_groupPos;
---
>       
574c574
<       Int32    save_nextSym;
---
>       
(85.1 %, 30547 bytes)
574c574
<       Int32    save_nextSym;
---
>       
575c575
<       Int32    save_nblockMAX;
---
>       
(85.1 %, 30525 bytes)
575c575
<       Int32    save_nblockMAX;
---
>       
576c576
<       Int32    save_nblock;
---
>       
(85.1 %, 30501 bytes)
576c576
<       Int32    save_nblock;
---
>       
577c577
<       Int32    save_es;
---
>       
(85.1 %, 30480 bytes)
577c577
<       Int32    save_es;
---
>       
578c578
<       Int32    save_N;
---
>       
(85.1 %, 30463 bytes)
578c578
<       Int32    save_N;
---
>       
579c579
<       Int32    save_curr;
---
>       
(85.1 %, 30447 bytes)
579c579
<       Int32    save_curr;
---
>       
580c580
<       Int32    save_zt;
---
>       
(85.2 %, 30428 bytes)
580c580
<       Int32    save_zt;
---
>       
581c581
<       Int32    save_zn; 
---
>        
(85.2 %, 30411 bytes)
581c581
<       Int32    save_zn; 
---
>        
582c582
<       Int32    save_zvec;
---
>       
(85.2 %, 30394 bytes)
582c582
<       Int32    save_zvec;
---
>       
583c583
<       Int32    save_zj;
---
>       
(85.2 %, 30375 bytes)
583c583
<       Int32    save_zj;
---
>       
584c584
<       Int32    save_gSel;
---
>       
(85.2 %, 30358 bytes)
584c584
<       Int32    save_gSel;
---
>       
585c585
<       Int32    save_gMinlen;
---
>       
(85.2 %, 30339 bytes)
585c585
<       Int32    save_gMinlen;
---
>       
586c586
<       Int32*   save_gLimit;
---
>       
(85.2 %, 30317 bytes)
586c586
<       Int32*   save_gLimit;
---
>       
587c587
<       Int32*   save_gBase;
---
>       
(85.2 %, 30296 bytes)
587c587
<       Int32*   save_gBase;
---
>       
588c588
<       Int32*   save_gPerm;
---
>       
(85.2 %, 30276 bytes)
588c588
<       Int32*   save_gPerm;
---
>       
1301c1301
<       FILE*     handle;
---
>       
(85.2 %, 30256 bytes)
1301c1301
<       FILE*     handle;
---
>       
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: replace-array-index-var >===
===< pass_clang :: replace-dependent-name >===
===< pass_unifdef :: 0 >===
1860d1859
< #if BZ_UNIX
1880,1881d1878
< #endif 
< 
2062,2076d2058
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
1860,1885d1859
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
2062,2076d2035
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
(85.3 %, 30203 bytes)
===< pass_comments :: 0 >===
===< pass_special :: c >===
===< pass_ints :: a >===
94c94
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
194c194
<       int        fd,
---
>       int        d,
(85.3 %, 30202 bytes)
94c94
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
194c194
<       int        fd,
---
>       int        d,
(85.3 %, 30201 bytes)
94c94
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(85.3 %, 30200 bytes)
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(85.3 %, 30199 bytes)
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(85.3 %, 30198 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(85.3 %, 30197 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
(85.3 %, 30196 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(85.3 %, 30195 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(85.3 %, 30194 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(85.3 %, 30193 bytes)
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
(85.3 %, 30192 bytes)
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
(85.3 %, 30191 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(85.3 %, 30190 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(85.3 %, 30189 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(85.3 %, 30188 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(85.3 %, 30187 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(85.3 %, 30186 bytes)
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(85.3 %, 30185 bytes)
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
(85.3 %, 30184 bytes)
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
(85.3 %, 30183 bytes)
395c395
<       Bool     inUse[56];
---
>       Bool     inUse[6];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
(85.3 %, 30182 bytes)
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(85.3 %, 30181 bytes)
396c396
<       unsigned char    unseqToSeq[56];
---
>       unsigned char    unseqToSeq[6];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(85.3 %, 30180 bytes)
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(85.3 %, 30179 bytes)
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
(85.3 %, 30178 bytes)
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(85.3 %, 30177 bytes)
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(85.3 %, 30176 bytes)
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(85.3 %, 30175 bytes)
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
(85.3 %, 30174 bytes)
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
(85.3 %, 30173 bytes)
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
(85.3 %, 30172 bytes)
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(85.3 %, 30171 bytes)
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
(85.3 %, 30170 bytes)
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
(85.3 %, 30169 bytes)
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
(85.3 %, 30168 bytes)
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(85.3 %, 30167 bytes)
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
(85.3 %, 30166 bytes)
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(85.3 %, 30165 bytes)
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
(85.3 %, 30164 bytes)
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
(85.3 %, 30163 bytes)
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(85.3 %, 30162 bytes)
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
(85.3 %, 30161 bytes)
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
(85.3 %, 30160 bytes)
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(85.3 %, 30159 bytes)
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(85.3 %, 30158 bytes)
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
(85.3 %, 30157 bytes)
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
(85.3 %, 30156 bytes)
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
(85.3 %, 30155 bytes)
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
(85.3 %, 30154 bytes)
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(85.3 %, 30153 bytes)
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(85.3 %, 30152 bytes)
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
(85.3 %, 30151 bytes)
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
(85.3 %, 30150 bytes)
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
(85.3 %, 30149 bytes)
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
(85.3 %, 30148 bytes)
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(85.3 %, 30147 bytes)
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
(85.3 %, 30146 bytes)
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
(85.3 %, 30145 bytes)
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
(85.3 %, 30144 bytes)
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(85.3 %, 30143 bytes)
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(85.3 %, 30142 bytes)
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(85.3 %, 30141 bytes)
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
(85.3 %, 30140 bytes)
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
(85.3 %, 30139 bytes)
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(85.3 %, 30138 bytes)
493c493
< #define MTFA_SIZE 096
---
> #define MTFA_SIZE 06
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(85.3 %, 30137 bytes)
493c493
< #define MTFA_SIZE 06
---
> #define MTFA_SIZE 6
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(85.3 %, 30136 bytes)
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(85.3 %, 30135 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(85.3 %, 30134 bytes)
597c597
< #define BZ_GET_FAST(ccc)                     \
---
> #define BZ_GET_FAST(cc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(85.3 %, 30133 bytes)
597c597
< #define BZ_GET_FAST(cc)                     \
---
> #define BZ_GET_FAST(c)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(85.3 %, 30132 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(85.3 %, 30131 bytes)
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xff);           \
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xf);           \
(85.3 %, 30130 bytes)
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xff);           \
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xf);           \
(85.3 %, 30129 bytes)
599c599
<     c = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xf);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
(85.3 %, 30128 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(85.3 %, 30127 bytes)
602c602
< #define BZ_GET_FAST_C(ccc)                   \
---
> #define BZ_GET_FAST_C(cc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(85.3 %, 30126 bytes)
602c602
< #define BZ_GET_FAST_C(cc)                   \
---
> #define BZ_GET_FAST_C(c)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
(85.3 %, 30125 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
(85.3 %, 30124 bytes)
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xff);            \
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
(85.3 %, 30123 bytes)
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xff);            \
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xf);            \
(85.3 %, 30122 bytes)
604c604
<     c = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
(85.3 %, 30121 bytes)
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
>       ccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
(85.3 %, 30120 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
>       ccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
(85.3 %, 30119 bytes)
619c619
< #define BZ_GET_SMALL(ccc)                            \
---
> #define BZ_GET_SMALL(cc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
>       ccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(85.3 %, 30118 bytes)
619c619
< #define BZ_GET_SMALL(cc)                            \
---
> #define BZ_GET_SMALL(c)                            \
620c620
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
>       ccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
(85.3 %, 30117 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
>       ccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(85.3 %, 30116 bytes)
620c620
<       ccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
>       cc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(85.3 %, 30115 bytes)
620c620
<       cc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
>       c = BZ2_indexIntoF ( s-tPos, s-cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(85.3 %, 30114 bytes)
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(85.3 %, 30113 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
689c689
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 1))
(85.3 %, 30112 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   00
---
> #define FALLBACK_QSORT_STACK_SIZE   0
689c689
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 1))
(85.3 %, 30111 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 1))
(85.3 %, 30110 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 1))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 1)))
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
(85.3 %, 30109 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 1)))
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
(85.3 %, 30108 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(85.3 %, 30107 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0xf)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(85.3 %, 30106 bytes)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(85.3 %, 30105 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
767c767
< #define SETMASK (1 < 21)
---
> #define SETMASK (1 < 1)
(85.3 %, 30104 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 00
---
> #define MAIN_QSORT_STACK_SIZE 0
767c767
< #define SETMASK (1 < 21)
---
> #define SETMASK (1 < 1)
(85.3 %, 30103 bytes)
767c767
< #define SETMASK (1 < 21)
---
> #define SETMASK (1 < 1)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
(85.3 %, 30102 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(85.3 %, 30101 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(85.3 %, 30100 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(85.3 %, 30099 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(85.3 %, 30098 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(85.3 %, 30097 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(85.3 %, 30096 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x0)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(85.3 %, 30095 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
912c912
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(85.3 %, 30094 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(85.3 %, 30093 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(85.3 %, 30092 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
912c912
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(85.3 %, 30091 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
912c912
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(85.3 %, 30090 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xff)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(85.3 %, 30089 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xf)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(85.3 %, 30088 bytes)
899c899
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
912c912
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(85.3 %, 30087 bytes)
899c899
<    for (i = 0; i < 56; i++)
---
>    for (i = 0; i < 6; i++)
912c912
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(85.3 %, 30086 bytes)
912c912
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
937c937
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
971c971
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(85.3 %, 30085 bytes)
912c912
<    unsigned char   yy[56];
---
>    unsigned char   yy[6];
937c937
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
(85.3 %, 30084 bytes)
937c937
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
971c971
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1084c1084
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
(85.3 %, 30083 bytes)
971c971
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1084c1084
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
(85.3 %, 30082 bytes)
1084c1084
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1087c1087
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(85.3 %, 30081 bytes)
1084c1084
<        workFactor < 0 || workFactor > 50)
---
>        workFactor < 0 || workFactor > 0)
1087c1087
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(85.3 %, 30080 bytes)
1087c1087
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1099c1099
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
1102c1102
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(85.3 %, 30079 bytes)
1099c1099
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
1102c1102
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(85.3 %, 30078 bytes)
1099c1099
<    n       = 00000 * blockSize100k;
---
>    n       = 0000 * blockSize100k;
1102c1102
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(85.3 %, 30077 bytes)
1099c1099
<    n       = 0000 * blockSize100k;
---
>    n       = 000 * blockSize100k;
1102c1102
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(85.3 %, 30076 bytes)
1099c1099
<    n       = 000 * blockSize100k;
---
>    n       = 00 * blockSize100k;
1102c1102
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(85.3 %, 30075 bytes)
1099c1099
<    n       = 00 * blockSize100k;
---
>    n       = 0 * blockSize100k;
1102c1102
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
(85.3 %, 30074 bytes)
1102c1102
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(85.3 %, 30073 bytes)
1102c1102
<    s->ftab = BZALLOC( 5537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 537              * sizeof(UInt32) );
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 100000 * blockSize100k - 9;
(85.3 %, 30072 bytes)
1102c1102
<    s->ftab = BZALLOC( 537              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 37              * sizeof(UInt32) );
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(85.3 %, 30071 bytes)
1102c1102
<    s->ftab = BZALLOC( 37              * sizeof(UInt32) );
---
>    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
(85.3 %, 30070 bytes)
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 19;
1111c1111
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->nblockMAX         = 100000 * blockSize100k - 9;
1266c1266
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(85.3 %, 30069 bytes)
1111c1111
<    s->nblockMAX         = 00000 * blockSize100k - 19;
---
>    s->nblockMAX         = 0000 * blockSize100k - 19;
1111c1111
<    s->nblockMAX         = 00000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00000 * blockSize100k - 9;
(85.3 %, 30068 bytes)
1111c1111
<    s->nblockMAX         = 0000 * blockSize100k - 19;
---
>    s->nblockMAX         = 000 * blockSize100k - 19;
1111c1111
<    s->nblockMAX         = 0000 * blockSize100k - 19;
---
>    s->nblockMAX         = 0000 * blockSize100k - 9;
1266c1266
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(85.3 %, 30067 bytes)
1111c1111
<    s->nblockMAX         = 000 * blockSize100k - 19;
---
>    s->nblockMAX         = 00 * blockSize100k - 19;
1111c1111
<    s->nblockMAX         = 000 * blockSize100k - 19;
---
>    s->nblockMAX         = 000 * blockSize100k - 9;
(85.3 %, 30066 bytes)
1111c1111
<    s->nblockMAX         = 00 * blockSize100k - 19;
---
>    s->nblockMAX         = 0 * blockSize100k - 19;
1111c1111
<    s->nblockMAX         = 00 * blockSize100k - 19;
---
>    s->nblockMAX         = 00 * blockSize100k - 9;
(85.3 %, 30065 bytes)
1111c1111
<    s->nblockMAX         = 0 * blockSize100k - 19;
---
>    s->nblockMAX         = 0 * blockSize100k - 9;
1266c1266
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(85.3 %, 30064 bytes)
1266c1266
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1296c1296
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(85.3 %, 30063 bytes)
1266c1266
<    AssertH ( 0, 001 );
---
>    AssertH ( 0, 01 );
1296c1296
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1331c1331
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(85.3 %, 30062 bytes)
1266c1266
<    AssertH ( 0, 01 );
---
>    AssertH ( 0, 1 );
1296c1296
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(85.3 %, 30061 bytes)
1296c1296
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1331c1331
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(85.3 %, 30060 bytes)
1296c1296
< #define BZ_SETERR(ee)                    \
---
> #define BZ_SETERR(e)                    \
1331c1331
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(85.3 %, 30059 bytes)
1331c1331
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1351c1351
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(85.3 %, 30058 bytes)
1331c1331
<        (workFactor < 0 || workFactor > 50) ||
---
>        (workFactor < 0 || workFactor > 0) ||
1351c1351
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(85.3 %, 30057 bytes)
1351c1351
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1601c1601
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
(85.3 %, 30056 bytes)
1601c1601
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
1604c1604
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(85.3 %, 30055 bytes)
1601c1601
<        workFactor < 0 || workFactor > 50) 
---
>        workFactor < 0 || workFactor > 0) 
1604c1604
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(85.3 %, 30054 bytes)
1604c1604
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1702c1702
<                  int fd,             
---
>                  int d,             
(85.3 %, 30053 bytes)
1702c1702
<                  int fd,             
---
>                  int d,             
1720c1720
<                ( int fd,
---
>                ( int d,
1723c1723
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1875c1875
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
(85.3 %, 30052 bytes)
1720c1720
<                ( int fd,
---
>                ( int d,
1723c1723
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1875c1875
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
1914c1914
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(85.3 %, 30051 bytes)
1914c1914
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(85.3 %, 30050 bytes)
1914c1914
< #define FILE_NAME_LEN 034
---
> #define FILE_NAME_LEN 04
(85.3 %, 30049 bytes)
1914c1914
< #define FILE_NAME_LEN 04
---
> #define FILE_NAME_LEN 4
(85.3 %, 30048 bytes)
===< pass_clex :: rm-toks-15 >===
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
(85.4 %, 29936 bytes)
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> ##define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> ##define BZ_SEQUENCE_ERROR    (-1)
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define define BZ_SEQUENCE_ERROR    (-1)
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_RUN_OK            BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define 1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_FLUSH_OK          )
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_FINISH_OK         (-2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> -2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define )
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_STREAM_END        #define BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> define BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    -3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    (3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    (-)
14,17c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_SEQUENCE_ERROR    (-1#define BZ_DATA_ERROR        (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> define BZ_DATA_ERROR        (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #BZ_DATA_ERROR        (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       -4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       (4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       (-)
15,18c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_PARAM_ERROR       (-2#define BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         -5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         (5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         (-)
16,19c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_MEM_ERROR         (-3#define BZ_IO_ERROR          (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> define BZ_IO_ERROR          (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #BZ_IO_ERROR          (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR        -6)
(85.4 %, 29867 bytes)
16,18c16
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         ()
16,19c16
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_MEM_ERROR         (5#define BZ_OUTBUFF_FULL      (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> define BZ_OUTBUFF_FULL      (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #BZ_OUTBUFF_FULL      (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          -8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          (8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          (-)
17,20c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_IO_ERROR          (-6#define BZ_CONFIG_ERROR      (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> define BZ_CONFIG_ERROR      (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #BZ_CONFIG_ERROR      (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    -9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (-)
18,22c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define BZ_UNEXPECTED_EOF    (-7typedef 
19,23c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> struct {
19,23c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #{
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define char *next_in;
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      *next_in;
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (next_in;
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-;
19,25c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_OUTBUFF_FULL      (-8unsigned int avail_in;
20,25c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> int avail_in;
20,25c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #avail_in;
20,25c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define ;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      unsigned int total_in_lo32;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (int total_in_lo32;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-total_in_lo32;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9;
22,27c22
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
> unsigned int total_in_hi32;
23,27c23
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    int total_in_hi32;
23,27c23
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct total_in_hi32;
24,27c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       ;
24,29c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char char *next_out;
24,29c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char **next_out;
24,29c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char *next_innext_out;
25,29c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       ;
25,30c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned unsigned int avail_out;
25,30c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int int avail_out;
25,30c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int avail_inavail_out;
26,30c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       ;
26,31c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned unsigned int total_out_lo32;
26,31c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int int total_out_lo32;
26,31c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_lo32total_out_lo32;
27,31c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       ;
27,32c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned unsigned int total_out_hi32;
27,32c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int int total_out_hi32;
27,32c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int total_in_hi32total_out_hi32;
29,32c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       ;
29,34c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char void *state;
29,34c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char **state;
29,34c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *next_outstate;
30,34c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       ;
30,36c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned void *(*bzalloc)(void *,int,int);
30,36c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *(*bzalloc)(void *,int,int);
30,36c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int avail_out(*bzalloc)(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *bzalloc)(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned bzalloc)(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int )(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32(void *,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned *,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int ,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32int,int);
34,36c34
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int);
34,36c34
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int);
34,36c34
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *);
35,36d34
< 
<       void *(*bzalloc)(void *,int,int);
36d35
<       void *(*bzalloc)(void *,int,int);
36d35
<       void *(*bzalloc)(void *,int,int);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void **bzfree)(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(bzfree)(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*)(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(*,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void ,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,*);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,;
36,38c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int,intvoid *opaque;
36,38c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int,int)*opaque;
37,38c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       opaque;
37,38c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void ;
37,39c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (} 
37,40c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bz_stream;
37,40c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree;
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)#include <stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(include <stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void <stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *>
37,46c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void (*bzfree)(void *,void *)#   define BZ_API(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       define BZ_API(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void BZ_API(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaquefunc) func
39,46c39
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    ) func
40,46c40
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func
40,47c40
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
>    bz_stream#   define BZ_EXTERN extern
44,47c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
44,47c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #BZ_EXTERN extern
44,47c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include extern
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdioint BZ_API(BZ2_bzCompressInit) ( 
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.BZ_API(BZ2_bzCompressInit) ( 
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.h(BZ2_bzCompressInit) ( 
46,52c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ2_bzCompressInit) ( 
46,52c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   ) ( 
46,52c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define ( 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_APIbz_stream* strm, 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(* strm, 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(funcstrm, 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(func) , 
47,54c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> int        blockSize100k, 
47,54c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   blockSize100k, 
47,54c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define , 
47,55c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> #   define BZ_EXTERN int        verbosity, 
52,55c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> verbosity, 
52,55c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN , 
52,56c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int int        workFactor 
52,56c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int BZ_APIworkFactor 
52,57c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API();
52,57c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit;
52,59c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int BZ_API(BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_streamBZ_API(BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* (BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* strmBZ2_bzCompress) ( 
54,59c54
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       ) ( 
54,59c54
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        ( 
54,60c54
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       int        blockSize100kbz_stream* strm, 
55,60c55
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       * strm, 
55,60c55
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       int        strm, 
56,60d55
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
(85.5 %, 29726 bytes)
54,58d53
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
54,58d53
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
54,58d53
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
(85.5 %, 29637 bytes)
52,58c52
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(int BZ_API(BZ2_bzDecompressInit) ( 
52,58c52
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> (BZ2_bzDecompressInit) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ2_bzDecompressInit) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int ) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API( 
(85.6 %, 29547 bytes)
52,56c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> BZ_EXTERN int BZ_API();
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_APIBZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(int BZ_API(BZ2_bzDecompress) ( 
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInitBZ_API(BZ2_bzDecompress) ( 
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) (BZ2_bzDecompress) ( 
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       BZ2_bzDecompress) ( 
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream ) ( 
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *( 
53,59c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       bz_stream *strmbz_stream* strm 
54,59c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       * strm 
54,59c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       int       strm 
54,60c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>       int       verbosity);
55,60c55
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>       ;
55,62c55
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       int       BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
(85.6 %, 29437 bytes)
52,58c52
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> (BZ2_bzDecompressEnd) ( 
(85.7 %, 29348 bytes)
52,62c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()void BZFILE;
52,62c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_APIBZFILE;
52,62c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(;
52,64c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEndBZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
52,64c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) BZFILE* BZ_API(BZ2_bzReadOpen) ( 
53,64c53
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       * BZ_API(BZ2_bzReadOpen) ( 
53,64c53
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream BZ_API(BZ2_bzReadOpen) ( 
53,64c53
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream *(BZ2_bzReadOpen) ( 
54,64c54
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    BZ2_bzReadOpen) ( 
54,64c54
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    )) ( 
60,64c60
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ( 
60,65c60
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #int*  bzerror,   
60,65c60
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define *  bzerror,   
60,65c60
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED bzerror,   
62,65c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> ,   
62,66c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef FILE* f, 
62,66c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void * f, 
62,66c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEf, 
64,66c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> , 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN int   verbosity, 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILEverbosity, 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* , 
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_APIint   small,
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(small,
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen,
64,69c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) void* unused,    
65,69c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
65,69c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intunused,    
65,69c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  ,    
65,70c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int*  bzerrorint   nUnused 
66,70c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
66,71c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE);
66,71c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* ;
66,73c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       FILE* fBZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
67,73c67
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void BZ_API(BZ2_bzReadClose) ( 
67,73c67
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   BZ_API(BZ2_bzReadClose) ( 
67,73c67
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   verbosity(BZ2_bzReadClose) ( 
68,73c68
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       BZ2_bzReadClose) ( 
68,73c68
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   ) ( 
68,73c68
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   small( 
69,73d68
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
69,74c69
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void*    bzerror, 
69,74c69
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* bzerror, 
69,74c69
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* unused, 
70,74d69
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
70,75c70
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       int   * b 
71,75c71
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    b 
71,76c71
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
>    ));
73,76c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> ;
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void void BZ_API(BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ_API(BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API((BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadCloseBZ2_bzReadGetUnused) ( 
(85.7 %, 29261 bytes)
73,77c73
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> , 
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void**  unused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN **  unused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void *  unused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIunused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(,  
75,79c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedint*    nUnused 
75,79c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) *    nUnused 
76,79c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
76,80c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int);
76,80c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    ;
76,82c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    bzerrorBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int BZ_API(BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILEBZ_API(BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* (BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* bBZ2_bzRead) ( 
78,82c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       ) ( 
78,82c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void( 
78,83c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void*int*    bzerror, 
78,83c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  *    bzerror, 
78,83c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  unusedbzerror, 
79,83c79
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       , 
79,84c79
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intBZFILE* b, 
79,84c79
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    * b, 
80,84c80
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    b, 
80,84c80
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    ), 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> void*   buf, 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN *   buf, 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int buf, 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API, 
82,86c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(int     len 
82,86c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadlen 
82,87c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) );
83,87c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
83,89c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       intBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
83,89c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
83,89c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    bzerror* BZ_API(BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_API(BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE(BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* b) ( 
85,89c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       ( 
85,90c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       voidint*  bzerror,      
85,90c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       void*   *  bzerror,      
85,90c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       void*   bufbzerror,      
86,90c86
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       ,      
(85.8 %, 29180 bytes)
83,87c83
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    * f, 
83,87c83
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )f, 
85,87c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> , 
85,88c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN int   blockSize100k, 
85,88c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILEblockSize100k, 
85,88c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* , 
85,89c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIint   verbosity, 
85,89c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(verbosity, 
85,89c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
85,90c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   workFactor 
86,90c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
86,91c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int);
86,91c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  ;
86,93c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int*  bzerrorBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       void BZ_API(BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILEBZ_API(BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* (BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* fBZ2_bzWrite) ( 
88,93c88
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ) ( 
88,93c88
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ( 
88,94c88
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   blockSize100kint*    bzerror, 
89,94c89
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
89,94c89
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   bzerror, 
90,94d89
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
90,94d89
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
90,95c90
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   * b, 
91,95c91
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    b, 
91,95c91
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    ), 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> void*   buf, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN *   buf, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void buf, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API, 
93,97c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(int     len 
93,97c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(BZ2_bzWritelen 
93,98c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) );
94,98c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
94,100c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       intBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
94,100c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    void BZ_API(BZ2_bzWriteClose) ( 
94,100c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    bzerrorBZ_API(BZ2_bzWriteClose) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       (BZ2_bzWriteClose) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILEBZ2_bzWriteClose) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* ) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* b( 
96,100d95
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
96,101c96
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*          bzerror, 
96,101c96
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*   bzerror, 
97,101d96
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
97,101d96
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
(85.8 %, 29099 bytes)
94,98c94
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    b, 
94,98c94
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    ), 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> int           abandon, 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN abandon, 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void , 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_APIunsigned int* nbytes_in, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(int* nbytes_in, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose* nbytes_in, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) nbytes_in, 
97,100c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
97,101c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       intunsigned int* nbytes_out 
97,101c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          int* nbytes_out 
97,101c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerror* nbytes_out 
98,101c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
98,102c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE);
98,102c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       ;
98,104c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZFILE*       bBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
99,104c99
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
99,104c99
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           BZ_API(BZ2_bzWriteClose64) ( 
99,104c99
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandon(BZ2_bzWriteClose64) ( 
100,104c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ2_bzWriteClose64) ( 
100,104c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned ) ( 
100,104c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int( 
100,105c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* int*          bzerror, 
100,105c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* nbytes_in*          bzerror, 
101,105c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       bzerror, 
101,105c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned , 
101,106c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned intBZFILE*       b, 
101,106c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int* *       b, 
102,106c102
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    b, 
102,106c102
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    ), 
104,107c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> int           abandon, 
104,107c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN abandon, 
104,107c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void , 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_APIunsigned int* nbytes_in_lo32, 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(int* nbytes_in_lo32, 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64* nbytes_in_lo32, 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) nbytes_in_lo32, 
105,108c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
105,109c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       intunsigned int* nbytes_in_hi32, 
105,109c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          int* nbytes_in_hi32, 
105,109c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerror* nbytes_in_hi32, 
106,109c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
106,109c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE, 
106,110c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       unsigned int* nbytes_out_lo32, 
106,110c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       bint* nbytes_out_lo32, 
107,110c107
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
107,110c107
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,112c108
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_lo32);
109,112c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intint BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32(BZ2_bzBuffToBuffCompress) ( 
110,117c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ2_bzBuffToBuffCompress) ( 
110,117c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned ) ( 
110,117c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int( 
110,118c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* char*         dest, 
110,118c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* nbytes_out_lo32*         dest, 
111,118c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       dest, 
111,118c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned , 
111,119c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned intunsigned int* destLen,
111,119c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* int* destLen,
112,119c112
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    * destLen,
112,119c112
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )destLen,
117,119c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> ,
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN char*         source, 
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int *         source, 
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIsource, 
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(, 
117,121c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressunsigned int  sourceLen,
117,121c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) int  sourceLen,
118,121c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
118,121c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
118,122c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
118,122c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         destblockSize100k, 
119,122c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
119,123c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
119,123c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned intverbosity, 
119,123c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* , 
119,124c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int* destLenint           workFactor 
120,124c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
120,125c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char);
120,125c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         ;
120,127c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       char*         sourceBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  (BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ2_bzBuffToBuffDecompress) ( 
122,127c122
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
122,127c122
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
122,128c122
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           blockSize100kchar*         dest, 
123,128c123
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       *         dest, 
123,128c123
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           dest, 
124,128d123
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
124,128d123
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
124,129c124
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           int* destLen,
125,129c125
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    * destLen,
125,129c125
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )destLen,
127,129c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> ,
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN char*         source, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int *         source, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIsource, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(, 
127,131c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int  sourceLen,
127,131c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int  sourceLen,
128,131c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
128,131c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
128,132c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
128,132c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         destsmall, 
129,132c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
129,133c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int           verbosity 
129,133c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned intverbosity 
129,134c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* );
129,134c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* destLen;
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       charconst char * BZ_API(BZ2_bzlibVersion) (
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         char * BZ_API(BZ2_bzlibVersion) (
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         source* BZ_API(BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ_API(BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned (BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen) (
132,139c132
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       (
132,140c132
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
---
>       int           void
132,141c132
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           small);
133,141c133
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       ;
133,143c133
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
134,143c134
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZFILE * BZ_API(BZ2_bzopen) (
134,143c134
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )* BZ_API(BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_API(BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN (BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char ) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * (
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_APIconst char *path,
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(char *path,
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion*path,
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) path,
140,144c140
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       ,
141,145c141
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
>    const char *mode
141,145c141
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
>    )char *mode
143,145c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> *mode
143,145c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN mode
143,146c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE );
143,146c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * ;
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZFILE * BZ_API(BZ2_bzdopen) (
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen* BZ_API(BZ2_bzdopen) (
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) BZ_API(BZ2_bzdopen) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       (BZ2_bzdopen) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const BZ2_bzdopen) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char ) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *(
144,149c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
---
>       const char *pathint        d,
145,149c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
---
>       d,
145,149c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
---
>       const ,
145,150c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>       const char const char *mode
145,150c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>       const char *char *mode
146,150c146
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>    *mode
146,150c146
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
---
>    )mode
148,151c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
---
> );
148,151c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
---
> BZ_EXTERN ;
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE BZ_EXTERN int BZ_API(BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * int BZ_API(BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_API(BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API((BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopenBZ2_bzread) (
(85.8 %, 29021 bytes)
148,152c148
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN , 
150,153c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> int len 
150,153c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN len 
150,154c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int );
150,154c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API;
150,156c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ_EXTERN int BZ_API(BZ2_bzwrite) (
150,156c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzreadint BZ_API(BZ2_bzwrite) (
150,156c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) BZ_API(BZ2_bzwrite) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       (BZ2_bzwrite) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILEBZ2_bzwrite) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* ) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* b(
152,156d151
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
152,157c152
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       void* b, 
152,157c152
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       void* b, 
153,157d152
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
153,157d152
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
153,158c153
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
>       int *   buf, 
154,158c154
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
>    buf, 
(85.9 %, 28951 bytes)
150,154c150
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API, 
152,155c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> int     len 
152,155c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN len 
152,156c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int );
152,156c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API;
152,158c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ_EXTERN int BZ_API(BZ2_bzflush) (
152,158c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwriteint BZ_API(BZ2_bzflush) (
152,158c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) BZ_API(BZ2_bzflush) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       (BZ2_bzflush) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILEBZ2_bzflush) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* ) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* b(
154,158d153
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
154,159c154
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>       void* b
154,159c154
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>       void*   b
154,160c154
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
>       void*   buf);
155,160c155
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
>       ;
155,162c155
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>       int     BZ_EXTERN void BZ_API(BZ2_bzclose) (
156,162c156
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>    void BZ_API(BZ2_bzclose) (
156,162c156
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>    )BZ_API(BZ2_bzclose) (
(85.9 %, 28874 bytes)
152,158c152
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_APIBZ_API(BZ2_bzclose) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> (BZ2_bzclose) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN BZ2_bzclose) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int ) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(
154,159c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZFILE* b
154,159c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush* b
154,159c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) b
155,160c155
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
>       );
155,160c155
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
>       BZFILE;
155,162c155
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>       BZFILE* BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
156,162c156
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>    const char * BZ_API(BZ2_bzerror) (
156,162c156
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>    )char * BZ_API(BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> * BZ_API(BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN BZ_API(BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void (BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_APIBZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_API() (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose(
158,163c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) BZFILE *b, 
159,163c159
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>       *b, 
159,163c159
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>       BZFILEb, 
(85.9 %, 28801 bytes)
155,158d154
<       );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
155,159c155
<       );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
>       )*errnum
157,159c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> errnum
157,160c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN );
157,160c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const ;
157,170c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char #define _BZLIB_PRIVATE_H
157,170c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char * define _BZLIB_PRIVATE_H
157,170c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char * BZ_API_BZLIB_PRIVATE_H
157,172c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(#include <stdlib.h>
157,172c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerrorinclude <stdlib.h>
157,172c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) <stdlib.h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       stdlib.h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE .h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *b>
159,177c159
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       #define BZ_VERSION  "1.0.2, 30-Dec-2001"
159,177c159
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int    define BZ_VERSION  "1.0.2, 30-Dec-2001"
159,177c159
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int    *BZ_VERSION  "1.0.2, 30-Dec-2001"
160,177c160
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
160,180c160
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
>    )typedef unsigned char   Bool;
(86.0 %, 28729 bytes)
157,177c157
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> BZ_EXTERN const typedef unsigned char   Bool;
167,177c167
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> unsigned char   Bool;
167,177c167
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #char   Bool;
167,177c167
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #define Bool;
169,177c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> ;
169,179c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #typedef int             Int32;
169,179c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #include int             Int32;
169,179c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #include <Int32;
169,179c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #include <stdlib;
169,180c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #include <stdlib.typedef unsigned int    UInt32;
169,180c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #include <stdlib.hunsigned int    UInt32;
174,180c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> int    UInt32;
174,180c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #UInt32;
174,180c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #define ;
174,184c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> #define BZ_VERSION  #define True  ((Bool)1)
177,184c177
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
177,184c177
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef True  ((Bool)1)
177,184c177
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned ((Bool)1)
177,184c177
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   (Bool)1)
177,184c177
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   BoolBool)1)
179,184c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> )1)
179,184c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef 1)
179,184c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef int             )
179,185c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef int             Int32#define False ((Bool)0)
180,185c180
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> define False ((Bool)0)
180,185c180
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef False ((Bool)0)
180,185c180
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned ((Bool)0)
180,185c180
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned int    (Bool)0)
180,185c180
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned int    UInt32Bool)0)
184,185c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> )0)
184,185c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #0)
184,185c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )
184,187c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  #define __inline__  
184,187c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  (define __inline__  
184,187c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((__inline__  
184,189c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define True  ((Boolextern void BZ2_bz__AssertH__fail ( void );
184,189c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define True  ((Bool)void BZ2_bz__AssertH__fail ( void );
184,189c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define True  ((Bool)1BZ2_bz__AssertH__fail ( void );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> ( void );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #void );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define False ;
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> #define False (#define AssertH(cond,errcode) \
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> #define False ((define AssertH(cond,errcode) \
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> #define False ((BoolAssertH(cond,errcode) \
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> #define False ((Bool)(cond,errcode) \
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> #define False ((Bool)0cond,errcode) \
187,190c187
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> ,errcode) \
187,190c187
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> #errcode) \
187,190c187
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> #define ) \
189,190c189
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
---
> \
189,192c189
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern #define AssertD(cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void define AssertD(cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail AssertD(cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail ( (cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail ( void cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail ( void ),msg) \
190,192c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> msg) \
190,192c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #) \
190,192c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH#define VPrintf0(zf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(define VPrintf0(zf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(condVPrintf0(zf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond,(zf) \
(86.0 %, 28655 bytes)
189,193c189
< \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> ) \
191,193c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> \
191,194c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #fprintf(stderr,zf)
191,194c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define (stderr,zf)
191,194c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertDstderr,zf)
191,194c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertD(,zf)
191,194c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertD(condzf)
191,194c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertD(cond,)
191,195c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #define AssertD(cond,msg#define VPrintf1(zf,za1) \
191,195c191
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #define AssertD(cond,msg) define VPrintf1(zf,za1) \
193,195c193
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> VPrintf1(zf,za1) \
193,195c193
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #(zf,za1) \
193,195c193
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #define zf,za1) \
193,195c193
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #define VPrintf0,za1) \
(86.0 %, 28601 bytes)
193,194d192
< #define zf,za1) \
<    fprintf(stderr,zf,za1)
193,195c193
< #define zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
---
> #define zf(zf,za1,za2) \
(86.1 %, 28557 bytes)
193,194c193
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define za1,za2)
193,194c193
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define VPrintf2,za2)
(86.1 %, 28513 bytes)
193,194c193
< #define za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define ) \
193,194c193
< #define za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define za1\
193,195c193
< #define za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define za1,fprintf(stderr,zf,za1,za2,za3)
(86.1 %, 28474 bytes)
193,195c193
< #define za1\
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define za1VPrintf4(zf,za1,za2,za3,za4) \
194,195c194
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    (zf,za1,za2,za3,za4) \
(86.1 %, 28430 bytes)
193,194c193
< #define za1VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define za1VPrintf4,zf,za1,za2,za3,za4)
193,194c193
< #define za1VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define za1VPrintf4(zf,za1,za2,za3,za4)
(86.1 %, 28390 bytes)
193,194c193
< #define za1VPrintf4,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define za1VPrintf4zf,za1,za2,za3,za4,za5) \
193,194c193
< #define za1VPrintf4,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define za1VPrintf4,,za1,za2,za3,za4,za5) \
(86.2 %, 28352 bytes)
193,194c193
< #define za1VPrintf4zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define za1VPrintf4zf,zf,za1,za2,za3,za4,za5)
193,194c193
< #define za1VPrintf4zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define za1VPrintf4zf,zf,za1,za2,za3,za4,za5)
(86.2 %, 28311 bytes)
193,196c193
< #define za1VPrintf4zf,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define za1VPrintf4zfBZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
193,196c193
< #define za1VPrintf4zf,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define za1VPrintf4zf,(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
193,196c193
< #define za1VPrintf4zf,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define za1VPrintf4zf,zfnnn) (strm->bzalloc)(strm->opaque,(nnn),1)
(86.2 %, 28276 bytes)
193c193
< #define za1VPrintf4zfBZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define za1VPrintf4zfBZALLOC),1)
193c193
< #define za1VPrintf4zfBZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define za1VPrintf4zfBZALLOC(,1)
193c193
< #define za1VPrintf4zfBZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define za1VPrintf4zfBZALLOC(nnn1)
193c193
< #define za1VPrintf4zfBZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define za1VPrintf4zfBZALLOC(nnn) )
(86.2 %, 28237 bytes)
193,194c193
< #define za1VPrintf4zfBZALLOC),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define za1VPrintf4zfBZALLOC(strm->opaque,(ppp))
193,194c193
< #define za1VPrintf4zfBZALLOC),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define za1VPrintf4zfBZALLOC)strm->opaque,(ppp))
193,194c193
< #define za1VPrintf4zfBZALLOC),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define za1VPrintf4zfBZALLOC),->opaque,(ppp))
(86.2 %, 28197 bytes)
193,199c193
< #define za1VPrintf4zfBZALLOC)strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x2   
< #define BZ_HDR_Z 0xa   
---
> #define za1VPrintf4zfBZALLOC)0xa   
193,200c193
< #define za1VPrintf4zfBZALLOC)strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x2   
< #define BZ_HDR_Z 0xa   
< #define BZ_HDR_h 0x8   
---
> #define za1VPrintf4zfBZALLOC)strm#define BZ_HDR_h 0x8   
193,200c193
< #define za1VPrintf4zfBZALLOC)strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x2   
< #define BZ_HDR_Z 0xa   
< #define BZ_HDR_h 0x8   
---
> #define za1VPrintf4zfBZALLOC)strm->define BZ_HDR_h 0x8   
(86.3 %, 28132 bytes)
193,200c193
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define za1VPrintf4zfBZALLOC)BZ_MAX_CODE_LEN    3
194,200c194
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> 3
194,202c194
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> ##define BZ_RUNA 0
194,202c194
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define define BZ_RUNA 0
194,202c194
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define BZ_HDR_h BZ_RUNA 0
195,202c195
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> 0
195,203c195
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> ##define BZ_RUNB 1
195,203c195
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define define BZ_RUNB 1
195,203c195
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define BZ_HDR_0 BZ_RUNB 1
199,203c199
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> 1
199,205c199
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> ##define BZ_N_GROUPS 6
199,205c199
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define define BZ_N_GROUPS 6
199,205c199
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE BZ_N_GROUPS 6
200,205c200
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> 6
200,206c200
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   0
---
> ##define BZ_G_SIZE   0
200,206c200
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   0
---
> #define define BZ_G_SIZE   0
200,206c200
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   0
---
> #define BZ_MAX_CODE_LEN    BZ_G_SIZE   0
202,206c202
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   0
---
> 0
202,207c202
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   0
< #define BZ_N_ITERS  4
---
> ##define BZ_N_ITERS  4
(86.3 %, 28050 bytes)
200,203c200
< #define define BZ_G_SIZE   0
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define / BZ_G_SIZE))
200,203c200
< #define define BZ_G_SIZE   0
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define define BZ_G_SIZE))
200,203c200
< #define define BZ_G_SIZE   0
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define define BZ_G_SIZE   ))
(86.3 %, 27978 bytes)
200,212c200
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define define define BZ_RAND_INIT_MASK                      \
200,212c200
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define define BZ_G_SIZEBZ_RAND_INIT_MASK                      \
200,212c200
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define define BZ_G_SIZE)\
208,213c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> s->rNToGo = 0;                              \
208,213c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #->rNToGo = 0;                              \
208,213c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define rNToGo = 0;                              \
208,213c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_DECLS                          = 0;                              \
209,213c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    0;                              \
209,213c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 ;                              \
209,213c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo\
209,214c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rNToGo;                               s->rTPos  = 0                               \
210,214c210
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    ->rTPos  = 0                               \
210,214c210
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos  = 0                               \
210,214c210
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos                                 = 0                               \
212,214c212
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> 0                               \
212,214c212
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #\
212,216c212
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
212,216c212
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_INIT_MASK                      define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
(86.4 %, 27834 bytes)
212,214c212
< #\
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #0)
214c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> )
214,216c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
---
> ##define BZ_RAND_UPD_MASK                       \
214,216c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
---
> #define define BZ_RAND_UPD_MASK                       \
214,216c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
---
> #define BZ_RAND_MASK BZ_RAND_UPD_MASK                       \
(86.4 %, 27792 bytes)
214,216c214
< #define define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
---
> #define --;
214,216c214
< #define define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
---
> #define define ;
214,224c214
< #define define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define define BZ_RAND_UPD_MASK                       #define BZ_INITIALISE_CRC(crcVar)              \
(86.5 %, 27669 bytes)
214,228c214
< #define define ;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
222,228c222
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
222,228c222
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #BZ_UPDATE_CRC(crcVar,cha)              \
222,228c222
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define (crcVar,cha)              \
222,228c222
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_INITIALISE_CRCcrcVar,cha)              \
(86.6 %, 27558 bytes)
214,222c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define BZ_M_RUNNING   2
214,222c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define #2
214,223c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define #define BZ_M_FLUSHING  3
214,223c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define BZ_UPDATE_CRCdefine BZ_M_FLUSHING  3
214,223c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define BZ_UPDATE_CRC(BZ_M_FLUSHING  3
214,223c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define BZ_UPDATE_CRC(crcVar3
214,224c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define define #define BZ_UPDATE_CRC(crcVar,#define BZ_M_FINISHING 4
214,224c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define define #define BZ_UPDATE_CRC(crcVar,chadefine BZ_M_FINISHING 4
214,224c214
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define define #define BZ_UPDATE_CRC(crcVar,cha)              BZ_M_FINISHING 4
221,224c221
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> 4
221,226c221
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> ##define BZ_S_OUTPUT    1
221,226c221
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define define BZ_S_OUTPUT    1
221,226c221
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_M_IDLE      BZ_S_OUTPUT    1
222,226c222
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> 1
222,227c222
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> ##define BZ_S_INPUT     2
222,227c222
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define define BZ_S_INPUT     2
222,227c222
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_M_RUNNING   BZ_S_INPUT     2
223,227c223
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> 2
223,229c223
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> ##define BZ_N_RADIX 2
223,229c223
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define define BZ_N_RADIX 2
223,229c223
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_M_FLUSHING  BZ_N_RADIX 2
224,229c224
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> 2
224,230c224
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> ##define BZ_N_QSORT 2
224,230c224
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define define BZ_N_QSORT 2
224,230c224
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_M_FINISHING BZ_N_QSORT 2
226,230c226
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> 2
226,231c226
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> ##define BZ_N_SHELL 8
226,231c226
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define define BZ_N_SHELL 8
226,231c226
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_S_OUTPUT    BZ_N_SHELL 8
227,231c227
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> 8
227,232c227
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> ##define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
227,232c227
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
227,232c227
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_S_INPUT     BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
229,232c229
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
229,232c229
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
229,232c229
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + BZ_N_QSORT + BZ_N_SHELL + 2)
229,232c229
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX BZ_N_QSORT + BZ_N_SHELL + 2)
230,232c230
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + BZ_N_SHELL + 2)
230,232c230
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_SHELL + 2)
230,232c230
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + 2)
230,232c230
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT 2)
231,232c231
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> )
231,239c231
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #typedef
231,240c231
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define struct {
231,240c231
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_SHELL {
232,242c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> bz_stream* strm;
232,242c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #* strm;
232,242c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define strm;
232,242c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT ;
232,246c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (Int32    mode;
232,246c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX mode;
232,246c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + ;
232,247c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT Int32    state;
232,247c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + state;
232,247c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL ;
232,253c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + UInt32*  arr1;
232,253c232
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2*  arr1;
239,253c239
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
> arr1;
240,253c240
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    ;
240,254c240
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>    struct UInt32*  arr2;
242,254c242
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       *  arr2;
242,254c242
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_streamarr2;
242,254c242
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* ;
242,255c242
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       bz_stream* strmUInt32*  ftab;
246,255c246
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       *  ftab;
246,255c246
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    ftab;
247,255d246
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
247,258d246
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
247,259c247
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       Int32    *  ptr;
247,259c247
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       Int32    stateptr;
253,259c253
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       ;
253,260c253
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32unsigned char*   block;
253,260c253
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32*  char*   block;
253,260c253
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32*  arr1*   block;
254,260c254
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       block;
254,260c254
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32;
254,261c254
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32*  unsigned short*  mtfv;
254,261c254
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32*  arr2short*  mtfv;
255,261c255
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       *  mtfv;
255,261c255
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32mtfv;
255,261c255
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32*  ;
255,262c255
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       UInt32*  ftabunsigned char*   zbits;
259,262c259
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       char*   zbits;
259,262c259
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       UInt32*   zbits;
259,262c259
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       UInt32*  zbits;
260,262d259
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
260,264d259
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
260,265c260
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
---
>       unsigned workFactor;
260,265c260
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
---
>       unsigned char;
260,270c260
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
---
>       unsigned char*   BZ_RAND_DECLS;
261,270d260
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
261,272d260
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
261,273c261
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       unsigned nblock;
261,273c261
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       unsigned short;
261,274c261
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       unsigned short*  Int32    nblockMAX;
261,274c261
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       unsigned short*  mtfvnblockMAX;
262,274c262
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       ;
262,279c262
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       unsigned Int32    nInUse;
262,279c262
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       unsigned charnInUse;
262,279c262
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       unsigned char*   ;
262,280c262
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       unsigned char*   zbitsBool     inUse[6];
265,280c265
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       inUse[6];
265,280c265
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    [6];
265,280c265
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    workFactor6];
270,280c270
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       ];
271,280d270
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
273,280d272
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
273,281c273
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    char    unseqToSeq[6];
273,281c273
<       Int32    nblock;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    nblockunseqToSeq[6];
274,281c274
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       [6];
274,281c274
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    6];
274,281c274
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    nblockMAX];
279,281c279
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       ;
279,289c279
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Int32    UInt32   combinedCRC;
279,289c279
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Int32    nInUsecombinedCRC;
280,289c280
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       ;
280,292c280
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     Int32    verbosity;
280,292c280
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     inUseverbosity;
280,292c280
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     inUse[;
280,293c280
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Bool     inUse[6Int32    blockNo;
280,293c280
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Bool     inUse[6]blockNo;
281,293c281
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       ;
281,294c281
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       unsigned Int32    blockSize100k;
281,294c281
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       unsigned char    blockSize100k;
281,294c281
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       unsigned char    unseqToSeq;
281,297c281
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       unsigned char    unseqToSeq[Int32    nMTF;
281,297c281
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       unsigned char    unseqToSeq[6nMTF;
282,297d281
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
289,297d288
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
289,298c289
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       UInt32   mtfFreq    [BZ_MAX_ALPHA_SIZE];
289,298c289
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       UInt32   combinedCRC[BZ_MAX_ALPHA_SIZE];
292,298c292
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       BZ_MAX_ALPHA_SIZE];
292,298c292
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ];
293,298d292
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
293,308c293
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
---
>       }
293,309c293
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       Int32    EState;
294,309d293
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
294,317c294
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       ;
294,319c294
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       Int32    ;
294,329c294
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    blockSize100k#define BZ_X_IDLE        1
297,329c297
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       define BZ_X_IDLE        1
297,329c297
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    BZ_X_IDLE        1
297,329c297
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    nMTF1
298,330c298
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       #define BZ_X_OUTPUT      2
298,330c298
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    define BZ_X_OUTPUT      2
298,330c298
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    mtfFreq    BZ_X_OUTPUT      2
298,330c298
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    mtfFreq    [2
298,332c298
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE#define BZ_X_MAGIC_1     0
298,332c298
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]define BZ_X_MAGIC_1     0
308,332c308
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    BZ_X_MAGIC_1     0
309,332c309
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    0
309,333c309
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
>    EState#define BZ_X_MAGIC_2     1
317,333c317
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> define BZ_X_MAGIC_2     1
319,333c319
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> BZ_X_MAGIC_2     1
329,333c329
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> 1
329,334c329
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> ##define BZ_X_MAGIC_3     2
329,334c329
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> #define define BZ_X_MAGIC_3     2
329,334c329
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> #define BZ_X_IDLE        BZ_X_MAGIC_3     2
330,334c330
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> 2
330,335c330
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
---
> ##define BZ_X_MAGIC_4     3
330,335c330
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
---
> #define define BZ_X_MAGIC_4     3
330,335c330
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
---
> #define BZ_X_OUTPUT      BZ_X_MAGIC_4     3
332,335c332
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
---
> 3
332,336c332
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
---
> ##define BZ_X_BLKHDR_1    4
332,336c332
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
---
> #define define BZ_X_BLKHDR_1    4
332,336c332
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
---
> #define BZ_X_MAGIC_1     BZ_X_BLKHDR_1    4
333,336c333
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
---
> 4
333,337c333
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
---
> ##define BZ_X_BLKHDR_2    5
333,337c333
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
---
> #define define BZ_X_BLKHDR_2    5
333,337c333
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
---
> #define BZ_X_MAGIC_2     BZ_X_BLKHDR_2    5
(86.6 %, 27457 bytes)
333,337c333
< #define define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
---
> #define #define BZ_X_BLKHDR_6    9
333,337c333
< #define define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
---
> #define define define BZ_X_BLKHDR_6    9
333,337c333
< #define define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
---
> #define define BZ_X_BLKHDR_2    BZ_X_BLKHDR_6    9
(86.7 %, 27356 bytes)
333,337c333
< #define define define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
---
> #define define #define BZ_X_BCRC_4      3
333,337c333
< #define define define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
---
> #define define define define BZ_X_BCRC_4      3
333,337c333
< #define define define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
---
> #define define define BZ_X_BLKHDR_6    BZ_X_BCRC_4      3
(86.7 %, 27249 bytes)
333,336c333
< #define define #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
---
> #define define 6
333,337c333
< #define define #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
---
> #define define ##define BZ_X_ORIGPTR_3   7
333,337c333
< #define define #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
---
> #define define #define define BZ_X_ORIGPTR_3   7
(86.8 %, 27143 bytes)
333,337c333
< #define define 6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
---
> #define define BZ_X_SELECTOR_1  0
334,337c334
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
---
> 0
334,338c334
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
---
> ##define BZ_X_SELECTOR_2  1
334,338c334
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
---
> #define define BZ_X_SELECTOR_2  1
(86.8 %, 27052 bytes)
333,337c333
< #define define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
---
> #define define define BZ_X_CODING_2    4
333,337c333
< #define define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
---
> #define define BZ_X_SELECTOR_1  BZ_X_CODING_2    4
334,337c334
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
---
> 4
334,338c334
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
---
> ##define BZ_X_CODING_3    5
334,338c334
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
---
> #define define BZ_X_CODING_3    5
(86.8 %, 26951 bytes)
333,337c333
< #define define define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
---
> #define define #define BZ_X_MTF_3       8
333,337c333
< #define define define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
---
> #define define define define BZ_X_MTF_3       8
333,337c333
< #define define define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
---
> #define define define BZ_X_CODING_2    BZ_X_MTF_3       8
(86.9 %, 26844 bytes)
333,336c333
< #define define #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
---
> #define define 1
333,337c333
< #define define #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
---
> #define define ##define BZ_X_ENDHDR_2    2
333,337c333
< #define define #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
---
> #define define #define define BZ_X_ENDHDR_2    2
333,337c333
< #define define #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
---
> #define define #define BZ_X_MTF_3       BZ_X_ENDHDR_2    2
(87.0 %, 26738 bytes)
333,337c333
< #define define 1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
---
> #define define BZ_X_ENDHDR_5    5
334,337c334
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
---
> 5
334,338c334
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
---
> ##define BZ_X_ENDHDR_6    6
334,338c334
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
---
> #define define BZ_X_ENDHDR_6    6
(87.0 %, 26647 bytes)
333,337c333
< #define define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
---
> #define define define BZ_X_CCRC_3      9
333,337c333
< #define define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
---
> #define define BZ_X_ENDHDR_5    BZ_X_CCRC_3      9
(87.0 %, 26546 bytes)
333,347c333
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
---
> #define define typedef
333,348c333
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define define struct {
333,348c333
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define define BZ_X_CCRC_3      {
334,350c334
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> bz_stream* strm;
334,350c334
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #* strm;
334,350c334
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define strm;
334,350c334
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_X_CCRC_4      ;
340,353c340
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> Int32    state;
340,353c340
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #state;
340,353c340
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define ;
340,359c340
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> #define MTFA_SIZE BZ_RAND_DECLS;
341,359c341
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> ;
341,362c341
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> #UInt32   bsBuff;
341,362c341
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> #define bsBuff;
341,362c341
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> #define MTFL_SIZE ;
347,363c347
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
> Int32    bsLive;
348,363c348
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>    bsLive;
348,363c348
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>    struct ;
350,366d349
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
350,367c350
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_streamsmallDecompress;
350,367c350
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_stream* ;
350,368c350
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       bz_stream* strmInt32    currBlockNo;
353,368c353
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       currBlockNo;
353,368c353
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       Int32    ;
353,369c353
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       Int32    stateInt32    verbosity;
359,369c359
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       verbosity;
362,371d361
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
362,380d361
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
362,380d361
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
362,381c362
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       UInt32   bsBufftt;
363,381c363
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       ;
363,384c363
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       Int32    unsigned short   *ll16;
363,384c363
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       Int32    bsLiveshort   *ll16;
367,384c367
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       *ll16;
367,384c367
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       Bool     ll16;
368,384d367
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
368,384d367
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
368,385c368
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       Int32    char    *ll4;
368,385c368
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       Int32    currBlockNo*ll4;
369,385c369
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       ll4;
369,385c369
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       Int32    ;
369,391c369
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       Int32    verbosityUInt32   calculatedCombinedCRC;
381,391c381
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       calculatedCombinedCRC;
381,391c381
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   ;
381,437c381
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>       UInt32   *}
381,438c381
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       UInt32   *ttDState;
384,438c384
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       ;
384,444c384
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       unsigned #define BZ_GET_FAST(c)                     \
384,444c384
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       unsigned short   define BZ_GET_FAST(c)                     \
384,444c384
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       unsigned short   *BZ_GET_FAST(c)                     \
384,444c384
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       unsigned short   *ll16(c)                     \
385,444c385
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       c)                     \
385,444c385
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       unsigned )                     \
385,444c385
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
---
>       unsigned char    \
385,445c385
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       unsigned char    *s->tPos = s->tt[s->tPos];                 \
385,445c385
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       unsigned char    *ll4->tPos = s->tt[s->tPos];                 \
391,445c391
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       tPos = s->tt[s->tPos];                 \
391,445c391
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       UInt32   = s->tt[s->tPos];                 \
391,445c391
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       UInt32   calculatedCombinedCRCs->tt[s->tPos];                 \
437,445c437
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    ->tt[s->tPos];                 \
438,445c438
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    tt[s->tPos];                 \
438,445c438
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DState[s->tPos];                 \
444,445c444
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> s->tPos];                 \
444,445c444
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #->tPos];                 \
444,445c444
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define tPos];                 \
444,445c444
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST];                 \
444,445c444
< #define BZ_GET_FAST(c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST(;                 \
(87.1 %, 26486 bytes)
444,445c444
< #define tPos];                 \
<     c = (UChar)(s->tPos & 0xf);           \
---
> #define );           \
444,445c444
< #define tPos];                 \
<     c = (UChar)(s->tPos & 0xf);           \
---
> #define tPos;           \
444,445c444
< #define tPos];                 \
<     c = (UChar)(s->tPos & 0xf);           \
---
> #define tPos]\
(87.1 %, 26435 bytes)
444,448c444
< #define tPos;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define tPosc_tPos = c_tt[c_tPos];                    \
444,448c444
< #define tPos;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define tPos;           = c_tt[c_tPos];                    \
445,448c445
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
>     c_tt[c_tPos];                    \
(87.1 %, 26352 bytes)
444,445c444
< #define tPosc_tPos = c_tt[c_tPos];                    \
<     c = (UChar)(c_tPos & 0xf);            \
---
> #define tPosc_tPos 0xf);            \
444,445c444
< #define tPosc_tPos = c_tt[c_tPos];                    \
<     c = (UChar)(c_tPos & 0xf);            \
---
> #define tPosc_tPos = );            \
(87.2 %, 26290 bytes)
444,447c444
< #define tPosc_tPos 0xf);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
---
> #define tPosc_tPos )                                          \
444,447c444
< #define tPosc_tPos 0xf);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
---
> #define tPosc_tPos 0xf\
444,450c444
< #define tPosc_tPos 0xf);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    
< 
< #define GET_LL4(i)                             \
---
> #define tPosc_tPos 0xf)#define GET_LL4(i)                             \
(87.2 %, 26233 bytes)
444,448c444
< #define tPosc_tPos )                                          \
<    
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
444,448c444
< #define tPosc_tPos )                                          \
<    
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define tPosc_tPos )                                          s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
(87.3 %, 26120 bytes)
444c444
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define tPosc_tPos ((i)  2) & 0x4)) & 0xF)
444c444
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define tPosc_tPos ((i)  2) & 0x4)) & 0xF)
444c444
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define tPosc_tPos (si)  2) & 0x4)) & 0xF)
(87.3 %, 26096 bytes)
444,446c444
< #define tPosc_tPos ((i)  2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define tPosc_tPos SET_LL(i,n)                          \
444,446c444
< #define tPosc_tPos ((i)  2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define tPosc_tPos ((i,n)                          \
(87.3 %, 26063 bytes)
444,448c444
< #define tPosc_tPos SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
---
> #define tPosc_tPos ((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
444,448c444
< #define tPosc_tPos SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
---
> #define tPosc_tPos SET_LL(UInt32)s-ll16[i]) | (GET_LL4(i)  6))
444,448c444
< #define tPosc_tPos SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
---
> #define tPosc_tPos SET_LL(UInt32)s-ll16[i]) | (GET_LL4(i)  6))
(87.3 %, 25995 bytes)
444c444
< #define tPosc_tPos ((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
---
> #define tPosc_tPos i)  6))
444c444
< #define tPosc_tPos ((UInt32)s-ll16[i]) | (GET_LL4(i)  6))
---
> #define tPosc_tPos ()  6))
(87.3 %, 25964 bytes)
444,447c444
< #define tPosc_tPos i)  6))
< 
< #define BZ_GET_SMALL(c)                            \
<       c = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
> #define tPosc_tPos ( s-tPos, s-cftab );    \
444,447c444
< #define tPosc_tPos i)  6))
< 
< #define BZ_GET_SMALL(c)                            \
<       c = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
> #define tPosc_tPos is-tPos, s-cftab );    \
444,447c444
< #define tPosc_tPos i)  6))
< 
< #define BZ_GET_SMALL(c)                            \
<       c = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
> #define tPosc_tPos i)  -tPos, s-cftab );    \
(87.4 %, 25877 bytes)
444,445c444
< #define tPosc_tPos ( s-tPos, s-cftab );    \
<       s-tPos = GET_LL(s->tPos);
---
> #define tPosc_tPos GET_LL(s->tPos);
444,445c444
< #define tPosc_tPos ( s-tPos, s-cftab );    \
<       s-tPos = GET_LL(s->tPos);
---
> #define tPosc_tPos ( (s->tPos);
(87.4 %, 25836 bytes)
444,481c444
< #define tPosc_tPos GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
---
> #define tPosc_tPos #define fswap(zz1, zz2) \
444,481c444
< #define tPosc_tPos GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
---
> #define tPosc_tPos GET_LLdefine fswap(zz1, zz2) \
(87.4 %, 25743 bytes)
444,447c444
< #define tPosc_tPos #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos zzp2, zzn)       \
444,447c444
< #define tPosc_tPos #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos #, zzn)       \
(87.5 %, 25691 bytes)
444,448c444
< #define tPosc_tPos zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #define tPosc_tPos a)  (b)) ? (a) : (b)
444,448c444
< #define tPosc_tPos zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #define tPosc_tPos zzp2)  (b)) ? (a) : (b)
444,448c444
< #define tPosc_tPos zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #define tPosc_tPos zzp2, (b)) ? (a) : (b)
(87.5 %, 25649 bytes)
444,446c444
< #define tPosc_tPos a)  (b)) ? (a) : (b)
< 
< #define fpush(lz,hz) 
---
> #define tPosc_tPos define fpush(lz,hz) 
444,446c444
< #define tPosc_tPos a)  (b)) ? (a) : (b)
< 
< #define fpush(lz,hz) 
---
> #define tPosc_tPos afpush(lz,hz) 
(87.5 %, 25626 bytes)
444,448c444
< #define tPosc_tPos define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #define tPosc_tPos #define FALLBACK_QSORT_SMALL_THRESH 0
444,448c444
< #define tPosc_tPos define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #define tPosc_tPos define define FALLBACK_QSORT_SMALL_THRESH 0
444,448c444
< #define tPosc_tPos define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #define tPosc_tPos define fpushFALLBACK_QSORT_SMALL_THRESH 0
(87.5 %, 25582 bytes)
444,452c444
< #define tPosc_tPos #define FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define tPosc_tPos undef fpop
444,452c444
< #define tPosc_tPos #define FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define tPosc_tPos #fpop
444,453c444
< #define tPosc_tPos #define FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
< #undef fswap
---
> #define tPosc_tPos #define #undef fswap
(87.6 %, 25476 bytes)
444,454c444
< #define tPosc_tPos undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
---
> #define tPosc_tPos define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
444,454c444
< #define tPosc_tPos undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
---
> #define tPosc_tPos undef SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
445,454c445
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
---
> (zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
(87.6 %, 25364 bytes)
444c444
< #define tPosc_tPos define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
---
> #define tPosc_tPos 1  ((zz) & 1))
444c444
< #define tPosc_tPos define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
---
> #define tPosc_tPos define       ((zz) & 1))
444c444
< #define tPosc_tPos define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 1))
---
> #define tPosc_tPos define       SET_BH(zz) & 1))
(87.6 %, 25319 bytes)
444,445c444
< #define tPosc_tPos 1  ((zz) & 1))
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 1))
---
> #define tPosc_tPos bhtab[(zz)  5] &= ~(1  ((zz) & 1))
444,445c444
< #define tPosc_tPos 1  ((zz) & 1))
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 1))
---
> #define tPosc_tPos 1  [(zz)  5] &= ~(1  ((zz) & 1))
(87.7 %, 25278 bytes)
444c444
< #define tPosc_tPos bhtab[(zz)  5] &= ~(1  ((zz) & 1))
---
> #define tPosc_tPos & 1))
444c444
< #define tPosc_tPos bhtab[(zz)  5] &= ~(1  ((zz) & 1))
---
> #define tPosc_tPos bhtab1))
(87.7 %, 25249 bytes)
444,445c444
< #define tPosc_tPos & 1))
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 1)))
---
> #define tPosc_tPos )  5] & (1  ((zz) & 1)))
444,445c444
< #define tPosc_tPos & 1))
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 1)))
---
> #define tPosc_tPos & 5] & (1  ((zz) & 1)))
444,445c444
< #define tPosc_tPos & 1))
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 1)))
---
> #define tPosc_tPos & 1] & (1  ((zz) & 1)))
(87.7 %, 25207 bytes)
444,445c444
< #define tPosc_tPos )  5] & (1  ((zz) & 1)))
< #define      WORD_BH(zz)  bhtab[(zz)  5]
---
> #define tPosc_tPos #define      WORD_BH(zz)  bhtab[(zz)  5]
444,445c444
< #define tPosc_tPos )  5] & (1  ((zz) & 1)))
< #define      WORD_BH(zz)  bhtab[(zz)  5]
---
> #define tPosc_tPos )  define      WORD_BH(zz)  bhtab[(zz)  5]
444,445c444
< #define tPosc_tPos )  5] & (1  ((zz) & 1)))
< #define      WORD_BH(zz)  bhtab[(zz)  5]
---
> #define tPosc_tPos )  5WORD_BH(zz)  bhtab[(zz)  5]
(87.7 %, 25182 bytes)
444,445c444
< #define tPosc_tPos #define      WORD_BH(zz)  bhtab[(zz)  5]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define tPosc_tPos UNALIGNED_BH(zz)  ((zz) & 0xf)
444,445c444
< #define tPosc_tPos #define      WORD_BH(zz)  bhtab[(zz)  5]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define tPosc_tPos #(zz)  ((zz) & 0xf)
444,445c444
< #define tPosc_tPos #define      WORD_BH(zz)  bhtab[(zz)  5]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define tPosc_tPos #define      zz)  ((zz) & 0xf)
(87.7 %, 25133 bytes)
444,449c444
< #define tPosc_tPos UNALIGNED_BH(zz)  ((zz) & 0xf)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
---
> #define tPosc_tPos undef     CLEAR_BH
444,449c444
< #define tPosc_tPos UNALIGNED_BH(zz)  ((zz) & 0xf)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
---
> #define tPosc_tPos UNALIGNED_BHCLEAR_BH
444,450c444
< #define tPosc_tPos UNALIGNED_BH(zz)  ((zz) & 0xf)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
> #define tPosc_tPos UNALIGNED_BH(#undef     ISSET_BH
(87.8 %, 25078 bytes)
444,470c444
< #define tPosc_tPos undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #define tPosc_tPos zz1, zz2) \
444,470c444
< #define tPosc_tPos undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #define tPosc_tPos undef     , zz2) \
(87.8 %, 24963 bytes)
444,447c444
< #define tPosc_tPos zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos \
444,452c444
< #define tPosc_tPos zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos zz1#define mmin(a,b) ((a) < (b)) ? (a) : (b)
(87.8 %, 24908 bytes)
444,449c444
< #define tPosc_tPos \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos b)) ? (a) : (b)
449c449
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> )) ? (a) : (b)
449c449
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #) ? (a) : (b)
449c449
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define ? (a) : (b)
449c449
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a) : (b)
(87.9 %, 24876 bytes)
444,446c444
< #define tPosc_tPos b)) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define tPosc_tPos lz,hz,dz) 
444,446c444
< #define tPosc_tPos b)) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define tPosc_tPos b,hz,dz) 
444,446c444
< #define tPosc_tPos b)) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define tPosc_tPos b)hz,dz) 
(87.9 %, 24845 bytes)
444,446c444
< #define tPosc_tPos lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
---
> #define tPosc_tPos ) 
444,449c444
< #define tPosc_tPos lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos lz#define mnextsize(az) (nextHi[az]-nextLo[az])
(87.9 %, 24812 bytes)
444,447c444
< #define tPosc_tPos ) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos az])
447c447
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> ])
447c447
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #)
447,449c447
< #define mnextsize(az) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define #define mnextswap(az,bz)                                        \
447,449c447
< #define mnextsize(az) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define mnextsizedefine mnextswap(az,bz)                                        \
(87.9 %, 24766 bytes)
444,450c444
< #define tPosc_tPos az])
< 
< #define mnextswap(az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 0
---
> #define tPosc_tPos 0
444,451c444
< #define tPosc_tPos az])
< 
< #define mnextswap(az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 0
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define tPosc_tPos az#define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
(88.0 %, 24656 bytes)
444,450c444
< #define tPosc_tPos 0
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
< 
< 
< 
< #undef mswap
---
> #define tPosc_tPos mswap
445,450d444
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
< 
< 
< 
< #undef mswap
(88.0 %, 24554 bytes)
444,449c444
< #define tPosc_tPos mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
---
> #define tPosc_tPos mnextsize
445,449d444
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
(88.0 %, 24490 bytes)
444,454c444
< #define tPosc_tPos mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
445,454c445
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> (b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
445,454c445
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
445,454c445
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef ) (ftab[((b)+1) << 8] - ftab[(b) << 8])
446,454c446
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> (ftab[((b)+1) << 8] - ftab[(b) << 8])
446,454c446
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #ftab[((b)+1) << 8] - ftab[(b) << 8])
446,454c446
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef [((b)+1) << 8] - ftab[(b) << 8])
447,454c447
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> ((b)+1) << 8] - ftab[(b) << 8])
447,454c447
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #(b)+1) << 8] - ftab[(b) << 8])
447,454c447
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef b)+1) << 8] - ftab[(b) << 8])
(88.1 %, 24359 bytes)
444c444
< #define tPosc_tPos BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos 8] - ftab[(b) << 8])
444c444
< #define tPosc_tPos BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos BIGFREQ] - ftab[(b) << 8])
(88.1 %, 24331 bytes)
444,445c444
< #define tPosc_tPos 8] - ftab[(b) << 8])
< #define SETMASK (1 < 1)
---
> #define tPosc_tPos (1 < 1)
444,445c444
< #define tPosc_tPos 8] - ftab[(b) << 8])
< #define SETMASK (1 < 1)
---
> #define tPosc_tPos 81 < 1)
(88.1 %, 24294 bytes)
444,449c444
< #define tPosc_tPos (1 < 1)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
---
> #define tPosc_tPos undef BIGFREQ
444,449c444
< #define tPosc_tPos (1 < 1)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
---
> #define tPosc_tPos (BIGFREQ
(88.2 %, 24251 bytes)
444,465c444
< #define tPosc_tPos undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define tPosc_tPos (zz0) & 0x0)
444,465c444
< #define tPosc_tPos undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define tPosc_tPos undef zz0) & 0x0)
(88.2 %, 24163 bytes)
444,445c444
< #define tPosc_tPos (zz0) & 0x0)
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define tPosc_tPos ) & 0xf)
444,445c444
< #define tPosc_tPos (zz0) & 0x0)
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define tPosc_tPos (& 0xf)
(88.2 %, 24122 bytes)
444,445c444
< #define tPosc_tPos ) & 0xf)
< #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos )  (zz3) ? (zz2) : (zz3))
444,445c444
< #define tPosc_tPos ) & 0xf)
< #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos ) (zz3) ? (zz2) : (zz3))
444,445c444
< #define tPosc_tPos ) & 0xf)
< #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos ) & zz3) ? (zz2) : (zz3))
(88.2 %, 24085 bytes)
444,446c444
< #define tPosc_tPos )  (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define tPosc_tPos ADDWEIGHTS(zw1,zw2)                           \
444,446c444
< #define tPosc_tPos )  (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define tPosc_tPos )  (zw1,zw2)                           \
(88.3 %, 24050 bytes)
444,445c444
< #define tPosc_tPos ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define tPosc_tPos zw2)) |                    \
444,445c444
< #define tPosc_tPos ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define tPosc_tPos ADDWEIGHTS)) |                    \
(88.3 %, 23975 bytes)
444,445c444
< #define tPosc_tPos zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos DEPTHOF(zw2)))
444,445c444
< #define tPosc_tPos zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos zw2(zw2)))
(88.3 %, 23919 bytes)
444,449c444
< #define tPosc_tPos DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
---
> #define tPosc_tPos DOWNHEAP(z)                                   \
444,449c444
< #define tPosc_tPos DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
---
> #define tPosc_tPos DEPTHOF(z)                                   \
444,449c444
< #define tPosc_tPos DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
---
> #define tPosc_tPos DEPTHOF(z)                                   \
(88.4 %, 23837 bytes)
444,534c444
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
> #define tPosc_tPos ( void )
444,534c444
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
> #define tPosc_tPos DOWNHEAPvoid )
444,534c444
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
> #define tPosc_tPos DOWNHEAP()
444,535c444
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
---
> #define tPosc_tPos DOWNHEAP(z{
444,536c444
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #define tPosc_tPos DOWNHEAP(z)                                   EState * s = 0;
512,536c512
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> * s = 0;
512,536c512
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #s = 0;
512,536c512
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #define = 0;
512,536c512
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #define bsNEEDW0;
512,536c512
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #define bsNEEDW(;
512,537c512
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> #define bsNEEDW(nzInt32 i;
512,537c512
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> #define bsNEEDW(nz)                           i;
533,537c533
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> ;
534,538c534
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> s->nInUse = 0;
534,538c534
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void ->nInUse = 0;
534,538c534
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e nInUse = 0;
534,538c534
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e ( = 0;
534,538c534
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e ( void 0;
535,538c535
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> ;
536,538d535
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
536,539c536
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState (i = 0; i < 6; i++)
536,539c536
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * i = 0; i < 6; i++)
536,539c536
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * s = 0; i < 6; i++)
536,539c536
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * s = 0; i < 6; i++)
536,539c536
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * s = 0; i < 6; i++)
537,539c537
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    i < 6; i++)
537,539c537
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    Int32 < 6; i++)
537,539c537
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    Int32 i6; i++)
538,539c538
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    ; i++)
538,539c538
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    si++)
538,539c538
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    s->++)
538,539c538
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    s->nInUse )
538,540c538
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    s->nInUse = if (s->inUse[i]) {
538,540c538
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    s->nInUse = 0(s->inUse[i]) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    s->inUse[i]) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for ->inUse[i]) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (inUse[i]) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i [i]) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = i]) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0]) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; ) {
539,540c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i {
539,541c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < s->unseqToSeq[i] = s->nInUse;
539,541c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 6->unseqToSeq[i] = s->nInUse;
539,541c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 6; unseqToSeq[i] = s->nInUse;
539,541c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 6; i[i] = s->nInUse;
539,541c539
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 6; i++i] = s->nInUse;
540,541c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>       ] = s->nInUse;
540,541c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>       if = s->nInUse;
540,541c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>       if (s->nInUse;
540,541c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>       if (s->nInUse;
540,541c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>       if (s->nInUse;
540,541c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
>       if (s->inUse;
540,542c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUse[s->nInUse++;
540,542c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUse[i->nInUse++;
540,542c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUse[i]nInUse++;
540,542c540
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUse[i]) ++;
541,542c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>          ;
541,543c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>          s}
541,544c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
>          s->}
541,548c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
---
>          s->unseqToSeqstatic
541,549c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>          s->unseqToSeq[void generateMTFValues ( void )
541,549c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>          s->unseqToSeq[igenerateMTFValues ( void )
541,549c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>          s->unseqToSeq[i] ( void )
541,549c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>          s->unseqToSeq[i] = void )
541,549c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>          s->unseqToSeq[i] = s)
541,550c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
---
>          s->unseqToSeq[i] = s->{
541,551c541
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>          s->unseqToSeq[i] = s->nInUseEState * s = 0;
542,551c542
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>          * s = 0;
(88.4 %, 23787 bytes)
542,550d541
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
542,551c542
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
>       unsigned char   yy[6];
543,551c543
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> char   yy[6];
547,551c547
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> yy[6];
548,551c548
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> [6];
548,551c548
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void 6];
548,551c548
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues ];
548,551c548
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues ( ;
548,552c548
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
> void generateMTFValues ( void Int32   i, j;
549,552c549
< {
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
> i, j;
550,552c550
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    , j;
550,552c550
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState j;
550,552c550
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState * ;
550,553c550
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
---
>    EState * s Int32   zPend;
550,553c550
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
---
>    EState * s = zPend;
551,553d550
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
551,553d550
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
551,554c551
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    unsigned wr;
551,554c551
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    unsigned char   ;
551,555c551
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    unsigned char   yyInt32   EOB;
551,555c551
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    unsigned char   yy[EOB;
551,555c551
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    unsigned char   yy[6;
551,558c551
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    unsigned char   yy[6]UInt32* ptr   = s->ptr;
552,558c552
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
552,558c552
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   ptr   = s->ptr;
552,558c552
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i= s->ptr;
552,558c552
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, s->ptr;
552,558c552
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, j->ptr;
553,558c553
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    ptr;
553,558c553
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   ;
553,559c553
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   zPendunsigned char* block  = s->block;
554,559c554
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    char* block  = s->block;
554,559c554
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   * block  = s->block;
554,559c554
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   wrblock  = s->block;
555,559c555
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    = s->block;
555,559c555
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   s->block;
555,559c555
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   EOB->block;
558,559c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    block;
558,559c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    UInt32;
558,560c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* unsigned short* mtfv  = s->mtfv;
558,560c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   short* mtfv  = s->mtfv;
558,560c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = * mtfv  = s->mtfv;
558,560c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = smtfv  = s->mtfv;
558,560c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->= s->mtfv;
558,560c558
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->ptrs->mtfv;
559,560c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    ->mtfv;
559,560c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned mtfv;
559,560c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned char;
559,562c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
---
>    unsigned char* ;
559,563c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned char* block  EOB = s->nInUse+1;
559,563c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned char* block  = = s->nInUse+1;
559,563c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned char* block  = ss->nInUse+1;
559,563c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned char* block  = s->->nInUse+1;
559,563c559
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned char* block  = s->blocknInUse+1;
560,563c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    +1;
560,563c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned 1;
560,563c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned short;
560,565c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    unsigned short* for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
560,565c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    unsigned short* mtfv  (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
560,565c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    unsigned short* mtfv  = i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
560,565c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    unsigned short* mtfv  = s= 0; i <= EOB; i++) s->mtfFreq[i] = 0;
560,565c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    unsigned short* mtfv  = s->0; i <= EOB; i++) s->mtfFreq[i] = 0;
560,565c560
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    unsigned short* mtfv  = s->mtfv; i <= EOB; i++) s->mtfFreq[i] = 0;
562,565c562
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    i <= EOB; i++) s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    <= EOB; i++) s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB EOB; i++) s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = ; i++) s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = si++) s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->++) s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->nInUse) s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->nInUse+s->mtfFreq[i] = 0;
563,565c563
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->nInUse+1->mtfFreq[i] = 0;
565c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    mtfFreq[i] = 0;
565c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for [i] = 0;
565c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i] = 0;
565c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i ] = 0;
565c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = = 0;
565c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 00;
565c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; ;
565,567c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i wr = 0;
565,567c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i <= = 0;
565,567c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i <= EOB0;
565,567c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i <= EOB; ;
565,568c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; izPend = 0;
565,568c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; i++= 0;
565,568c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; i++) 0;
565,568c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; i++) s;
565,569c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i <= EOB; i++) s->for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
565,569c565
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i <= EOB; i++) s->mtfFreq(i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
(88.4 %, 23745 bytes)
565,566c565
<    for (i = 0; i <= EOB; i++) 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i <= EOB; i++) ++) yy[i] = (unsigned char) i;
565,566c565
<    for (i = 0; i <= EOB; i++) 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i <= EOB; i++) 0) yy[i] = (unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    yy[i] = (unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for [i] = (unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i] = (unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i ] = (unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = = (unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0(unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; unsigned char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i char) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i < ) i;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i < si;
566c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
---
>    for (i = 0; i < s->;
566,568c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nInUsefor (i = 0; i < s->nblock; i++) {
566,568c566
<    for (i = 0; i < s->nInUse; i++) yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nInUse; (i = 0; i < s->nblock; i++) {
(88.4 %, 23713 bytes)
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    0; i < s->nblock; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy; i < s->nblock; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i < s->nblock; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i< s->nblock; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] s->nblock; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = ->nblock; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (nblock; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (unsigned ; i++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (unsigned chari++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (unsigned char) ++) {
566,568c566
<    yy[i] = (unsigned char) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (unsigned char) i) {
568c568
<    for (i = 0; i < s->nblock; i++) {
---
>    {
568,569c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
---
>    for unsigned char ll_i;
568,569c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
---
>    for (char ll_i;
568,569c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
---
>    for (i ll_i;
568,569c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
---
>    for (i = ;
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0AssertD ( wr <= i, "generateMTFValues(1)" );
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; ( wr <= i, "generateMTFValues(1)" );
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i wr <= i, "generateMTFValues(1)" );
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < <= i, "generateMTFValues(1)" );
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < si, "generateMTFValues(1)" );
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < s->, "generateMTFValues(1)" );
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < s->nblock"generateMTFValues(1)" );
568,570c568
<    for (i = 0; i < s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < s->nblock; );
(88.4 %, 23681 bytes)
568,571c568
<    {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>    = ptr[i]-1; if (j < 0) j += s->nblock;
569,571c569
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       ptr[i]-1; if (j < 0) j += s->nblock;
569,571c569
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       unsigned [i]-1; if (j < 0) j += s->nblock;
569,571c569
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       unsigned char i]-1; if (j < 0) j += s->nblock;
569,571c569
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       unsigned char ll_i]-1; if (j < 0) j += s->nblock;
570,571c570
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       -1; if (j < 0) j += s->nblock;
570,571c570
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD 1; if (j < 0) j += s->nblock;
570,571c570
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( ; if (j < 0) j += s->nblock;
570,571c570
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr if (j < 0) j += s->nblock;
570,571c570
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= (j < 0) j += s->nblock;
570,571c570
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= ij < 0) j += s->nblock;
570,571c570
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= i, < 0) j += s->nblock;
(88.5 %, 23620 bytes)
570d569
<       -1; if (j < 0) j += s->nblock;
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -= s->unseqToSeq[block[j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1s->unseqToSeq[block[j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; ->unseqToSeq[block[j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if unseqToSeq[block[j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if ([block[j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j block[j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < [j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0j]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0) ]];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0) j ];
570,571c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0) j += ;
570,572c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       -1; if (j < 0) j += sAssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
570,572c570
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       -1; if (j < 0) j += s->( ll_i  s-nInUse, "generateMTFValues(a)" );
(88.5 %, 23583 bytes)
570,571c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       s-nInUse, "generateMTFValues(a)" );
570,571c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i -nInUse, "generateMTFValues(a)" );
570,571c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = nInUse, "generateMTFValues(a)" );
570,571c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s, "generateMTFValues(a)" );
570,571c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->"generateMTFValues(a)" );
570,571c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->unseqToSeq);
570,571c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->unseqToSeq[;
570,573c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       ll_i = s->unseqToSeq[blockif (yy[0] == ll_i) { 
570,573c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       ll_i = s->unseqToSeq[block[(yy[0] == ll_i) { 
570,573c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       ll_i = s->unseqToSeq[block[jyy[0] == ll_i) { 
570,573c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       ll_i = s->unseqToSeq[block[j][0] == ll_i) { 
570,573c570
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       ll_i = s->unseqToSeq[block[j]]0] == ll_i) { 
571,573c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       ] == ll_i) { 
571,573c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       AssertD == ll_i) { 
571,573c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       AssertD ( ll_i) { 
571,573c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       AssertD ( ll_i  ) { 
571,573c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
---
>       AssertD ( ll_i  s{ 
571,574c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
---
>       AssertD ( ll_i  s-zPend++;
571,574c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
---
>       AssertD ( ll_i  s-nInUse++;
571,574c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
---
>       AssertD ( ll_i  s-nInUse, ;
571,575c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" } else {
571,575c571
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" )else {
573,575c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       {
573,577c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
---
>       if if (zPend > 0) 
573,577c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
---
>       if ((zPend > 0) 
573,577c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
---
>       if (yyzPend > 0) 
573,577c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
---
>       if (yy[> 0) 
573,577c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
---
>       if (yy[00) 
573,577c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
---
>       if (yy[0] ) 
573,578c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
---
>       if (yy[0] == {
573,579c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>       if (yy[0] == ll_iregister unsigned char  rtmp;
573,579c573
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>       if (yy[0] == ll_i) unsigned char  rtmp;
574,579c574
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>          char  rtmp;
574,579c574
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>          zPendrtmp;
575,579d574
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
(88.5 %, 23530 bytes)
573,578c573
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>       char* ryy_j;
575,578c575
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          * ryy_j;
575,578c575
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          if ryy_j;
575,578c575
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          if (;
575,579c575
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>          if (zPend register unsigned char  rll_i;
575,579c575
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>          if (zPend > unsigned char  rll_i;
575,579c575
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>          if (zPend > 0char  rll_i;
576,579c576
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>          rll_i;
577,579c577
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>             ;
577,580c577
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
---
>             register rtmp  = yy[1];
577,580c577
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
---
>             register unsigned = yy[1];
577,580c577
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
---
>             register unsigned char  yy[1];
577,580c577
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
---
>             register unsigned char  rtmp[1];
578,580c578
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
---
>             1];
578,580c578
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
---
>             register ];
578,580c578
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
---
>             register unsigned ;
578,581c578
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register unsigned charyy[1] = yy[0];
578,581c578
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register unsigned char* [1] = yy[0];
578,581c578
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register unsigned char* ryy_j1] = yy[0];
579,581c579
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             ] = yy[0];
579,581c579
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register = yy[0];
579,581c579
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register unsigned yy[0];
579,581c579
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register unsigned char  [0];
579,581c579
<             register unsigned char  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register unsigned char  rll_i0];
580,581c580
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             ];
580,581c580
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             rtmp  ;
580,582c580
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
---
>             rtmp  = ryy_j = &(yy[1]);
580,582c580
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
---
>             rtmp  = yy= &(yy[1]);
(88.5 %, 23496 bytes)
580,583c580
<             rtmp  ;
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             rtmp  while ( rll_i != rtmp ) ;
581,583c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ( rll_i != rtmp ) ;
581,583c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j rll_i != rtmp ) ;
581,583c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = != rtmp ) ;
581,583c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = &rtmp ) ;
581,583c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = &() ;
581,583c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = &(yy;
581,584c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[yy[0] = rtmp;
581,584c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[1[0] = rtmp;
581,584c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[1]0] = rtmp;
581,584c581
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[1])] = rtmp;
582,584c582
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             = rtmp;
582,584c582
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             rll_i rtmp;
582,584c582
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             rll_i = ;
(88.6 %, 23434 bytes)
581,583c581
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ryy_j - &(yy[0]);
581,583c581
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( - &(yy[0]);
581,583c581
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i &(yy[0]);
581,583c581
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i != (yy[0]);
581,583c581
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i != rtmp yy[0]);
581,583c581
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i != rtmp ) [0]);
582,583c582
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             0]);
582,583c582
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy]);
582,583c582
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy[);
582,583c582
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy[0;
582,584c582
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             yy[0] mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
582,584c582
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             yy[0] = [wr] = j+1; wr++; s->mtfFreq[j+1]++;
582,584c582
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             yy[0] = rtmpwr] = j+1; wr++; s->mtfFreq[j+1]++;
583,584c583
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             ] = j+1; wr++; s->mtfFreq[j+1]++;
(88.6 %, 23372 bytes)
581,582c581
<             ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             j+1; wr++; s->mtfFreq[j+1]++;
581,582c581
<             ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             ryy_j +1; wr++; s->mtfFreq[j+1]++;
581,582c581
<             ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             ryy_j - 1; wr++; s->mtfFreq[j+1]++;
(88.6 %, 23331 bytes)
581c581
<             j+1; wr++; s->mtfFreq[j+1]++;
---
>             ++;
581c581
<             j+1; wr++; s->mtfFreq[j+1]++;
---
>             j;
581,582c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>             j+}
581,584c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>             j+1}
581,585c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>             j+1; }
581,587c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wrif (zPend > 0) 
581,587c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++(zPend > 0) 
581,587c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++; zPend > 0) 
581,587c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++; s> 0) 
581,587c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++; s->0) 
581,587c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++; s->mtfFreq) 
581,589c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
581,589c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[j[wr] = EOB; wr++; s->mtfFreq[EOB]++;
581,589c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[j+wr] = EOB; wr++; s->mtfFreq[EOB]++;
581,589c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[j+1] = EOB; wr++; s->mtfFreq[EOB]++;
581,589c581
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[j+1]= EOB; wr++; s->mtfFreq[EOB]++;
(88.6 %, 23304 bytes)
581,589c581
<             j;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             jEOB; wr++; s->mtfFreq[EOB]++;
582,589c582
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>          ; wr++; s->mtfFreq[EOB]++;
584,589c584
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>       wr++; s->mtfFreq[EOB]++;
585,589c585
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    ++; s->mtfFreq[EOB]++;
587,589c587
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    ; s->mtfFreq[EOB]++;
587,589c587
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if s->mtfFreq[EOB]++;
587,589c587
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (->mtfFreq[EOB]++;
587,589c587
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (zPend mtfFreq[EOB]++;
587,589c587
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (zPend > [EOB]++;
587,589c587
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (zPend > 0EOB]++;
589c589
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    ]++;
589c589
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv++;
(88.6 %, 23264 bytes)
587,590c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
>    }
587,594c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; #define BZ_LESSER_ICOST  0
587,594c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; sdefine BZ_LESSER_ICOST  0
587,594c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; s->BZ_LESSER_ICOST  0
587,594c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; s->mtfFreq0
587,595c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
---
>    ; s->mtfFreq[#define BZ_GREATER_ICOST 5
587,595c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
---
>    ; s->mtfFreq[EOBdefine BZ_GREATER_ICOST 5
587,595c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
---
>    ; s->mtfFreq[EOB]BZ_GREATER_ICOST 5
587,595c587
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
---
>    ; s->mtfFreq[EOB]++5
589,619c589
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    #define RETURN(rrr)                               \
589,619c589
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    sdefine RETURN(rrr)                               \
589,619c589
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    s->RETURN(rrr)                               \
589,619c589
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    s->nMTF (rrr)                               \
589,619c589
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    s->nMTF = rrr)                               \
(88.7 %, 23225 bytes)
587,616c587
<    }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    \
591,617c591
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
---
> ;
591,619c591
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> ##define GET_BITS(lll,vvv,nnn)                     \
591,619c591
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define define GET_BITS(lll,vvv,nnn)                     \
(88.7 %, 23093 bytes)
591,594c591
< ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> s->state = lll;                      \
593,594c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> ->state = lll;                      \
593,594c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #state = lll;                      \
593,594c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define = lll;                      \
593,594c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define GET_BITSlll;                      \
593,594c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define GET_BITS(;                      \
593,594c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define GET_BITS(lll\
593,595c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define GET_BITS(lll,while (True) 
593,595c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define GET_BITS(lll,vvv(True) 
593,595c593
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define GET_BITS(lll,vvv,True) 
(88.8 %, 23033 bytes)
593,597c593
< #define GET_BITSlll;                      \
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define GET_BITSlllGET_BITS(lll,uuu,8)
593,597c593
< #define GET_BITSlll;                      \
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define GET_BITSlll;                      (lll,uuu,8)
594,597c594
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
>    lll,uuu,8)
(88.8 %, 22950 bytes)
593,595c593
< #define GET_BITSlll;                      (lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITSlll;                      \
593,596c593
< #define GET_BITSlll;                      (lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define GET_BITSlll;                      (GET_BITS(lll,uuu,1)
(88.8 %, 22887 bytes)
593,597c593
< #define GET_BITSlll;                      \
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_BITSlll;                      label2,lval)           \
594,597c594
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>    ,lval)           \
594,597c594
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>    GET_BITSlval)           \
(88.9 %, 22833 bytes)
593,617c593
< #define GET_BITSlll;                      label2,lval)           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( void )
---
> #define GET_BITSlll;                      ( void )
593,617c593
< #define GET_BITSlll;                      label2,lval)           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( void )
---
> #define GET_BITSlll;                      label2void )
593,617c593
< #define GET_BITSlll;                      label2,lval)           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( void )
---
> #define GET_BITSlll;                      label2,)
(88.9 %, 22723 bytes)
593,605c593
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
---
> #define GET_BITSlll;                      (   void )
596,607d595
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
596,607d595
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
596,607d595
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
599,608d598
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
< static
599,608d598
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
< static
599,609c599
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
---
> int default_bzfree (  void )
599,609c599
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
---
> int bz_config_ok (  void )
605,614d604
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
605,614d604
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
605,614d604
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
605,614d604
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
605,614d604
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
605,615c605
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
---
> voidprepare_new_block ( void )
605,615c605
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
---
> void* ( void )
605,615c605
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
---
> void* default_bzalloc void )
605,615c605
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
---
> void* default_bzalloc (   )
605,616c605
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
---
> void* default_bzalloc (   void ;
606,619d605
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
608,620d607
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
609,621c609
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> init_RL ( void )
609,621c609
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> void ( void )
609,621c609
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> void default_bzfree void )
609,621c609
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> void default_bzfree (  )
609,622c609
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
< ;
---
> void default_bzfree (  void ;
610,624d609
< ;
< 
< 
< 
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
< ;
< 
< 
614,625d613
< static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
< ;
< 
< 
< static
(89.0 %, 22640 bytes)
609,620c609
< void default_bzfree (  )
< ;
< 
< 
< static
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree (  bz_stream* strm, 
610,620c610
< ;
< 
< 
< static
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> * strm, 
613,620c613
< static
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> strm, 
614,620c614
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> , 
614,621c614
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool int        blockSize100k,
614,621c614
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL blockSize100k,
614,621c614
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ( ,
614,622c614
< Bool isempty_RL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> Bool isempty_RL ( void int        verbosity,
615,622c615
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> verbosity,
619,622c619
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> ,
619,623c619
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int int        workFactor )
619,623c619
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_APIworkFactor )
619,623c619
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API()
619,624c619
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
> int BZ_API(BZ2_bzCompressInit{
620,625c620
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     Int32   n;
620,625c620
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( n;
620,625c620
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream;
620,626c620
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                     ( bz_stream* EState* s;
620,626c620
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                     ( bz_stream* strm* s;
621,626c621
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      s;
621,626c621
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        ;
621,628c621
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        blockSize100kif (!0) return BZ_CONFIG_ERROR;
622,628c622
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      (!0) return BZ_CONFIG_ERROR;
622,628c622
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        !0) return BZ_CONFIG_ERROR;
622,628c622
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        verbosity0) return BZ_CONFIG_ERROR;
623,628c623
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ) return BZ_CONFIG_ERROR;
623,628c623
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        return BZ_CONFIG_ERROR;
623,628c623
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        workFactor BZ_CONFIG_ERROR;
624,628c624
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
> ;
625,629d624
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
625,630c625
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    Int32   (strm == NULL || 
625,630c625
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    Int32   nstrm == NULL || 
626,630c626
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    == NULL || 
626,630c626
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    EStateNULL || 
626,630c626
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    EState* || 
626,631c626
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    EState* sblockSize100k < 1 || blockSize100k > 9 ||
628,631c628
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    < 1 || blockSize100k > 9 ||
628,631c628
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if 1 || blockSize100k > 9 ||
628,631c628
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (|| blockSize100k > 9 ||
628,631c628
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!blockSize100k > 9 ||
628,631c628
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!0> 9 ||
(89.0 %, 22560 bytes)
628,632c628
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    if (!if (workFactor == 0) workFactor = 0;
628,632c628
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    if (!blockSize100k (workFactor == 0) workFactor = 0;
628,632c628
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    if (!blockSize100k > workFactor == 0) workFactor = 0;
628,632c628
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    if (!blockSize100k > 9 == 0) workFactor = 0;
629,632c629
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>        0) workFactor = 0;
(89.0 %, 22478 bytes)
628,629c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > ) strm->bzalloc = default_bzalloc;
628,629c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor strm->bzalloc = default_bzalloc;
628,629c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == ->bzalloc = default_bzalloc;
628,629c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0bzalloc = default_bzalloc;
628,629c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0) = default_bzalloc;
628,629c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0) workFactor default_bzalloc;
628,629c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0) workFactor = ;
628,630c628
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (!blockSize100k > workFactor == 0) workFactor = 0if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    (strm->bzfree == NULL) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strmbzfree == NULL) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->== NULL) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc NULL) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == ) strm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULLstrm->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) ->bzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strmbzfree = default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->= default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->bzalloc default_bzfree;
629,630c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->bzalloc = ;
629,632c629
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzallocs = BZALLOC( sizeof(EState) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    = BZALLOC( sizeof(EState) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if BZALLOC( sizeof(EState) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (( sizeof(EState) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strmsizeof(EState) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->(EState) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree EState) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree == ) );
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree == NULL);
630,632c630
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree == NULL) ;
(89.1 %, 22413 bytes)
630,632c630
<    if (strm->bzfree == NULL);
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    if (strm->bzfree == NULLstrm;
631,632d630
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
631,633d630
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
(89.1 %, 22355 bytes)
630,634c630
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    if (strm->bzfree == NULL)ftab = NULL;
632,634c632
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    = NULL;
632,634c632
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    sNULL;
632,634c632
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    s->;
632,636c632
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
---
>    s->arr1 n       = 0 * blockSize100k;
632,636c632
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
---
>    s->arr1 = = 0 * blockSize100k;
632,636c632
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
---
>    s->arr1 = NULL0 * blockSize100k;
633,636c633
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
---
>    * blockSize100k;
633,636c633
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
---
>    sblockSize100k;
633,636c633
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
---
>    s->;
633,637c633
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr2 s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
633,637c633
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr2 = ->arr1 = BZALLOC( n                  * sizeof(UInt32) );
633,637c633
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr2 = NULLarr1 = BZALLOC( n                  * sizeof(UInt32) );
634,637c634
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    = BZALLOC( n                  * sizeof(UInt32) );
634,637c634
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32) );
634,637c634
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->( n                  * sizeof(UInt32) );
634,637c634
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab n                  * sizeof(UInt32) );
634,637c634
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab = * sizeof(UInt32) );
634,637c634
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab = NULLsizeof(UInt32) );
636,637c636
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    (UInt32) );
636,637c636
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       UInt32) );
636,637c636
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       = ) );
636,637c636
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       = 0 );
636,637c636
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       = 0 * ;
636,638c636
<    n       = 0 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    n       = 0 * blockSize100ks->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
637,638c637
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
637,638c637
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sarr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
637,638c637
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->= BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
637,638c637
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr1 BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(89.1 %, 22294 bytes)
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  +BZ_N_OVERSHOOT) * sizeof(UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * BZ_N_OVERSHOOT) * sizeof(UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof) * sizeof(UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(* sizeof(UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32sizeof(UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32) (UInt32) );
634,635c634
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32) )UInt32) );
635c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ) );
635c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s);
635c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->;
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 s->ftab = BZALLOC( 7              * sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = ->ftab = BZALLOC( 7              * sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOCftab = BZALLOC( 7              * sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( = BZALLOC( 7              * sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (BZALLOC( 7              * sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n( 7              * sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+7              * sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT* sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) sizeof(UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * (UInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeofUInt32) );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof() );
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32);
635,636c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
635,638c635
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) )if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    ss->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = == NULL || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOCNULL || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( || s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              s->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * ->arr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeofarr2 == NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeof(== NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeof(UInt32NULL || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeof(UInt32) || s->ftab == NULL) 
636,638c636
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeof(UInt32) )s->ftab == NULL) 
638c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    ->ftab == NULL) 
638c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ftab == NULL) 
638c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (== NULL) 
638c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (sNULL) 
638c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->) 
638,640c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 s->blockNo           = 0;
638,640c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == ->blockNo           = 0;
638,640c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL blockNo           = 0;
638,640c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || = 0;
638,640c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s0;
638,640c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->;
638,641c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 s->state             = BZ_S_INPUT;
638,641c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == ->state             = BZ_S_INPUT;
638,641c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL state             = BZ_S_INPUT;
638,641c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || = BZ_S_INPUT;
638,641c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || sBZ_S_INPUT;
638,641c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->;
638,642c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab s->mode              = BZ_M_RUNNING;
638,642c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == ->mode              = BZ_M_RUNNING;
638,642c638
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULLmode              = BZ_M_RUNNING;
640,642c640
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    = BZ_M_RUNNING;
640,642c640
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    sBZ_M_RUNNING;
640,642c640
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->;
640,643c640
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->blockNo           s->combinedCRC       = 0;
640,643c640
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->blockNo           = ->combinedCRC       = 0;
640,643c640
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->blockNo           = 0combinedCRC       = 0;
641,643c641
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    = 0;
641,643c641
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s0;
641,643c641
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->;
641,644c641
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->state             s->blockSize100k     = blockSize100k;
641,644c641
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->state             = ->blockSize100k     = blockSize100k;
641,644c641
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->state             = BZ_S_INPUTblockSize100k     = blockSize100k;
642,644c642
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    = blockSize100k;
642,644c642
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    sblockSize100k;
642,644c642
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->;
642,645c642
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s->mode              s->nblockMAX         = 0 * blockSize100k - 9;
642,645c642
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s->mode              = ->nblockMAX         = 0 * blockSize100k - 9;
642,645c642
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s->mode              = BZ_M_RUNNINGnblockMAX         = 0 * blockSize100k - 9;
643,645c643
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    = 0 * blockSize100k - 9;
643,645c643
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s0 * blockSize100k - 9;
643,645c643
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s->* blockSize100k - 9;
643,645c643
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s->combinedCRC       blockSize100k - 9;
643,645c643
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s->combinedCRC       = - 9;
643,645c643
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    s->combinedCRC       = 09;
644,645c644
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 0 * blockSize100k - 9;
---
>    ;
(89.2 %, 22206 bytes)
643,647c643
<    s->combinedCRC       = - 9;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
643,647c643
<    s->combinedCRC       = - 9;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->combinedCRC       = - ->block             = (unsigned char*)s->arr2;
643,647c643
<    s->combinedCRC       = - 9;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->combinedCRC       = - 9block             = (unsigned char*)s->arr2;
644,647c644
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    = (unsigned char*)s->arr2;
644,647c644
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s(unsigned char*)s->arr2;
644,647c644
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->unsigned char*)s->arr2;
644,647c644
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->verbosity         char*)s->arr2;
644,647c644
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->verbosity         = *)s->arr2;
644,647c644
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->verbosity         = verbosity)s->arr2;
645,647c645
<    s->workFactor        = workFactor;
< 
<    s->block             = (unsigned char*)s->arr2;
---
>    s->arr2;
(89.2 %, 22122 bytes)
643,644c643
<    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->combinedCRC       = mtfv              = (unsigned short*)s->arr1;
643,644c643
<    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->combinedCRC       = s= (unsigned short*)s->arr1;
643,644c643
<    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->combinedCRC       = s->(unsigned short*)s->arr1;
643,644c643
<    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->combinedCRC       = s->block             unsigned short*)s->arr1;
643,644c643
<    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->combinedCRC       = s->block             = short*)s->arr1;
643,644c643
<    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->combinedCRC       = s->block             = (*)s->arr1;
643,644c643
<    s->combinedCRC       = s->block             = (unsigned char*)s->arr2;
<    s->mtfv              = (unsigned short*)s->arr1;
---
>    s->combinedCRC       = s->block             = (unsigned )s->arr1;
(89.2 %, 22051 bytes)
643,644c643
<    s->combinedCRC       = s= (unsigned short*)s->arr1;
<    s->zbits             = NULL;
---
>    s->combinedCRC       = s;
643,645c643
<    s->combinedCRC       = s= (unsigned short*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       = s= s->ptr               = (UInt32*)s->arr1;
(89.3 %, 21993 bytes)
643,646c643
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->combinedCRC       = sstate          = s;
644,646c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    = s;
644,646c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    ss;
644,646c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->;
644,647c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               strm->total_in_lo32  = 0;
644,647c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = ->total_in_lo32  = 0;
644,647c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (total_in_lo32  = 0;
644,647c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32= 0;
644,647c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*0;
644,647c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*);
644,648c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    s->ptr               = (UInt32*)sstrm->total_in_hi32  = 0;
644,648c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    s->ptr               = (UInt32*)s->->total_in_hi32  = 0;
644,648c644
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    s->ptr               = (UInt32*)s->arr1total_in_hi32  = 0;
646,648c646
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    = 0;
646,648c646
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strm0;
646,648c646
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strm->;
646,649c646
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->state          strm->total_out_lo32 = 0;
646,649c646
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->state          = ->total_out_lo32 = 0;
646,649c646
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->state          = stotal_out_lo32 = 0;
647,649c647
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    = 0;
647,649c647
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm0;
647,649c647
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->;
647,650c647
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_lo32  strm->total_out_hi32 = 0;
647,650c647
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_lo32  = ->total_out_hi32 = 0;
647,650c647
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_lo32  = 0total_out_hi32 = 0;
648,650c648
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    = 0;
648,650c648
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm0;
648,650c648
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->;
648,651c648
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
---
>    strm->total_in_hi32  ;
648,652c648
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
---
>    strm->total_in_hi32  = ;
648,653c648
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
---
>    strm->total_in_hi32  = 0return BZ_OK;
649,653c649
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
---
>    BZ_OK;
(89.3 %, 21927 bytes)
648,676c648
<    strm->total_in_hi32  ;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>    strm->total_in_hi32  static
649,677c649
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
---
>    Bool handle_compress ( void )
650,677c650
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
---
>    handle_compress ( void )
650,677c650
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
---
>    return ( void )
650,677c650
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
---
>    return BZ_OKvoid )
651,677c651
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
---
> )
663,677d662
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(BZ2_bzCompress) ( bz_stream *strm, int action )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(BZ2_bzCompress) ( bz_stream *strm, int action )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs) ( bz_stream *strm, int action )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,( bz_stream *strm, int action )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0bz_stream *strm, int action )
663,682c663
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0)               *strm, int action )
676,682c676
< static
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> strm, int action )
677,682c677
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> , int action )
677,682c677
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool int action )
677,682c677
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress action )
677,682c677
< Bool handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress ( )
(89.3 %, 21826 bytes)
663,670c663
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> EState* s;
667,670c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> * s;
667,670c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int s;
667,670c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(if (strm == NULL) return BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress(strm == NULL) return BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) strm == NULL) return BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( == NULL) return BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream NULL) return BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *) return BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strmreturn BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, BZ_PARAM_ERROR;
667,671c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int ;
667,672c667
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action s = strm->state;
668,672c668
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
670,672c670
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    strm->state;
670,672c670
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState->state;
670,672c670
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState* state;
671,672d670
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
671,672d670
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
671,672d670
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(89.4 %, 21762 bytes)
670,672c670
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    EState* s!= strm) return BZ_PARAM_ERROR;
671,672c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
671,672c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
671,672c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
671,672c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
671,672c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
671,674c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
---
>    if (s == NULLpreswitch:
671,674c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
---
>    if (s == NULL) :
671,675c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (s == NULL) return switch (s->mode) 
671,675c671
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (s == NULL) return BZ_PARAM_ERROR(s->mode) 
672,675c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    s->mode) 
672,675c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if ->mode) 
672,675c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (mode) 
672,675c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (s) 
672,676c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (s->return BZ_OK; 
672,676c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (s->strm BZ_OK; 
672,676c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (s->strm != ; 
672,677c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
>    if (s->strm != strm}
672,681c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    if (s->strm != strm) int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
672,681c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    if (s->strm != strm) return BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
672,681c672
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    if (s->strm != strm) return BZ_PARAM_ERROR(BZ2_bzCompressEnd)  ( bz_stream *strm )
674,681c674
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    BZ2_bzCompressEnd)  ( bz_stream *strm )
674,681c674
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    preswitch)  ( bz_stream *strm )
675,681c675
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    ( bz_stream *strm )
675,681c675
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    switch bz_stream *strm )
675,681c675
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    switch (*strm )
675,681c675
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    switch (sstrm )
675,681c675
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    switch (s->)
(89.4 %, 21690 bytes)
672,679c672
<    if (s) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
---
>    if (s{
673,679d672
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
673,680c673
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
>    return * s;
673,680c673
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
>    return BZ_OKs;
674,680c674
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
> ;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> if (strm == NULL) return BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int (strm == NULL) return BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIstrm == NULL) return BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(== NULL) return BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEndNULL) return BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ) return BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( return BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream BZ_PARAM_ERROR;
678,681c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *;
678,682c678
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm s = strm->state;
679,682c679
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
680,682c680
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    strm->state;
680,682c680
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState->state;
680,682c680
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState* state;
(89.5 %, 21620 bytes)
675,676d674
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
675,676d674
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
675,676d674
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(89.5 %, 21556 bytes)
674,676c674
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> != strm) return BZ_PARAM_ERROR;
675,676c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
675,676c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
675,676c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
675,676c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
675,676c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
675,678c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULLif (s->arr1 != NULL) BZFREE(s->arr1);
675,678c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULL) (s->arr1 != NULL) BZFREE(s->arr1);
675,678c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULL) return s->arr1 != NULL) BZFREE(s->arr1);
675,678c675
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULL) return BZ_PARAM_ERROR->arr1 != NULL) BZFREE(s->arr1);
676,678c676
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    arr1 != NULL) BZFREE(s->arr1);
676,678c676
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if != NULL) BZFREE(s->arr1);
676,678c676
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (NULL) BZFREE(s->arr1);
676,678c676
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s) BZFREE(s->arr1);
(89.5 %, 21497 bytes)
676,677c676
<    if (NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (NULL) BZFREE(s->arr2);
676,677c676
<    if (NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (NULL) BZFREE(s->arr2);
(89.5 %, 21456 bytes)
676,677c676
<    if (NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (NULL) BZFREE(s->ftab);
676,677c676
<    if (NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (NULL) BZFREE(s->ftab);
(89.6 %, 21415 bytes)
676,677c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (;
676,679c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULLstrm->state = NULL;   
676,679c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) ->state = NULL;   
676,679c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREEstate = NULL;   
676,679c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREE(= NULL;   
676,679c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREE(sNULL;   
676,679c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREE(s->;   
676,681c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ftabreturn BZ_OK;
676,681c676
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ftab)BZ_OK;
677,681c677
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    ;
677,682c677
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
>    BZFREE}
677,690c677
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(int BZ_API(BZ2_bzDecompressInit) 
677,690c677
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strmBZ_API(BZ2_bzDecompressInit) 
677,690c677
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strm->(BZ2_bzDecompressInit) 
677,690c677
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strm->stateBZ2_bzDecompressInit) 
677,690c677
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strm->state)) 
679,691c679
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    ( bz_stream* strm, 
679,691c679
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strmbz_stream* strm, 
679,691c679
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->* strm, 
679,691c679
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state strm, 
679,691c679
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = , 
(89.6 %, 21351 bytes)
677,689c677
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>    int        small )
678,689c678
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> small )
686,689c686
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> )
686,690c686
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int {
686,691c686
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_APIDState* s;
686,691c686
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_API(* s;
686,691c686
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompressInits;
687,691c687
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ;
687,693c687
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( if (!0) return BZ_CONFIG_ERROR;
687,693c687
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream(!0) return BZ_CONFIG_ERROR;
687,693c687
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream* !0) return BZ_CONFIG_ERROR;
687,693c687
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream* strm0) return BZ_CONFIG_ERROR;
688,693c688
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        ) return BZ_CONFIG_ERROR;
688,693c688
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        return BZ_CONFIG_ERROR;
688,693c688
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        verbosityBZ_CONFIG_ERROR;
689,693c689
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        ;
689,695c689
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>                        int        if (strm == NULL) return BZ_PARAM_ERROR;
689,695c689
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>                        int        small (strm == NULL) return BZ_PARAM_ERROR;
690,695c690
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> strm == NULL) return BZ_PARAM_ERROR;
691,695c691
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    == NULL) return BZ_PARAM_ERROR;
691,695c691
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DStateNULL) return BZ_PARAM_ERROR;
691,695c691
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DState* ) return BZ_PARAM_ERROR;
691,695c691
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DState* sreturn BZ_PARAM_ERROR;
693,695c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
693,695c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ;
693,696c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (if (small != 0 && small != 1) return BZ_PARAM_ERROR;
693,696c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!(small != 0 && small != 1) return BZ_PARAM_ERROR;
693,696c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0small != 0 && small != 1) return BZ_PARAM_ERROR;
693,696c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) != 0 && small != 1) return BZ_PARAM_ERROR;
693,696c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) return 0 && small != 1) return BZ_PARAM_ERROR;
693,696c693
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR&& small != 1) return BZ_PARAM_ERROR;
695,696c695
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    small != 1) return BZ_PARAM_ERROR;
695,696c695
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if != 1) return BZ_PARAM_ERROR;
695,696c695
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (1) return BZ_PARAM_ERROR;
(89.6 %, 21290 bytes)
693,694d692
<    BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
693,695c693
<    BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR(verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
694,695c694
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
694,695c694
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if < 0 || verbosity > 4) return BZ_PARAM_ERROR;
694,695c694
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (0 || verbosity > 4) return BZ_PARAM_ERROR;
(89.6 %, 21215 bytes)
693,695c693
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
693,695c693
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
693,695c693
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc == NULL) strm->bzalloc = default_bzalloc;
693,695c693
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
693,695c693
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (verbosity < NULL) strm->bzalloc = default_bzalloc;
(89.7 %, 21148 bytes)
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity NULL) strm->bzfree = default_bzfree;
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == ) strm->bzfree = default_bzfree;
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULLstrm->bzfree = default_bzfree;
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) ->bzfree = default_bzfree;
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strmbzfree = default_bzfree;
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strm->= default_bzfree;
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strm->bzalloc default_bzfree;
693,694c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strm->bzalloc = ;
693,696c693
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (verbosity == NULL) strm->bzalloc = default_bzallocs = BZALLOC( sizeof(DState) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    = BZALLOC( sizeof(DState) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if BZALLOC( sizeof(DState) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (( sizeof(DState) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strmsizeof(DState) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->(DState) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree DState) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == ) );
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == NULL);
694,696c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == NULL) ;
694,697c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (strm->bzfree == NULL) strmif (s == NULL) return BZ_MEM_ERROR;
694,697c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (strm->bzfree == NULL) strm->(s == NULL) return BZ_MEM_ERROR;
694,697c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (strm->bzfree == NULL) strm->bzfree s == NULL) return BZ_MEM_ERROR;
694,697c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (strm->bzfree == NULL) strm->bzfree = == NULL) return BZ_MEM_ERROR;
694,697c694
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (strm->bzfree == NULL) strm->bzfree = default_bzfreeNULL) return BZ_MEM_ERROR;
696,697c696
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    ) return BZ_MEM_ERROR;
696,697c696
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s return BZ_MEM_ERROR;
696,697c696
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = BZ_MEM_ERROR;
(89.7 %, 21083 bytes)
694,696c694
<    if (strm->bzfree == NULL);
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    if (strm->bzfree == NULLstrm;
695,696d694
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
695,696d694
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
(89.7 %, 21008 bytes)
694,697c694
<    if (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    if (strm->bzfree == NULL)bsLive                = 0;
695,697c695
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    = 0;
695,697c695
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm0;
695,697c695
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->;
695,698c695
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    strm->state              s->bsBuff                = 0;
695,698c695
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    strm->state              = ->bsBuff                = 0;
695,698c695
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    strm->state              = sbsBuff                = 0;
696,698c696
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    = 0;
696,698c696
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s0;
696,698c696
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->;
696,699c696
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 s->calculatedCombinedCRC = 0;
696,699c696
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 = ->calculatedCombinedCRC = 0;
696,699c696
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 = BZ_X_MAGIC_1calculatedCombinedCRC = 0;
697,699c697
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    = 0;
697,699c697
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s0;
697,699c697
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->;
697,700c697
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                strm->total_in_lo32      = 0;
697,700c697
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                = ->total_in_lo32      = 0;
697,700c697
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                = 0total_in_lo32      = 0;
698,700c698
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    = 0;
698,700c698
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s0;
698,700c698
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->;
698,701c698
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                strm->total_in_hi32      = 0;
698,701c698
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                = ->total_in_hi32      = 0;
698,701c698
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                = 0total_in_hi32      = 0;
699,701c699
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    = 0;
699,701c699
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s0;
699,701c699
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->;
699,702c699
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    s->calculatedCombinedCRC strm->total_out_lo32     = 0;
699,702c699
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    s->calculatedCombinedCRC = ->total_out_lo32     = 0;
699,702c699
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    s->calculatedCombinedCRC = 0total_out_lo32     = 0;
700,702c700
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    = 0;
700,702c700
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strm0;
700,702c700
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strm->;
700,703c700
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_lo32      strm->total_out_hi32     = 0;
700,703c700
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_lo32      = ->total_out_hi32     = 0;
700,703c700
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_lo32      = 0total_out_hi32     = 0;
701,703c701
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    = 0;
701,703c701
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm0;
701,703c701
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->;
701,704c701
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_in_hi32      s->smallDecompress       = (Bool)small;
701,704c701
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_in_hi32      = ->smallDecompress       = (Bool)small;
701,704c701
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_in_hi32      = 0smallDecompress       = (Bool)small;
702,704c702
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    = (Bool)small;
702,704c702
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm(Bool)small;
702,704c702
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->Bool)small;
702,704c702
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_out_lo32     )small;
702,704c702
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_out_lo32     = small;
703,704d702
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
(89.8 %, 20936 bytes)
702,705c702
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    strm->total_out_lo32     = ->tt                    = NULL;
702,705c702
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    strm->total_out_lo32     = smalltt                    = NULL;
703,705c703
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    = NULL;
703,705c703
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    sNULL;
703,705c703
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    s->;
703,706c703
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll4                   s->currBlockNo           = 0;
703,706c703
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll4                   = ->currBlockNo           = 0;
703,706c703
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll4                   = NULLcurrBlockNo           = 0;
704,706c704
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    = 0;
704,706c704
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s0;
704,706c704
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->;
704,707c704
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->ll16                  s->verbosity             = verbosity;
704,707c704
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->ll16                  = ->verbosity             = verbosity;
704,707c704
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->ll16                  = NULLverbosity             = verbosity;
705,707c705
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    = verbosity;
705,707c705
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    sverbosity;
705,707c705
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->;
705,709c705
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
---
>    s->tt                    return BZ_OK;
705,709c705
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
---
>    s->tt                    = BZ_OK;
706,709d705
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
(89.8 %, 20845 bytes)
705,722c705
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
---
>    s->tt                    = )
706,723d705
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
706,726d705
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
710,727c710
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
711,727c711
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> (BZ2_bzDecompress) ( bz_stream *strm )
(89.9 %, 20731 bytes)
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> (strm == NULL) return BZ_PARAM_ERROR;
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> BZ_APIstrm == NULL) return BZ_PARAM_ERROR;
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(== NULL) return BZ_PARAM_ERROR;
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompressNULL) return BZ_PARAM_ERROR;
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) ) return BZ_PARAM_ERROR;
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) ( return BZ_PARAM_ERROR;
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) ( bz_stream BZ_PARAM_ERROR;
710,713c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) ( bz_stream *;
710,714c710
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> BZ_API(BZ2_bzDecompress) ( bz_stream *strm s = strm->state;
711,714c711
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
712,714c712
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    strm->state;
712,714c712
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState->state;
712,714c712
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState* state;
713,714d712
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
713,714d712
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
713,714d712
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(89.9 %, 20667 bytes)
712,714c712
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    DState* s!= strm) return BZ_PARAM_ERROR;
713,714c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
713,714c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
713,714c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
713,714c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
713,714c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
713,716c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULLwhile (True) 
713,716c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULL) (True) 
713,716c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULL) return True) 
713,716c713
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULL) return BZ_PARAM_ERROR) 
714,717d713
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
714,718c714
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 1 );
---
>    if ( 0, 1 );
714,718c714
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 1 );
---
>    if (0, 1 );
(89.9 %, 20601 bytes)
714,721c714
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    )  ( bz_stream *strm )
714,721c714
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( bz_stream *strm )
714,721c714
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( bz_stream *strm )
714,721c714
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( 0*strm )
714,721c714
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( 0, strm )
714,721c714
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( 0, 1 )
714,722c714
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
---
>    AssertH ( 0, 1 ){
716,722d715
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
716,723c716
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
>    return * s;
716,723c716
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
>    return 0s;
717,723c717
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
> ;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> if (strm == NULL) return BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int (strm == NULL) return BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIstrm == NULL) return BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(== NULL) return BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEndNULL) return BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ) return BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( return BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream BZ_PARAM_ERROR;
721,724c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *;
721,725c721
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm s = strm->state;
722,725c722
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
723,725c723
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    strm->state;
723,725c723
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState->state;
723,725c723
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState* state;
(90.0 %, 20529 bytes)
718,719d717
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
718,719d717
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(90.0 %, 20465 bytes)
717,719c717
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> != strm) return BZ_PARAM_ERROR;
718,719c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
718,719c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
718,719c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
718,719c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
718,719c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
718,721c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULLif (s->tt   != NULL) BZFREE(s->tt);
718,721c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULL) (s->tt   != NULL) BZFREE(s->tt);
718,721c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULL) return s->tt   != NULL) BZFREE(s->tt);
718,721c718
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULL) return BZ_PARAM_ERROR->tt   != NULL) BZFREE(s->tt);
719,721c719
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    tt   != NULL) BZFREE(s->tt);
719,721c719
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if != NULL) BZFREE(s->tt);
719,721c719
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (NULL) BZFREE(s->tt);
719,721c719
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s) BZFREE(s->tt);
(90.0 %, 20406 bytes)
719,720c719
<    if (NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (NULL) BZFREE(s->ll16);
719,720c719
<    if (NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (NULL) BZFREE(s->ll16);
(90.1 %, 20367 bytes)
719,720c719
<    if (NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (NULL) BZFREE(s->ll4);
719,720c719
<    if (NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (NULL) BZFREE(s->ll4);
(90.1 %, 20326 bytes)
719,721c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
---
>    if (;
719,722c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULLstrm->state = NULL;
719,722c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) ->state = NULL;
719,722c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREEstate = NULL;
719,722c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREE(= NULL;
719,722c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREE(sNULL;
719,722c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREE(s->;
719,724c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ll4return BZ_OK;
719,724c719
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ll4)BZ_OK;
721,724c721
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    ;
721,725c721
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
>    BZFREE}
721,732c721
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE(#define BZ_SETERR(e)                    \
721,732c721
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE(strmdefine BZ_SETERR(e)                    \
721,732c721
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE(strm->BZ_SETERR(e)                    \
721,732c721
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE(strm->state(e)                    \
721,732c721
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE(strm->state)e)                    \
722,732c722
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    )                    \
722,732c722
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    strm\
722,735c722
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
---
>    strm->typedef 
722,736c722
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
>    strm->state struct {
722,736c722
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
>    strm->state = {
722,737c722
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    strm->state = NULLFILE*     handle;
(90.1 %, 20266 bytes)
722,734d721
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
722,735c722
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> char      buf[BZ_MAX_UNUSED];
729,735c729
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> buf[BZ_MAX_UNUSED];
729,735c729
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #[BZ_MAX_UNUSED];
729,735c729
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_MAX_UNUSED];
729,735c729
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR];
729,735c729
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(;
729,736c729
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define BZ_SETERR(eInt32     bufN;
729,736c729
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define BZ_SETERR(e)                    bufN;
732,736c732
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> ;
733,737c733
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    Bool      writing;
733,737c733
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    struct writing;
734,737c734
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       ;
734,738c734
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILEbz_stream strm;
734,738c734
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE*     strm;
735,738d734
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
735,738d734
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
735,739c735
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       char      lastErr;
735,739c735
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       char      buf;
735,740c735
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       char      buf[Bool      initialisedOk;
735,740c735
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       char      buf[BZ_MAX_UNUSEDinitialisedOk;
736,740d735
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
736,741c736
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
736,742c736
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Int32     bzFile;
737,742d736
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
737,750c737
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
737,750c737
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      * BZ_API(BZ2_bzWriteOpen) 
737,750c737
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      writingBZ_API(BZ2_bzWriteOpen) 
738,750c738
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
738,750c738
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ2_bzWriteOpen) 
738,750c738
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm) 
739,751c739
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
739,751c739
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     int*  bzerror,      
739,751c739
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr*  bzerror,      
740,751c740
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       bzerror,      
740,751c740
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      ,      
740,752c740
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Bool      initialisedOkFILE* f, 
741,752c741
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    * f, 
742,752c742
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    f, 
742,752c742
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile, 
750,753c750
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> int   blockSize100k, 
750,753c750
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILEblockSize100k, 
750,753c750
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* , 
750,754c750
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_APIint   verbosity,
750,754c750
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(verbosity,
750,754c750
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpen,
751,755c751
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     int   workFactor )
751,755c751
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( workFactor )
751,755c751
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int)
751,756c751
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                     ( int*  {
751,757c751
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                     ( int*  bzerrorInt32   ret;
752,757c752
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ret;
752,757c752
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE;
752,758c752
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       FILE* bzFile* bzf = NULL;
752,758c752
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       FILE* f* bzf = NULL;
753,758c753
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzf = NULL;
753,758c753
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   = NULL;
753,758c753
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100kNULL;
754,758c754
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       ;
754,760c754
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   BZ_SETERR(BZ_OK);
754,760c754
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   verbosity(BZ_OK);
755,760c755
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       BZ_OK);
755,760c755
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   );
755,760c755
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor ;
756,762c756
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
> if (f == NULL ||
757,762c757
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    (f == NULL ||
757,762c757
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   f == NULL ||
757,762c757
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   ret== NULL ||
758,762c758
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    NULL ||
758,762c758
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile||
758,763c758
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* (blockSize100k < 1 || blockSize100k > 9) ||
758,763c758
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf blockSize100k < 1 || blockSize100k > 9) ||
758,763c758
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf = < 1 || blockSize100k > 9) ||
758,763c758
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf = NULL1 || blockSize100k > 9) ||
760,763c760
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    || blockSize100k > 9) ||
760,763c760
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERRblockSize100k > 9) ||
760,763c760
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(> 9) ||
760,763c760
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OK9) ||
760,763c760
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OK)) ||
762,763c762
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ||
762,764c762
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>    if (workFactor < 0 || workFactor > 0) ||
762,764c762
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>    if (workFactor < 0 || workFactor > 0) ||
762,764c762
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>    if (f < 0 || workFactor > 0) ||
762,764c762
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>    if (f == 0 || workFactor > 0) ||
762,764c762
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>    if (f == NULL || workFactor > 0) ||
763,764c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>        workFactor > 0) ||
763,764c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>        (> 0) ||
763,764c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>        (blockSize100k 0) ||
763,764c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>        (blockSize100k < ) ||
763,764c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
---
>        (blockSize100k < 1 ||
763,765c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || (verbosity < 0 || verbosity > 4))
763,765c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k verbosity < 0 || verbosity > 4))
763,765c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > < 0 || verbosity > 4))
763,765c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
763,765c763
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > 9) || verbosity > 4))
764,765c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        verbosity > 4))
764,765c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (> 4))
764,765c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor 4))
764,765c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < ))
764,765c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < 0 )
764,766c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
---
>        (workFactor < 0 || ;
764,768c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor if (ferror(f))
764,768c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > (ferror(f))
764,768c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > 0ferror(f))
764,768c764
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > 0) (f))
765,768c765
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        f))
765,768c765
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        ())
(90.1 %, 20196 bytes)
763,769c763
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 bzf = malloc ( sizeof(bzFile) );
763,769c763
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || = malloc ( sizeof(bzFile) );
763,769c763
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity malloc ( sizeof(bzFile) );
763,769c763
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > ( sizeof(bzFile) );
763,769c763
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4sizeof(bzFile) );
763,769c763
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4)(bzFile) );
764,769c764
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>       bzFile) );
766,769c766
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    ) );
766,769c766
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if );
766,769c766
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if (;
766,770c766
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferrorif (bzf == NULL)
766,770c766
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferror((bzf == NULL)
766,770c766
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferror(fbzf == NULL)
766,770c766
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferror(f)== NULL)
767,770c767
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>       NULL)
769,770c769
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    )
769,771c769
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
---
>    bzf ;
(90.2 %, 20138 bytes)
766,771c766
<    if (ferror(f)== NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (ferror(f)bzf->bufN          = 0;
766,771c766
<    if (ferror(f)== NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (ferror(f)== ->bufN          = 0;
766,771c766
<    if (ferror(f)== NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (ferror(f)== NULLbufN          = 0;
767,771c767
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>       = 0;
769,771c769
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    0;
769,771c769
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    BZ_SETERR;
769,772c769
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    BZ_SETERR(bzf->handle        = f;
769,772c769
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    BZ_SETERR(BZ_OK->handle        = f;
769,772c769
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    BZ_SETERR(BZ_OK)handle        = f;
770,772c770
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    = f;
770,772c770
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    bzff;
770,772c770
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    bzf->;
770,773c770
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->initialisedOk bzf->writing       = True;
770,773c770
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->initialisedOk = ->writing       = True;
770,773c770
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->initialisedOk = Falsewriting       = True;
771,773c771
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    = True;
771,773c771
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzfTrue;
771,773c771
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->;
771,774c771
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          bzf->strm.bzalloc  = NULL;
(90.2 %, 20065 bytes)
769,772c769
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    ->strm.bzalloc  = NULL;
769,772c769
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    0strm.bzalloc  = NULL;
770,772c770
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    .bzalloc  = NULL;
770,772c770
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzfbzalloc  = NULL;
770,772c770
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->= NULL;
770,772c770
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        NULL;
770,772c770
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        = ;
770,773c770
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->handle        = fbzf->strm.bzfree   = NULL;
771,773c771
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ->strm.bzfree   = NULL;
771,773c771
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfstrm.bzfree   = NULL;
771,773c771
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->.bzfree   = NULL;
771,773c771
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       bzfree   = NULL;
771,773c771
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = = NULL;
771,773c771
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = TrueNULL;
772,773c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ;
772,774c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzfbzf->strm.opaque   = NULL;
772,774c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->->strm.opaque   = NULL;
772,774c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strmstrm.opaque   = NULL;
772,774c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm..opaque   = NULL;
772,774c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  opaque   = NULL;
772,774c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = = NULL;
772,774c772
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = NULLNULL;
773,774c773
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    ;
(90.2 %, 20010 bytes)
772,775c772
<    ;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor = 0;
773,775c773
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    = 0;
773,775c773
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    bzf0;
773,775c773
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
---
>    bzf->;
773,776c773
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strmret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
773,776c773
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.= BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
773,776c773
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.opaque   BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
773,776c773
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.opaque   = ( &(bzf->strm), blockSize100k, 
(90.3 %, 19953 bytes)
772,773c772
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    blockSize100k, 
772,773c772
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    workFactor , 
772,774c772
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    workFactor = verbosity, workFactor );
772,774c772
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    workFactor = 0, workFactor );
773,774c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    workFactor );
773,774c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret );
773,774c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = ;
773,775c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit if (ret != BZ_OK)
773,775c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( (ret != BZ_OK)
773,775c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &ret != BZ_OK)
773,775c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &(!= BZ_OK)
773,775c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &(bzfBZ_OK)
773,775c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &(bzf->)
773,776c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm;
773,778c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm)bzf->strm.avail_in = 0;
773,778c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm), ->strm.avail_in = 0;
773,778c773
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100kstrm.avail_in = 0;
774,778c774
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               .avail_in = 0;
774,778c774
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosityavail_in = 0;
774,778c774
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosity, = 0;
774,778c774
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosity, workFactor 0;
775,778d774
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
775,778d774
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
(90.3 %, 19896 bytes)
774,782c774
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, workFactor ))
775,783c775
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    ( int*    bzerror, 
775,783c775
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzfint*    bzerror, 
775,783c775
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->*    bzerror, 
775,783c775
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk bzerror, 
775,783c775
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = , 
775,784c775
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    bzf->initialisedOk = TrueBZFILE* b, 
776,784c776
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    * b, 
776,784c776
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return b, 
776,784c776
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return bzf, 
777,785c777
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void*   buf, 
782,785c782
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> *   buf, 
782,785c782
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void buf, 
782,785c782
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API, 
782,786c782
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void BZ_API(int     len )
782,786c782
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void BZ_API(BZ2_bzWritelen )
783,786c783
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              )
783,787c783
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( {
783,788c783
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( intInt32   ret;
783,788c783
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( int*    ret;
783,788c783
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( int*    bzerror;
784,789c784
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzFile* bzf = (bzFile*)b;
784,789c784
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bzf = (bzFile*)b;
784,789c784
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bzf = (bzFile*)b;
784,789c784
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* b= (bzFile*)b;
785,789c785
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                (bzFile*)b;
785,789c785
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                voidbzFile*)b;
785,789c785
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   *)b;
785,789c785
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   buf)b;
786,789c786
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                b;
786,789c786
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     ;
786,791c786
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>                int     len BZ_SETERR(BZ_OK);
787,791c787
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> (BZ_OK);
788,791c788
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
788,791c788
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   );
789,791d788
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
789,791d788
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile(bzf == NULL || buf == NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = NULL || buf == NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (|| buf == NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFilebuf == NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*== NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)NULL || len < 0)
789,792c789
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b|| len < 0)
791,792c791
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    len < 0)
791,792c791
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR< 0)
791,792c791
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(0)
791,792c791
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK)
792,793d791
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
(90.3 %, 19845 bytes)
791,795c791
<    BZ_SETERR(0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    BZ_SETERR(ferror(bzf->handle))
791,795c791
<    BZ_SETERR(0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    BZ_SETERR(0(bzf->handle))
(90.3 %, 19795 bytes)
791,797c791
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(bzf->strm.avail_in = len;
791,797c791
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror->strm.avail_in = len;
791,797c791
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(strm.avail_in = len;
791,797c791
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf.avail_in = len;
791,797c791
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf->avail_in = len;
791,797c791
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf->handle= len;
791,797c791
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf->handle)len;
793,797d792
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
794,797d793
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
(90.4 %, 19739 bytes)
792,796c792
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       ->strm.avail_out = BZ_MAX_UNUSED;
793,796c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    strm.avail_out = BZ_MAX_UNUSED;
793,796c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf.avail_out = BZ_MAX_UNUSED;
793,796c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->avail_out = BZ_MAX_UNUSED;
793,796c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm= BZ_MAX_UNUSED;
793,796c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.BZ_MAX_UNUSED;
793,796c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.next_in  ;
793,797c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    bzf->strm.next_in  = bzf->strm.next_out = bzf->buf;
793,797c793
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    bzf->strm.next_in  = buf->strm.next_out = bzf->buf;
795,797c795
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    strm.next_out = bzf->buf;
795,797c795
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while .next_out = bzf->buf;
795,797c795
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (next_out = bzf->buf;
795,797c795
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (True= bzf->buf;
795,797c795
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (True) bzf->buf;
796,797c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       ->buf;
796,797c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzfbuf;
796,797c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->;
796,798c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strmret = 0;
796,798c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.= 0;
796,798c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.avail_out 0;
796,798c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.avail_out = ;
796,799c796
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
797,799c797
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       (ret != BZ_RUN_OK)
(90.4 %, 19679 bytes)
796,799c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif ) 
796,801c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (if (bzf->strm.avail_in == 0)
796,801c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret (bzf->strm.avail_in == 0)
796,801c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
796,801c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK->strm.avail_in == 0)
797,801c797
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>          strm.avail_in == 0)
799,801c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       .avail_in == 0)
799,801c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if avail_in == 0)
799,801c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (== 0)
799,801c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf0)
799,801c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf->)
799,802c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
---
>       if (bzf->strm;
799,803c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>       if (bzf->strm.}
799,804c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
>       if (bzf->strm.avail_out }
799,808c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if (bzf->strm.avail_out < void BZ_API(BZ2_bzWriteClose)
799,808c799
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSEDBZ_API(BZ2_bzWriteClose)
(90.4 %, 19597 bytes)
796,803c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != )
796,804c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf( int*          bzerror, 
796,804c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->int*          bzerror, 
796,804c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm*          bzerror, 
796,804c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.bzerror, 
796,804c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in , 
796,805c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == BZFILE*       b, 
796,805c796
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0*       b, 
797,805c797
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>          b, 
798,805c798
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    , 
799,806c799
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
803,806c803
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> abandon,
803,806c803
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void ,
803,807c803
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_APIunsigned int* nbytes_in,
803,807c803
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(int* nbytes_in,
803,807c803
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose* nbytes_in,
804,807c804
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   nbytes_in,
804,807c804
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( ,
804,808c804
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( intunsigned int* nbytes_out )
804,808c804
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          int* nbytes_out )
804,808c804
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerror* nbytes_out )
805,808c805
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
805,808c805
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE)
805,809c805
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     BZFILE*       {
805,810c805
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     BZFILE*       bBZ2_bzWriteClose64 ( bzerror, b, abandon, 
806,810c806
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     ( bzerror, b, abandon, 
806,810c806
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     int           bzerror, b, abandon, 
806,810c806
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     int           abandon, b, abandon, 
807,810c807
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     b, abandon, 
807,810c807
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned , abandon, 
807,810c807
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned intabandon, 
807,810c807
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* , 
807,811c807
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_innbytes_in, NULL, nbytes_out, NULL );
808,811c808
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     , NULL, nbytes_out, NULL );
808,811c808
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned NULL, nbytes_out, NULL );
808,811c808
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int, nbytes_out, NULL );
808,811c808
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_out, NULL );
808,811c808
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_out , NULL );
809,811c809
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
> NULL );
810,811c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    );
810,811c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ;
810,812c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>    BZ2_bzWriteClose64 ( }
810,815c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerrorvoid BZ_API(BZ2_bzWriteClose64)
810,815c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, BZ_API(BZ2_bzWriteClose64)
810,815c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b(BZ2_bzWriteClose64)
810,815c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, BZ2_bzWriteClose64)
810,815c810
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandon)
811,816c811
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         ( int*          bzerror, 
811,816c811
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_inint*          bzerror, 
811,816c811
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, *          bzerror, 
811,816c811
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULLbzerror, 
(90.5 %, 19514 bytes)
810,816c810
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZ2_bzWriteClose64 , 
811,817c811
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
814,817c814
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> abandon,
814,817c814
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void ,
814,818c814
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_APIunsigned int* nbytes_in_lo32,
814,818c814
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(int* nbytes_in_lo32,
814,818c814
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64* nbytes_in_lo32,
815,818c815
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   nbytes_in_lo32,
815,818c815
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( ,
815,819c815
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( intunsigned int* nbytes_in_hi32,
815,819c815
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          int* nbytes_in_hi32,
815,819c815
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerror* nbytes_in_hi32,
816,819c816
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
816,819c816
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE,
816,820c816
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       unsigned int* nbytes_out_lo32,
816,820c816
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       bint* nbytes_out_lo32,
817,820c817
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
817,820c817
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           nbytes_out_lo32,
818,820d817
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
818,820d817
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
818,820d817
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
818,820d817
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
818,820d817
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
818,821c818
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32)
819,822c819
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     {
819,824c819
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned bzFile* bzf = (bzFile*)b;
819,824c819
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* bzf = (bzFile*)b;
819,824c819
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* bzf = (bzFile*)b;
819,824c819
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* nbytes_in_hi32= (bzFile*)b;
820,824c820
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     (bzFile*)b;
820,824c820
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned bzFile*)b;
820,824c820
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int*)b;
820,824c820
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* )b;
820,824c820
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* nbytes_out_lo32b;
821,824c821
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     ;
821,826c821
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned if (bzf == NULL)
821,826c821
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int(bzf == NULL)
821,826c821
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int* bzf == NULL)
821,826c821
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int* nbytes_out_hi32 == NULL)
822,826c822
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
> NULL)
824,826c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>    )
824,827c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
---
>    bzFile;
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* if (!(bzf->writing))
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf (!(bzf->writing))
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = !(bzf->writing))
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = ((bzf->writing))
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFilebzf->writing))
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*->writing))
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*)writing))
824,828c824
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*)b))
826,828c826
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    )
826,829c826
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
---
>    if ;
826,830c826
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (if (ferror(bzf->handle))
826,830c826
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (bzf (ferror(bzf->handle))
826,830c826
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (bzf == ferror(bzf->handle))
(90.5 %, 19466 bytes)
824,826c824
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ()
824,827c824
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = ((;
824,829c824
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzfif (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
824,829c824
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzf->(nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
824,829c824
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzf->writingnbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
824,829c824
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzf->writing)!= NULL) *nbytes_in_lo32 = 0;
825,829c825
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>       NULL) *nbytes_in_lo32 = 0;
826,829c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    ) *nbytes_in_lo32 = 0;
826,829c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if *nbytes_in_lo32 = 0;
826,829c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (nbytes_in_lo32 = 0;
826,829c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror= 0;
826,829c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(0;
826,829c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(bzf;
826,830c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (ferror(bzf->if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
826,830c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (ferror(bzf->handle(nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
826,830c826
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (ferror(bzf->handle)nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
827,830c827
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>       != NULL) *nbytes_in_hi32 = 0;
829,830c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    NULL) *nbytes_in_hi32 = 0;
829,830c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if ) *nbytes_in_hi32 = 0;
829,830c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (*nbytes_in_hi32 = 0;
829,830c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 nbytes_in_hi32 = 0;
829,830c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 != = 0;
829,830c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 != NULL0;
829,830c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 != NULL) ;
829,831c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
829,831c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
829,831c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
829,831c829
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0!= NULL) *nbytes_out_lo32 = 0;
830,831c830
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    NULL) *nbytes_out_lo32 = 0;
830,831c830
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if ) *nbytes_out_lo32 = 0;
830,831c830
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (*nbytes_out_lo32 = 0;
830,831c830
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 nbytes_out_lo32 = 0;
830,831c830
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 != = 0;
830,831c830
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 != NULL0;
830,831c830
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 != NULL) ;
(90.5 %, 19395 bytes)
829,831c829
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_in_lo32 != NULL) != NULL) *nbytes_out_hi32 = 0;
830,831c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    NULL) *nbytes_out_hi32 = 0;
830,831c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if ) *nbytes_out_hi32 = 0;
830,831c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (*nbytes_out_hi32 = 0;
830,831c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 nbytes_out_hi32 = 0;
830,831c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 != = 0;
830,831c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 != NULL0;
830,831c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 != NULL) ;
830,833c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *if ((!abandon) && bzf->lastErr == BZ_OK) 
830,833c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 ((!abandon) && bzf->lastErr == BZ_OK) 
830,833c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = (!abandon) && bzf->lastErr == BZ_OK) 
830,833c830
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0!abandon) && bzf->lastErr == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    abandon) && bzf->lastErr == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if ) && bzf->lastErr == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (&& bzf->lastErr == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 bzf->lastErr == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != ->lastErr == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULLlastErr == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) == BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) *BZ_OK) 
831,833c831
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 ) 
(90.6 %, 19321 bytes)
830,834c830
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if (nbytes_out_lo32 != NULL) ( !abandon && !ferror ( bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    !abandon && !ferror ( bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if abandon && !ferror ( bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if (&& !ferror ( bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!ferror ( bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!ferror ( bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon( bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) bzf->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && ->handle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && bzfhandle ) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && bzf->) ) 
832,834c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && bzf->lastErr ) 
832,836c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if ((!abandon) && bzf->lastErr == if (nbytes_in_lo32 != NULL)
832,836c832
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if ((!abandon) && bzf->lastErr == BZ_OK(nbytes_in_lo32 != NULL)
834,836c834
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32 != NULL)
834,836c834
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if != NULL)
834,836c834
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if ( NULL)
(90.6 %, 19265 bytes)
832,835c832
<    if ((!abandon) && bzf->lastErr ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>    if ((!abandon) && bzf->lastErr ;
834,835d833
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
834,835d833
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
(90.6 %, 19185 bytes)
834,835d833
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
834,835d833
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
(90.7 %, 19105 bytes)
834,835d833
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
834,835d833
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
(90.7 %, 19022 bytes)
834,836d833
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
834,837c834
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (BZ_OK);
834,837c834
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (BZ_OK);
(90.8 %, 18938 bytes)
834,841c834
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    ) 
834,842c834
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR( int*  bzerror, 
834,842c834
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR(int*  bzerror, 
834,842c834
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR(BZ_OK*  bzerror, 
834,842c834
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR(BZ_OK)bzerror, 
835,842c835
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    , 
835,843c835
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    0FILE* f, 
836,843c836
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    * f, 
836,843c836
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    0f, 
837,843c837
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> , 
841,844c841
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> int   verbosity,
841,844c841
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILEverbosity,
841,844c841
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* ,
841,845c841
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_APIint   small,
841,845c841
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(small,
841,845c841
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(BZ2_bzReadOpen,
842,846c842
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    void* unused,
842,846c842
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( * unused,
842,846c842
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intunused,
842,846c842
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  ,
842,847c842
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    ( int*  bzerrorint   nUnused )
843,847c843
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
843,847c843
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE)
843,848c843
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      FILE* {
843,849c843
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      FILE* fbzFile* bzf = NULL;
844,849c844
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      * bzf = NULL;
844,849c844
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzf = NULL;
844,849c844
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbosity= NULL;
845,849c845
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      NULL;
845,849c845
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   ;
845,850c845
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      int   smallint     ret;
846,850c846
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      ret;
846,850c846
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void;
846,852c846
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      void* BZ_SETERR(BZ_OK);
846,852c846
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      void* unused(BZ_OK);
847,852c847
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      BZ_OK);
847,852c847
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   );
847,852c847
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused ;
848,854c848
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
> if (f == NULL || 
849,854c849
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    (f == NULL || 
849,854c849
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFilef == NULL || 
849,854c849
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* == NULL || 
849,854c849
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf NULL || 
849,854c849
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = || 
849,855c849
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    bzFile* bzf = NULL(small != 0 && small != 1) ||
850,855c850
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    small != 0 && small != 1) ||
850,855c850
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     != 0 && small != 1) ||
850,855c850
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     ret0 && small != 1) ||
852,855c852
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    && small != 1) ||
852,855c852
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERRsmall != 1) ||
852,855c852
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(!= 1) ||
852,855c852
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK1) ||
852,855c852
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)) ||
854,855c854
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    ||
854,856c854
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (verbosity < 0 || verbosity > 4) ||
854,856c854
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (verbosity < 0 || verbosity > 4) ||
854,856c854
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f < 0 || verbosity > 4) ||
854,856c854
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == 0 || verbosity > 4) ||
854,856c854
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == NULL || verbosity > 4) ||
855,856c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        verbosity > 4) ||
855,856c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (> 4) ||
855,856c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small 4) ||
855,856c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != ) ||
855,856c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 ||
855,857c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && (unused == NULL && nUnused != 0) ||
855,857c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small unused == NULL && nUnused != 0) ||
855,857c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != == NULL && nUnused != 0) ||
855,857c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1NULL && nUnused != 0) ||
855,857c855
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1) && nUnused != 0) ||
856,857c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        nUnused != 0) ||
856,857c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (!= 0) ||
856,857c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity 0) ||
856,857c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < ) ||
856,857c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 ||
856,858c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
856,858c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
856,858c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
856,858c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
856,858c856
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4) && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused < 0 || nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == 0 || nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL || nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused > BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != BZ_MAX_UNUSED)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0)))
857,858c857
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0) ))
858c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
858,859c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
---
>        (;
858,861c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused if (ferror(f))
858,861c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != (ferror(f))
858,861c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL ferror(f))
858,861c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (f))
858,861c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (f))
858,861c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused ))
858,861c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused < )
858,862c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
---
>        (unused != NULL && (nUnused < 0 ;
858,864c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || bzf = malloc ( sizeof(bzFile) );
858,864c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused = malloc ( sizeof(bzFile) );
858,864c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > malloc ( sizeof(bzFile) );
858,864c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED( sizeof(bzFile) );
858,864c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)sizeof(bzFile) );
858,864c858
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))(bzFile) );
859,864c859
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>       bzFile) );
861,864c861
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    ) );
861,864c861
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if );
861,864c861
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if (;
861,865c861
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferrorif (bzf == NULL) 
861,865c861
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror((bzf == NULL) 
861,865c861
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror(fbzf == NULL) 
861,865c861
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror(f)== NULL) 
862,865c862
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>       NULL) 
864,865c864
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    ) 
864,866c864
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
---
>    bzf ;
(90.8 %, 18880 bytes)
861,867c861
<    if (ferror(f)== NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (ferror(f)bzf->handle        = f;
861,867c861
<    if (ferror(f)== NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (ferror(f)== ->handle        = f;
861,867c861
<    if (ferror(f)== NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (ferror(f)== NULLhandle        = f;
862,867c862
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>       = f;
864,867c864
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    f;
864,867c864
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    BZ_SETERR;
864,868c864
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(bzf->bufN          = 0;
864,868c864
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(BZ_OK->bufN          = 0;
864,868c864
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(BZ_OK)bufN          = 0;
866,868c866
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    = 0;
866,868c866
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    bzf0;
866,868c866
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    bzf->;
866,869c866
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->initialisedOk bzf->writing       = False;
866,869c866
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->initialisedOk = ->writing       = False;
866,869c866
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->initialisedOk = Falsewriting       = False;
867,869c867
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    = False;
867,869c867
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzfFalse;
(90.8 %, 18806 bytes)
864,867c864
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    ->strm.bzalloc  = NULL;
864,867c864
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    fstrm.bzalloc  = NULL;
865,867c865
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    .bzalloc  = NULL;
865,867c865
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzfbzalloc  = NULL;
865,867c865
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->= NULL;
865,867c865
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          NULL;
865,867c865
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          = ;
865,868c865
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->bufN          = 0bzf->strm.bzfree   = NULL;
866,868c866
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ->strm.bzfree   = NULL;
866,868c866
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfstrm.bzfree   = NULL;
866,868c866
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->.bzfree   = NULL;
866,868c866
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       bzfree   = NULL;
866,868c866
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = = NULL;
866,868c866
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = FalseNULL;
867,868c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ;
867,869c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzfbzf->strm.opaque   = NULL;
867,869c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->->strm.opaque   = NULL;
867,869c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strmstrm.opaque   = NULL;
867,869c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm..opaque   = NULL;
867,869c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  opaque   = NULL;
867,869c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = = NULL;
867,869c867
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = NULLNULL;
868,869c868
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    ;
(90.9 %, 18751 bytes)
867,871d866
<    ;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
868,872c868
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
868,872c868
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzfBZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
868,872c868
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->( &(bzf->strm), verbosity, small );
(90.9 %, 18687 bytes)
867c867
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ;
867,868c867
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
---
>    ret if (ret != BZ_OK)
867,868c867
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
---
>    ret = (ret != BZ_OK)
(90.9 %, 18626 bytes)
867,871c867
<    ;
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    ->bufN;
868,871c868
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    bufN;
868,871c868
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    if ;
868,872c868
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (bzf->strm.next_in  = bzf->buf;
868,872c868
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret ->strm.next_in  = bzf->buf;
868,872c868
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret != strm.next_in  = bzf->buf;
868,872c868
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret != BZ_OK.next_in  = bzf->buf;
869,872c869
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>       next_in  = bzf->buf;
871,872c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    = bzf->buf;
871,872c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzfbzf->buf;
871,872c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf->->buf;
871,872c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf->strmbuf;
871,872c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf->strm.;
871,874c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in bzf->initialisedOk = True;
871,874c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = ->initialisedOk = True;
871,874c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = bzfinitialisedOk = True;
871,874c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = bzf->= True;
871,874c871
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = bzf->bufNTrue;
872,874c872
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    ;
872,875c872
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzfreturn bzf;   
872,875c872
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->bzf;   
872,875c872
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->strm;   
(90.9 %, 18566 bytes)
872,878c872
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    BZFILE *b )
873,878c873
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    *b )
873,878c873
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return b )
873,878c873
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzf)
874,878d873
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> bzFile* bzf = (bzFile*)b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void * bzf = (bzFile*)b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIbzf = (bzFile*)b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(= (bzFile*)b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose(bzFile*)b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) bzFile*)b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( *)b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int )b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int *b;
878,880c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror;
878,882c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZ_SETERR(BZ_OK);
878,882c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE (BZ_OK);
878,882c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *BZ_OK);
878,882c878
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b );
879,882c879
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> ;
880,882d879
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
880,883c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile(bzf == NULL)
880,883c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf == NULL)
880,883c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf == NULL)
880,883c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = NULL)
880,883c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = ()
880,884c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
---
>    bzFile* bzf = (bzFile;
880,886c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    bzFile* bzf = (bzFile*if (bzf->writing)
880,886c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    bzFile* bzf = (bzFile*)(bzf->writing)
880,886c880
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    bzFile* bzf = (bzFile*)bbzf->writing)
882,886c882
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    ->writing)
882,886c882
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    BZ_SETERRwriting)
882,886c882
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    BZ_SETERR()
(91.0 %, 18506 bytes)
880,884c880
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)0;
880,884c880
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)(;
880,885c880
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
---
>    bzFile* bzf = (bzFile*)(bzf0;
880,885c880
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
---
>    bzFile* bzf = (bzFile*)(bzf->;
880,886c880
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
---
>    bzFile* bzf = (bzFile*)(bzf->writing}
881,890c881
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>       int BZ_API(BZ2_bzRead) 
883,890c883
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    BZ_API(BZ2_bzRead) 
883,890c883
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    if (BZ2_bzRead) 
883,890c883
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    if (BZ2_bzRead) 
883,890c883
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    if (bzf) 
883,891c883
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    if (bzf->( int*    bzerror, 
883,891c883
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    if (bzf->initialisedOkint*    bzerror, 
884,891c884
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>       *    bzerror, 
(91.0 %, 18443 bytes)
880,888c880
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    bzFile* bzf = (bzFile*)BZFILE* b, 
880,888c880
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    bzFile* bzf = (bzFile*)0* b, 
881,888c881
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    b, 
881,888c881
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    0, 
882,889c882
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void*   buf, 
886,889c886
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> *   buf, 
886,889c886
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int buf, 
886,889c886
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API, 
886,890c886
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int BZ_API(int     len )
886,890c886
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int BZ_API(BZ2_bzReadlen )
887,890c887
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            )
887,891c887
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( {
887,893c887
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( intbzFile* bzf = (bzFile*)b;
887,893c887
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    * bzf = (bzFile*)b;
887,893c887
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzf = (bzFile*)b;
888,893c888
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              = (bzFile*)b;
888,893c888
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE(bzFile*)b;
888,893c888
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzFile*)b;
888,893c888
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b*)b;
889,893c889
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              )b;
889,893c889
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              voidb;
889,893c889
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   ;
889,895c889
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              void*   bufBZ_SETERR(BZ_OK);
890,895c890
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              (BZ_OK);
890,895c890
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     BZ_OK);
890,895c890
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     len );
891,895c891
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> ;
893,896d892
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile(bzf == NULL || buf == NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = NULL || buf == NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (|| buf == NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFilebuf == NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*== NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)NULL || len < 0)
893,897c893
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b|| len < 0)
895,897c895
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    len < 0)
895,897c895
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR< 0)
895,897c895
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(0)
895,897c895
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK)
(91.0 %, 18391 bytes)
895,901c895
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR()
895,902c895
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
---
>    BZ_SETERR(0;
896,904c896
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>       bzf->strm.avail_out = len;
(91.1 %, 18334 bytes)
895,899c895
<    BZ_SETERR()
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(= buf;
896,899c896
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>       buf;
898,899c898
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    ;
(91.1 %, 18277 bytes)
896,906c896
<       buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       ( int*    bzerror, 
896,906c896
<       buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       bufint*    bzerror, 
898,906c898
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    *    bzerror, 
898,906c898
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while bzerror, 
898,906c898
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (, 
898,907c898
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    while (TrueBZFILE* b, 
900,907c900
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    * b, 
900,907c900
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return b, 
900,907c900
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0, 
901,908c901
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void**  unused, 
905,908c905
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> **  unused, 
905,908c905
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void *  unused, 
905,908c905
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_APIunused, 
905,908c905
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(, 
905,909c905
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
> void BZ_API(BZ2_bzReadGetUnusedint*    nUnused )
906,909c906
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      *    nUnused )
906,909c906
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( nUnused )
906,909c906
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int)
906,910c906
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                      ( int*    {
906,911c906
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                      ( int*    bzerrorbzFile* bzf = (bzFile*)b;
907,911c907
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        * bzf = (bzFile*)b;
907,911c907
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILEbzf = (bzFile*)b;
907,911c907
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* = (bzFile*)b;
907,911c907
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* b(bzFile*)b;
908,911c908
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        bzFile*)b;
908,911c908
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void*)b;
908,911c908
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void*)b;
908,911c908
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  b;
908,911c908
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  unused;
909,912c909
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        if (bzf == NULL)
909,912c909
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int(bzf == NULL)
909,912c909
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int*    bzf == NULL)
909,912c909
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int*    nUnused == NULL)
910,912c910
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
> NULL)
911,912c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>    )
911,913c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
---
>    bzFile;
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* if (bzf->lastErr != BZ_STREAM_END)
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf (bzf->lastErr != BZ_STREAM_END)
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = bzf->lastErr != BZ_STREAM_END)
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (->lastErr != BZ_STREAM_END)
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFilelastErr != BZ_STREAM_END)
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*!= BZ_STREAM_END)
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*)BZ_STREAM_END)
911,914c911
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*)b)
912,915c912
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
---
>    ;
912,916c912
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if if (unused == NULL || nUnused == NULL)
912,916c912
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if ((unused == NULL || nUnused == NULL)
912,916c912
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (bzf unused == NULL || nUnused == NULL)
912,916c912
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (bzf == == NULL || nUnused == NULL)
912,916c912
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (bzf == NULLNULL || nUnused == NULL)
913,916c913
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       || nUnused == NULL)
914,916c914
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    nUnused == NULL)
914,916c914
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if == NULL)
914,916c914
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (NULL)
(91.1 %, 18208 bytes)
912,916c912
<    ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
913,916c913
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
913,917c913
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if *nUnused = bzf->strm.avail_in;
913,917c913
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (nUnused = bzf->strm.avail_in;
913,917c913
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused = bzf->strm.avail_in;
913,917c913
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == bzf->strm.avail_in;
913,917c913
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == NULL ->strm.avail_in;
(91.1 %, 18141 bytes)
913,915c913
<    ;
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    strm.next_in;
914,915c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    .next_in;
914,915c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *next_in;
914,915c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *nUnused ;
914,916c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
>    *nUnused = }
914,924c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzfint BZ_API(BZ2_bzBuffToBuffCompress) 
914,924c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->BZ_API(BZ2_bzBuffToBuffCompress) 
914,924c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->strm(BZ2_bzBuffToBuffCompress) 
914,924c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->strm.BZ2_bzBuffToBuffCompress) 
914,924c914
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->strm.avail_in) 
915,925c915
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    ( char*         dest, 
915,925c915
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *char*         dest, 
(91.2 %, 18089 bytes)
914,925c914
<    *nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    *nUnused destLen,
915,925c915
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> ,
923,926c923
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> char*         source, 
923,926c923
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int *         source, 
923,926c923
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIsource, 
923,926c923
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(, 
923,927c923
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressunsigned int  sourceLen,
924,927c924
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          int  sourceLen,
924,927c924
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( sourceLen,
924,927c924
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char,
924,928c924
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         int           blockSize100k, 
924,928c924
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         destblockSize100k, 
925,928c925
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
925,929c925
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
925,929c925
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned intverbosity, 
925,929c925
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* , 
925,930c925
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int* destLenint           workFactor )
926,930c926
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
926,930c926
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char)
926,931c926
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            char*         {
926,932c926
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            char*         sourcebz_stream strm;
927,932c927
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            strm;
927,932c927
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned ;
927,933c927
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            unsigned int  int ret;
927,933c927
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            unsigned int  sourceLenret;
928,933c928
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ;
928,935c928
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           if (dest == NULL || destLen == NULL || 
928,935c928
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           blockSize100k(dest == NULL || destLen == NULL || 
929,935c929
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            dest == NULL || destLen == NULL || 
929,935c929
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           == NULL || destLen == NULL || 
929,935c929
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbosityNULL || destLen == NULL || 
930,935c930
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            || destLen == NULL || 
930,935c930
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           destLen == NULL || 
930,935c930
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor == NULL || 
931,935c931
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> NULL || 
932,935c932
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
932,936c932
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream source == NULL ||
932,936c932
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream strm== NULL ||
933,936c933
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
933,936c933
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ||
933,937c933
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    int retblockSize100k < 1 || blockSize100k > 9 ||
935,937c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    < 1 || blockSize100k > 9 ||
935,937c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if 1 || blockSize100k > 9 ||
935,937c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (|| blockSize100k > 9 ||
935,937c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest blockSize100k > 9 ||
935,937c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == > 9 ||
935,937c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL 9 ||
935,937c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || ||
935,938c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (dest == NULL || destLen verbosity < 0 || verbosity > 4 ||
935,938c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (dest == NULL || destLen == < 0 || verbosity > 4 ||
935,938c935
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (dest == NULL || destLen == NULL 0 || verbosity > 4 ||
936,938c936
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        || verbosity > 4 ||
936,938c936
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source verbosity > 4 ||
936,938c936
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source == > 4 ||
936,938c936
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source == NULL 4 ||
937,938c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        ||
937,939c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        blockSize100k workFactor < 0 || workFactor > 0) 
937,939c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        blockSize100k < < 0 || workFactor > 0) 
937,939c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        blockSize100k < 1 0 || workFactor > 0) 
937,939c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        blockSize100k < 1 || || workFactor > 0) 
937,939c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        blockSize100k < 1 || blockSize100k workFactor > 0) 
937,939c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        blockSize100k < 1 || blockSize100k > > 0) 
937,939c937
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        blockSize100k < 1 || blockSize100k > 9 0) 
938,939c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
---
>        ) 
938,940c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
---
>        verbosity return BZ_PARAM_ERROR;
938,940c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
---
>        verbosity < BZ_PARAM_ERROR;
938,940c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
---
>        verbosity < 0 ;
938,942c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>        verbosity < 0 || if (workFactor == 0) workFactor = 0;
938,942c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>        verbosity < 0 || verbosity (workFactor == 0) workFactor = 0;
938,942c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
938,942c938
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>        verbosity < 0 || verbosity > 4 == 0) workFactor = 0;
939,942c939
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
---
>        0) workFactor = 0;
(91.2 %, 18005 bytes)
938,940c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > .bzfree = NULL;
938,940c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor bzfree = NULL;
938,940c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor == = NULL;
938,940c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0NULL;
938,940c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) ;
938,941c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor strm.opaque = NULL;
938,941c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor = .opaque = NULL;
938,941c938
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor = 0opaque = NULL;
939,941c939
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    = NULL;
939,941c939
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strmNULL;
939,941c939
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strm.;
939,942c939
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc ret = 0;
939,942c939
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = = 0;
939,942c939
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = NULL0;
940,942c940
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    ;
(91.2 %, 17944 bytes)
938,941c938
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>        verbosity < 0 || verbosity > workFactor == 0) BZ_OK) return ret;
939,941c939
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    ) return ret;
939,941c939
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strmreturn ret;
939,941c939
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.ret;
939,941c939
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.opaque ;
939,943c939
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
---
>    strm.opaque = strm.next_in = source;
(91.3 %, 17893 bytes)
939,943c939
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.opaque avail_in = sourceLen;
941,943c941
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    = sourceLen;
941,943c941
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strmsourceLen;
941,943c941
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.;
941,944c941
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in strm.avail_out = *destLen;
941,944c941
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = .avail_out = *destLen;
941,944c941
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = sourceavail_out = *destLen;
942,944c942
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    = *destLen;
942,944c942
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm*destLen;
942,944c942
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.destLen;
942,944c942
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out ;
942,946c942
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = 0;
---
>    strm.next_out = ret = 0;
942,946c942
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = 0;
---
>    strm.next_out = dest= 0;
(91.3 %, 17827 bytes)
942,946c942
<    strm.next_out ;
< 
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    strm.next_out (ret != BZ_STREAM_END) goto errhandler;
944,946c944
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
944,946c944
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
944,946c944
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = BZ_STREAM_END) goto errhandler;
944,946c944
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = 0) goto errhandler;
945,946c945
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    goto errhandler;
945,946c945
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if errhandler;
945,946c945
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (;
945,949c945
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret *destLen -= strm.avail_out;   
945,949c945
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret == destLen -= strm.avail_out;   
945,949c945
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret == BZ_FINISH_OK-= strm.avail_out;   
945,949c945
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret == BZ_FINISH_OK) strm.avail_out;   
(91.3 %, 17751 bytes)
945,951d944
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
945,952c945
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
---
>    goto :
945,953c945
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
---
>    goto errhandler0;
948,953c948
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
---
>    ;
(91.4 %, 17668 bytes)
945,956c945
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    int BZ_API(BZ2_bzBuffToBuffDecompress) 
945,956c945
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    output_overflowBZ_API(BZ2_bzBuffToBuffDecompress) 
946,956c946
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    (BZ2_bzBuffToBuffDecompress) 
946,956c946
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    0BZ2_bzBuffToBuffDecompress) 
947,956c947
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    ) 
947,957c947
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return ( char*         dest, 
947,957c947
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return BZ_OUTBUFF_FULLchar*         dest, 
949,957c949
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    *         dest, 
949,957c949
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    errhandlerdest, 
950,957c950
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    , 
950,958c950
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    0unsigned int* destLen,
951,958c951
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    int* destLen,
951,958c951
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return * destLen,
951,958c951
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return retdestLen,
952,958c952
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> ,
956,959c956
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> char*         source, 
956,959c956
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int *         source, 
956,959c956
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIsource, 
956,959c956
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(, 
956,960c956
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int  sourceLen,
957,960c957
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            int  sourceLen,
957,960c957
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( sourceLen,
957,960c957
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char,
957,961c957
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         int           small,
957,961c957
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         destsmall,
958,961c958
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
958,962c958
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
958,962c958
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned intverbosity )
958,962c958
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* )
958,963c958
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              unsigned int* destLen{
959,964c959
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              bz_stream strm;
959,964c959
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              charstrm;
959,964c959
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         ;
959,965c959
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              char*         sourceint ret;
960,965c960
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ret;
960,965c960
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned ;
960,967c960
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              unsigned int  if (dest == NULL || destLen == NULL || 
960,967c960
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              unsigned int  sourceLen(dest == NULL || destLen == NULL || 
961,967c961
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              dest == NULL || destLen == NULL || 
961,967c961
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           == NULL || destLen == NULL || 
961,967c961
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           smallNULL || destLen == NULL || 
962,967c962
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              || destLen == NULL || 
962,967c962
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           destLen == NULL || 
962,967c962
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity == NULL || 
963,967c963
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> NULL || 
964,967c964
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
964,968c964
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream source == NULL ||
964,968c964
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream strm== NULL ||
965,968c965
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
965,968c965
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ||
965,969c965
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    int ret(small != 0 && small != 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    small != 0 && small != 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if != 0 && small != 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (0 && small != 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest && small != 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == small != 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL != 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || 1) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen ) ||
967,969c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == ||
967,970c967
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if (dest == NULL || destLen == NULL verbosity < 0 || verbosity > 4) 
968,970c968
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        < 0 || verbosity > 4) 
968,970c968
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source 0 || verbosity > 4) 
968,970c968
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == || verbosity > 4) 
968,970c968
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == NULL verbosity > 4) 
969,970c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        > 4) 
969,970c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (4) 
969,970c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small ) 
969,971c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != return BZ_PARAM_ERROR;
969,971c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != 0 BZ_PARAM_ERROR;
969,971c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != 0 && ;
969,973c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small strm.bzalloc = NULL;
969,973c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != .bzalloc = NULL;
969,973c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != 1bzalloc = NULL;
969,973c969
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != 1) = NULL;
970,973c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        NULL;
970,973c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        verbosity ;
970,974c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < strm.bzfree = NULL;
970,974c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 .bzfree = NULL;
970,974c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || bzfree = NULL;
970,974c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity = NULL;
970,974c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > NULL;
970,974c970
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > 4;
971,975c971
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>           strm.opaque = NULL;
971,975c971
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>           return .opaque = NULL;
971,975c971
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>           return BZ_PARAM_ERRORopaque = NULL;
973,975c973
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    = NULL;
973,975c973
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strmNULL;
973,975c973
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strm.;
973,976c973
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc ret = 0;
973,976c973
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = = 0;
973,976c973
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = NULL0;
974,976c974
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    ;
(91.4 %, 17594 bytes)
971,973c971
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           ) return ret;
971,973c971
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           strmreturn ret;
971,973c971
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           strm.ret;
971,973c971
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           strm.opaque ;
971,975c971
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
---
>           strm.opaque = strm.next_in = source;
971,975c971
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
---
>           strm.opaque = NULL.next_in = source;
(91.4 %, 17543 bytes)
971,975c971
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>           strm.opaque avail_in = sourceLen;
973,975c973
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    = sourceLen;
973,975c973
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strmsourceLen;
973,975c973
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.;
973,976c973
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in strm.avail_out = *destLen;
973,976c973
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = .avail_out = *destLen;
973,976c973
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = sourceavail_out = *destLen;
974,976c974
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    = *destLen;
974,976c974
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm*destLen;
974,976c974
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.destLen;
974,976c974
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out ;
974,978c974
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = 0;
---
>    strm.next_out = ret = 0;
(91.5 %, 17477 bytes)
974,978c974
<    strm.next_out ;
< 
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    strm.next_out (ret != BZ_STREAM_END) goto errhandler;
976,978c976
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
976,978c976
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
976,978c976
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = BZ_STREAM_END) goto errhandler;
976,978c976
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = 0) goto errhandler;
977,978c977
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    goto errhandler;
977,978c977
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if errhandler;
977,978c977
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (;
977,981c977
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret *destLen -= strm.avail_out;
977,981c977
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret == destLen -= strm.avail_out;
977,981c977
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret == BZ_OK-= strm.avail_out;
977,981c977
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret == BZ_OK) strm.avail_out;
(91.5 %, 17401 bytes)
977,983d976
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
977,984c977
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
---
>    goto :
977,985c977
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    goto errhandlerif (strm.avail_out > 0) {
980,985c980
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    (strm.avail_out > 0) {
980,985c980
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *strm.avail_out > 0) {
980,985c980
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen .avail_out > 0) {
980,985c980
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= avail_out > 0) {
980,985c980
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm> 0) {
980,985c980
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.0) {
980,985c980
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.avail_out) {
(91.5 %, 17321 bytes)
977,980c977
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    ;
977,981c977
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    output_overflow_or_eof} else ;      
978,981c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    else ;      
978,981c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if ;      
978,983c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
---
>    if (errhandler:
978,983c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
---
>    if (strm:
978,984c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
---
>    if (strm.0;
978,984c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
---
>    if (strm.avail_out ;
978,985c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>    if (strm.avail_out > return ret; 
978,985c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>    if (strm.avail_out > 0ret; 
978,985c978
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>    if (strm.avail_out > 0) ; 
979,986c979
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
---
>       }
979,995c979
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       0const char * BZ_API(BZ2_bzlibVersion)(void)
980,995c980
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       char * BZ_API(BZ2_bzlibVersion)(void)
980,995c980
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       return * BZ_API(BZ2_bzlibVersion)(void)
980,995c980
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       return BZ_UNEXPECTED_EOFBZ_API(BZ2_bzlibVersion)(void)
981,995c981
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    (BZ2_bzlibVersion)(void)
981,995c981
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    } BZ2_bzlibVersion)(void)
981,995c981
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    } else )(void)
983,995c983
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    (void)
983,995c983
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    errhandlervoid)
984,995c984
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    )
(91.6 %, 17225 bytes)
978,990c978
<    if (strm.avail_out > 0) ; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
---
>    if (strm.avail_out > 0) ;
984,995d983
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
988,995d987
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
(91.6 %, 17146 bytes)
978,988c978
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
>    if (strm.avail_out > 0) const char *mode,
979,988c979
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> char *mode,
984,988c984
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> *mode,
985,988c985
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> mode,
985,988c985
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> BZFILE ,
985,989c985
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
> BZFILE * int open_mode)      
986,989c986
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
>                open_mode)      
986,989c986
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( )      
986,990c986
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
>                ( const ;
986,995c986
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char BZFILE * BZ_API(BZ2_bzopen)
986,995c986
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char ** BZ_API(BZ2_bzopen)
986,995c986
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char *pathBZ_API(BZ2_bzopen)
987,995c987
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  (BZ2_bzopen)
987,995c987
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int BZ2_bzopen)
987,995c987
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int d)
988,996c988
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  ( const char *path,
988,996c988
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const const char *path,
988,996c988
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char char *path,
988,996c988
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char **path,
(91.7 %, 17023 bytes)
986,994c986
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
>                ( char *mode )
987,994c987
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> *mode )
992,994c992
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> mode )
992,994c992
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE )
992,995c992
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * {
992,996c992
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_APIreturn 0;
992,996c992
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_API(0;
992,996c992
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_API(BZ2_bzopen;
993,997c993
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                }
993,1001c993
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( BZFILE * BZ_API(BZ2_bzdopen)
993,1001c993
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const * BZ_API(BZ2_bzdopen)
993,1001c993
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char BZ_API(BZ2_bzdopen)
993,1001c993
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *(BZ2_bzdopen)
993,1001c993
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZ2_bzdopen)
994,1001c994
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  )
994,1002c994
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const ( int fd,
994,1002c994
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char int fd,
994,1002c994
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *fd,
994,1002c994
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode ,
995,1003c995
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> const char *mode )
996,1003c996
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    char *mode )
996,1003c996
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return *mode )
996,1003c996
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0mode )
997,1003c997
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> )
1001,1003d1000
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
1001,1005c1001
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE return bzopen_or_bzdopen(NULL,fd,mode,1);
1001,1005c1001
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * bzopen_or_bzdopen(NULL,fd,mode,1);
1001,1005c1001
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(NULL,fd,mode,1);
1001,1005c1001
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(NULL,fd,mode,1);
1001,1005c1001
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopen,fd,mode,1);
1002,1005c1002
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                fd,mode,1);
1002,1005c1002
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( ,mode,1);
1002,1005c1002
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int mode,1);
1002,1005c1002
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,1);
1003,1005c1003
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  1);
1003,1005c1003
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const );
1003,1005c1003
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char ;
1003,1006c1003
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
>                  const char *}
1003,1010c1003
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
1004,1010c1004
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    (BZ2_bzread) (BZFILE* b, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return BZ2_bzread) (BZFILE* b, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen) (BZFILE* b, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen((BZFILE* b, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULLBZFILE* b, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,* b, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fdb, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,, void* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,modevoid* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,* buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1buf, int len )
1005,1010c1005
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1), int len )
1006,1010c1006
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int len )
1010c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> len )
1010c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int )
1010,1011c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API{
1010,1012c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(int bzerr, nread;
1010,1012c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzreadbzerr, nread;
1010,1012c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) , nread;
1010,1012c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (nread;
1010,1012c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b(((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void(bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf*)b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, )b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int b)->lastErr == BZ_STREAM_END) return 0;
1010,1013c1010
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )->lastErr == BZ_STREAM_END) return 0;
1011,1013c1011
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> ->lastErr == BZ_STREAM_END) return 0;
1012,1013c1012
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    lastErr == BZ_STREAM_END) return 0;
1012,1013c1012
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int == BZ_STREAM_END) return 0;
1012,1013c1012
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerrBZ_STREAM_END) return 0;
1012,1013c1012
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, ) return 0;
1012,1013c1012
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nreadreturn 0;
1013c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    0;
1013c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ;
1013,1014c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (nread = 0;
1013,1014c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if ((= 0;
1013,1014c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((0;
1013,1014c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile;
1013,1015c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1013,1015c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)(bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1013,1015c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)bbzerr == BZ_OK || bzerr == BZ_STREAM_END) {
1013,1015c1013
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)b)== BZ_OK || bzerr == BZ_STREAM_END) {
(91.7 %, 16972 bytes)
1013,1015c1013
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    ) {
1013,1015c1013
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    0{
1014,1016c1014
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    return nread;
1014,1016c1014
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    nread nread;
1014,1016c1014
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    nread = ;
1014,1017c1014
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    nread = 0} else {
1015,1017c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    else {
1015,1017c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if {
1015,1018c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (return -1;
1015,1018c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr -1;
1015,1018c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == 1;
1015,1018c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK ;
1015,1019c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || }
1015,1020c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
>    if (bzerr == BZ_OK || bzerr }
1015,1024c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
1015,1024c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDBZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
1015,1024c1015
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
1016,1024c1016
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       BZ2_bzwrite) (BZFILE* b, void* buf, int len )
1016,1024c1016
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return ) (BZFILE* b, void* buf, int len )
1016,1024c1016
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return nread(BZFILE* b, void* buf, int len )
1017,1024c1017
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    BZFILE* b, void* buf, int len )
1017,1024c1017
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } * b, void* buf, int len )
1017,1024c1017
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } else b, void* buf, int len )
1018,1024c1018
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       , void* buf, int len )
1018,1024c1018
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return void* buf, int len )
1018,1024c1018
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -* buf, int len )
1018,1024c1018
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -1buf, int len )
1019,1024c1019
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    , int len )
1020,1024c1020
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int len )
1024c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> len )
1024c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int )
1024,1025c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API{
1024,1026c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(int bzerr;
1024,1026c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwritebzerr;
1024,1026c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) ;
1024,1028c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
---
> int BZ_API(BZ2_bzwrite) (;
1024,1029c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILEif(bzerr == BZ_OK){
1024,1029c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* (bzerr == BZ_OK){
1024,1029c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bbzerr == BZ_OK){
1024,1029c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, == BZ_OK){
1024,1029c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidBZ_OK){
1024,1029c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* ){
1024,1029c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf{
1024,1030c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, return len;
1024,1030c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len;
1024,1030c1024
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len ;
1025,1031c1025
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
> }else{
1026,1031c1026
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    else{
1026,1031c1026
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    int {
1026,1032c1026
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    int bzerrreturn -1;
1028,1032c1028
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    -1;
1029,1032c1029
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    1;
1029,1032c1029
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    if;
1029,1033c1029
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
---
>    if(}
1029,1034c1029
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
>    if(bzerr }
1029,1038c1029
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    if(bzerr == int BZ_API(BZ2_bzflush) (BZFILE *b)
1029,1038c1029
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    if(bzerr == BZ_OKBZ_API(BZ2_bzflush) (BZFILE *b)
1029,1038c1029
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    if(bzerr == BZ_OK)(BZ2_bzflush) (BZFILE *b)
1030,1038c1030
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>       BZ2_bzflush) (BZFILE *b)
1030,1038c1030
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>       return ) (BZFILE *b)
1030,1038c1030
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>       return len(BZFILE *b)
1031,1038c1031
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    BZFILE *b)
1031,1038c1031
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    }*b)
1031,1038c1031
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    }elseb)
1032,1038c1032
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>       )
1032,1039c1032
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
---
>       return {
1032,1041c1032
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
---
>       return -return 0;
1032,1041c1032
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
---
>       return -10;
1033,1041c1033
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
---
>    ;
1038,1045d1037
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
1038,1045d1037
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
(91.7 %, 16912 bytes)
1034,1041c1034
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = ((bzFile *)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> *fp = ((bzFile *)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void fp = ((bzFile *)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API= ((bzFile *)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(((bzFile *)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose(bzFile *)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) bzFile *)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) (*)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) (BZFILE)b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) (BZFILE* b)->handle;
1038,1041c1038
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) (BZFILE* b)->handle;
1039,1041c1039
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> ->handle;
(91.8 %, 16851 bytes)
1034,1036c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> (b==NULL) 
1034,1036c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE b==NULL) 
1034,1036c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *==NULL) 
1034,1036c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp NULL) 
1034,1036c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = ) 
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = (if(((bzFile*)b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = (((((bzFile*)b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile ((bzFile*)b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *(bzFile*)b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)bzFile*)b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b*)b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b))b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)->b)->writing){
1034,1037c1034
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)->handle)->writing){
1036,1037c1036
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    ->writing){
1036,1037c1036
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if writing){
1036,1037c1036
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (){
1036,1037c1036
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b{
1036,1038c1036
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if (b==BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
1036,1038c1036
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if (b==NULL(&bzerr,b,0,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    &bzerr,b,0,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    ifbzerr,b,0,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(,b,0,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if((b,0,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((,0,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile0,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*,NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)NULL,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b,NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)NULL);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->);
1037,1038c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->writing;
1037,1039c1037
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>    if(((bzFile*)b)->writing)if(bzerr != BZ_OK){
1038,1039c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       (bzerr != BZ_OK){
1038,1039c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClosebzerr != BZ_OK){
1038,1039c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(!= BZ_OK){
1038,1039c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&BZ_OK){
1038,1039c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr){
1038,1039c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr,{
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,bBZ2_bzWriteClose(NULL,b,1,NULL,NULL);
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,(NULL,b,1,NULL,NULL);
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0NULL,b,1,NULL,NULL);
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0,,b,1,NULL,NULL);
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0,NULLb,1,NULL,NULL);
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0,NULL,,1,NULL,NULL);
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL1,NULL,NULL);
1038,1040c1038
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL),NULL,NULL);
1039,1040c1039
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       NULL,NULL);
1039,1040c1039
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if,NULL);
1039,1040c1039
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(NULL);
1039,1040c1039
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr );
1039,1040c1039
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr != ;
1039,1041c1039
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK}
1039,1042c1039
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>       if(bzerr != BZ_OK)}else
1040,1042c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>          else
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteCloseif(fp!=stdin && fp!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose((fp!=stdin && fp!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULLfp!=stdin && fp!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,!=stdin && fp!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,bstdin && fp!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,&& fp!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1fp!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,!=stdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,NULLstdout){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,){
1040,1043c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,NULL{
1040,1044c1040
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,NULL)fclose(fp);
1041,1044c1041
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>       (fp);
1042,1044c1042
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    fp);
1042,1044c1042
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    });
1043,1044c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    ;
1043,1045c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if}
1043,1046c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
>    if(}
1043,1051c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fpstatic char *bzerrorstrings[] = {
1043,1051c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=char *bzerrorstrings[] = {
1043,1051c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin *bzerrorstrings[] = {
1043,1051c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && bzerrorstrings[] = {
1043,1051c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && fp[] = {
1043,1051c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && fp!=] = {
1043,1051c1043
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && fp!=stdout= {
1044,1051d1043
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
1044,1052c1044
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
>       "OK"
1044,1053c1044
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>       fclose,"SEQUENCE_ERROR"
1044,1053c1044
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>       fclose("SEQUENCE_ERROR"
1044,1054c1044
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
>       fclose(fp,"PARAM_ERROR"
1044,1054c1044
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
>       fclose(fp)"PARAM_ERROR"
1045,1055c1045
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
---
>    ,"MEM_ERROR"
1046,1055c1046
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
---
> "MEM_ERROR"
1051,1056c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
---
> ,"DATA_ERROR"
1051,1056c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
---
> static "DATA_ERROR"
1051,1057c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
> static char ,"DATA_ERROR_MAGIC"
1051,1057c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
> static char *"DATA_ERROR_MAGIC"
1051,1058c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
> static char *bzerrorstrings,"IO_ERROR"
1051,1058c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
> static char *bzerrorstrings["IO_ERROR"
1051,1059c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
> static char *bzerrorstrings[] ,"UNEXPECTED_EOF"
1051,1059c1051
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
> static char *bzerrorstrings[] = "UNEXPECTED_EOF"
1052,1060c1052
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>        ,"OUTBUFF_FULL"
1053,1060c1053
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       "OUTBUFF_FULL"
1053,1061c1053
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       ,,"CONFIG_ERROR"
1054,1061c1054
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       "CONFIG_ERROR"
(91.9 %, 16698 bytes)
1053,1061c1053
<       "OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
>       };
1054,1061c1054
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
>       ;
1054,1064c1054
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
1055,1064c1055
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
1055,1064c1055
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,* BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
1056,1064c1056
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
1056,1064c1056
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,(BZ2_bzerror) (BZFILE *b, int *errnum)
1057,1064c1057
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       BZ2_bzerror) (BZFILE *b, int *errnum)
1057,1064c1057
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,) (BZFILE *b, int *errnum)
1058,1064c1058
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       (BZFILE *b, int *errnum)
1058,1064c1058
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,BZFILE *b, int *errnum)
1059,1064c1059
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       *b, int *errnum)
1059,1064c1059
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,b, int *errnum)
(91.9 %, 16565 bytes)
1053,1056c1053
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       *errnum)
1053,1056c1053
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }errnum)
1056c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> )
1056,1057c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const {
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char int err = ((bzFile *)b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * err = ((bzFile *)b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API= ((bzFile *)b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(((bzFile *)b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror(bzFile *)b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) bzFile *)b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (*)b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE )b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b)->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, ->lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int lastErr;
1056,1058c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *;
1056,1060c1056
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnumif(err>0) err = 0;
1057,1060c1057
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
> (err>0) err = 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    err>0) err = 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int >0) err = 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err 0) err = 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ) err = 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = (err = 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((= 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile 0;
1058,1060c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile *;
1058,1061c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)*errnum = err;
1058,1061c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)berrnum = err;
1058,1061c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)b)= err;
1058,1061c1058
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)b)->err;
1059,1061d1058
< 
<    if(err>0) err = 0;
<    *errnum = err;
1060,1061d1059
<    if(err>0) err = 0;
<    *errnum = err;
1060,1062c1060
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
---
>    ifbzerrorstrings[err*-1];
1060,1062c1060
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
---
>    if([err*-1];
(91.9 %, 16524 bytes)
1058,1092c1058
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    int err = ((bzFile *)b)->lastErr#define BZ_LCCWIN32  0
1059,1092c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    define BZ_LCCWIN32  0
1059,1092c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return BZ_LCCWIN32  0
1059,1092c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return bzerrorstrings0
1059,1098c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[#include <signal.h>
1059,1098c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[errinclude <signal.h>
1059,1098c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*<signal.h>
1059,1098c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-signal.h>
1059,1098c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-1.h>
1059,1098c1059
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-1]h>
1060,1098c1060
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> >
1089,1098d1088
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
1089,1098d1088
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
(92.0 %, 16451 bytes)
1089,1092c1089
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> ERROR_IF_NOT_ZERO(i)  
1089,1092c1089
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #(i)  
1089,1092c1089
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #include i)  
1089,1092c1089
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #include <)  
1089,1093c1089
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno#define ERROR_IF_MINUS_ONE(i) 
1089,1093c1089
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno.define ERROR_IF_MINUS_ONE(i) 
1089,1093c1089
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno.hERROR_IF_MINUS_ONE(i) 
1091,1093c1091
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> (i) 
1091,1093c1091
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #i) 
1091,1093c1091
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ) 
1091,1099c1091
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define ERROR_IF_EOF#   include <fcntl.h>
1091,1099c1091
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define ERROR_IF_EOF(include <fcntl.h>
1091,1099c1091
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define ERROR_IF_EOF(i<fcntl.h>
1092,1099c1092
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> fcntl.h>
1092,1099c1092
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #.h>
1092,1099c1092
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
---
> #define h>
(92.0 %, 16373 bytes)
1091,1094c1091
< #define ERROR_IF_EOF#   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #define ERROR_IF_EOFdefine PATH_SEP    '/'
1091,1094c1091
< #define ERROR_IF_EOF#   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #define ERROR_IF_EOF#   PATH_SEP    '/'
(92.0 %, 16324 bytes)
1091,1095c1091
< #define ERROR_IF_EOFdefine PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> #define ERROR_IF_EOFdefine define MY_S_ISDIR  S_ISDIR
1091,1095c1091
< #define ERROR_IF_EOFdefine PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> #define ERROR_IF_EOFdefine PATH_SEP    MY_S_ISDIR  S_ISDIR
1092,1095c1092
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> S_ISDIR
(92.1 %, 16216 bytes)
1091,1094c1091
< #define ERROR_IF_EOFdefine define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #define ERROR_IF_EOFdefine ((root), (name))
1091,1094c1091
< #define ERROR_IF_EOFdefine define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #define ERROR_IF_EOFdefine define (root), (name))
(92.1 %, 16126 bytes)
1091,1093c1091
< #define ERROR_IF_EOFdefine ((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> #define ERROR_IF_EOFdefine name) \
1091,1093c1091
< #define ERROR_IF_EOFdefine ((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> #define ERROR_IF_EOFdefine () \
(92.2 %, 16079 bytes)
1091,1094c1091
< #define ERROR_IF_EOFdefine name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(d) 
---
> #define ERROR_IF_EOFdefine #   define SET_BINARY_MODE(d) 
1091,1094c1091
< #define ERROR_IF_EOFdefine name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(d) 
---
> #define ERROR_IF_EOFdefine namedefine SET_BINARY_MODE(d) 
(92.2 %, 16032 bytes)
1091,1100c1091
< #define ERROR_IF_EOFdefine #   define SET_BINARY_MODE(d) 
< 
< #      define NORETURN 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #define ERROR_IF_EOFdefine )1)
1091,1100c1091
< #define ERROR_IF_EOFdefine #   define SET_BINARY_MODE(d) 
< 
< #      define NORETURN 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #define ERROR_IF_EOFdefine #   1)
1091,1100c1091
< #define ERROR_IF_EOFdefine #   define SET_BINARY_MODE(d) 
< 
< #      define NORETURN 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #define ERROR_IF_EOFdefine #   define )
(92.2 %, 15911 bytes)
1091,1109c1091
< #define ERROR_IF_EOFdefine )1)
< #define False ((Bool)0)
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #define ERROR_IF_EOFdefine 1
1091,1110c1091
< #define ERROR_IF_EOFdefine )1)
< #define False ((Bool)0)
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define ERROR_IF_EOFdefine )#define SM_F2O           2
(92.3 %, 15842 bytes)
1091,1097c1091
< #define ERROR_IF_EOFdefine 1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define ERROR_IF_EOFdefine OM_UNZ           2
1092,1097c1092
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> 2
1092,1098c1092
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> ##define OM_TEST          3
1092,1098c1092
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> #define define OM_TEST          3
(92.3 %, 15749 bytes)
1091,1254c1091
< #define ERROR_IF_EOFdefine OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define ERROR_IF_EOFdefine define BZ_N_SUFFIX_PAIRS 4
1091,1254c1091
< #define ERROR_IF_EOFdefine OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define ERROR_IF_EOFdefine OM_UNZ           BZ_N_SUFFIX_PAIRS 4
(92.4 %, 15490 bytes)
1091,1148c1091
< #define ERROR_IF_EOFdefine define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ERROR_IF_EOFdefine , (s))==0)
1091,1148c1091
< #define ERROR_IF_EOFdefine define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ERROR_IF_EOFdefine define (s))==0)
1091,1148c1091
< #define ERROR_IF_EOFdefine define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ERROR_IF_EOFdefine define BZ_N_SUFFIX_PAIRS s))==0)
(92.5 %, 15373 bytes)
1091,1099c1091
< #define ERROR_IF_EOFdefine , (s))==0)
< 
< int main ( int argc )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define ERROR_IF_EOFdefine 
\ No newline at end of file
1091,1099c1091
< #define ERROR_IF_EOFdefine , (s))==0)
< 
< int main ( int argc )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define ERROR_IF_EOFdefine , 
\ No newline at end of file
1091,1099c1091
< #define ERROR_IF_EOFdefine , (s))==0)
< 
< int main ( int argc )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define ERROR_IF_EOFdefine , (
\ No newline at end of file
(92.5 %, 15332 bytes)
===< pass_clex :: rm-toks-13 >===
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                #define BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_FLUSH_OK          -1)
12,14c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> 1)
12,14c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define #define BZ_PARAM_ERROR       (-2)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_FINISH_OK         define BZ_PARAM_ERROR       (-2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> BZ_PARAM_ERROR       (-2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #(-2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define -2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_STREAM_END        2)
14,15c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> )
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> ##define BZ_MEM_ERROR         (5)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define define BZ_MEM_ERROR         (5)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_SEQUENCE_ERROR    BZ_MEM_ERROR         (5)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_SEQUENCE_ERROR    ((5)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_SEQUENCE_ERROR    (-5)
15,16d14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
15,16d14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
15,16d14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
15,16d14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       (-6)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       (-6)
(92.6 %, 15265 bytes)
15,17c15
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       BZ_OUTBUFF_FULL      (-8)
15,17c15
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       ((-8)
15,17c15
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       (--8)
15,17c15
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       (-68)
16,17c16
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> )
16,18c16
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_CONFIG_ERROR      (-9)
16,18c16
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define define BZ_CONFIG_ERROR      (-9)
16,18c16
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    BZ_CONFIG_ERROR      (-9)
16,18c16
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    ((-9)
16,18c16
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (--9)
16,18c16
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (-79)
17,18c17
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> )
17,20c17
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #typedef 
17,21c17
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define struct {
17,21c17
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_OUTBUFF_FULL      {
17,22c17
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (char *next_in;
17,22c17
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-*next_in;
17,22c17
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-8next_in;
18,22c18
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> ;
18,23c18
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #unsigned int avail_in;
18,23c18
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define int avail_in;
18,23c18
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      avail_in;
18,23c18
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (;
18,24c18
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-unsigned int total_in_lo32;
18,24c18
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9int total_in_lo32;
20,24c20
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> total_in_lo32;
21,24c21
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    ;
21,25c21
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct unsigned int total_in_hi32;
22,25c22
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       int total_in_hi32;
22,25c22
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char total_in_hi32;
22,25c22
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *;
22,27c22
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char *next_inchar *next_out;
23,27c23
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       *next_out;
23,27c23
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned next_out;
23,27c23
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int ;
23,28c23
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int avail_inunsigned int avail_out;
24,28c24
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       int avail_out;
24,28c24
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned avail_out;
24,28c24
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int ;
24,29c24
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_lo32unsigned int total_out_lo32;
25,29c25
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       int total_out_lo32;
25,29c25
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned total_out_lo32;
25,29c25
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int ;
25,30c25
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int total_in_hi32unsigned int total_out_hi32;
27,30c27
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       int total_out_hi32;
27,30c27
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char total_out_hi32;
27,30c27
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *;
27,32c27
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *next_outvoid *state;
28,32c28
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       *state;
28,32c28
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned state;
28,32c28
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int ;
28,34c28
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int avail_outvoid *(*bzalloc)(void *,int,int);
29,34c29
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *(*bzalloc)(void *,int,int);
29,34c29
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (*bzalloc)(void *,int,int);
29,34c29
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *bzalloc)(void *,int,int);
29,34c29
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32bzalloc)(void *,int,int);
30,34c30
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       )(void *,int,int);
30,34c30
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (void *,int,int);
30,34c30
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int void *,int,int);
30,34c30
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32*,int,int);
32,34c32
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int,int);
32,34c32
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int,int);
32,34c32
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int);
32,34c32
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *stateint);
34c34
<       void *(*bzalloc)(void *,int,int);
---
>       );
34c34
<       void *(*bzalloc)(void *,int,int);
---
>       void ;
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *void (*bzfree)(void *,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *((*bzfree)(void *,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(**bzfree)(void *,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzallocbzfree)(void *,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc))(void *,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)((void *,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void void *,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void **,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,,void *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,intvoid *);
34,35c34
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,*);
35d34
<       void (*bzfree)(void *,void *);
35d34
<       void (*bzfree)(void *,void *);
35d34
<       void (*bzfree)(void *,void *);
35d34
<       void (*bzfree)(void *,void *);
35,36c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (opaque;
35,36c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*;
35,37c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (*bzfree} 
35,38c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)bz_stream;
35,38c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)(;
35,42c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void #include <stdio.h>
35,42c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *include <stdio.h>
35,42c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,<stdio.h>
35,42c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void stdio.h>
35,42c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *.h>
35,42c35
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *)h>
36,42c36
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       >
36,44c36
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void #   define BZ_API(func) func
36,44c36
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *define BZ_API(func) func
36,44c36
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaqueBZ_API(func) func
37,44c37
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
38,44c38
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func) func
38,44c38
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream) func
42,44c42
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func
42,45c42
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> ##   define BZ_EXTERN extern
42,45c42
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include define BZ_EXTERN extern
42,45c42
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <BZ_EXTERN extern
42,45c42
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioextern
42,50c42
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #include <stdio.BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
42,50c42
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #include <stdio.hint BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
44,50c44
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
44,50c44
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   ()BZ_API(BZ2_bzDecompressEnd) ( 
44,50c44
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define )BZ_API(BZ2_bzDecompressEnd) ( 
44,50c44
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_APIBZ_API(BZ2_bzDecompressEnd) ( 
44,50c44
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API((BZ2_bzDecompressEnd) ( 
44,50c44
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API(funcBZ2_bzDecompressEnd) ( 
44,50c44
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API(func) ) ( 
45,50c45
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> ( 
45,51c45
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   bz_stream *strm 
45,51c45
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   define *strm 
45,51c45
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   define BZ_EXTERN strm 
50,52c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> );
50,52c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN ;
50,58c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int #define BZ_MAX_UNUSED 0
50,58c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int BZ_APIdefine BZ_MAX_UNUSED 0
50,58c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int BZ_API(BZ_MAX_UNUSED 0
50,58c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int BZ_API()0
50,60c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_APItypedef void BZFILE;
50,60c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(void BZFILE;
50,60c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEndBZFILE;
50,60c50
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ;
51,62c51
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
(92.6 %, 15195 bytes)
50,60c50
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN (BZ2_bzReadOpen) ( 
56,60c56
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
56,60c56
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #) ( 
56,60c56
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ( 
56,61c56
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED int*  bzerror,   
58,61c58
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
58,61c58
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef bzerror,   
58,61c58
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void ,   
58,62c58
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEFILE* f, 
60,62c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> * f, 
60,62c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN f, 
60,62c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
60,63c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* int   verbosity, 
60,63c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIverbosity, 
60,63c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
60,64c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenint   small,
60,64c60
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) small,
61,64c61
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
61,65c61
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intvoid* unused,    
61,65c61
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  * unused,    
61,65c61
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorunused,    
62,65c62
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
62,66c62
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILEint   nUnused 
62,66c62
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* nUnused 
62,67c62
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* f);
63,67c63
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
63,69c63
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       int   ;
63,71c63
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   verbosityBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
64,71c64
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void BZ_API(BZ2_bzReadGetUnused) ( 
64,71c64
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_API(BZ2_bzReadGetUnused) ( 
64,71c64
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   small(BZ2_bzReadGetUnused) ( 
65,71c65
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ2_bzReadGetUnused) ( 
65,71c65
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void) ( 
65,71c65
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* ( 
65,72c65
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       void* unusedint*    bzerror, 
66,72c66
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
66,72c66
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int   bzerror, 
67,72c67
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    , 
67,73c67
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
69,73c69
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
71,73c71
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
71,73c71
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
71,74c71
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void void**  unused,  
71,74c71
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API**  unused,  
71,74c71
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(*  unused,  
71,74c71
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedunused,  
71,74c71
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ,  
72,74d71
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
72,74d71
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
72,74d71
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
72,76c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    bzerror);
73,76c73
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
73,78c73
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILEBZ_EXTERN int BZ_API(BZ2_bzReadlen 
73,78c73
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* int BZ_API(BZ2_bzReadlen 
73,78c73
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* bBZ_API(BZ2_bzReadlen 
74,78c74
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       (BZ2_bzReadlen 
74,78c74
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       voidBZ2_bzReadlen 
74,79c74
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void*);
74,79c74
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  ;
74,81c74
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void**  unusedBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
75,81c75
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
75,81c75
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int* BZ_API(BZ2_bzWriteOpen) ( 
75,81c75
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZ_API(BZ2_bzWriteOpen) ( 
76,81c76
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
76,81c76
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
78,81c78
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
78,81c78
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
78,82c78
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int int*  bzerror,      
78,82c78
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API*  bzerror,      
78,82c78
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API(bzerror,      
79,82c79
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ,      
79,83c79
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )FILE* f, 
81,83c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> * f, 
81,83c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN f, 
81,83c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
81,84c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* int   blockSize100k, 
81,84c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIblockSize100k, 
81,84c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
81,85c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity, 
81,85c81
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) verbosity, 
82,85c82
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
82,86c82
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       intint   workFactor 
82,86c82
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  workFactor 
82,87c82
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  bzerror);
83,87c83
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
83,89c83
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILEBZ_EXTERN void BZ_API(BZ2_bzWritelen 
83,89c83
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* void BZ_API(BZ2_bzWritelen 
83,89c83
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* fBZ_API(BZ2_bzWritelen 
84,89c84
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       (BZ2_bzWritelen 
84,89c84
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   BZ2_bzWritelen 
84,90c84
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   blockSize100k);
85,90c85
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       ;
85,92c85
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
85,92c85
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   verbosityvoid BZ_API(BZ2_bzWriteClose) ( 
86,92c86
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_API(BZ2_bzWriteClose) ( 
86,92c86
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   (BZ2_bzWriteClose) ( 
87,92c87
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ2_bzWriteClose) ( 
87,92c87
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )) ( 
89,92c89
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
89,93c89
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
89,93c89
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
89,93c89
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
89,93c89
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
90,94c90
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
90,94c90
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
92,94c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
92,94c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
92,95c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
92,95c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
92,95c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
92,96c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in, 
92,96c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) int* nbytes_in, 
93,96c93
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
93,96c93
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intnbytes_in, 
93,96c93
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          , 
93,97c93
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerrorunsigned int* nbytes_out 
94,97c94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
94,97c94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE* nbytes_out 
94,97c94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       nbytes_out 
94,98c94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       b);
95,98c95
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       ;
95,100c95
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
95,100c95
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandonvoid BZ_API(BZ2_bzWriteClose64) ( 
96,100c96
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_API(BZ2_bzWriteClose64) ( 
96,100c96
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned (BZ2_bzWriteClose64) ( 
96,100c96
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ2_bzWriteClose64) ( 
96,100c96
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ) ( 
96,100c96
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in( 
97,100d96
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
97,101c97
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
97,101c97
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned intbzerror, 
97,101c97
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* , 
98,102c98
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
98,102c98
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
100,102c100
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
100,102c100
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
100,103c100
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
100,103c100
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
100,103c100
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
100,104c100
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32, 
100,104c100
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) int* nbytes_in_lo32, 
101,104c101
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
101,104c101
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intnbytes_in_lo32, 
101,104c101
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          , 
101,105c101
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerrorunsigned int* nbytes_in_hi32, 
102,105c102
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
102,105c102
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE* nbytes_in_hi32, 
102,105c102
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       nbytes_in_hi32, 
103,105d102
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
103,105d102
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
103,106c103
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           int* nbytes_out_lo32, 
103,106c103
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandon* nbytes_out_lo32, 
104,106c104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       nbytes_out_lo32, 
104,106c104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned , 
104,107c104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intunsigned int* nbytes_out_hi32
104,107c104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* int* nbytes_out_hi32
104,107c104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32* nbytes_out_hi32
105,107c105
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
105,108c105
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
105,108c105
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int;
105,113c105
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
105,113c105
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32int BZ_API(BZ2_bzBuffToBuffCompress) ( 
106,113c106
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffCompress) ( 
106,113c106
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned (BZ2_bzBuffToBuffCompress) ( 
106,113c106
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ2_bzBuffToBuffCompress) ( 
106,113c106
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ) ( 
106,113c106
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32( 
107,113d106
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
107,114c107
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned *         dest, 
107,114c107
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned intdest, 
107,114c107
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* , 
108,115c108
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
108,115c108
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
113,115c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
113,115c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
113,115c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
113,116c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
113,116c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
113,116c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompresssource, 
113,116c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) , 
114,116d113
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
114,117c114
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
114,117c114
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
114,117c114
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
115,117d114
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
115,118c115
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned blockSize100k, 
115,118c115
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int, 
115,119c115
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* int           verbosity, 
115,119c115
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* destLenverbosity, 
116,119c116
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
116,120c116
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       charint           workFactor 
116,120c116
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         workFactor 
116,121c116
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         source);
117,121c117
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
117,123c117
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
117,123c117
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
117,123c117
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ_API(BZ2_bzBuffToBuffDecompress) ( 
118,123c118
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
118,123c118
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
118,123c118
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100k) ( 
119,123c119
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
119,124c119
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           char*         dest, 
119,124c119
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbosity*         dest, 
120,124c120
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       dest, 
120,124c120
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           , 
121,125c121
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
121,125c121
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
123,125c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
123,125c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
123,125c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) , 
124,126d123
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
124,127c124
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
124,127c124
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
124,127c124
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
125,127d124
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
125,128c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned small, 
125,128c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int, 
125,129c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* int           verbosity 
125,129c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* destLenverbosity 
126,130c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       );
126,130c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       char;
126,135c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
126,135c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         sourceconst char * BZ_API(BZ2_bzlibVersion) (
127,135c127
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char * BZ_API(BZ2_bzlibVersion) (
127,135c127
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned * BZ_API(BZ2_bzlibVersion) (
127,135c127
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ_API(BZ2_bzlibVersion) (
127,135c127
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen(BZ2_bzlibVersion) (
128,135c128
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ2_bzlibVersion) (
128,135c128
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           ) (
128,135c128
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           small(
129,135d128
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
129,137c129
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           );
130,137c130
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>    ;
130,139c130
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
135,139c135
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZFILE * BZ_API(BZ2_bzopen) (
(92.6 %, 15110 bytes)
129,132c129
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           path,
129,132c129
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           ),
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> const char *mode
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN char *mode
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE *mode
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * mode
131,134c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API);
131,134c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(;
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenBZ_EXTERN ;
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
132,138c132
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       BZ_EXTERN int BZ_API;
132,138c132
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const int BZ_API;
132,138c132
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const char BZ_API;
132,138c132
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const char *;
132,140c132
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const char *pathBZ_EXTERN int BZ_API;
133,140c133
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       int BZ_API;
133,140c133
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const BZ_API;
133,140c133
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const char ;
133,142c133
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       const char *BZ_EXTERN int BZ_API(BZ2_bzflush) (
134,142c134
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>    int BZ_API(BZ2_bzflush) (
134,142c134
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>    )BZ_API(BZ2_bzflush) (
136,142c136
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> (BZ2_bzflush) (
136,142c136
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN BZ2_bzflush) (
138,142c138
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> ) (
138,142c138
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN (
138,143c138
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       );
---
> BZ_EXTERN int );
140,144d139
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       );
< 
(92.7 %, 15022 bytes)
136,151c136
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> include <stdlib.h>
136,151c136
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> (<stdlib.h>
136,151c136
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> (BZ2_bzflushstdlib.h>
136,151c136
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> (BZ2_bzflush) .h>
137,151c137
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       h>
137,151c137
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       )>
139,155d138
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
139,156c139
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN define BZ_VERSION  "1.0.2, 30-Dec-2001"
139,156c139
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const BZ_VERSION  "1.0.2, 30-Dec-2001"
149,156c149
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> "1.0.2, 30-Dec-2001"
149,159c149
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #typedef unsigned char   Bool;
149,159c149
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #define unsigned char   Bool;
151,159c151
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> char   Bool;
151,159c151
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #Bool;
151,159c151
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #include ;
151,161c151
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #include <typedef int             Int32;
151,161c151
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #include <stdlibint             Int32;
(92.7 %, 14945 bytes)
139,144d138
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
139,145c139
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #unsigned int    UInt32;
139,145c139
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #define int    UInt32;
139,145c139
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #define BZ_VERSION  UInt32;
142,145c142
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> ;
142,149c142
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef #define True  ((Bool)1)
142,149c142
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned define True  ((Bool)1)
142,149c142
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   True  ((Bool)1)
142,149c142
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   Bool((Bool)1)
144,149c144
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> (Bool)1)
144,149c144
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef Bool)1)
144,149c144
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef int             )1)
144,149c144
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef int             Int321)
145,149c145
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> )
145,150c145
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef #define False ((Bool)0)
145,150c145
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned define False ((Bool)0)
145,150c145
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned int    False ((Bool)0)
145,150c145
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned int    UInt32((Bool)0)
149,150c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
149,150c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
149,150c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )0)
149,150c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  0)
149,150c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()
149,152c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((#define __inline__  
149,152c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Booldefine __inline__  
149,152c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)__inline__  
149,154c149
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
---
> #define True  ((Bool)1\
150,155d149
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
150,155d149
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
150,155d149
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
150,156c150
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
---
> #define False (cond,msg) \
150,156c150
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
---
> #define False (cond,msg) \
150,156c150
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
---
> #define False ((,msg) \
150,156c150
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
---
> #define False ((Boolmsg) \
150,156c150
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
---
> #define False ((Bool)) \
150,156c150
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
---
> #define False ((Bool)0\
152,157d151
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
<    
152,157d151
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
<    
152,157d151
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) \
<    
154,158c154
< \
<    
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
---
> )0xa   
156,158c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
---
> 0xa   
156,159c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
---
> ##define BZ_HDR_h 0x8   
156,159c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
---
> #define define BZ_HDR_h 0x8   
156,159c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
---
> #define AssertDBZ_HDR_h 0x8   
156,159c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
---
> #define AssertD(0x8   
156,160c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> #define AssertD(cond#define BZ_HDR_0 0x0   
156,160c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> #define AssertD(cond,define BZ_HDR_0 0x0   
156,160c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> #define AssertD(cond,msgBZ_HDR_0 0x0   
156,160c156
< #define AssertD(cond,msg) \
<    
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
---
> #define AssertD(cond,msg) 0x0   
158,163d157
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
158,163d157
< #define za1VPrintf4zfBZALLOC)0xa   
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
(92.7 %, 14862 bytes)
156,169c156
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define AssertD(cond,msg) BZ_RAND_DECLS                          \
160,169c160
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> \
160,170c160
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #Int32 rNToGo;                               \
160,170c160
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define rNToGo;                               \
160,170c160
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_ALPHA_SIZE ;                               \
161,170c161
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> \
161,171c161
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #Int32 rTPos                                 \
161,171c161
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define rTPos                                 \
161,171c161
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define define \
161,173c161
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define define BZ_G_SIZE#\
161,173c161
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define define BZ_G_SIZE)\
169,174d168
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
169,174d168
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
169,174d168
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
169,175c169
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_RAND_DECLS                          #define BZ_UPDATE_CRC(crcVar,cha)              \
170,175c170
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    define BZ_UPDATE_CRC(crcVar,cha)              \
170,175c170
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 BZ_UPDATE_CRC(crcVar,cha)              \
170,175c170
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 rNToGo(crcVar,cha)              \
170,175c170
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 rNToGo;                               crcVar,cha)              \
171,175c171
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    ,cha)              \
171,175c171
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 cha)              \
171,175c171
<    Int32 rTPos                                 \
< 
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 rTPos                                 )              \
173,175c173
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> \
173,182c173
< #\
< 
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> ##define BZ_M_IDLE      1
175,182c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
175,182c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #BZ_M_IDLE      1
175,182c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define 1
175,183c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define #define BZ_M_RUNNING   2
175,183c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define #define BZ_M_RUNNING   2
175,183c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define #define BZ_M_RUNNING   2
175,183c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define define #define BZ_UPDATE_CRC2
175,184c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define BZ_UPDATE_CRC(#define BZ_M_FLUSHING  3
175,184c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define BZ_UPDATE_CRC(crcVardefine BZ_M_FLUSHING  3
175,184c175
< #define define #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define define #define BZ_UPDATE_CRC(crcVar,BZ_M_FLUSHING  3
(92.8 %, 14796 bytes)
173,182d172
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
180,183c180
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> define BZ_M_FINISHING 4
180,183c180
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #BZ_M_FINISHING 4
180,183c180
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define 4
180,185c180
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_M_IDLE      #define BZ_S_OUTPUT    1
181,185c181
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> define BZ_S_OUTPUT    1
181,185c181
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #BZ_S_OUTPUT    1
181,185c181
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define 1
181,186c181
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_M_RUNNING   #define BZ_S_INPUT     2
182,186c182
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> define BZ_S_INPUT     2
182,186c182
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #BZ_S_INPUT     2
182,186c182
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define 2
182,188c182
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_M_FLUSHING  #define BZ_N_RADIX 2
183,188c183
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
183,188c183
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #BZ_N_RADIX 2
183,188c183
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define 2
183,189c183
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_M_FINISHING #define BZ_N_QSORT 2
185,189c185
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 2
185,189c185
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #BZ_N_QSORT 2
185,189c185
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define 2
185,190c185
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_S_OUTPUT    #define BZ_N_SHELL 8
186,190c186
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 8
186,190c186
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #BZ_N_SHELL 8
186,190c186
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define 8
186,191c186
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_S_INPUT     #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
188,191c188
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
188,191c188
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
188,191c188
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
188,191c188
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
189,191c189
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + BZ_N_QSORT + BZ_N_SHELL + 2)
189,191c189
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_QSORT + BZ_N_SHELL + 2)
189,191c189
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + BZ_N_SHELL + 2)
189,191c189
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT BZ_N_SHELL + 2)
190,191c190
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + 2)
190,191c190
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #2)
190,191c190
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define )
190,198c190
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_N_SHELL typedef
191,199c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
191,199c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
191,201c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define bz_stream* strm;
191,201c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT * strm;
191,201c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (strm;
191,201c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX ;
191,205c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + Int32    mode;
191,205c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT mode;
191,205c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + ;
191,206c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL Int32    state;
191,206c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + state;
191,206c191
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2;
198,212c198
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
> UInt32*  arr1;
199,212c199
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    *  arr1;
199,212c199
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    struct arr1;
201,212c201
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       ;
201,213c201
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_streamUInt32*  arr2;
201,213c201
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* *  arr2;
201,213c201
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* strmarr2;
205,213c205
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       ;
205,214c205
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    UInt32*  ftab;
205,214c205
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    mode*  ftab;
206,214c206
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       ftab;
206,214c206
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    ;
206,218c206
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       Int32    stateUInt32*  ptr;
212,218c212
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       *  ptr;
212,218c212
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       UInt32ptr;
212,218c212
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  ;
212,219c212
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32*  arr1unsigned char*   block;
213,219c213
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       char*   block;
213,219c213
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32*   block;
213,219c213
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32*  block;
214,219d213
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
214,219d213
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
214,220c214
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32short*  mtfv;
214,220c214
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32*  *  mtfv;
214,220c214
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32*  ftabmtfv;
218,220c218
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       ;
218,221c218
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       UInt32unsigned char*   zbits;
218,221c218
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       UInt32*  char*   zbits;
218,221c218
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       UInt32*  ptr*   zbits;
219,221c219
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       zbits;
219,221c219
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
---
>       unsigned ;
219,224c219
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
---
>       unsigned charInt32    workFactor;
219,224c219
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
---
>       unsigned char*   workFactor;
220,224d219
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
220,228d219
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
220,229c220
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
---
>       unsigned ;
220,232c220
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       unsigned shortInt32    nblock;
220,232c220
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       unsigned short*  nblock;
221,232d220
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
221,232d220
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
221,233c221
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       unsigned nblockMAX;
(92.8 %, 14657 bytes)
220,228c220
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       unsigned short*  mtfvunsigned char    unseqToSeq[6];
221,228c221
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       char    unseqToSeq[6];
221,228c221
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    unseqToSeq[6];
221,228c221
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    nblockMAX[6];
226,228c226
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       6];
226,228c226
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    ];
227,228d226
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
227,235d226
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
227,236c227
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Bool     combinedCRC;
227,236c227
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Bool     inUse;
227,239c227
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     inUse[Int32    verbosity;
227,239c227
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     inUse[6verbosity;
228,239d227
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
228,239d227
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
228,240c228
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       unsigned blockNo;
228,240c228
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       unsigned char    ;
228,241c228
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       unsigned char    unseqToSeqInt32    blockSize100k;
228,241c228
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       unsigned char    unseqToSeq[blockSize100k;
228,241c228
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       unsigned char    unseqToSeq[6;
228,244c228
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       unsigned char    unseqToSeq[6]Int32    nMTF;
236,244c236
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       nMTF;
236,244c236
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       UInt32   ;
236,245c236
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       UInt32   combinedCRCInt32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
239,245c239
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       mtfFreq    [BZ_MAX_ALPHA_SIZE];
239,245c239
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    [BZ_MAX_ALPHA_SIZE];
239,245c239
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    verbosityBZ_MAX_ALPHA_SIZE];
240,245c240
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       ];
240,245c240
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
240,255c240
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
---
>       Int32    blockNo}
241,256c241
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       EState;
241,256c241
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       Int32    ;
243,265d242
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
244,266c244
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       ;
244,276c244
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    #define BZ_X_IDLE        1
244,276c244
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    nMTFdefine BZ_X_IDLE        1
245,276c245
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       BZ_X_IDLE        1
245,276c245
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    1
245,277c245
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    mtfFreq    #define BZ_X_OUTPUT      2
245,277c245
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    mtfFreq    [define BZ_X_OUTPUT      2
245,277c245
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZEBZ_X_OUTPUT      2
245,277c245
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]2
255,279c255
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    #define BZ_X_MAGIC_1     0
(92.9 %, 14495 bytes)
240,264c240
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>       Int32    blockNo#define BZ_X_MAGIC_1     0
241,264c241
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    define BZ_X_MAGIC_1     0
241,264c241
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    EStateBZ_X_MAGIC_1     0
249,264c249
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
> 0
251,264d250
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
261,265c261
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
---
> define define define BZ_X_CCRC_3      9
261,265c261
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
---
> #define define BZ_X_CCRC_3      9
261,265c261
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
---
> #define define BZ_X_CCRC_3      9
261,265c261
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
---
> #define BZ_X_IDLE        BZ_X_CCRC_3      9
262,265c262
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
---
> 9
262,266c262
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> ##define BZ_X_CCRC_4      0
262,266c262
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> #define define BZ_X_CCRC_4      0
262,266c262
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> #define BZ_X_OUTPUT      BZ_X_CCRC_4      0
264,266c264
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> 0
264,272c264
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
---
> ##define MTFA_SIZE 6
264,272c264
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
---
> #define define MTFA_SIZE 6
264,272c264
< #define BZ_X_MAGIC_1     0
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
---
> #define BZ_X_MAGIC_1     MTFA_SIZE 6
265,272c265
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
---
> 6
265,273c265
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
---
> ##define MTFL_SIZE 6
265,273c265
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
---
> #define define MTFL_SIZE 6
265,273c265
< #define define define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
---
> #define define MTFL_SIZE 6
(93.0 %, 14409 bytes)
265,283c265
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> #define BZ_RAND_DECLS;
265,283c265
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> #define define ;
265,286c265
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> #define define MTFL_SIZE UInt32   bsBuff;
271,286c271
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> bsBuff;
272,286c272
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>    ;
272,287c272
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>    struct Int32    bsLive;
274,287c274
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bsLive;
274,287c274
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bz_stream;
274,291c274
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_stream* Bool     smallDecompress;
274,291c274
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_stream* strmsmallDecompress;
277,291c277
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       ;
277,292c277
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       Int32    Int32    currBlockNo;
277,292c277
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       Int32    statecurrBlockNo;
283,292c283
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       ;
283,293c283
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       BZ_RAND_DECLSInt32    verbosity;
286,293c286
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       verbosity;
286,293c286
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       UInt32   ;
286,305c286
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       UInt32   bsBuffUInt32   *tt;
287,305c287
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       *tt;
287,305c287
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       Int32    tt;
290,307d289
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
291,307d290
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
291,308c291
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       Bool     short   *ll16;
291,308c291
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       Bool     smallDecompress*ll16;
292,308c292
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       ll16;
292,308c292
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       Int32    ;
292,309c292
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       Int32    currBlockNounsigned char    *ll4;
293,309c293
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       char    *ll4;
293,309c293
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       Int32    *ll4;
293,309c293
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       Int32    verbosityll4;
305,309c305
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       ;
305,315c305
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   UInt32   calculatedCombinedCRC;
305,315c305
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   *calculatedCombinedCRC;
308,317d307
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
308,361c308
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>       }
308,362c308
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       unsigned DState;
308,362c308
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       unsigned short   ;
308,368c308
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       unsigned short   *#define tPosc_tPos DOWNHEAP(z)                                   \
308,368c308
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       unsigned short   *ll16define tPosc_tPos DOWNHEAP(z)                                   \
309,368c309
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       tPosc_tPos DOWNHEAP(z)                                   \
309,368c309
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       unsigned DOWNHEAP(z)                                   \
309,368c309
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       unsigned char    (z)                                   \
309,368c309
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       unsigned char    *z)                                   \
309,368c309
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       unsigned char    *ll4)                                   \
315,368c315
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
---
>       \
315,436c315
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
>       UInt32   #define bsNEEDW(nz)                           \
315,436c315
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
>       UInt32   calculatedCombinedCRCdefine bsNEEDW(nz)                           \
361,436c361
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
>    bsNEEDW(nz)                           \
362,436c362
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
>    (nz)                           \
362,436c362
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
>    DStatenz)                           \
368,436c368
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> )                           \
368,436c368
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #\
368,457c368
< #define tPosc_tPos DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
> #define static
(93.1 %, 14230 bytes)
368,392c368
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #;
389,393c389
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> Int32 i;
390,393c390
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> i;
390,393c390
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> void ;
390,394c390
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e s->nInUse = 0;
390,394c390
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e ( ->nInUse = 0;
390,394c390
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e ( void nInUse = 0;
391,394c391
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> = 0;
392,394c392
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    0;
392,394c392
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState ;
392,395c392
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * for (i = 0; i < 6; i++)
392,395c392
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * s (i = 0; i < 6; i++)
392,395c392
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * s = i = 0; i < 6; i++)
392,395c392
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    EState * s = 0= 0; i < 6; i++)
393,395c393
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    0; i < 6; i++)
393,395c393
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    Int32 ; i < 6; i++)
393,395c393
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    Int32 ii < 6; i++)
394,395c394
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    < 6; i++)
394,395c394
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    s6; i++)
394,395c394
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    s->; i++)
394,395c394
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    s->nInUse i++)
394,395c394
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    s->nInUse = ++)
394,395c394
<    s->nInUse = 0;
<    for (i = 0; i < 6; i++)
---
>    s->nInUse = 0)
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    if (s->inUse[i]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (s->inUse[i]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (s->inUse[i]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i ->inUse[i]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = inUse[i]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0[i]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i ]) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i < ) {
395,396c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i < 6{
395,397c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          ;
---
>    for (i = 0; i < 6; ;
395,398c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          ;
<       }
---
>    for (i = 0; i < 6; i}
395,399c395
<    for (i = 0; i < 6; i++)
<       if (s->inUse[i]) {
<          ;
<       }
< }
---
>    for (i = 0; i < 6; i++}
(93.1 %, 14200 bytes)
395,402c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
---
>    static
395,403c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if void generateMTFValues ( void )
395,403c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (generateMTFValues ( void )
395,403c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (s( void )
395,403c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (s->void )
395,403c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (s->inUse)
395,404c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
---
>    if (s->inUse[{
395,405c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>    if (s->inUse[iEState * s = 0;
395,405c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>    if (s->inUse[i]* s = 0;
395,405c395
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>    if (s->inUse[i]) s = 0;
396,405c396
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>          = 0;
397,405c397
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>       0;
398,405c398
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
> ;
402,406c402
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> unsigned char   yy[6];
403,406c403
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> char   yy[6];
403,406c403
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void yy[6];
403,406c403
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues [6];
403,406c403
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues ( 6];
403,406c403
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues ( void ];
404,406c404
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> ;
405,406d404
<    EState * s = 0;
<    unsigned char   yy[6];
405,407c405
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState i, j;
405,407c405
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState * , j;
405,407c405
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState * s j;
405,407c405
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState * s = ;
405,408c405
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
---
>    EState * s = 0Int32   zPend;
406,408c406
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
---
>    zPend;
406,408c406
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
---
>    unsigned ;
406,409c406
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    unsigned char   Int32   wr;
406,409c406
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    unsigned char   yywr;
406,409c406
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    unsigned char   yy[;
406,410c406
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    unsigned char   yy[6Int32   EOB;
406,410c406
<    unsigned char   yy[6];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    unsigned char   yy[6]EOB;
407,410c407
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    ;
407,413c407
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   UInt32* ptr   = s->ptr;
407,413c407
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i* ptr   = s->ptr;
407,413c407
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, ptr   = s->ptr;
407,413c407
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, j= s->ptr;
408,413c408
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    s->ptr;
408,413c408
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   ->ptr;
408,413c408
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   zPendptr;
409,413c409
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    ;
409,414c409
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   unsigned char* block  = s->block;
409,414c409
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   wrchar* block  = s->block;
410,414c410
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    * block  = s->block;
410,414c410
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   block  = s->block;
410,414c410
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    Int32   EOB= s->block;
413,414c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    s->block;
413,414c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    UInt32->block;
413,414c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    UInt32* block;
413,414c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
---
>    UInt32* ptr   ;
413,415c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = unsigned short* mtfv  = s->mtfv;
413,415c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = sshort* mtfv  = s->mtfv;
413,415c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->* mtfv  = s->mtfv;
413,415c413
<    UInt32* ptr   = s->ptr;
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->ptrmtfv  = s->mtfv;
414,415c414
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    = s->mtfv;
414,415c414
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned s->mtfv;
414,415c414
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned char->mtfv;
414,415c414
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned char* mtfv;
414,415c414
<    unsigned char* block  = s->block;
<    unsigned short* mtfv  = s->mtfv;
---
>    unsigned char* block  ;
(93.1 %, 14154 bytes)
413,417c413
<    UInt32* block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UInt32* = s->nInUse+1;
413,417c413
<    UInt32* block;
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UInt32* blocks->nInUse+1;
414,417c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    ->nInUse+1;
414,417c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned nInUse+1;
414,417c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned short+1;
414,417c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned short* 1;
414,417c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    unsigned short* mtfv  ;
414,419c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    unsigned short* mtfv  = for (i = 0; i <= EOB; i++) 0;
414,419c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    unsigned short* mtfv  = s(i = 0; i <= EOB; i++) 0;
414,419c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    unsigned short* mtfv  = s->i = 0; i <= EOB; i++) 0;
414,419c414
<    unsigned short* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    unsigned short* mtfv  = s->mtfv= 0; i <= EOB; i++) 0;
416,419c416
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    0; i <= EOB; i++) 0;
417,419c417
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    ; i <= EOB; i++) 0;
417,419c417
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB i <= EOB; i++) 0;
417,419c417
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = <= EOB; i++) 0;
417,419c417
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = sEOB; i++) 0;
417,419c417
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = s->; i++) 0;
(93.1 %, 14117 bytes)
414,416c414
<    unsigned short* mtfv  ;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    unsigned short* mtfv  ) 0;
416c416
<    for (i = 0; i <= EOB; i++) 0;
---
>    0;
416c416
<    for (i = 0; i <= EOB; i++) 0;
---
>    for ;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (yy[i] = (unsigned char) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i [i] = (unsigned char) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i = i] = (unsigned char) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i = 0] = (unsigned char) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i = 0; = (unsigned char) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i = 0; i (unsigned char) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i = 0; i <= unsigned char) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i = 0; i <= EOBchar) i;
416,417c416
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (unsigned char) i;
---
>    for (i = 0; i <= EOB; ) i;
(93.1 %, 14090 bytes)
416,418d415
<    0;
<    yy[i] = (unsigned char) i;
< 
416,420c416
<    0;
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
---
>    0unsigned char ll_i;
417,420c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
---
>    char ll_i;
417,420c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
---
>    yyll_i;
417,420c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
---
>    yy[;
417,421c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[ill_i = s->unseqToSeq[block[j]];
417,421c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = s->unseqToSeq[block[j]];
417,421c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = s->unseqToSeq[block[j]];
417,421c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = (->unseqToSeq[block[j]];
417,421c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = (unsigned unseqToSeq[block[j]];
417,421c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = (unsigned char[block[j]];
417,421c417
<    yy[i] = (unsigned char) i;
< 
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = (unsigned char) block[j]];
(93.1 %, 14053 bytes)
416,418c416
<    {
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    j]];
417,418c417
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>       ]];
417,418c417
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>       unsigned ];
417,418c417
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>       unsigned char ;
417,419c417
<       unsigned char ll_i;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       unsigned char ll_iAssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ( ll_i  s-nInUse, "generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i ll_i  s-nInUse, "generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s-nInUse, "generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s-nInUse, "generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->nInUse, "generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->unseqToSeq, "generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->unseqToSeq["generateMTFValues(a)" );
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->unseqToSeq[block);
418,419c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ll_i = s->unseqToSeq[block[;
418,421c418
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
---
>       ll_i = s->unseqToSeq[block[j{
(93.2 %, 14011 bytes)
417,422c417
<       unsigned char ;
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       unsigned char (zPend > 0) 
418,422c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       zPend > 0) 
418,422c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       AssertD > 0) 
418,422c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       AssertD ( 0) 
418,422c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       AssertD ( ll_i  ) 
418,423c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
<          {
---
>       AssertD ( ll_i  s{
418,424c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>       AssertD ( ll_i  s-register unsigned char  rtmp;
418,424c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>       AssertD ( ll_i  s-nInUseunsigned char  rtmp;
418,424c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>       AssertD ( ll_i  s-nInUse, char  rtmp;
418,424c418
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
---
>       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" rtmp;
419,424d418
< 
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
420,425c420
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>       register unsigned char* ryy_j;
422,425c422
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          unsigned char* ryy_j;
422,425c422
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          if char* ryy_j;
422,425c422
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          if (* ryy_j;
422,425c422
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          if (zPend ryy_j;
422,425c422
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
---
>          if (zPend > ;
422,426c422
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>          if (zPend > 0register unsigned char  rll_i;
423,426c423
<          {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>          unsigned char  rll_i;
424,426c424
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>             char  rll_i;
424,426c424
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>             register rll_i;
424,426c424
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
---
>             register unsigned ;
424,427c424
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  ;
---
>             register unsigned char  rtmp  ;
425,427d424
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  ;
(93.2 %, 13907 bytes)
424,437c424
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
---
>             register unsigned char  ( void )
424,437c424
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
---
>             register unsigned char  rtmp  void )
425,437c425
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
---
>             )
426,438d425
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
< ;
426,442c426
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
---
>          static
428,443c428
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
>       int bz_config_ok ( void )
429,443c429
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
>    bz_config_ok ( void )
431,443c431
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
>    ( void )
435,443c435
< ;
< 
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
> void )
437,443c437
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
> )
437,444c437
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
---
> #;
437,448c437
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
---
> #define static
437,449c437
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
---
> #define GET_BITSlllvoid* default_bzalloc (   void )
437,449c437
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
---
> #define GET_BITSlll;                      * default_bzalloc (   void )
437,449c437
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
---
> #define GET_BITSlll;                      ( default_bzalloc (   void )
437,449c437
< #define GET_BITSlll;                      ( void )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
---
> #define GET_BITSlll;                      ( void (   void )
438,449c438
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
---
> void )
442,449c442
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
---
> )
443,449d442
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
443,452c443
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
< static
---
> int static
443,453c443
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  )
---
> int bz_config_ok void default_bzfree (  )
443,453c443
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  )
---
> int bz_config_ok ( default_bzfree (  )
(93.3 %, 13821 bytes)
437,443c437
< #define static
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  )
< ;
---
> #define ;
438,445d437
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  )
< ;
< 
< 
438,447c438
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  )
< ;
< 
< 
< static
< Bool isempty_RL ( void )
---
> voidBool isempty_RL ( void )
438,447c438
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  )
< ;
< 
< 
< static
< Bool isempty_RL ( void )
---
> void* isempty_RL ( void )
438,447c438
< void* default_bzalloc (   void )
< ;
< 
< static
< void default_bzfree (  )
< ;
< 
< 
< static
< Bool isempty_RL ( void )
---
> void* default_bzalloc ( void )
441,449d440
< static
< void default_bzfree (  )
< ;
< 
< 
< static
< Bool isempty_RL ( void )
< ;
< 
(93.3 %, 13748 bytes)
438,444c438
< void* default_bzalloc ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void* default_bzalloc , 
438,445c438
< void* default_bzalloc ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void* default_bzalloc ( int        blockSize100k,
438,445c438
< void* default_bzalloc ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void* default_bzalloc ( void blockSize100k,
439,445c439
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> ,
443,446c443
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int        verbosity,
443,446c443
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int verbosity,
443,446c443
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API,
443,447c443
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(int        workFactor )
443,447c443
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(BZ2_bzCompressInitworkFactor )
444,447c444
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     )
444,448c444
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( {
444,449c444
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_streamInt32   n;
444,449c444
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* n;
444,449c444
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strm;
445,450c445
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      EState* s;
445,450c445
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        * s;
445,450c445
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100ks;
446,450c446
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      ;
446,452c446
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>                      int        if (!blockSize100k > workFactor == 0) workFactor = 0;
446,452c446
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>                      int        verbosity(!blockSize100k > workFactor == 0) workFactor = 0;
447,452c447
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>                      !blockSize100k > workFactor == 0) workFactor = 0;
447,452c447
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>                      int        blockSize100k > workFactor == 0) workFactor = 0;
447,452c447
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>                      int        workFactor > workFactor == 0) workFactor = 0;
448,452c448
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
> workFactor == 0) workFactor = 0;
449,452c449
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>    == 0) workFactor = 0;
449,452c449
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>    Int32   0) workFactor = 0;
449,452c449
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>    Int32   n) workFactor = 0;
450,452c450
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>    workFactor = 0;
450,452c450
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>    EState= 0;
450,452c450
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
---
>    EState* 0;
451,452d450
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
452d451
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
452d451
<    if (!blockSize100k > workFactor == 0) workFactor = 0;
(93.3 %, 13690 bytes)
450,451c450
<    EState* s;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    EState* sdefault_bzalloc;
451c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    ;
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if if (strm->bzfree == NULL);
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if ((strm->bzfree == NULL);
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strmstrm->bzfree == NULL);
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->->bzfree == NULL);
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc bzfree == NULL);
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == == NULL);
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == NULLNULL);
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == NULL) );
451,452c451
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == NULL) strm;
(93.3 %, 13632 bytes)
451,454c451
<    ;
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
---
>    = NULL;
452,454c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
---
>    NULL;
452,454c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
---
>    if ;
452,455c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (s->arr2 = NULL;
452,455c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->arr2 = NULL;
452,455c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->arr2 = NULL;
452,455c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->bzfree = NULL;
452,455c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->bzfree == NULL;
452,455c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->bzfree == NULL;
452,456c452
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    if (strm->bzfree == NULL)sBZALLOC( n                  * sizeof(UInt32) );
(93.4 %, 13591 bytes)
452,454c452
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    (UInt32) );
452,454c452
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    NULLUInt32) );
453,454c453
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    ) );
453,454c453
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    s);
453,454c453
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    s->;
453,455c453
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
453,455c453
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = ->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
453,455c453
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = NULLarr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
454,455c454
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
454,455c454
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
454,455c454
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
454,455c454
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
454,455c454
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
454,455c454
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof+BZ_N_OVERSHOOT) * sizeof(UInt32) );
454,455c454
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(BZ_N_OVERSHOOT) * sizeof(UInt32) );
(93.4 %, 13537 bytes)
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOCs->ftab = BZALLOC( 7              * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( ->ftab = BZALLOC( 7              * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (ftab = BZALLOC( 7              * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n= BZALLOC( 7              * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZALLOC( 7              * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT( 7              * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) 7              * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * * sizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeofsizeof(UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof((UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32UInt32) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ) );
454,455c454
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ));
455c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
---
>    ;
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sif (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->(s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOCarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              NULL || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * || s->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeofs->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeof(->arr2 == NULL || s->ftab == NULL) 
455,457c455
<    s->ftab = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 7              * sizeof(UInt32arr2 == NULL || s->ftab == NULL) 
(93.4 %, 13485 bytes)
455,457c455
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    NULL || s->ftab == NULL) 
457c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    || s->ftab == NULL) 
457c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->ftab == NULL) 
457c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->ftab == NULL) 
457c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (sftab == NULL) 
457c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->== NULL) 
457c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->arr1 NULL) 
457c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->arr1 == ) 
457,459c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL s->blockNo           = 0;
457,459c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || ->blockNo           = 0;
457,459c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || sblockNo           = 0;
457,459c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->= 0;
457,459c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->arr2 0;
457,459c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->arr2 == ;
457,460c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL s->state             = BZ_S_INPUT;
457,460c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || ->state             = BZ_S_INPUT;
457,460c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || sstate             = BZ_S_INPUT;
457,460c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->= BZ_S_INPUT;
457,460c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab BZ_S_INPUT;
457,460c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == ;
457,461c457
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULLs->mode              = BZ_M_RUNNING;
459,461c459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    ->mode              = BZ_M_RUNNING;
459,461c459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    smode              = BZ_M_RUNNING;
459,461c459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->= BZ_M_RUNNING;
459,461c459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->blockNo           BZ_M_RUNNING;
459,461c459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->blockNo           = ;
459,462c459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
---
>    s->blockNo           = 0s->combinedCRC       = s;
460,462c460
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
---
>    ->combinedCRC       = s;
460,462c460
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
---
>    scombinedCRC       = s;
460,462c460
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
---
>    s->= s;
460,462c460
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
---
>    s->state             s;
460,462c460
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
---
>    s->state             = ;
460,463c460
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->state             = BZ_S_INPUTs->ptr               = (UInt32*)s->arr1;
461,463c461
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    ->ptr               = (UInt32*)s->arr1;
461,463c461
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    sptr               = (UInt32*)s->arr1;
461,463c461
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->= (UInt32*)s->arr1;
461,463c461
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mode              (UInt32*)s->arr1;
461,463c461
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mode              = UInt32*)s->arr1;
461,463c461
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mode              = BZ_M_RUNNING*)s->arr1;
462,463c462
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    )s->arr1;
462,463c462
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    ss->arr1;
462,463c462
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->->arr1;
462,463c462
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       arr1;
462,463c462
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       = ;
462,465c462
<    s->combinedCRC       = s;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->combinedCRC       = sstrm->state          = s;
463,465c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    ->state          = s;
463,465c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    sstate          = s;
463,465c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->= s;
463,465c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->ptr               s;
463,465c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->ptr               = ;
463,466c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (strm->total_in_lo32  = 0;
463,466c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32->total_in_lo32  = 0;
463,466c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*total_in_lo32  = 0;
463,466c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)= 0;
463,466c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)s0;
463,466c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)s->;
463,467c463
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    s->ptr               = (UInt32*)s->arr1strm->total_in_hi32  ;
465,467c465
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    ->total_in_hi32  ;
465,467c465
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    strmtotal_in_hi32  ;
465,467c465
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    strm->;
465,468c465
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
<    ;
---
>    strm->state          ;
465,469c465
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
<    ;
<    return BZ_OK;
---
>    strm->state          = return BZ_OK;
465,469c465
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
<    ;
<    return BZ_OK;
---
>    strm->state          = sBZ_OK;
466,467d465
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
469d466
<    return BZ_OK;
(93.5 %, 13422 bytes)
465,483c465
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->state          *strm, int action )
466,483c466
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm, int action )
466,483c466
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return , int action )
466,483c466
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OKint action )
467,483c467
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> action )
479,483c479
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> )
483d482
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
483,486c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int EState* s;
483,486c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API* s;
483,486c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(s;
483,486c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) if (s == NULL) return BZ_PARAM_ERROR;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( (s == NULL) return BZ_PARAM_ERROR;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream s == NULL) return BZ_PARAM_ERROR;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *== NULL) return BZ_PARAM_ERROR;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strmNULL) return BZ_PARAM_ERROR;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, ) return BZ_PARAM_ERROR;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int return BZ_PARAM_ERROR;
483,487c483
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action BZ_PARAM_ERROR;
484,487c484
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> ;
486,487d485
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
486,488c486
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
---
>    EState(s) 
486,488c486
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
---
>    EState* s) 
486,488c486
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
---
>    EState* s) 
487,488d486
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
487,489c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
---
>    if BZ_OK; 
487,489c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
---
>    if (; 
487,490c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
---
>    if (s ;
487,491c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == if (s == NULL) return BZ_PARAM_ERROR;
487,491c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL(s == NULL) return BZ_PARAM_ERROR;
487,491c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) s == NULL) return BZ_PARAM_ERROR;
487,491c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) return == NULL) return BZ_PARAM_ERROR;
487,491c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) return BZ_PARAM_ERRORNULL) return BZ_PARAM_ERROR;
488,491c488
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    ) return BZ_PARAM_ERROR;
488,491c488
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if return BZ_PARAM_ERROR;
488,491c488
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (BZ_PARAM_ERROR;
(93.5 %, 13370 bytes)
487,489d486
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
487,490c487
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
>    return (NULL) BZFREE(s->ftab);
487,490c487
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
>    return BZ_OKNULL) BZFREE(s->ftab);
488,490c488
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
> ) BZFREE(s->ftab);
489,490c489
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
>    BZFREE(s->ftab);
(93.5 %, 13309 bytes)
487,497c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    int BZ_API(BZ2_bzDecompressInit) 
487,497c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if BZ_API(BZ2_bzDecompressInit) 
487,497c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if ((BZ2_bzDecompressInit) 
487,497c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (NULLBZ2_bzDecompressInit) 
487,497c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (NULL) ) 
487,498c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE( bz_stream* strm, 
487,498c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(bz_stream* strm, 
487,498c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(s* strm, 
487,498c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(s->strm, 
487,498c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(s->ftab, 
487,499c487
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    if (NULL) BZFREE(s->ftab)int        verbosity,
488,499c488
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    verbosity,
489,499c489
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> ,
497,500c497
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int        small )
497,500c497
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int small )
497,500c497
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API)
497,501c497
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int BZ_API({
497,502c497
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompressInitDState* s;
498,502c498
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      * s;
498,502c498
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( s;
498,502c498
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream;
498,504c498
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                      ( bz_stream* if (verbosity == NULL) strm->bzalloc = default_bzalloc;
498,504c498
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                      ( bz_stream* strm(verbosity == NULL) strm->bzalloc = default_bzalloc;
499,504c499
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        verbosity == NULL) strm->bzalloc = default_bzalloc;
499,504c499
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        == NULL) strm->bzalloc = default_bzalloc;
499,504c499
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        verbosityNULL) strm->bzalloc = default_bzalloc;
500,504c500
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        ) strm->bzalloc = default_bzalloc;
500,504c500
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        strm->bzalloc = default_bzalloc;
500,504c500
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        small ->bzalloc = default_bzalloc;
501,504c501
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
> bzalloc = default_bzalloc;
502,504c502
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>    = default_bzalloc;
502,504c502
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>    DStatedefault_bzalloc;
502,504c502
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>    DState* ;
502,505c502
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    DState* sif (strm->bzfree == NULL);
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    (strm->bzfree == NULL);
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if strm->bzfree == NULL);
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (->bzfree == NULL);
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity bzfree == NULL);
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == == NULL);
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == NULLNULL);
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == NULL) );
504,505c504
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == NULL) strm;
(93.5 %, 13247 bytes)
504,505c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
---
>    ;
504,506c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (s->state                 = BZ_X_MAGIC_1;
504,506c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->state                 = BZ_X_MAGIC_1;
504,506c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->state                 = BZ_X_MAGIC_1;
504,506c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->bzfree = BZ_X_MAGIC_1;
504,506c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->bzfree == BZ_X_MAGIC_1;
504,506c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->bzfree == NULL;
504,507c504
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    (strm->bzfree == NULL)s->bsLive                = 0;
505,507c505
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    ->bsLive                = 0;
505,507c505
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strmbsLive                = 0;
505,507c505
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->= 0;
505,507c505
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->state              0;
(93.6 %, 13192 bytes)
504,506d503
<    ;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
505,507c505
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    ->bsBuff                = 0;
505,507c505
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    sbsBuff                = 0;
505,507c505
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->= 0;
505,507c505
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->state                 0;
505,507c505
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->state                 = ;
505,508c505
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 = BZ_X_MAGIC_1s->calculatedCombinedCRC = 0;
506,508c506
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    ->calculatedCombinedCRC = 0;
506,508c506
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    scalculatedCombinedCRC = 0;
(93.6 %, 13110 bytes)
504,506c504
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    ->total_in_lo32      = 0;
504,506c504
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    stotal_in_lo32      = 0;
504,506c504
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->= 0;
504,506c504
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsBuff                0;
504,506c504
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsBuff                = ;
504,507c504
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                = 0strm->total_in_hi32      = 0;
505,507c505
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    ->total_in_hi32      = 0;
505,507c505
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    stotal_in_hi32      = 0;
505,507c505
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->= 0;
505,507c505
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->calculatedCombinedCRC 0;
505,507c505
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->calculatedCombinedCRC = ;
505,508c505
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    s->calculatedCombinedCRC = 0strm->total_out_lo32     = small;
506,508c506
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    ->total_out_lo32     = small;
506,508c506
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strmtotal_out_lo32     = small;
506,508c506
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strm->= small;
506,508c506
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strm->total_in_lo32      small;
506,508c506
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strm->total_in_lo32      = ;
506,509c506
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->total_in_lo32      = 0s->ll4                   = NULL;
507,509c507
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    ->ll4                   = NULL;
507,509c507
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strmll4                   = NULL;
507,509c507
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->= NULL;
507,509c507
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->total_in_hi32      NULL;
507,509c507
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->total_in_hi32      = ;
507,510c507
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->total_in_hi32      = 0s->ll16                  = NULL;
508,510c508
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    ->ll16                  = NULL;
508,510c508
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strmll16                  = NULL;
508,510c508
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->= NULL;
508,510c508
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->total_out_lo32     NULL;
508,510c508
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->total_out_lo32     = ;
508,511c508
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    strm->total_out_lo32     = smalls->tt                    = BZ_OK;
509,511c509
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    ->tt                    = BZ_OK;
509,511c509
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    stt                    = BZ_OK;
509,511c509
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    s->= BZ_OK;
509,511c509
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    s->ll4                   BZ_OK;
509,511c509
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    s->ll4                   = ;
509,512c509
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
---
>    s->ll4                   = NULL}
510,516c510
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
510,516c510
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s(BZ2_bzDecompress) ( bz_stream *strm )
510,516c510
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->BZ2_bzDecompress) ( bz_stream *strm )
510,516c510
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->ll16                  ) ( bz_stream *strm )
510,516c510
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->ll16                  = ( bz_stream *strm )
510,516c510
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->ll16                  = NULLbz_stream *strm )
511,516c511
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    *strm )
511,516c511
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    sstrm )
511,516c511
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->)
511,517c511
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
---
>    s->tt                    {
511,518c511
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
>    s->tt                    = DState* s;
511,518c511
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
>    s->tt                    = BZ_OK* s;
512,518c512
< }
< 
< 
< 
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> s;
516,518c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> ;
516,519c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> BZ_APIif (s == NULL) return BZ_PARAM_ERROR;
516,519c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> BZ_API((s == NULL) return BZ_PARAM_ERROR;
516,519c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompresss == NULL) return BZ_PARAM_ERROR;
516,519c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) == NULL) return BZ_PARAM_ERROR;
516,519c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) ( NULL) return BZ_PARAM_ERROR;
516,519c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) ( bz_stream ) return BZ_PARAM_ERROR;
516,519c516
< BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> BZ_API(BZ2_bzDecompress) ( bz_stream *return BZ_PARAM_ERROR;
(93.6 %, 13047 bytes)
512,514c512
< s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
---
> 0, 1 );
512,514c512
< s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
---
> s, 1 );
513,514c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
---
>    1 );
513,514c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
---
>    if );
513,514c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
---
>    if (;
513,516c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
< 
<    return 0;  
---
>    if (s return 0;  
513,516c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
< 
<    return 0;  
---
>    if (s == 0;  
513,516c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
< 
<    return 0;  
---
>    if (s == NULL;  
513,517c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
---
>    if (s == NULL) ;
513,518c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) return if (s == NULL) return BZ_PARAM_ERROR;
513,518c513
<    if (s == NULL) return BZ_PARAM_ERROR;
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) return BZ_PARAM_ERROR(s == NULL) return BZ_PARAM_ERROR;
514,518c514
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    s == NULL) return BZ_PARAM_ERROR;
514,518c514
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH == NULL) return BZ_PARAM_ERROR;
514,518c514
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( NULL) return BZ_PARAM_ERROR;
514,518c514
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( 0) return BZ_PARAM_ERROR;
514,518c514
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( 0, return BZ_PARAM_ERROR;
514,518c514
<    AssertH ( 0, 1 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( 0, 1 BZ_PARAM_ERROR;
515,518d514
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
(93.7 %, 12987 bytes)
513,515c513
<    if (s == NULL) ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    if (s == NULL) ) BZFREE(s->ll4);
514,515c514
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    BZFREE(s->ll4);
514,515c514
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    if (s->ll4);
514,515c514
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    if (s->ll4);
(93.7 %, 12936 bytes)
514,524c514
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    e)                    \
514,524c514
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE)                    \
514,524c514
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE(\
514,527c514
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
---
>    BZFREE(stypedef 
514,528c514
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->struct {
514,528c514
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->ll4{
514,529c514
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    BZFREE(s->ll4)FILE*     handle;
516,529c516
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    *     handle;
517,529c517
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
524,529c524
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
524,530c524
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #char      buf[BZ_MAX_UNUSED];
524,530c524
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define buf[BZ_MAX_UNUSED];
524,530c524
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR[BZ_MAX_UNUSED];
524,530c524
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(BZ_MAX_UNUSED];
524,530c524
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(e];
524,530c524
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(e)                    ;
527,531c527
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> Int32     bufN;
528,531c528
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    bufN;
528,531c528
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct ;
529,531d528
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
529,532c529
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILEwriting;
529,532c529
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     ;
529,533c529
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE*     handlebz_stream strm;
530,533c530
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       strm;
530,533c530
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       char      ;
530,534c530
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       char      bufInt32     lastErr;
530,534c530
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       char      buf[lastErr;
530,534c530
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       char      buf[BZ_MAX_UNUSED;
530,535c530
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       char      buf[BZ_MAX_UNUSED]Bool      initialisedOk;
531,535c531
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       initialisedOk;
531,535c531
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     ;
531,536c531
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       Int32     bufN}
532,537c532
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bzFile;
532,537c532
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      ;
532,545c532
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      writingBZFILE* BZ_API(BZ2_bzWriteOpen) 
533,545c533
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
533,545c533
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ_API(BZ2_bzWriteOpen) 
533,545c533
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm(BZ2_bzWriteOpen) 
534,545c534
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ2_bzWriteOpen) 
534,545c534
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     ) 
534,546c534
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr( int*  bzerror,      
535,546c535
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int*  bzerror,      
535,546c535
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      *  bzerror,      
535,546c535
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOkbzerror,      
536,546c536
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
537,547c537
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    FILE* f, 
537,547c537
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile* f, 
545,547c545
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> f, 
545,547c545
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE, 
545,548c545
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
545,548c545
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIblockSize100k, 
545,548c545
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(, 
545,549c545
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity,
546,549c546
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     verbosity,
546,549c546
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( ,
546,550c546
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intint   workFactor )
546,550c546
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  workFactor )
546,550c546
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerror)
547,551c547
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       {
547,552c547
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILEInt32   ret;
547,552c547
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* ret;
547,552c547
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* f;
548,553c548
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzFile* bzf = NULL;
548,553c548
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   * bzf = NULL;
548,553c548
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100kbzf = NULL;
549,553c549
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       = NULL;
549,553c549
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   NULL;
549,553c549
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosity;
550,555c550
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       BZ_SETERR(BZ_OK);
550,555c550
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   (BZ_OK);
550,555c550
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor BZ_OK);
551,555c551
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> );
552,555c552
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
552,557c552
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   if (f == NULL ||
552,557c552
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   ret(f == NULL ||
553,557c553
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    f == NULL ||
553,557c553
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile== NULL ||
553,557c553
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* NULL ||
553,557c553
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf ||
553,558c553
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    bzFile* bzf = (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
553,558c553
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    bzFile* bzf = NULLblockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
555,558c555
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    < 1 || blockSize100k > 90 || verbosity > 4))
555,558c555
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR1 || blockSize100k > 90 || verbosity > 4))
555,558c555
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(|| blockSize100k > 90 || verbosity > 4))
555,558c555
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OKblockSize100k > 90 || verbosity > 4))
555,558c555
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK)> 90 || verbosity > 4))
557,558c557
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    90 || verbosity > 4))
557,558c557
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if || verbosity > 4))
557,558c557
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (verbosity > 4))
557,558c557
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f > 4))
557,558c557
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == 4))
557,558c557
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == NULL ))
558c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        )
558,559c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
---
>        (;
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k if (ferror(f)== NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < (ferror(f)== NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 ferror(f)== NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || (f)== NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k f)== NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > )== NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > 90 == NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > 90 || NULL)
558,561c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity )
558,562c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > ;
558,564c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 40;
558,564c558
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4);
559,565c559
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>       bzf->handle        = f;
561,565c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    ->handle        = f;
561,565c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if handle        = f;
561,565c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if (= f;
561,565c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if (ferrorf;
561,565c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if (ferror(;
561,566c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(fbzf->writing       = True;
561,566c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(f)->writing       = True;
561,566c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(f)== writing       = True;
561,566c561
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(f)== NULL= True;
562,566c562
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>       True;
(93.7 %, 12890 bytes)
559,561c559
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 0;
---
>       = 0;
559,561c559
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 0;
---
>       bzf0;
559,561c559
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 0;
---
>       bzf->;
559,562c559
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->handle        ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
559,562c559
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->handle        = = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
559,562c559
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
560,562c560
<    bzf->writing       = True;
<    workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ( &(bzf->strm), blockSize100k, 
(93.7 %, 12830 bytes)
559,560c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit );
559,560c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit ( ;
559,561c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &bzf->initialisedOk = True;
559,561c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(->initialisedOk = True;
559,561c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzfinitialisedOk = True;
559,561c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->= True;
559,561c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strmTrue;
559,561c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm);
559,562c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), return bzf;   
559,562c559
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100kbzf;   
560,562c560
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>                               ;   
560,563c560
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
>                               verbosity}
560,568c560
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, void BZ_API(BZ2_bzWrite)
560,568c560
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, workFactor BZ_API(BZ2_bzWrite)
560,568c560
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, workFactor )(BZ2_bzWrite)
561,568c561
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    BZ2_bzWrite)
561,568c561
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf)
561,569c561
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->( int*    bzerror, 
561,569c561
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk int*    bzerror, 
561,569c561
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = *    bzerror, 
561,569c561
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = Truebzerror, 
562,569c562
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    , 
562,570c562
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return BZFILE* b, 
562,570c562
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return bzf* b, 
563,570c563
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
568,570c568
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> , 
568,571c568
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void void*   buf, 
568,571c568
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API*   buf, 
568,571c568
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(buf, 
568,571c568
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWrite, 
569,572c569
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              int     len )
569,572c569
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( len )
569,572c569
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int)
569,573c569
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( int*    {
569,574c569
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( int*    bzerrorInt32   ret;
570,574c570
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                ret;
570,574c570
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE;
570,575c570
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bzFile* bzf = (bzFile*)b;
570,575c570
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* b* bzf = (bzFile*)b;
571,575c571
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzf = (bzFile*)b;
571,575c571
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void= (bzFile*)b;
571,575c571
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   (bzFile*)b;
571,575c571
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   bufbzFile*)b;
572,575c572
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                *)b;
572,575c572
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     )b;
572,575c572
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     len b;
573,575c573
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
> ;
574,576d573
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
574,577c574
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    Int32   (ferror(bzf->handle))
574,577c574
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    Int32   retferror(bzf->handle))
575,577c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    (bzf->handle))
575,577c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFilebzf->handle))
575,577c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* ->handle))
575,577c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* bzf handle))
575,577c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* bzf = ))
575,577c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* bzf = ()
575,578c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = (bzFile;
575,579c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = (bzFile*bzf->strm.next_in  = buf;
575,579c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = (bzFile*)->strm.next_in  = buf;
575,579c575
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = (bzFile*)bstrm.next_in  = buf;
577,579c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    .next_in  = buf;
577,579c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERRnext_in  = buf;
577,579c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERR(= buf;
577,579c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERR(ferrorbuf;
577,579c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERR(ferror(;
577,581c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    BZ_SETERR(ferror(bzfwhile (True) {
577,581c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    BZ_SETERR(ferror(bzf->(True) {
577,581c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    BZ_SETERR(ferror(bzf->handleTrue) {
577,581c577
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    BZ_SETERR(ferror(bzf->handle)) {
578,581c578
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>       {
579,582c579
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>    bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
(93.8 %, 12776 bytes)
577,578c577
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>    BZ_SETERR(ferror(bzf->handle)->strm.avail_in == 0)
577,578c577
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>    BZ_SETERR(ferror(bzf->handle)) strm.avail_in == 0)
578c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       .avail_in == 0)
578c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzfavail_in == 0)
578c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzf->== 0)
578c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzf->strm0)
578c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzf->strm.)
578,579c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
---
>       bzf->strm.avail_out ;
578,580c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
---
>       bzf->strm.avail_out = }
578,581c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif }
578,585c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (void BZ_API(BZ2_bzWriteClose)
578,585c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret BZ_API(BZ2_bzWriteClose)
578,585c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != (BZ2_bzWriteClose)
578,585c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzfBZ2_bzWriteClose)
578,585c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->)
578,586c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm( int*          bzerror, 
578,586c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.int*          bzerror, 
578,586c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in *          bzerror, 
578,586c578
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == bzerror, 
(93.8 %, 12716 bytes)
578,586c578
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>       bzf->strm.avail_out BZFILE*       b, 
579,586c579
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    *       b, 
580,586c580
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
584,586c584
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
584,587c584
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
584,587c584
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
584,587c584
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
584,588c584
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in,
585,588c585
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   int* nbytes_in,
585,588c585
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( * nbytes_in,
585,588c585
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intnbytes_in,
585,588c585
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          ,
585,589c585
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerrorunsigned int* nbytes_out )
586,589c586
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
586,589c586
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE* nbytes_out )
586,589c586
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       nbytes_out )
586,589c586
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       b)
587,590c587
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     {
587,591c587
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     int           BZ2_bzWriteClose64 ;
587,591c587
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     int           abandon;
588,592c588
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
---
>                     }
588,595c588
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned void BZ_API(BZ2_bzWriteClose64)
588,595c588
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intBZ_API(BZ2_bzWriteClose64)
588,595c588
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* (BZ2_bzWriteClose64)
588,595c588
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_inBZ2_bzWriteClose64)
589,595c589
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     )
589,596c589
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned ( int*          bzerror, 
589,596c589
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned intint*          bzerror, 
589,596c589
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* *          bzerror, 
589,596c589
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out bzerror, 
590,596c590
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> , 
591,597c591
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZFILE*       b, 
591,597c591
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZ2_bzWriteClose64 *       b, 
592,597c592
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
595,597c595
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
595,598c595
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
595,598c595
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
595,598c595
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
595,599c595
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32,
596,599c596
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   int* nbytes_in_lo32,
596,599c596
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( * nbytes_in_lo32,
596,599c596
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intnbytes_in_lo32,
596,599c596
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          ,
596,600c596
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerrorunsigned int* nbytes_in_hi32,
597,600c597
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
597,600c597
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE* nbytes_in_hi32,
597,600c597
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       nbytes_in_hi32,
597,600c597
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       b,
598,600d597
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
598,601c598
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           int* nbytes_out_lo32,
598,601c598
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandon* nbytes_out_lo32,
599,601c599
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     nbytes_out_lo32,
599,601c599
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned ,
599,602c599
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intunsigned int* nbytes_out_hi32 )
599,602c599
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* int* nbytes_out_hi32 )
599,602c599
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32* nbytes_out_hi32 )
600,602c600
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
600,602c600
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned )
600,603c600
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int{
600,605c600
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* bzFile* bzf = ((bzf->writing))
600,605c600
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_in_hi32* bzf = ((bzf->writing))
601,605c601
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     bzf = ((bzf->writing))
601,605c601
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned = ((bzf->writing))
601,605c601
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int((bzf->writing))
601,605c601
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* (bzf->writing))
601,605c601
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_out_lo32bzf->writing))
602,605c602
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     ->writing))
602,605c602
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned writing))
602,605c602
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int))
602,605c602
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* )
602,606c602
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
<       ;
---
>                     unsigned int* nbytes_out_hi32 ;
603,607c603
< {
<    
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
> if (ferror(bzf->handle))
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    (ferror(bzf->handle))
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFileferror(bzf->handle))
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* (bzf->handle))
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf bzf->handle))
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ->handle))
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (handle))
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (())
605,607c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((bzf)
605,608c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = ((bzf->;
605,610c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    bzFile* bzf = ((bzf->writingif (nbytes_in_lo32 != NULL) ;
605,610c605
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    bzFile* bzf = ((bzf->writing)(nbytes_in_lo32 != NULL) ;
606,610c606
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>       nbytes_in_lo32 != NULL) ;
607,610c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    != NULL) ;
607,610c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    if NULL) ;
607,610c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    if () ;
607,610c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    if (ferror;
607,611c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(if (nbytes_out_lo32 != NULL) ;
607,611c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf(nbytes_out_lo32 != NULL) ;
607,611c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf->nbytes_out_lo32 != NULL) ;
607,611c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf->handle!= NULL) ;
607,611c607
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf->handle)NULL) ;
608,611c608
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>       ) ;
610,611c610
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    ;
610,613c610
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if if ((!abandon) && bzf->lastErr ) 
610,613c610
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (((!abandon) && bzf->lastErr ) 
610,613c610
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 (!abandon) && bzf->lastErr ) 
610,613c610
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 != !abandon) && bzf->lastErr ) 
610,613c610
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 != NULLabandon) && bzf->lastErr ) 
610,613c610
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 != NULL) ) && bzf->lastErr ) 
611,613c611
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    && bzf->lastErr ) 
611,613c611
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if bzf->lastErr ) 
611,613c611
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (->lastErr ) 
(93.8 %, 12654 bytes)
610,614c610
<    ;
< 
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
612,614c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
612,614c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    if );
612,614c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    if (;
612,615c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
---
>    if ((0;
612,615c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
---
>    if ((!;
612,616c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
---
>    if ((!abandon0;
612,616c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
---
>    if ((!abandon) ;
612,617c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
---
>    if ((!abandon) && }
612,621c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if ((!abandon) && bzfBZFILE* BZ_API(BZ2_bzReadOpen) 
612,621c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if ((!abandon) && bzf->* BZ_API(BZ2_bzReadOpen) 
612,621c612
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if ((!abandon) && bzf->lastErr BZ_API(BZ2_bzReadOpen) 
614,621c614
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ2_bzReadOpen) 
(93.9 %, 12601 bytes)
610,617c610
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    BZ2_bzReadOpen) 
610,617c610
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    () 
610,618c610
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    (BZ_OK( int*  bzerror, 
610,618c610
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    (BZ_OK)int*  bzerror, 
611,618c611
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    *  bzerror, 
611,618c611
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0bzerror, 
612,618c612
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    , 
612,619c612
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    0FILE* f, 
613,619c613
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
617,619c617
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> f, 
617,619c617
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE, 
617,620c617
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* int   verbosity,
617,620c617
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_APIverbosity,
617,620c617
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(,
617,621c617
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(BZ2_bzReadOpenint   small,
618,621c618
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    small,
618,621c618
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( ,
618,622c618
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intvoid* unused,
618,622c618
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  * unused,
618,622c618
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorunused,
619,622c619
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
619,623c619
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILEint   nUnused )
619,623c619
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* nUnused )
619,623c619
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* f)
620,624c620
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      {
620,625c620
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzFile* bzf = NULL;
620,625c620
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbosity* bzf = NULL;
621,625c621
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      bzf = NULL;
621,625c621
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   = NULL;
621,625c621
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   smallNULL;
622,625c622
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      ;
622,626c622
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      voidint     ret;
622,626c622
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* ret;
622,626c622
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unused;
623,628c623
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      BZ_SETERR(BZ_OK);
623,628c623
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   (BZ_OK);
623,628c623
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused BZ_OK);
624,628c624
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> );
625,628c625
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
625,630c625
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFileif (f == NULL || 
625,630c625
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* (f == NULL || 
625,630c625
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf f == NULL || 
625,630c625
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = == NULL || 
625,630c625
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = NULLNULL || 
626,630c626
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    || 
626,631c626
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     (small != 0 && small != 1) ||
626,631c626
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     retsmall != 0 && small != 1) ||
628,631c628
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    != 0 && small != 1) ||
628,631c628
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR0 && small != 1) ||
628,631c628
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(&& small != 1) ||
628,631c628
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OKsmall != 1) ||
628,631c628
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)!= 1) ||
630,631c630
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    1) ||
630,631c630
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if ) ||
630,631c630
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if (||
630,632c630
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f (verbosity < 0 || verbosity > 4) ||
630,632c630
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == verbosity < 0 || verbosity > 4) ||
630,632c630
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == NULL < 0 || verbosity > 4) ||
631,632c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        0 || verbosity > 4) ||
631,632c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (|| verbosity > 4) ||
631,632c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small verbosity > 4) ||
631,632c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != > 4) ||
631,632c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 4) ||
631,632c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 && ) ||
631,632c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 && small ||
631,633c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != (unused == NULL && nUnused != 0) ||
631,633c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1unused == NULL && nUnused != 0) ||
631,633c631
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1) == NULL && nUnused != 0) ||
632,633c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        NULL && nUnused != 0) ||
632,633c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (&& nUnused != 0) ||
632,633c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity nUnused != 0) ||
632,633c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < != 0) ||
632,633c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 0) ||
632,633c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 || ) ||
632,633c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 || verbosity ||
632,634c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
632,634c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
632,634c632
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4) != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (&& (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL < 0 || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && 0 || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused || nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != nUnused > BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0> BZ_MAX_UNUSED)))
633,634c633
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0) BZ_MAX_UNUSED)))
634c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )))
634c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ())
634c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused )
634,635c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
---
>        (unused != ;
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL if (ferror(f)== NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (ferror(f)== NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (ferror(f)== NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused (f)== NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < f)== NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 )== NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 || == NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 || nUnused NULL) 
634,637c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 || nUnused > ) 
634,638c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED;
634,640c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)f;
634,640c634
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED));
635,641c635
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>       bzf->bufN          = 0;
637,641c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    ->bufN          = 0;
637,641c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if bufN          = 0;
637,641c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if (= 0;
637,641c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if (ferror0;
637,641c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if (ferror(;
637,642c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(fbzf->writing       = False;
637,642c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(f)->writing       = False;
637,642c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(f)== writing       = False;
637,642c637
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(f)== NULL= False;
638,642c638
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>       False;
(93.9 %, 12554 bytes)
635,638c635
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       if (ret != BZ_OK)
635,638c635
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf(ret != BZ_OK)
635,638c635
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->ret != BZ_OK)
635,638c635
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->bufN          != BZ_OK)
635,638c635
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->bufN          = BZ_OK)
635,638c635
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->bufN          = 0)
636d635
<    bzf->writing       = False;
638,639d636
<    if (ret != BZ_OK)
<       ;
(93.9 %, 12491 bytes)
635,638c635
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       bzf->bufN;
635,638c635
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       if ->bufN;
635,638c635
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       if (bufN;
635,638c635
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       if (ret ;
635,639c635
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    ;
---
>       if (ret != ;
635,640c635
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    ;
<    return bzf;   
---
>       if (ret != BZ_OKreturn bzf;   
636,640c636
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    ;
<    return bzf;   
---
>       bzf;   
(93.9 %, 12440 bytes)
635,642c635
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       ) ( int *bzerror, BZFILE *b )
635,642c635
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf( int *bzerror, BZFILE *b )
635,642c635
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->int *bzerror, BZFILE *b )
635,642c635
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->bufN*bzerror, BZFILE *b )
636,642c636
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzerror, BZFILE *b )
637,642c637
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    , BZFILE *b )
637,642c637
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return BZFILE *b )
637,642c637
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzf*b )
638,642c638
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> b )
642c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> )
642,643c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void {
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_APIbzFile* bzf = (bzFile*)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(* bzf = (bzFile*)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClosebzf = (bzFile*)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) = (bzFile*)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( (bzFile*)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int bzFile*)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int **)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror)0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, 0;
642,644c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE ;
642,645c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *0;
642,645c642
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b ;
643,645d642
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
644,650c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    int BZ_API(BZ2_bzRead) 
644,650c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFileBZ_API(BZ2_bzRead) 
644,650c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* (BZ2_bzRead) 
644,650c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf BZ2_bzRead) 
644,650c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = ) 
644,651c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (( int*    bzerror, 
644,651c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFileint*    bzerror, 
644,651c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile**    bzerror, 
644,651c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bzerror, 
644,651c644
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)0, 
645,652c645
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    BZFILE* b, 
645,652c645
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    0* b, 
646,652c646
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
650,652c650
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> , 
650,653c650
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int void*   buf, 
650,653c650
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API*   buf, 
650,653c650
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(buf, 
650,653c650
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzRead, 
651,654c651
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            int     len )
651,654c651
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( len )
651,654c651
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int)
651,655c651
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    {
651,657c651
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzFile* bzf = (bzFile*)b;
652,657c652
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              * bzf = (bzFile*)b;
652,657c652
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILEbzf = (bzFile*)b;
652,657c652
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* = (bzFile*)b;
652,657c652
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b(bzFile*)b;
653,657c653
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzFile*)b;
653,657c653
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*)b;
653,657c653
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   )b;
653,657c653
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufb;
654,657c654
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              ;
654,659c654
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>              int     BZ_SETERR()
654,659c654
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>              int     len ()
655,659c655
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
> )
657,660c657
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       buf;
---
>    buf;
657,660c657
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       buf;
---
>    bzFile;
(94.0 %, 12392 bytes)
657,666c657
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ2_bzReadGetUnused) 
657,666c657
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    buf) 
659,667c659
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
659,667c659
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while int*    bzerror, 
659,667c659
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (*    bzerror, 
659,667c659
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (Truebzerror, 
661,667c661
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    , 
661,668c661
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return BZFILE* b, 
661,668c661
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0* b, 
662,668c662
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
666,668c666
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
666,669c666
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void void**  unused, 
666,669c666
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API**  unused, 
666,669c666
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(*  unused, 
666,669c666
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedunused, 
667,669c667
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      , 
667,670c667
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
667,670c667
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
667,670c667
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
667,670c667
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror)
668,671c668
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        {
668,672c668
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILEbzFile* bzf = (bzFile*)b;
668,672c668
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* * bzf = (bzFile*)b;
668,672c668
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* bbzf = (bzFile*)b;
669,672c669
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        = (bzFile*)b;
669,672c669
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void(bzFile*)b;
669,672c669
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void*bzFile*)b;
669,672c669
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  *)b;
669,672c669
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  unused)b;
670,672c670
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        b;
670,672c670
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int;
670,673c670
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    ;
---
>                        int*    ;
670,674c670
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
---
>                        int*    nUnused ;
671,675c671
< {
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
<    *nUnused ;
---
> *nUnused ;
672,675c672
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
<    *nUnused ;
---
>    nUnused ;
672,675c672
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
<    *nUnused ;
---
>    bzFile;
(94.0 %, 12352 bytes)
672,683c672
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    unsigned int* destLen,
672,683c672
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    nUnused int* destLen,
673,683c673
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
681,683c681
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> destLen,
681,683c681
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int ,
681,684c681
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIchar*         source, 
681,684c681
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(*         source, 
681,684c681
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresssource, 
682,684c682
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          , 
682,685c682
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( unsigned int  sourceLen,
682,685c682
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charint  sourceLen,
682,685c682
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         sourceLen,
682,685c682
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         dest,
683,685d682
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
683,686c683
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned blockSize100k, 
683,686c683
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int, 
683,687c683
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* int           verbosity, 
683,687c683
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* destLenverbosity, 
684,687c684
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
684,688c684
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            charint           workFactor )
684,688c684
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         workFactor )
684,688c684
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         source)
685,689c685
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            {
685,690c685
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned bz_stream strm;
685,690c685
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  strm;
685,690c685
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLen;
686,691c686
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int ret;
686,691c686
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           ret;
686,691c686
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100k;
687,693c687
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            if (dest == NULL || destLen == NULL || 
687,693c687
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           (dest == NULL || destLen == NULL || 
687,693c687
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbositydest == NULL || destLen == NULL || 
688,693c688
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            == NULL || destLen == NULL || 
688,693c688
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           NULL || destLen == NULL || 
688,693c688
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor || destLen == NULL || 
689,693c689
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> destLen == NULL || 
690,693c690
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    == NULL || 
690,693c690
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream NULL || 
690,693c690
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strm|| 
691,694c691
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    source == NULL ||
691,694c691
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int == NULL ||
691,694c691
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int retNULL ||
693,694c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if blockSize100k < 1 || blockSize100k > 9 ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (< 1 || blockSize100k > 9 ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest 1 || blockSize100k > 9 ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == || blockSize100k > 9 ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL blockSize100k > 9 ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || > 9 ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || destLen 9 ||
693,695c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || destLen == ||
693,696c693
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>    if (dest == NULL || destLen == NULL verbosity < 0 || verbosity > workFactor == 0) ;
694,696c694
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        < 0 || verbosity > workFactor == 0) ;
694,696c694
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        source 0 || verbosity > workFactor == 0) ;
694,696c694
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        source == || verbosity > workFactor == 0) ;
694,696c694
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        source == NULL verbosity > workFactor == 0) ;
695,696c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        > workFactor == 0) ;
695,696c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k workFactor == 0) ;
695,696c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < == 0) ;
695,696c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < 1 0) ;
695,696c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < 1 || ) ;
695,696c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < 1 || blockSize100k ;
695,697c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        blockSize100k < 1 || blockSize100k > strm.opaque ;
695,697c695
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        blockSize100k < 1 || blockSize100k > 9 .opaque ;
696,697c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        opaque ;
696,697c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        verbosity ;
696,699c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < strm.next_in = source;
696,699c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 .next_in = source;
696,699c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || next_in = source;
696,699c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || verbosity = source;
696,699c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || verbosity > source;
696,699c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || verbosity > workFactor ;
696,700c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > workFactor == strm.next_out ;
696,700c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > workFactor == 0.next_out ;
696,700c696
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > workFactor == 0) next_out ;
697,700c697
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>    ;
697,702c697
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    strmret = 0;
697,702c697
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    strm.= 0;
697,702c697
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    strm.opaque 0;
699,702c699
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    ;
(94.0 %, 12294 bytes)
697,704c697
<    ;
< 
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
---
>    :
699,704d698
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
699,705c699
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
---
>    ret ;
699,706c699
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
---
>    ret = return ret;
699,706c699
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
---
>    ret = 0ret;
700,706c700
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
---
>    ;
(94.0 %, 12213 bytes)
699,706c699
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    *         dest, 
699,706c699
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    0dest, 
700,706c700
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    , 
700,707c700
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return unsigned int* destLen,
700,707c700
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return retint* destLen,
701,707c701
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
705,707c705
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> destLen,
705,707c705
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int ,
705,708c705
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIchar*         source, 
705,708c705
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(*         source, 
705,708c705
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
706,708c706
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            , 
706,709c706
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( unsigned int  sourceLen,
706,709c706
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charint  sourceLen,
706,709c706
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         sourceLen,
706,709c706
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         dest,
707,709d706
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
707,710c707
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned small,
707,710c707
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int,
707,711c707
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* int           verbosity )
707,711c707
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenverbosity )
708,711c708
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
708,712c708
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char{
708,713c708
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         bz_stream strm;
708,713c708
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         sourcestrm;
709,713c709
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              ;
709,714c709
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int ret;
709,714c709
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  ret;
709,714c709
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLen;
710,716c710
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              if (dest == NULL || destLen == NULL || 
710,716c710
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           (dest == NULL || destLen == NULL || 
710,716c710
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           smalldest == NULL || destLen == NULL || 
711,716c711
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              == NULL || destLen == NULL || 
711,716c711
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           NULL || destLen == NULL || 
711,716c711
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity || destLen == NULL || 
712,716c712
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> destLen == NULL || 
713,716c713
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    == NULL || 
713,716c713
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream NULL || 
713,716c713
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strm|| 
714,717c714
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    source == NULL ||
714,717c714
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int == NULL ||
714,717c714
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int retNULL ||
716,717c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (small != 0 && small != 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (small != 0 && small != 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest != 0 && small != 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == 0 && small != 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL && small != 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || small != 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen != 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == 1) ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == NULL ) ||
717,718c717
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        ||
717,719c717
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source verbosity < 0 || verbosity > 4) 
717,719c717
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == < 0 || verbosity > 4) 
717,719c717
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == NULL 0 || verbosity > 4) 
718,719c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        || verbosity > 4) 
718,719c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (verbosity > 4) 
718,719c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small > 4) 
718,719c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small != 4) 
718,719c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small != 0 ) 
718,720c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && strm.opaque ;
718,720c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && small .opaque ;
718,720c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && small != opaque ;
718,720c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && small != 1;
718,722c718
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        (small != 0 && small != 1) strm.next_in = source;
719,722c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        .next_in = source;
719,722c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity next_in = source;
719,722c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < = source;
719,722c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 source;
719,722c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || ;
719,723c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity strm.next_out ;
719,723c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > .next_out ;
719,723c719
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > 4next_out ;
720,723c720
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>           ;
720,725c720
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>           strmret = 0;
720,725c720
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>           strm.= 0;
720,725c720
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>           strm.opaque 0;
722,725c722
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    ;
(94.1 %, 12155 bytes)
720,724c720
<           ;
< 
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
---
>           0) ;
722,724c722
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
---
>    ) ;
722,724c722
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
---
>    ret ;
722,725c722
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
---
>    ret = }
722,730c722
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
---
>    ret = 0static
723,731c723
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    BZFILE * bzopen_or_bzdopen
723,731c723
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    output_overflow_or_eof* bzopen_or_bzdopen
724,731c724
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    bzopen_or_bzdopen
724,732c724
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if ( )      
724,732c724
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if ()      
724,733c724
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
---
>    if (strm;
724,738c724
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    if (strm.BZFILE * BZ_API(BZ2_bzopen)
724,738c724
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    if (strm.avail_out * BZ_API(BZ2_bzopen)
724,738c724
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    if (strm.avail_out > BZ_API(BZ2_bzopen)
(94.1 %, 12096 bytes)
722,736c722
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    ret BZ2_bzopen)
723,736c723
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
728,737c728
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ( const char *path,
729,737c729
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char *path,
729,737c729
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE char *path,
729,737c729
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * *path,
730,737c730
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                path,
730,737c730
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                ( ,
731,738c731
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
736,738c736
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> char *mode )
736,738c736
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE *mode )
736,738c736
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * mode )
736,738c736
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API)
736,739c736
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * BZ_API({
736,740c736
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_API(BZ2_bzopenreturn 0;
737,740c737
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                0;
737,740c737
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( ;
737,741c737
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const }
737,745c737
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char BZFILE * BZ_API(BZ2_bzdopen)
737,745c737
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char ** BZ_API(BZ2_bzdopen)
737,745c737
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZ_API(BZ2_bzdopen)
738,745c738
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  (BZ2_bzdopen)
738,745c738
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const BZ2_bzdopen)
738,745c738
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char )
738,746c738
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *( int fd,
738,746c738
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode int fd,
739,746c739
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> fd,
740,746c740
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    ,
740,747c740
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return const char *mode )
740,747c740
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0char *mode )
741,747c741
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> *mode )
745,747c745
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> mode )
745,747c745
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE )
745,748c745
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * {
745,749c745
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_APIreturn bzopen_or_bzdopen(NULL,fd,mode,1);
745,749c745
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(bzopen_or_bzdopen(NULL,fd,mode,1);
745,749c745
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopen(NULL,fd,mode,1);
746,749c746
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                NULL,fd,mode,1);
746,749c746
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( ,fd,mode,1);
746,749c746
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,mode,1);
746,749c746
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,mode,1);
747,749c747
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  mode,1);
747,749c747
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const ,1);
747,749c747
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char 1);
747,749c747
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *);
747,749c747
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode ;
748,749d747
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(BZ2_bzread) (BZFILE* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(BZ2_bzread) (BZFILE* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL) (BZFILE* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,(BZFILE* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fdBZFILE* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,* b, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,modeb, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,, void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1void* buf, int len )
749,754c749
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1)* buf, int len )
750,754c750
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
754c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , int len )
754c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int int len )
754c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
754c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
754,755c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread{
754,756c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) int bzerr, nread;
754,756c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (bzerr, nread;
754,756c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE, nread;
754,756c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* nread;
754,756c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b;
754,757c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, 0;
754,757c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void;
754,758c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* nread = 0;
754,758c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf= 0;
754,758c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, 0;
754,758c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int ;
754,759c754
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
755,759c755
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
756,759c756
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
756,759c756
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int == BZ_OK || bzerr == BZ_STREAM_END) {
756,759c756
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerrBZ_OK || bzerr == BZ_STREAM_END) {
756,759c756
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, || bzerr == BZ_STREAM_END) {
756,759c756
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, nreadbzerr == BZ_STREAM_END) {
757,759c757
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    == BZ_STREAM_END) {
757,759c757
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    0BZ_STREAM_END) {
758,759c758
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    ) {
758,759c758
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    nread {
758,760c758
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    nread = return nread;
758,760c758
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    nread = 0nread;
759,760c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    ;
759,761c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if } else {
759,761c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (else {
759,761c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr {
759,762c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == return -1;
759,762c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK -1;
759,762c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK || 1;
759,762c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK || bzerr ;
759,763c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == }
759,764c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END}
759,768c759
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
760,768c760
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
760,768c760
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
760,768c760
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return nreadBZ2_bzwrite) (BZFILE* b, void* buf, int len )
761,768c761
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    ) (BZFILE* b, void* buf, int len )
761,768c761
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } (BZFILE* b, void* buf, int len )
761,768c761
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } else BZFILE* b, void* buf, int len )
762,768c762
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       * b, void* buf, int len )
762,768c762
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return b, void* buf, int len )
762,768c762
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -, void* buf, int len )
762,768c762
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -1void* buf, int len )
763,768c763
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    * buf, int len )
764,768c764
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> buf, int len )
768c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> , int len )
768c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int int len )
768c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
768c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
768,769c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite{
768,770c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) int bzerr;
768,770c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (bzerr;
768,770c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE;
768,772c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* ;
768,773c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bif(bzerr == BZ_OK){
768,773c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, (bzerr == BZ_OK){
768,773c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidbzerr == BZ_OK){
768,773c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* == BZ_OK){
768,773c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* bufBZ_OK){
768,773c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, ){
768,773c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int {
768,774c768
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len return len;
769,774c769
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
---
> len;
770,771d769
<    int bzerr;
< 
773,774d770
<    if(bzerr == BZ_OK){
<       return len;
770,775c770
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    int }else{
770,775c770
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    int bzerrelse{
772,775c772
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    {
773,776c773
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    return -1;
773,776c773
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    if-1;
773,776c773
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    if(1;
773,776c773
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    if(bzerr ;
773,777c773
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
---
>    if(bzerr == }
773,778c773
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    if(bzerr == BZ_OKFILE *fp = ((bzFile *)b)->handle;
773,778c773
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    if(bzerr == BZ_OK)*fp = ((bzFile *)b)->handle;
774,778c774
<       return len;
<    }else{
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       fp = ((bzFile *)b)->handle;
774,778c774
<       return len;
<    }else{
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return = ((bzFile *)b)->handle;
774,778c774
<       return len;
<    }else{
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return len((bzFile *)b)->handle;
(94.1 %, 12045 bytes)
772,775c772
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    *)b)->handle;
773,775c773
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       )b)->handle;
773,775c773
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return b)->handle;
773,775c773
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return -)->handle;
773,775c773
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return -1->handle;
774,775c774
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    handle;
775c775
< FILE *fp = ((bzFile *)b)->handle;
---
> ;
775,777c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE if (b==NULL) 
775,777c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *(b==NULL) 
775,777c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp b==NULL) 
775,777c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = ==NULL) 
775,777c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = (NULL) 
775,777c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = (() 
775,778c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile if(((bzFile*)b)->writing){
775,778c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *(((bzFile*)b)->writing){
775,778c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)((bzFile*)b)->writing){
775,778c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b(bzFile*)b)->writing){
775,778c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)bzFile*)b)->writing){
775,778c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)->*)b)->writing){
775,778c775
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)->handle)b)->writing){
777,778c777
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    b)->writing){
777,778c777
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if )->writing){
777,778c777
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (->writing){
777,778c777
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (bwriting){
777,778c777
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==){
777,778c777
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==NULL{
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(&bzerr,b,0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(&bzerr,b,0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if((bzerr,b,0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((,b,0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFileb,0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*,0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)0,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b,NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)NULL,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->,NULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->writingNULL);
778,779c778
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->writing));
779c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       ;
779,780c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteCloseif(bzerr != BZ_OK){
779,780c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose((bzerr != BZ_OK){
779,780c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr != BZ_OK){
779,780c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr!= BZ_OK){
779,780c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr,BZ_OK){
779,780c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr,b){
779,780c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr,b,{
779,781c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
779,781c779
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0,(NULL,b,1,NULL,NULL);
(94.1 %, 12007 bytes)
779,781c779
<       ;
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       ,1,NULL,NULL);
780,781c780
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       1,NULL,NULL);
780,781c780
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if,NULL,NULL);
780,781c780
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(NULL,NULL);
780,781c780
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr ,NULL);
780,781c780
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr != NULL);
780,781c780
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr != BZ_OK);
780,781c780
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr != BZ_OK);
781,782c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>          }
781,783c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>          BZ2_bzWriteClose}else
781,783c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>          BZ2_bzWriteClose(else
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULLif(fp!=stdin && fp!=stdout){
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,(fp!=stdin && fp!=stdout){
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,bfp!=stdin && fp!=stdout){
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,!=stdin && fp!=stdout){
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1stdin && fp!=stdout){
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,&& fp!=stdout){
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,NULLfp!=stdout){
781,784c781
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,!=stdout){
(94.2 %, 11963 bytes)
781,783c781
<          }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          {
782,784c782
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    fclose(fp);
782,784c782
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    }(fp);
783,784c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    fp);
783,784c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    if);
783,784c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    if(;
783,785c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp}
783,786c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
>    if(fp!=}
783,791c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin static char *bzerrorstrings[] = {
783,791c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && char *bzerrorstrings[] = {
783,791c783
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && fp*bzerrorstrings[] = {
(94.2 %, 11919 bytes)
782,789c782
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    = {
782,789c782
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    fclose{
782,790c782
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
>    fclose("OK"
782,791c782
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
>    fclose(fp};
783,791d782
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
783,794c783
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>    const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
784,794c784
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char (BZ2_bzerror) (BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *BZ2_bzerror) (BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings) (BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[(BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] BZFILE *b, int *errnum)
789,794c789
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = *b, int *errnum)
790,794c790
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        b, int *errnum)
791,794c791
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       , int *errnum)
791,794c791
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }int *errnum)
794c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> *errnum)
794c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const errnum)
794c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char )
794,795c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * {
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIint err = ((bzFile *)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(err = ((bzFile *)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror= ((bzFile *)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) ((bzFile *)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) ((bzFile *)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE bzFile *)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE **)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b)b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, b)->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int )->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *->lastErr;
794,796c794
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnumlastErr;
795,796c795
< {
<    int err = ((bzFile *)b)->lastErr;
---
> ;
796d795
<    int err = ((bzFile *)b)->lastErr;
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int bzerrorstrings[err*-1];
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err [err*-1];
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = err*-1];
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = (*-1];
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((-1];
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile 1];
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *];
796,797c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *);
796,798c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
---
>    int err = ((bzFile *)b}
796,827c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    int err = ((bzFile *)b)#include <errno.h>
796,827c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    int err = ((bzFile *)b)->include <errno.h>
796,827c796
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    int err = ((bzFile *)b)->lastErr<errno.h>
797,827c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    errno.h>
797,827c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    return .h>
797,827c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    return bzerrorstringsh>
797,827c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    return bzerrorstrings[>
797,829c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
---
>    return bzerrorstrings[err#define ERROR_IF_EOFdefine 
\ No newline at end of file
797,829c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
---
>    return bzerrorstrings[err*define ERROR_IF_EOFdefine 
\ No newline at end of file
797,829c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
---
>    return bzerrorstrings[err*-ERROR_IF_EOFdefine 
\ No newline at end of file
797,829c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
---
>    return bzerrorstrings[err*-1
\ No newline at end of file
797,829c797
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
---
>    return bzerrorstrings[err*-1]
\ No newline at end of file
798,829d797
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
827,829d826
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
827,829c827
< #include <errno.h>
< 
< #define ERROR_IF_EOFdefine 
\ No newline at end of file
---
> #
\ No newline at end of file
(94.2 %, 11872 bytes)
===< pass_clex :: rm-toks-12 >===
9,11d8
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
9,11d8
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
9,11d8
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_OK                3
10,12d9
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
(94.3 %, 11779 bytes)
9,12c9
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define BZ_OK                #define BZ_PARAM_ERROR       (-6)
10,12c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> define BZ_PARAM_ERROR       (-6)
10,12c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #BZ_PARAM_ERROR       (-6)
10,12c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define (-6)
10,12c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define BZ_STREAM_END        -6)
11,12c11
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> 6)
11,12c11
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #)
11,13c11
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define #define BZ_UNEXPECTED_EOF    (-7)
11,13c11
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_SEQUENCE_ERROR    define BZ_UNEXPECTED_EOF    (-7)
11,13c11
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_SEQUENCE_ERROR    (BZ_UNEXPECTED_EOF    (-7)
(94.3 %, 11739 bytes)
11,12c11
< #define BZ_SEQUENCE_ERROR    define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_SEQUENCE_ERROR    )
11,13c11
< #define BZ_SEQUENCE_ERROR    define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_SEQUENCE_ERROR    define #define BZ_CONFIG_ERROR      (-9)
11,13c11
< #define BZ_SEQUENCE_ERROR    define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_SEQUENCE_ERROR    define BZ_UNEXPECTED_EOF    define BZ_CONFIG_ERROR      (-9)
(94.3 %, 11674 bytes)
11,16c11
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_SEQUENCE_ERROR    *next_in;
12,16c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> next_in;
12,16c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #;
12,17c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define unsigned int avail_in;
12,17c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      int avail_in;
12,17c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (avail_in;
12,17c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (-;
12,18c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9unsigned int total_in_lo32;
14,18c14
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> int total_in_lo32;
15,18c15
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    total_in_lo32;
15,18c15
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    struct ;
16,18d15
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
16,19c16
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char int total_in_hi32;
16,19c16
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *total_in_hi32;
17,19d16
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
17,20d16
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
17,21c17
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned *next_out;
17,21c17
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int next_out;
18,21d17
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
18,21d17
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
18,21d17
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
18,21d17
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
19,22d18
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
19,22d18
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
19,22d18
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
19,22d18
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
20,23d19
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
21,23d20
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
21,24c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char int total_out_hi32;
21,24c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *total_out_hi32;
22,24d21
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
22,25d21
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
22,26c22
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned *state;
22,26c22
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int state;
23,26d22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
23,27d22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
23,28c23
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned *(*bzalloc)(void *,int,int);
23,28c23
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int (*bzalloc)(void *,int,int);
23,28c23
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32*bzalloc)(void *,int,int);
24,28c24
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       bzalloc)(void *,int,int);
24,28c24
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned )(void *,int,int);
24,28c24
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int (void *,int,int);
24,28c24
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32void *,int,int);
26,28c26
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *,int,int);
26,28c26
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void ,int,int);
26,28c26
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *int,int);
26,28c26
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *state,int);
28c28
<       void *(*bzalloc)(void *,int,int);
---
>       int);
28c28
<       void *(*bzalloc)(void *,int,int);
---
>       void );
28c28
<       void *(*bzalloc)(void *,int,int);
---
>       void *;
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(void (*bzfree)(void *,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*(*bzfree)(void *,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc*bzfree)(void *,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)bzfree)(void *,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)()(void *,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void (void *,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *void *,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,*,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,void *);
28,29c28
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int*);
(94.3 %, 11640 bytes)
28,35c28
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int#include <stdio.h>
28,35c28
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,include <stdio.h>
28,35c28
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void <stdio.h>
28,35c28
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void *stdio.h>
28,35c28
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void *).h>
29,35c29
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       h>
29,35c29
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void >
29,37c29
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *#   define BZ_API(func) func
29,37c29
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaquedefine BZ_API(func) func
30,37c30
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    BZ_API(func) func
31,37c31
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
31,37c31
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamfunc) func
35,37c35
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ) func
35,37c35
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #func
35,38c35
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include #   define BZ_EXTERN extern
35,38c35
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <define BZ_EXTERN extern
35,38c35
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioBZ_EXTERN extern
35,38c35
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.extern
35,43c35
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #include <stdio.hBZ_EXTERN ;
37,43c37
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> ;
37,49c37
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   #define BZ_MAX_UNUSED 0
37,49c37
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define define BZ_MAX_UNUSED 0
37,49c37
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_APIBZ_MAX_UNUSED 0
37,49c37
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(0
37,51c37
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define BZ_API(functypedef void BZFILE;
37,51c37
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define BZ_API(func) void BZFILE;
38,51c38
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZFILE;
38,51c38
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   ;
38,53c38
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
38,53c38
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
43,53c43
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
43,53c43
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzReadOpen) ( 
49,53c49
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
49,53c49
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZ2_bzReadOpen) ( 
49,53c49
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ) ( 
49,53c49
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED ( 
51,54c51
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> int*  bzerror,   
51,54c51
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef *  bzerror,   
51,54c51
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void bzerror,   
51,54c51
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILE,   
53,55c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> FILE* f, 
53,55c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN * f, 
53,55c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
53,55c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
53,56c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIint   verbosity, 
53,56c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(verbosity, 
53,56c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen, 
53,57c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) int   small,
54,57c54
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       small,
54,57c54
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int,
54,58c54
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  void* unused,    
54,58c54
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerror* unused,    
55,58c55
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       unused,    
55,58c55
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE,    
55,59c55
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* int   nUnused 
55,59c55
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* fnUnused 
56,60c56
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
56,60c56
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
56,62c56
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       int   verbosity;
57,64c57
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
57,64c57
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   void BZ_API(BZ2_bzReadGetUnused) ( 
57,64c57
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   smallBZ_API(BZ2_bzReadGetUnused) ( 
58,64c58
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       (BZ2_bzReadGetUnused) ( 
58,64c58
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       voidBZ2_bzReadGetUnused) ( 
58,64c58
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* ) ( 
58,64c58
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unused( 
59,64d58
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
59,65c59
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
60,65c60
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    bzerror, 
60,65c60
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    ), 
62,66c62
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
64,66c64
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
64,66c64
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
64,66c64
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
64,67c64
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIvoid**  unused,  
64,67c64
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(**  unused,  
64,67c64
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused*  unused,  
64,67c64
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) unused,  
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       ,  
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       intint*    nUnused 
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    *    nUnused 
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerrornUnused 
66,69c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       );
66,69c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE;
66,71c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* BZ_EXTERN int BZ_API(BZ2_bzReadlen 
66,71c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* bint BZ_API(BZ2_bzReadlen 
67,71c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZ_API(BZ2_bzReadlen 
67,71c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void(BZ2_bzReadlen 
67,71c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void*BZ2_bzReadlen 
67,72c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  );
67,72c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  unused;
68,74c68
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
68,74c68
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       intBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
68,74c68
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    * BZ_API(BZ2_bzWriteOpen) ( 
69,74c69
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    BZ_API(BZ2_bzWriteOpen) ( 
69,74c69
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )(BZ2_bzWriteOpen) ( 
71,74c71
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ2_bzWriteOpen) ( 
71,74c71
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ) ( 
71,74c71
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int ( 
71,75c71
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_APIint*  bzerror,      
71,75c71
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API(*  bzerror,      
72,75c72
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    bzerror,      
72,75c72
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ),      
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> FILE* f, 
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN * f, 
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
74,77c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIint   blockSize100k, 
74,77c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(blockSize100k, 
74,77c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
74,78c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   verbosity, 
75,78c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       verbosity, 
75,78c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int, 
75,79c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  int   workFactor 
75,79c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  bzerrorworkFactor 
76,80c76
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
76,80c76
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE;
76,82c76
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* BZ_EXTERN void BZ_API(BZ2_bzWritelen 
76,82c76
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* fvoid BZ_API(BZ2_bzWritelen 
77,82c77
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       BZ_API(BZ2_bzWritelen 
77,82c77
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   (BZ2_bzWritelen 
77,82c77
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   blockSize100kBZ2_bzWritelen 
78,83c78
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       );
78,83c78
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   ;
78,85c78
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   verbosityBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
79,85c79
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
79,85c79
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   BZ_API(BZ2_bzWriteClose) ( 
80,85c80
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    (BZ2_bzWriteClose) ( 
80,85c80
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )BZ2_bzWriteClose) ( 
82,85c82
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ) ( 
82,85c82
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN ( 
82,86c82
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void int*          bzerror, 
82,86c82
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API*          bzerror, 
82,86c82
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
83,86c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    , 
83,87c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIint           abandon, 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(abandon, 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, 
85,89c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) unsigned int* nbytes_in, 
86,89c86
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
86,89c86
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
86,89c86
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          nbytes_in, 
87,89d86
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
87,89d86
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
87,90c87
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILEint* nbytes_out 
87,90c87
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       * nbytes_out 
87,90c87
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bnbytes_out 
88,91c88
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       );
88,91c88
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           ;
88,93c88
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandonBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
89,93c89
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
89,93c89
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_API(BZ2_bzWriteClose64) ( 
89,93c89
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int(BZ2_bzWriteClose64) ( 
89,93c89
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ2_bzWriteClose64) ( 
89,93c89
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in) ( 
90,93c90
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       ( 
90,94c90
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
90,94c90
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
90,94c90
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* bzerror, 
91,94c91
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    , 
91,95c91
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
93,95c93
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
93,95c93
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
93,95c93
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIint           abandon, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(abandon, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, 
93,97c93
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) unsigned int* nbytes_in_lo32, 
94,97c94
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
94,97c94
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
94,97c94
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          nbytes_in_lo32, 
95,97d94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
95,97d94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
95,98c95
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILEint* nbytes_in_hi32, 
95,98c95
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       * nbytes_in_hi32, 
95,98c95
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bnbytes_in_hi32, 
96,98c96
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       , 
96,99c96
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           unsigned int* nbytes_out_lo32, 
96,99c96
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandonint* nbytes_out_lo32, 
97,99c97
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
97,99c97
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
97,99c97
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int, 
97,100c97
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* unsigned int* nbytes_out_hi32
97,100c97
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32int* nbytes_out_hi32
98,100c98
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       * nbytes_out_hi32
98,100c98
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
98,101c98
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int);
98,101c98
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* ;
98,106c98
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
99,106c99
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffCompress) ( 
99,106c99
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffCompress) ( 
99,106c99
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int(BZ2_bzBuffToBuffCompress) ( 
99,106c99
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ2_bzBuffToBuffCompress) ( 
99,106c99
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32) ( 
100,106c100
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       ( 
100,107c100
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned char*         dest, 
100,107c100
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int*         dest, 
100,107c100
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* dest, 
101,107c101
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    , 
101,108c101
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
106,108c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
106,108c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
106,108c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
106,108c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API,
106,109c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(char*         source, 
106,109c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress*         source, 
106,109c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) source, 
107,109c107
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
107,110c107
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charunsigned int  sourceLen,
107,110c107
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         int  sourceLen,
107,110c107
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destsourceLen,
108,110c108
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
108,111c108
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int           blockSize100k, 
108,111c108
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned intblockSize100k, 
108,111c108
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* , 
108,112c108
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* destLenint           verbosity, 
109,112c109
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       verbosity, 
109,112c109
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char, 
109,113c109
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         int           workFactor 
109,113c109
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         sourceworkFactor 
110,114c110
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
110,114c110
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned ;
110,116c110
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
110,116c110
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
111,116c111
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
111,116c111
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
111,116c111
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kBZ2_bzBuffToBuffDecompress) ( 
112,116c112
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
112,116c112
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
112,117c112
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbositychar*         dest, 
113,117c113
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       *         dest, 
113,117c113
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           dest, 
114,117c114
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    , 
114,118c114
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
116,118c116
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
116,118c116
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
116,118c116
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
116,118c116
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API,
116,119c116
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(char*         source, 
116,119c116
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress*         source, 
116,119c116
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) source, 
117,119c117
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
117,120c117
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charunsigned int  sourceLen,
117,120c117
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         int  sourceLen,
117,120c117
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destsourceLen,
118,120c118
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
118,121c118
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int           small, 
118,121c118
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned intsmall, 
118,121c118
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* , 
118,122c118
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int* destLenint           );
119,122c119
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       );
119,122c119
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char;
119,124c119
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
119,124c119
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         sourceBZFILE * BZ_API(BZ2_bzopen) (
120,124c120
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       * BZ_API(BZ2_bzopen) (
120,124c120
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned BZ_API(BZ2_bzopen) (
120,124c120
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  (BZ2_bzopen) (
120,124c120
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  sourceLenBZ2_bzopen) (
121,124c121
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       ) (
121,124c121
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           (
121,125c121
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           smallconst char *path,
122,125c122
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       char *path,
122,125c122
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           *path,
122,125c122
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           )path,
124,125c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> ,
124,126c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN const char *mode
124,126c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE char *mode
124,126c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * *mode
124,126c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_APImode
124,127c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API();
124,127c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen;
124,129c124
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (BZ2_bzflush) (
125,129c125
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       BZ2_bzflush) (
125,129c125
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const ) (
125,129c125
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const char (
125,130c125
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       const char *);
125,130c125
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       const char *path;
126,132c126
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       #define BZ_VERSION  "1.0.2, 30-Dec-2001"
126,132c126
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       const define BZ_VERSION  "1.0.2, 30-Dec-2001"
126,132c126
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       const char BZ_VERSION  "1.0.2, 30-Dec-2001"
126,132c126
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       const char *"1.0.2, 30-Dec-2001"
127,135c127
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
>    typedef unsigned char   Bool;
127,135c127
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
>    )unsigned char   Bool;
129,135c129
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> char   Bool;
129,135c129
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> (Bool;
129,135c129
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> (BZ2_bzflush;
129,137c129
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> (BZ2_bzflush) typedef int             Int32;
130,137c130
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
>       int             Int32;
130,137c130
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
>       )Int32;
132,137c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> ;
132,138c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #typedef unsigned int    UInt32;
132,138c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #define unsigned int    UInt32;
132,138c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> #define BZ_VERSION  int    UInt32;
135,138c135
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> UInt32;
135,138c135
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef ;
135,142c135
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned #define True  ((Bool)1)
135,142c135
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   define True  ((Bool)1)
135,142c135
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef unsigned char   BoolTrue  ((Bool)1)
137,142c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> ((Bool)1)
137,142c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef (Bool)1)
137,142c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef int             Bool)1)
137,142c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef int             Int32)1)
138,142c138
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> 1)
138,142c138
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
---
> typedef )
138,143c138
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned #define False ((Bool)0)
138,143c138
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned int    define False ((Bool)0)
138,143c138
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned int    UInt32False ((Bool)0)
142,143c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> ((Bool)0)
142,143c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #(Bool)0)
142,143c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define Bool)0)
142,143c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  )0)
142,143c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  (0)
142,143c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  (()
142,145c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool#define __inline__  
142,145c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)define __inline__  
142,145c142
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)1__inline__  
143,146d142
< #define False ((Bool)0)
< 
< #define __inline__  
< 
(94.3 %, 11610 bytes)
142,148c142
< #define True  (0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #define True  (msg) 0x0   
142,148c142
< #define True  (0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #define True  (0) 0x0   
144,148c144
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> 0x0   
144,152c144
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> ##define BZ_MAX_ALPHA_SIZE 8
144,152c144
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define define BZ_MAX_ALPHA_SIZE 8
146,152c146
< \
<    
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> BZ_MAX_ALPHA_SIZE 8
148,152c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> 8
148,153c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> ##define define BZ_G_SIZE))
148,153c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> #define define define BZ_G_SIZE))
148,153c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> #define AssertDdefine BZ_G_SIZE))
148,153c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> #define AssertD(BZ_G_SIZE))
148,153c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> #define AssertD(cond))
148,153c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> #define AssertD(cond,)
148,161c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define AssertD(cond,msg#define BZ_RAND_DECLS                          \
148,161c148
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define AssertD(cond,msg) define BZ_RAND_DECLS                          \
152,161c152
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> BZ_RAND_DECLS                          \
152,161c152
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #\
152,162c152
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define Int32 rNToGo;                               \
152,162c152
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_ALPHA_SIZE rNToGo;                               \
153,162c153
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> ;                               \
153,162c153
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #\
153,163c153
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define Int32 rTPos                                 \
153,163c153
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define define rTPos                                 \
153,163c153
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define define BZ_G_SIZE\
153,165c153
< #define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
---
> #define define BZ_G_SIZE)\
161,171d160
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
161,171d160
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
161,171d160
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
161,172c161
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define BZ_RAND_DECLS                          1
162,173c162
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    #define BZ_M_RUNNING   2
162,173c162
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 define BZ_M_RUNNING   2
162,173c162
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 rNToGoBZ_M_RUNNING   2
162,173c162
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 rNToGo;                               2
163,174c163
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
>    #define BZ_M_FLUSHING  3
163,174c163
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
>    Int32 define BZ_M_FLUSHING  3
163,174c163
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
>    Int32 rTPos                                 BZ_M_FLUSHING  3
165,174c165
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> 3
172,174d171
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
172,174d171
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
172,174d171
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
172,175c172
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_M_IDLE      4
173,176d172
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
173,176d172
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
173,176d172
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
173,177c173
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_M_RUNNING   1
174,177d173
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
174,177d173
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
(94.4 %, 11534 bytes)
173,177c173
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_M_RUNNING   2
174,177d173
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
174,177d173
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
174,177d173
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
174,178c174
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_S_INPUT     8
176,178d175
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
176,178d175
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
176,178d175
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
176,179c176
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
177,179c177
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
177,179c177
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ BZ_N_QSORT + BZ_N_SHELL + 2)
177,179c177
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT + BZ_N_SHELL + 2)
177,179c177
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT + BZ_N_SHELL + 2)
178,179c178
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_SHELL + 2)
178,179c178
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ 2)
178,179c178
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define 2)
178,179c178
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL )
179,185d178
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
179,187c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #struct {
179,187c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define {
179,189c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT bz_stream* strm;
179,189c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (* strm;
179,189c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX strm;
179,189c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + ;
179,193c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT Int32    mode;
179,193c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + mode;
179,193c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL ;
179,194c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + Int32    state;
179,194c179
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2state;
186,194c186
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> ;
187,200c187
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    UInt32*  arr1;
187,200c187
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    struct *  arr1;
189,200c189
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       arr1;
189,200c189
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       bz_stream;
189,201c189
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* UInt32*  arr2;
189,201c189
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* strm*  arr2;
193,201c193
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       arr2;
193,201c193
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    ;
193,202c193
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    modeUInt32*  ftab;
194,202c194
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       *  ftab;
194,202c194
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    ftab;
195,202d194
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
200,205d199
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
200,205d199
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
200,205d199
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
201,206d200
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
201,206d200
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
201,207c201
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32char*   block;
201,207c201
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32*  *   block;
201,207c201
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       UInt32*  arr2block;
202,207c202
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
---
>       ;
202,208c202
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32unsigned short*  mtfv;
202,208c202
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32*  short*  mtfv;
202,208c202
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32*  ftab*  mtfv;
206,208c206
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       mtfv;
206,208c206
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
---
>       UInt32;
206,209c206
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
---
>       UInt32*  Int32    nblockMAX;
206,209c206
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
---
>       UInt32*  ptrnblockMAX;
207,209c207
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
---
>       ;
207,214c207
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       unsigned Int32    nInUse;
207,214c207
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       unsigned charnInUse;
207,214c207
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       unsigned char*   ;
207,215c207
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       unsigned char*   blockBool     inUse[6];
208,215c208
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       inUse[6];
208,215c208
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       unsigned [6];
208,215c208
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       unsigned short6];
208,215c208
<       unsigned short*  mtfv;
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       unsigned short*  ];
209,215d208
<       Int32    nblockMAX;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
(94.4 %, 11457 bytes)
207,214c207
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       unseqToSeq[6];
212,214c212
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       [6];
212,214c212
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    6];
212,214c212
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    nInUse];
213,214c213
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       ;
213,222c213
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Bool     UInt32   combinedCRC;
213,222c213
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Bool     inUsecombinedCRC;
213,222c213
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Bool     inUse[;
213,225c213
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     inUse[6Int32    verbosity;
213,225c213
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     inUse[6]verbosity;
214,225c214
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       ;
214,226c214
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
---
>       unsigned Int32    blockNo}
214,226c214
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
---
>       unsigned char    blockNo}
214,226c214
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
---
>       unsigned char    unseqToSeq}
214,227c214
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
---
>       unsigned char    unseqToSeq[EState;
214,227c214
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
---
>       unsigned char    unseqToSeq[6;
216,236d215
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
222,237c222
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       ;
222,247c222
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       UInt32   #define BZ_X_IDLE        1
222,247c222
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       UInt32   combinedCRCdefine BZ_X_IDLE        1
225,247c225
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       BZ_X_IDLE        1
225,247c225
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    1
225,248c225
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    verbosity#define BZ_X_OUTPUT      2
226,248c226
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       define BZ_X_OUTPUT      2
226,248c226
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    BZ_X_OUTPUT      2
226,248c226
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    blockNo2
227,250c227
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    #define BZ_X_MAGIC_1     0
227,250c227
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    EStatedefine BZ_X_MAGIC_1     0
235,250c235
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
> BZ_X_MAGIC_1     0
237,250c237
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
> 0
247,250d246
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
247,250d246
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
(94.4 %, 11375 bytes)
247,259c247
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> Int32    state;
247,259c247
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #state;
247,259c247
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define ;
247,265c247
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> #define define BZ_RAND_DECLS;
247,265c247
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> #define define MTFL_SIZE ;
253,268c253
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> UInt32   bsBuff;
254,268c254
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>    bsBuff;
254,268c254
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>    struct ;
256,268d255
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
256,269c256
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bz_streambsLive;
256,269c256
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bz_stream* ;
256,273c256
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_stream* strmBool     smallDecompress;
259,273c259
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       smallDecompress;
259,273c259
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       Int32    ;
259,274c259
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       Int32    stateInt32    currBlockNo;
265,274c265
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       currBlockNo;
266,274d265
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
268,274d267
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
268,275c268
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       UInt32   verbosity;
269,275d268
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
269,286d268
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
(94.5 %, 11251 bytes)
268,284c268
<       UInt32   bsBuff;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       UInt32   bsBuff*ll4;
280,284c280
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       ll4;
280,284c280
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       UInt32   ;
280,290c280
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   *UInt32   calculatedCombinedCRC;
280,290c280
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   *ttcalculatedCombinedCRC;
283,290c283
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       ;
283,336c283
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>       unsigned }
283,337c283
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       unsigned short   DState;
283,337c283
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       unsigned short   *;
283,343c283
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
---
>       unsigned short   *ll16#\
284,343c284
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
---
>       \
284,364c284
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>       unsigned static
284,365c284
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>       unsigned char    void makeMaps_e ( void )
284,365c284
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>       unsigned char    *makeMaps_e ( void )
284,365c284
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>       unsigned char    *ll4( void )
290,365c290
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>       void )
290,365c290
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>       UInt32   )
290,366c290
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
---
>       UInt32   calculatedCombinedCRC{
336,366d335
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
337,367c337
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
>    * s = 0;
337,367c337
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
>    DStates = 0;
343,367c343
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> = 0;
343,367c343
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #0;
364,367c364
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> ;
365,368c365
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> Int32 i;
365,368c365
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> void i;
365,368c365
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> void makeMaps_e ;
365,369c365
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e ( s->nInUse = 0;
365,369c365
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e ( void ->nInUse = 0;
366,369c366
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
> nInUse = 0;
367,369c367
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    = 0;
367,369c367
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState 0;
367,369c367
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState * ;
367,370c367
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    EState * s if (s->inUse[i]) {
367,370c367
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    EState * s = (s->inUse[i]) {
367,370c367
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    EState * s = 0s->inUse[i]) {
368,370c368
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    ->inUse[i]) {
368,370c368
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    Int32 inUse[i]) {
368,370c368
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    Int32 i[i]) {
369,370c369
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    i]) {
369,370c369
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    s]) {
369,370c369
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    s->) {
369,370c369
<    s->nInUse = 0;
<    if (s->inUse[i]) {
---
>    s->nInUse {
369,371c369
<    s->nInUse = 0;
<    if (s->inUse[i]) {
<          ;
---
>    s->nInUse = ;
369,372c369
<    s->nInUse = 0;
<    if (s->inUse[i]) {
<          ;
<       }
---
>    s->nInUse = 0}
370,373c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
---
>    }
370,377c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
---
>    if static
370,378c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (void generateMTFValues ( void )
370,378c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (sgenerateMTFValues ( void )
370,378c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (s->( void )
370,378c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (s->inUsevoid )
370,378c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
---
>    if (s->inUse[)
370,379c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
---
>    if (s->inUse[i{
370,380c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>    if (s->inUse[i]EState * s = 0;
370,380c370
<    if (s->inUse[i]) {
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>    if (s->inUse[i]) * s = 0;
371,380c371
<          ;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>          s = 0;
(94.5 %, 11213 bytes)
370,377c370
<    }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
>    0;
374,377c374
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
---
> ;
375,378c375
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> unsigned char   yy[6];
375,378c375
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void char   yy[6];
375,378c375
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues yy[6];
375,378c375
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues ( [6];
375,378c375
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> void generateMTFValues ( void 6];
376,378c376
< {
<    EState * s = 0;
<    unsigned char   yy[6];
---
> ];
377,378c377
<    EState * s = 0;
<    unsigned char   yy[6];
---
>    ;
377,379c377
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState Int32   i, j;
377,379c377
<    EState * s = 0;
<    unsigned char   yy[6];
<    Int32   i, j;
---
>    EState * i, j;
(94.5 %, 11173 bytes)
377,380d376
<    ;
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
378,381c378
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    EOB;
378,381c378
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
378,384c378
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
---
>    Int32   iUInt32* block;
378,384c378
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
---
>    Int32   i, * block;
378,384c378
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
---
>    Int32   i, jblock;
379,384c379
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
---
>    ;
379,385c379
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
<    unsigned short* mtfv  ;
---
>    Int32   unsigned short* mtfv  ;
379,385c379
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
<    unsigned short* mtfv  ;
---
>    Int32   zPendshort* mtfv  ;
380,385c380
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
<    unsigned short* mtfv  ;
---
>    * mtfv  ;
380,385c380
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* block;
<    unsigned short* mtfv  ;
---
>    Int32   mtfv  ;
381,385d380
<    Int32   EOB;
< 
<    
<    UInt32* block;
<    unsigned short* mtfv  ;
381,386d380
<    Int32   EOB;
< 
<    
<    UInt32* block;
<    unsigned short* mtfv  ;
< 
(94.6 %, 11111 bytes)
380,384c380
<    Int32   mtfv  ;
< 
<    {
<       unsigned char ;
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>    Int32   , "generateMTFValues(a)" );
380,384c380
<    Int32   mtfv  ;
< 
<    {
<       unsigned char ;
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>    Int32   mtfv  "generateMTFValues(a)" );
382,384c382
<    {
<       unsigned char ;
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>    );
383,384c383
<       unsigned char ;
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
---
>       ;
383,386c383
<       unsigned char ;
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
---
>       unsigned {
383,388c383
<       unsigned char ;
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       unsigned char if (zPend > 0) 
384,388c384
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       (zPend > 0) 
384,388c384
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       AssertD zPend > 0) 
384,388c384
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       AssertD ( > 0) 
384,388c384
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       AssertD ( ll_i  0) 
384,388c384
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
---
>       AssertD ( ll_i  s) 
384,389c384
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
<          {
---
>       AssertD ( ll_i  s-{
384,390c384
<       AssertD ( ll_i  s-nInUse, "generateMTFValues(a)" );
< 
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>       AssertD ( ll_i  s-nInUseregister unsigned char  rtmp  ;
(94.6 %, 11039 bytes)
383,389c383
<       ;
< 
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>       rtmp  ;
385,389c385
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>       ;
387,390c387
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
---
>          j;
387,390c387
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
---
>          if ;
387,391c387
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
<          }
---
>          if (}
387,393c387
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
---
>          if (zPend }
387,394c387
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
---
>          if (zPend > }
387,396c387
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
---
>          if (zPend > 0}
388,400c388
<          {
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
---
>          ;
389,402c389
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
---
>             #define static
389,402c389
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
---
>             register define static
389,402c389
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
---
>             register unsigned static
389,403c389
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
---
>             register unsigned char  void* default_bzalloc ( void )
389,403c389
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
---
>             register unsigned char  rtmp  * default_bzalloc ( void )
390,403c390
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
---
>             default_bzalloc ( void )
390,403c390
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
---
>             j( void )
391,403c391
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
---
>          void )
393,403c393
<       }
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
---
>       )
394,404c394
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
< ;
---
>    ;
396,408c396
<    }
< 
< 
< 
< ;
< 
< #define static
< void* default_bzalloc ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    int BZ_API(BZ2_bzCompressInit) 
400,408c400
< ;
< 
< #define static
< void* default_bzalloc ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> BZ_API(BZ2_bzCompressInit) 
402,408c402
< #define static
< void* default_bzalloc ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
(94.6 %, 10981 bytes)
400,403c400
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int        verbosity,
400,403c400
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> BZ_APIverbosity,
400,403c400
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> BZ_API(,
400,404c400
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> BZ_API(BZ2_bzCompressInitint        workFactor )
401,404c401
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     workFactor )
401,404c401
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( )
401,405c401
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( bz_stream{
401,406c401
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* Int32   n;
401,406c401
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strmn;
402,406c402
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      ;
402,407c402
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        EState* s;
402,407c402
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100k* s;
403,407c403
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      s;
403,407c403
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        ;
403,408c403
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
---
>                      int        verbosity;
404,409c404
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>                      NULL;
404,409c404
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>                      int        ;
404,410c404
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>                      int        workFactor s->arr2 = NULL;
405,410c405
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
> ->arr2 = NULL;
406,410c406
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    arr2 = NULL;
406,410c406
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    Int32   = NULL;
406,410c406
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    Int32   nNULL;
407d406
<    EState* s;
409,410d407
<    NULL;
<    s->arr2 = NULL;
407,411c407
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
407,411c407
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
407,411c407
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* s(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
408,411c408
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
409,411c409
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    +BZ_N_OVERSHOOT) * sizeof(UInt32) );
409,411c409
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    NULLBZ_N_OVERSHOOT) * sizeof(UInt32) );
410,411c410
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ) * sizeof(UInt32) );
410,411c410
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s* sizeof(UInt32) );
410,411c410
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->sizeof(UInt32) );
410,411c410
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 (UInt32) );
410,411c410
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = UInt32) );
410,411c410
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = NULL) );
411c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    );
411c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC;
411,412c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
---
>    sBZALLOCBZALLOC( ;
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n(s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * == NULL || s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeofNULL || s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(|| s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32s->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ->arr2 == NULL || s->ftab == NULL) 
411,414c411
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) )arr2 == NULL || s->ftab == NULL) 
412,414c412
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    == NULL || s->ftab == NULL) 
414c414
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    NULL || s->ftab == NULL) 
414c414
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if || s->ftab == NULL) 
414c414
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->ftab == NULL) 
414c414
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->ftab == NULL) 
(94.7 %, 10943 bytes)
414,417c414
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
414,417c414
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
414,417c414
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
414,417c414
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab = BZ_S_INPUT;
414,417c414
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab == BZ_S_INPUT;
414,417c414
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab == NULL;
416,417d415
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
416,417d415
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
(94.7 %, 10876 bytes)
416,417d415
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
416,417d415
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s;
(94.7 %, 10807 bytes)
416,417d415
<    s->ptr               = (UInt32*)s->arr1;
< 
416,418c416
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          ;
---
>    s->state          ;
(94.7 %, 10762 bytes)
416,434c416
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    BZ2_bzCompress) ( bz_stream *strm, int action )
416,434c416
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm) ( bz_stream *strm, int action )
416,434c416
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->( bz_stream *strm, int action )
416,434c416
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->state          bz_stream *strm, int action )
417,434c417
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    *strm, int action )
417,434c417
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return strm, int action )
417,434c417
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OK, int action )
418,434c418
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int action )
430,434c430
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> action )
434c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> )
434,435c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> int {
434,437c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_APIEState* s;
434,437c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(* s;
434,437c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompresss;
434,437c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ;
434,438c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( if (NULL) BZFREE(s->ftab);
434,438c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream (NULL) BZFREE(s->ftab);
434,438c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *NULL) BZFREE(s->ftab);
434,438c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm) BZFREE(s->ftab);
434,438c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, BZFREE(s->ftab);
434,438c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int (s->ftab);
434,438c434
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action s->ftab);
435,438c435
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> ->ftab);
437,438c437
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
>    ftab);
437,438c437
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
>    EState);
437,438c437
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
>    EState* ;
438,439d437
<    if (NULL) BZFREE(s->ftab);
<    ;
438,440c438
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
---
>    }
(94.8 %, 10727 bytes)
437,448c437
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    EState* sint        verbosity,
438,448c438
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> verbosity,
446,448c446
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> ,
446,449c446
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int int        small )
446,449c446
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIsmall )
446,449c446
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API()
446,450c446
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int BZ_API(BZ2_bzDecompressInit{
447,451c447
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      DState* s;
447,451c447
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( * s;
447,451c447
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_streams;
447,451c447
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* ;
447,453c447
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                      ( bz_stream* strms->bsBuff                = 0;
448,453c448
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        ->bsBuff                = 0;
448,453c448
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        int        bsBuff                = 0;
448,453c448
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        int        verbosity= 0;
449,453c449
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        0;
449,453c449
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        int        ;
449,454c449
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>                        int        small s->calculatedCombinedCRC = 0;
450,454c450
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
> ->calculatedCombinedCRC = 0;
451,454c451
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    calculatedCombinedCRC = 0;
451,454c451
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    DState= 0;
451,454c451
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    DState* 0;
452,454d451
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
453,454d452
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
453,455c453
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->total_in_lo32      = 0;
(94.8 %, 10660 bytes)
452,453d451
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
452,453d451
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
(94.8 %, 10594 bytes)
452,453d451
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
452,453d451
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
(94.9 %, 10521 bytes)
452,453d451
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
452,454c452
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< s;
---
>    s;
452,454c452
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< s;
---
>    s;
(94.9 %, 10448 bytes)
451,454c451
<    DState* s;
< s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    DState* ss->ll4);
452,454c452
< s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
> ->ll4);
452,454c452
< s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
> sll4);
453,454c453
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    );
453,454c453
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if ;
453,456c453
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
---
>    if (;
453,457c453
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
---
>    if (s }
453,464c453
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    if (s == #define BZ_SETERR(e)                    \
453,464c453
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    if (s == NULLdefine BZ_SETERR(e)                    \
453,464c453
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    if (s == NULL) BZ_SETERR(e)                    \
454,464c454
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    (e)                    \
454,464c454
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREEe)                    \
454,464c454
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE()                    \
454,464c454
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
>    BZFREE(s\
454,467c454
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
---
>    BZFREE(s->typedef 
454,468c454
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->ll4struct {
454,468c454
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->ll4){
456,469c456
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    FILE*     handle;
457,469c457
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> *     handle;
464,469c464
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
464,469c464
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #;
464,470c464
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define char      buf[BZ_MAX_UNUSED];
464,470c464
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERRbuf[BZ_MAX_UNUSED];
464,470c464
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR([BZ_MAX_UNUSED];
464,470c464
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eBZ_MAX_UNUSED];
464,470c464
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(e)                    ];
467,470c467
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> ;
468,471c468
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    Int32     bufN;
468,471c468
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct bufN;
469,471c469
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       ;
469,472c469
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILEBool      writing;
469,472c469
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     writing;
470,472d469
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
470,472d469
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
470,473c470
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       char      strm;
470,473c470
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       char      buf;
470,474c470
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       char      buf[Int32     lastErr;
470,474c470
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       char      buf[BZ_MAX_UNUSEDlastErr;
471,474d470
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
471,474d470
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
471,475c471
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     initialisedOk;
472,475d471
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
472,476c472
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
472,477c472
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      bzFile;
473,477d472
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
473,485c473
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
473,485c473
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream * BZ_API(BZ2_bzWriteOpen) 
473,485c473
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strmBZ_API(BZ2_bzWriteOpen) 
474,485c474
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
474,485c474
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     BZ2_bzWriteOpen) 
474,485c474
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErr) 
475,486c475
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
475,486c475
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      int*  bzerror,      
475,486c475
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOk*  bzerror,      
476,486c476
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzerror,      
477,486c477
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
477,487c477
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFileFILE* f, 
485,487c485
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> * f, 
485,487c485
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILEf, 
485,487c485
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* , 
485,488c485
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIint   blockSize100k, 
485,488c485
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(blockSize100k, 
485,488c485
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen, 
486,489c486
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     int   verbosity,
486,489c486
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( verbosity,
486,489c486
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int,
486,490c486
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  int   workFactor )
486,490c486
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerrorworkFactor )
487,490c487
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
487,491c487
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       FILE{
487,492c487
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* Int32   ret;
487,492c487
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* fret;
488,492c488
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ;
488,493c488
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   bzFile* bzf = NULL;
488,493c488
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100k* bzf = NULL;
489,493c489
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzf = NULL;
489,493c489
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   = NULL;
489,493c489
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosityNULL;
490,493c490
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       ;
490,495c490
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   BZ_SETERR(BZ_OK);
490,495c490
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor (BZ_OK);
491,495c491
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
492,495c492
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
492,495c492
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   ;
492,497c492
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   retif (f == NULL ||
493,497c493
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    (f == NULL ||
493,497c493
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFilef == NULL ||
493,497c493
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* == NULL ||
493,497c493
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf NULL ||
493,497c493
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = ||
493,498c493
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    bzFile* bzf = NULL(blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
495,498c495
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
495,498c495
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR< 1 || blockSize100k > 90 || verbosity > 4))
495,498c495
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(1 || blockSize100k > 90 || verbosity > 4))
495,498c495
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK|| blockSize100k > 90 || verbosity > 4))
495,498c495
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK)blockSize100k > 90 || verbosity > 4))
497,498c497
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    > 90 || verbosity > 4))
497,498c497
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if 90 || verbosity > 4))
497,498c497
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (|| verbosity > 4))
497,498c497
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f verbosity > 4))
497,498c497
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == > 4))
497,498c497
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == NULL 4))
498c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        ))
498c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        ()
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < ->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > ( &(bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 &(bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || (bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity bzf->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > ->strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4strm), blockSize100k, 
498,499c498
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4)), blockSize100k, 
499c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       , blockSize100k, 
499c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzfblockSize100k, 
499c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->, 
499,500c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        verbosity, workFactor );
499,500c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = , workFactor );
499,500c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit workFactor );
499,500c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit ( );
499,500c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit ( &;
499,501c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->initialisedOk = True;
499,501c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->initialisedOk = True;
499,501c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->initialisedOk = True;
499,501c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm= True;
499,501c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm)True;
499,501c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), ;
499,502c499
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100kreturn bzf;   
500,502c500
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>                               bzf;   
(94.9 %, 10366 bytes)
499,507c499
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        = fBZ2_bzCompressInit ( void BZ_API(BZ2_bzWrite)
499,507c499
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        = fBZ2_bzCompressInit ( )BZ_API(BZ2_bzWrite)
500,507c500
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    (BZ2_bzWrite)
500,507c500
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzfBZ2_bzWrite)
500,507c500
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf->)
500,508c500
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk ( int*    bzerror, 
500,508c500
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = int*    bzerror, 
500,508c500
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = True*    bzerror, 
501,508c501
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzerror, 
501,508c501
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    return , 
501,509c501
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return bzfBZFILE* b, 
502,509c502
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
507,509c507
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
507,509c507
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void , 
507,510c507
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_APIvoid*   buf, 
507,510c507
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(*   buf, 
507,510c507
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWritebuf, 
508,510c508
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              , 
508,511c508
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int     len )
508,511c508
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( intlen )
508,511c508
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    )
508,512c508
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( int*    bzerror{
509,513c509
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                Int32   ret;
509,513c509
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILEret;
509,513c509
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE* ;
509,514c509
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bbzFile* bzf = (bzFile*)b;
510,514c510
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                * bzf = (bzFile*)b;
510,514c510
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                voidbzf = (bzFile*)b;
510,514c510
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   = (bzFile*)b;
510,514c510
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   buf(bzFile*)b;
511,514c511
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzFile*)b;
511,514c511
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     *)b;
511,514c511
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     len )b;
512,514c512
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
> b;
513,514c513
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    ;
513,516c513
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    Int32   BZ_SETERR(ferror(bzf->handle)) {
513,516c513
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    Int32   ret(ferror(bzf->handle)) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    ferror(bzf->handle)) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile(bzf->handle)) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf->handle)) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf ->handle)) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = handle)) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = ()) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = (bzFile) {
514,516c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = (bzFile*{
514,517c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    bzFile* bzf = (bzFile*)bzf->strm.avail_out ;
514,517c514
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    bzFile* bzf = (bzFile*)b->strm.avail_out ;
516,517c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    strm.avail_out ;
516,517c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR.avail_out ;
516,517c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(avail_out ;
516,517c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(ferror;
516,518c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
---
>    BZ_SETERR(ferror(}
516,519c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
< }
---
>    BZ_SETERR(ferror(bzf}
516,523c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->void BZ_API(BZ2_bzWriteClose)
516,523c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handleBZ_API(BZ2_bzWriteClose)
516,523c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handle)(BZ2_bzWriteClose)
516,523c516
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handle)) BZ2_bzWriteClose)
517,523c517
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       )
517,524c517
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf( int*          bzerror, 
517,524c517
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->int*          bzerror, 
517,524c517
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm*          bzerror, 
517,524c517
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.bzerror, 
517,524c517
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out , 
518,525c518
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZFILE*       b, 
519,525c519
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
523,525c523
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
523,525c523
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
523,526c523
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIint           abandon,
523,526c523
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(abandon,
523,526c523
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose,
524,527c524
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   unsigned int* nbytes_in,
524,527c524
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int* nbytes_in,
524,527c524
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int* nbytes_in,
524,527c524
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          nbytes_in,
524,527c524
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerror,
525,527d524
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
525,528c525
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILEint* nbytes_out )
525,528c525
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       * nbytes_out )
525,528c525
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bnbytes_out )
526,528c526
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     )
526,529c526
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     int           {
526,530c526
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     int           abandonBZ2_bzWriteClose64 ;
527,530c527
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     ;
527,531c527
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
---
>                     unsigned }
527,534c527
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intvoid BZ_API(BZ2_bzWriteClose64)
527,534c527
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* BZ_API(BZ2_bzWriteClose64)
527,534c527
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_in(BZ2_bzWriteClose64)
528,534c528
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     BZ2_bzWriteClose64)
528,534c528
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned )
528,535c528
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int( int*          bzerror, 
528,535c528
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* int*          bzerror, 
528,535c528
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out *          bzerror, 
529,535c529
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> bzerror, 
530,535c530
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>    , 
530,536c530
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZ2_bzWriteClose64 BZFILE*       b, 
531,536c531
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
534,536c534
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
534,536c534
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
534,537c534
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIint           abandon,
534,537c534
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(abandon,
534,537c534
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose64,
535,538c535
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   unsigned int* nbytes_in_lo32,
535,538c535
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int* nbytes_in_lo32,
535,538c535
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int* nbytes_in_lo32,
535,538c535
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          nbytes_in_lo32,
535,538c535
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerror,
536,538d535
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
536,539c536
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILEint* nbytes_in_hi32,
536,539c536
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       * nbytes_in_hi32,
536,539c536
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bnbytes_in_hi32,
537,539c537
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     ,
537,540c537
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           unsigned int* nbytes_out_lo32,
537,540c537
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandonint* nbytes_out_lo32,
538,540c538
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
538,540c538
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
538,540c538
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int,
538,541c538
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* unsigned int* nbytes_out_hi32 )
538,541c538
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32int* nbytes_out_hi32 )
539,541c539
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
539,541c539
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
539,541c539
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int)
539,542c539
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* {
539,544c539
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_in_hi32bzFile* bzf = ((bzf->writing))
540,544c540
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     * bzf = ((bzf->writing))
540,544c540
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned bzf = ((bzf->writing))
540,544c540
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int= ((bzf->writing))
540,544c540
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* ((bzf->writing))
540,544c540
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_out_lo32(bzf->writing))
541,544c541
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     bzf->writing))
541,544c541
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned ->writing))
541,544c541
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned intwriting))
541,544c541
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* ))
542,544d541
< {
<    
<    bzFile* bzf = ((bzf->writing))
542,545c542
< {
<    
<    bzFile* bzf = ((bzf->writing))
<       ;
---
> ;
544,545d543
<    bzFile* bzf = ((bzf->writing))
<       ;
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile(ferror(bzf->handle))
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* ferror(bzf->handle))
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf (bzf->handle))
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = bzf->handle))
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (->handle))
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((handle))
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((bzf))
544,546c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((bzf->)
544,547c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = ((bzf->writing;
544,549c544
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* bzf = ((bzf->writing)(BZ_OK);
545,549c545
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>       BZ_OK);
546,549c546
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>    );
546,549c546
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>    if ;
546,550c546
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    if (0;
546,550c546
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    if (ferror;
546,551c546
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
---
>    if (ferror(0;
(95.0 %, 10321 bytes)
544,554c544
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    bzFile* bzf = ((bzfBZFILE* BZ_API(BZ2_bzReadOpen) 
544,554c544
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    bzFile* bzf = ((bzf)* BZ_API(BZ2_bzReadOpen) 
545,554c545
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>       BZ_API(BZ2_bzReadOpen) 
547,554c547
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ2_bzReadOpen) 
547,554c547
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ2_bzReadOpen) 
547,554c547
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ_OK) 
547,555c547
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    (BZ_OK)( int*  bzerror, 
548,555c548
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    int*  bzerror, 
548,555c548
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0*  bzerror, 
549,555c549
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    bzerror, 
549,555c549
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0, 
550,556c550
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
554,556c554
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
554,556c554
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILEf, 
554,556c554
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* , 
554,557c554
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_APIint   verbosity,
554,557c554
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(verbosity,
554,557c554
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzReadOpen,
555,558c555
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    int   small,
555,558c555
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( small,
555,558c555
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int,
555,559c555
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  void* unused,
555,559c555
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerror* unused,
556,559c556
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      unused,
556,559c556
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE,
556,560c556
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* int   nUnused )
556,560c556
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* fnUnused )
557,560c557
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
557,561c557
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      int   {
557,562c557
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbositybzFile* bzf = NULL;
558,562c558
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      * bzf = NULL;
558,562c558
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzf = NULL;
558,562c558
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   small= NULL;
559,562c559
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      NULL;
559,562c559
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void;
559,563c559
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* int     ret;
559,563c559
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unusedret;
560,563c560
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      ;
560,565c560
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   BZ_SETERR(BZ_OK);
560,565c560
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused (BZ_OK);
561,565c561
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
562,565c562
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
562,565c562
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile;
562,567c562
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* if (f == NULL || 
562,567c562
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf (f == NULL || 
562,567c562
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = f == NULL || 
562,567c562
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = NULL== NULL || 
563,567c563
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    NULL || 
563,567c563
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    int     || 
563,568c563
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     ret(small != 0 && small != 1) ||
565,568c565
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    small != 0 && small != 1) ||
565,568c565
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR!= 0 && small != 1) ||
565,568c565
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(0 && small != 1) ||
565,568c565
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK&& small != 1) ||
565,568c565
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)small != 1) ||
567,568c567
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    != 1) ||
567,568c567
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if 1) ||
567,568c567
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if () ||
567,568c567
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if (f ||
567,569c567
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == (verbosity < 0 || verbosity > 4) ||
(95.0 %, 10275 bytes)
567,569c567
<    if (f ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>    if (f unused == NULL && nUnused != 0) ||
568,569c568
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        == NULL && nUnused != 0) ||
568,569c568
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (NULL && nUnused != 0) ||
568,569c568
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity && nUnused != 0) ||
(95.0 %, 10222 bytes)
568,569c568
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
568,569c568
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
568,569c568
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && < 0 || nUnused > BZ_MAX_UNUSED)))
568,569c568
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused 0 || nUnused > BZ_MAX_UNUSED)))
568,569c568
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != || nUnused > BZ_MAX_UNUSED)))
568,569c568
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != 0nUnused > BZ_MAX_UNUSED)))
568,569c568
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != 0) > BZ_MAX_UNUSED)))
569c569
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        BZ_MAX_UNUSED)))
569c569
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ()))
569c569
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused ))
(95.0 %, 10171 bytes)
568,569c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        (->bufN;
568,569c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((bufN;
568,569c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused ;
568,570c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
---
>        ((nUnused < ;
568,571c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 return bzf;   
568,571c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || bzf;   
568,571c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || nUnused ;   
568,572c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
---
>        ((nUnused < 0 || nUnused > }
568,576c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSEDvoid BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
568,576c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
568,576c568
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED))(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
569,576c569
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
569,576c569
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf) ( int *bzerror, BZFILE *b )
569,576c569
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->( int *bzerror, BZFILE *b )
569,576c569
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->bufNint *bzerror, BZFILE *b )
570,576c570
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    *bzerror, BZFILE *b )
571,576c571
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzerror, BZFILE *b )
571,576c571
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return , BZFILE *b )
571,576c571
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzfBZFILE *b )
572,576c572
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *b )
576c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> b )
576c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void )
576,577c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API{
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(bzFile* bzf = (bzFile*)0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose* bzf = (bzFile*)0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) bzf = (bzFile*)0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( = (bzFile*)0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int (bzFile*)0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzFile*)0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror*)0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, )0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE 0;
576,578c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *;
576,579c576
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b 0;
577,579c577
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> ;
578,580c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
---
>    }
578,584c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFileint BZ_API(BZ2_bzRead) 
578,584c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* BZ_API(BZ2_bzRead) 
578,584c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf (BZ2_bzRead) 
578,584c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = BZ2_bzRead) 
578,584c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = () 
578,585c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile( int*    bzerror, 
578,585c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*int*    bzerror, 
578,585c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)*    bzerror, 
578,585c578
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)0bzerror, 
(95.1 %, 10139 bytes)
578,584c578
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    * b, 
582,584c582
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
582,584c582
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int , 
582,585c582
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_APIvoid*   buf, 
582,585c582
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(*   buf, 
582,585c582
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzReadbuf, 
583,585c583
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            , 
583,586c583
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int     len )
583,586c583
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( intlen )
583,586c583
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    )
583,587c583
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    bzerror{
584,589c584
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              buf;
584,589c584
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              BZFILE;
584,591c584
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              BZFILE* while (True) 
584,591c584
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              BZFILE* b(True) 
585,591c585
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              True) 
585,591c585
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              void) 
585,593c585
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              void*   return 0; 
585,593c585
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              void*   buf0; 
586,593c586
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              ; 
586,594c586
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
>              int     }
586,598c586
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              int     len void BZ_API(BZ2_bzReadGetUnused) 
587,598c587
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
589,598c589
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    (BZ2_bzReadGetUnused) 
589,598c589
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bufBZ2_bzReadGetUnused) 
591,598c591
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    ) 
591,599c591
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while ( int*    bzerror, 
591,599c591
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (int*    bzerror, 
591,599c591
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (True*    bzerror, 
593,599c593
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzerror, 
593,599c593
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return , 
593,600c593
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0BZFILE* b, 
594,600c594
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
598,600c598
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
598,600c598
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void , 
598,601c598
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_APIvoid**  unused, 
598,601c598
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(**  unused, 
598,601c598
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnused*  unused, 
599,601c599
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      unused, 
599,601c599
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( , 
599,602c599
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( intint*    nUnused )
599,602c599
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    *    nUnused )
599,602c599
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerrornUnused )
600,602c600
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        )
600,603c600
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        BZFILE{
600,604c600
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        BZFILE* nUnused ;
600,604c600
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        BZFILE* b;
601,605c601
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
---
>                        }
601,613c601
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        voidint BZ_API(BZ2_bzBuffToBuffCompress) 
601,613c601
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*BZ_API(BZ2_bzBuffToBuffCompress) 
601,613c601
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  (BZ2_bzBuffToBuffCompress) 
601,613c601
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedBZ2_bzBuffToBuffCompress) 
602,613c602
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        ) 
602,614c602
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int( char*         dest, 
602,614c602
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    char*         dest, 
602,614c602
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused *         dest, 
603,614c603
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> dest, 
604,614c604
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    , 
604,615c604
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    nUnused unsigned int* destLen,
605,615c605
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
613,615c613
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
613,615c613
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int destLen,
613,615c613
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API,
613,616c613
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(char*         source, 
613,616c613
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompress*         source, 
614,616c614
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          source, 
614,616c614
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( , 
614,617c614
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charunsigned int  sourceLen,
614,617c614
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         int  sourceLen,
614,617c614
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destsourceLen,
615,617c615
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            ,
615,618c615
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int           blockSize100k, 
615,618c615
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned intblockSize100k, 
615,618c615
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* , 
615,619c615
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* destLenint           verbosity, 
616,619c616
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            verbosity, 
616,619c616
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char, 
616,620c616
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         int           workFactor )
616,620c616
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         sourceworkFactor )
617,620c617
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
617,621c617
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            unsigned {
617,622c617
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  bz_stream strm;
617,622c617
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLenstrm;
618,622c618
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            ;
618,623c618
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           int ret;
618,623c618
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100kret;
619,623c619
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ;
619,625c619
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           if (dest == NULL || destLen == NULL || 
619,625c619
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbosity(dest == NULL || destLen == NULL || 
620,625c620
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            dest == NULL || destLen == NULL || 
620,625c620
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           == NULL || destLen == NULL || 
620,625c620
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor NULL || destLen == NULL || 
621,625c621
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> || destLen == NULL || 
622,625c622
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    destLen == NULL || 
622,625c622
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream == NULL || 
622,625c622
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strmNULL || 
623,625c623
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
623,626c623
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int source == NULL ||
623,626c623
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ret== NULL ||
625,626c625
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
625,626c625
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    if ||
625,627c625
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (blockSize100k < 1 || blockSize100k > 9 ||
625,627c625
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest < 1 || blockSize100k > 9 ||
625,627c625
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == 1 || blockSize100k > 9 ||
(95.1 %, 10071 bytes)
625,626c625
<    if (blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>    if (verbosity > workFactor == 0) ;
625,626c625
<    if (blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>    if (blockSize100k > workFactor == 0) ;
(95.1 %, 10005 bytes)
625,629c625
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if (;
625,630c625
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
---
>    if (verbosity }
625,634c625
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > int BZ_API(BZ2_bzBuffToBuffDecompress) 
625,634c625
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor BZ_API(BZ2_bzBuffToBuffDecompress) 
625,634c625
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == (BZ2_bzBuffToBuffDecompress) 
625,634c625
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == 0BZ2_bzBuffToBuffDecompress) 
625,634c625
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == 0) ) 
626,635c626
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    ( char*         dest, 
628,635c628
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    char*         dest, 
628,635c628
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    0*         dest, 
629,635c629
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    dest, 
629,635c629
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return , 
629,636c629
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return retunsigned int* destLen,
630,636c630
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
634,636c634
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
634,636c634
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int destLen,
634,636c634
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API,
634,637c634
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(char*         source, 
634,637c634
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress*         source, 
635,637c635
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            source, 
635,637c635
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( , 
635,638c635
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charunsigned int  sourceLen,
635,638c635
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         int  sourceLen,
635,638c635
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destsourceLen,
636,638c636
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              ,
636,639c636
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int           small,
636,639c636
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned intsmall,
636,639c636
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* ,
636,640c636
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenint           verbosity )
637,640c637
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
637,640c637
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char)
637,641c637
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char*         {
637,642c637
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         sourcebz_stream strm;
638,642c638
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              strm;
638,642c638
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned ;
638,643c638
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  int ret;
638,643c638
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLenret;
639,643c639
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ;
639,645c639
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           if (dest == NULL || destLen == NULL || 
639,645c639
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           small(dest == NULL || destLen == NULL || 
640,645c640
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              dest == NULL || destLen == NULL || 
640,645c640
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           == NULL || destLen == NULL || 
640,645c640
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity NULL || destLen == NULL || 
641,645c641
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> || destLen == NULL || 
642,645c642
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    destLen == NULL || 
642,645c642
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream == NULL || 
642,645c642
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strmNULL || 
643,645c643
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
643,646c643
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int source == NULL ||
643,646c643
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ret== NULL ||
645,646c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
645,646c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    if ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if ((small != 0 && small != 1) ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest small != 0 && small != 1) ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == != 0 && small != 1) ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL 0 && small != 1) ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || && small != 1) ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen small != 1) ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == != 1) ||
645,647c645
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == NULL 1) ||
646,647c646
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        ) ||
646,647c646
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        source ||
(95.2 %, 9937 bytes)
645,646c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if (0 || verbosity > 4) 
645,646c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((|| verbosity > 4) 
645,646c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small verbosity > 4) 
645,646c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != > 4) 
645,646c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != 0 4) 
645,646c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != 0 && ) 
645,647c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           ;
---
>    if ((small != 0 && small ;
645,649c645
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           ;
< 
<    ret ;
---
>    if ((small != 0 && small != ret ;
(95.2 %, 9888 bytes)
645,655c645
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    if (* bzopen_or_bzdopen
645,655c645
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    if (0 bzopen_or_bzdopen
645,656c645
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if (0 || ( )      
645,656c645
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if (0 || verbosity )      
645,657c645
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
---
>    if (0 || verbosity > ;
645,662c645
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    if (0 || verbosity > 4BZFILE * BZ_API(BZ2_bzopen)
646,662c646
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>           * BZ_API(BZ2_bzopen)
648,662c648
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    BZ_API(BZ2_bzopen)
648,662c648
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    ret (BZ2_bzopen)
649,662c649
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ2_bzopen)
654,662c654
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
655,663c655
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ( const char *path,
655,663c655
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE const char *path,
655,663c655
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * char *path,
656,663c656
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                *path,
656,663c656
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                ( path,
657,663c657
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ,
662,664c662
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
662,664c662
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE char *mode )
662,664c662
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * *mode )
662,664c662
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_APImode )
662,664c662
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API()
662,665c662
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * BZ_API(BZ2_bzopen{
663,666c663
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                return 0;
663,666c663
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( 0;
663,666c663
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const ;
663,667c663
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const char }
663,671c663
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *BZFILE * BZ_API(BZ2_bzdopen)
663,671c663
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *path* BZ_API(BZ2_bzdopen)
664,671c664
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  BZ_API(BZ2_bzdopen)
664,671c664
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const (BZ2_bzdopen)
664,671c664
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char BZ2_bzdopen)
664,671c664
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *)
664,672c664
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode ( int fd,
665,672c665
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> int fd,
666,672c666
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    fd,
666,672c666
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return ,
666,673c666
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0const char *mode )
667,673c667
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> char *mode )
671,673c671
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> *mode )
671,673c671
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE mode )
671,673c671
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * )
671,674c671
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * BZ_API{
671,675c671
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(return bzopen_or_bzdopen(NULL,fd,mode,1);
671,675c671
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopenbzopen_or_bzdopen(NULL,fd,mode,1);
672,675c672
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                (NULL,fd,mode,1);
672,675c672
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( NULL,fd,mode,1);
672,675c672
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int ,fd,mode,1);
672,675c672
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fdfd,mode,1);
673,675c673
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  ,mode,1);
673,675c673
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const mode,1);
673,675c673
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char ,1);
673,675c673
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *1);
673,675c673
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode );
674,675c674
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> ;
675,676c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
>    }
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopenBZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen((BZ2_bzread) (BZFILE* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULLBZ2_bzread) (BZFILE* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,) (BZFILE* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd(BZFILE* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,BZFILE* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode* b, void* buf, int len )
675,680c675
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,b, void* buf, int len )
(95.2 %, 9846 bytes)
675,679c675
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    * buf, int len )
679c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
679c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int , int len )
679c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIint len )
679c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(len )
679c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread)
679,680c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) {
679,681c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (int bzerr, nread;
679,681c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILEbzerr, nread;
679,681c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* , nread;
679,681c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* bnread;
679,681c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, ;
679,682c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void0;
679,682c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* ;
679,683c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* bufnread = 0;
679,683c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, = 0;
679,683c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int 0;
679,683c679
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len ;
680,684c680
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
681,684c681
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
681,684c681
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
681,684c681
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr== BZ_OK || bzerr == BZ_STREAM_END) {
681,684c681
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, BZ_OK || bzerr == BZ_STREAM_END) {
681,684c681
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread|| bzerr == BZ_STREAM_END) {
682,684c682
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_STREAM_END) {
682,684c682
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    0== BZ_STREAM_END) {
683,684c683
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    BZ_STREAM_END) {
683,684c683
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    nread ) {
683,684c683
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    nread = {
683,685c683
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    nread = 0return nread;
684,685c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    nread;
684,685c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if ;
684,686c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (} else {
684,686c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr else {
684,686c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == {
684,687c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK return -1;
684,687c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK || -1;
684,687c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK || bzerr 1;
684,687c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK || bzerr == ;
684,688c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END}
684,689c684
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) }
685,693c685
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
685,693c685
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
685,693c685
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return nread(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
686,693c686
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    BZ2_bzwrite) (BZFILE* b, void* buf, int len )
686,693c686
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } ) (BZFILE* b, void* buf, int len )
686,693c686
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } else (BZFILE* b, void* buf, int len )
687,693c687
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       BZFILE* b, void* buf, int len )
687,693c687
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return * b, void* buf, int len )
687,693c687
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -b, void* buf, int len )
687,693c687
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -1, void* buf, int len )
688,693c688
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    void* buf, int len )
689,693c689
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * buf, int len )
693c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> buf, int len )
693c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int , int len )
693c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIint len )
693c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(len )
693c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite)
693,694c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) {
693,695c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (int bzerr;
693,695c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILEbzerr;
693,695c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* ;
693,697c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b{
693,698c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, return -1;
693,698c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void-1;
693,698c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* 1;
693,698c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf;
693,699c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, }
693,700c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int FILE *fp = ((bzFile *)b)->handle;
693,700c693
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len *fp = ((bzFile *)b)->handle;
694,700c694
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
> fp = ((bzFile *)b)->handle;
695,700c695
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    = ((bzFile *)b)->handle;
695,700c695
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    int ((bzFile *)b)->handle;
695,700c695
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr(bzFile *)b)->handle;
697,700c697
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    bzFile *)b)->handle;
698,700c698
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       *)b)->handle;
698,700c698
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return )b)->handle;
698,700c698
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return -b)->handle;
698,700c698
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return -1)->handle;
699,700c699
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    ->handle;
700c700
< FILE *fp = ((bzFile *)b)->handle;
---
> handle;
700c700
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE ;
700,702c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *if (b==NULL) 
700,702c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp (b==NULL) 
700,702c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = b==NULL) 
700,702c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = (==NULL) 
700,702c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = ((NULL) 
700,702c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
> FILE *fp = ((bzFile ) 
700,703c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *if(((bzFile*)b)->writing){
700,703c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)(((bzFile*)b)->writing){
700,703c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b((bzFile*)b)->writing){
700,703c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)(bzFile*)b)->writing){
700,703c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)->bzFile*)b)->writing){
700,703c700
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
> FILE *fp = ((bzFile *)b)->handle*)b)->writing){
702,703c702
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    )b)->writing){
702,703c702
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if b)->writing){
702,703c702
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if ()->writing){
702,703c702
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b->writing){
702,703c702
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==writing){
702,703c702
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==NULL){
703c703
<    if(((bzFile*)b)->writing){
---
>    {
703,704c703
<    if(((bzFile*)b)->writing){
<       ;
---
>    if;
(95.2 %, 9816 bytes)
702,706c702
<    if (b==NULL){
<       ;
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>    if (b==NULL(fp);
702,706c702
<    if (b==NULL){
<       ;
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>    if (b==NULL)fp);
703,706c703
<       ;
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>       );
704,706c704
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>       ;
704,707c704
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
---
>       if}
704,708c704
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
---
>       if(}
704,713c704
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr static char *bzerrorstrings[] = {
704,713c704
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr != char *bzerrorstrings[] = {
704,713c704
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr != BZ_OK*bzerrorstrings[] = {
704,713c704
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr != BZ_OK)bzerrorstrings[] = {
705,713c705
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          [] = {
706,713c706
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    ] = {
706,713c706
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    fclose= {
(95.2 %, 9772 bytes)
704,712d703
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
705,713c705
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
>    ;
706,715d705
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *(BZ2_bzerror) (BZFILE *b, int *errnum)
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstringsBZ2_bzerror) (BZFILE *b, int *errnum)
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[) (BZFILE *b, int *errnum)
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] (BZFILE *b, int *errnum)
711,716c711
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = BZFILE *b, int *errnum)
712,716c712
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        *b, int *errnum)
713,716c713
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       b, int *errnum)
713,716c713
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }, int *errnum)
716c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> int *errnum)
716c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const *errnum)
716c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char errnum)
716c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * )
716,717c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * BZ_API{
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(int err = ((bzFile *)b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerrorerr = ((bzFile *)b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) = ((bzFile *)b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (((bzFile *)b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE (bzFile *)b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *bzFile *)b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b*)b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, )b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int b)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *)->lastErr;
716,718c716
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum->lastErr;
717,718c717
< {
<    int err = ((bzFile *)b)->lastErr;
---
> lastErr;
718c718
<    int err = ((bzFile *)b)->lastErr;
---
>    ;
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int return bzerrorstrings[err*-1];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err bzerrorstrings[err*-1];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = [err*-1];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = (err*-1];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((*-1];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile -1];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *1];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)];
718,719c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b;
718,720c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
---
>    int err = ((bzFile *)b)}
718,748c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    int err = ((bzFile *)b)->
\ No newline at end of file
718,748c718
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    int err = ((bzFile *)b)->lastErr
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return 
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*-
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*-1
\ No newline at end of file
719,748c719
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*-1]
\ No newline at end of file
720,748d719
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
===< pass_clex :: rm-toks-8 >===
9,10d8
< #define BZ_OK                3
< #define BZ_STREAM_END        4
9,10d8
< #define BZ_OK                3
< #define BZ_STREAM_END        4
9,10d8
< #define BZ_OK                3
< #define BZ_STREAM_END        4
9,11c9
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
---
> #define BZ_OK                )
10,11d9
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
10,11d9
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
10,11d9
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
10,12c10
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        (-9)
11,12c11
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_CONFIG_ERROR      (-9)
---
> -9)
11,12c11
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_CONFIG_ERROR      (-9)
---
> #9)
11,12c11
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define )
11,14c11
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define BZ_SEQUENCE_ERROR    typedef 
12,15c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> struct {
12,15c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #{
12,16c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define char *next_in;
12,16c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_CONFIG_ERROR      *next_in;
12,16c12
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_CONFIG_ERROR      (next_in;
(95.3 %, 9710 bytes)
10,14c10
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_STREAM_END        *next_in;
10,14c10
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_STREAM_END        (next_in;
10,14c10
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_STREAM_END        (-;
10,15c10
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_STREAM_END        (-9unsigned int avail_in;
12,15c12
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> int avail_in;
13,15c13
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
>    avail_in;
13,15c13
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
>    struct ;
14,15d13
<       char *next_in;
<       unsigned int avail_in;
14,16c14
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       char int total_in_lo32;
14,16c14
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       char *total_in_lo32;
(95.3 %, 9660 bytes)
14,16d13
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
14,17c14
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned *next_out;
14,17c14
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int next_out;
(95.3 %, 9591 bytes)
14,15d13
<       char *next_out;
<       unsigned int avail_out;
14,16c14
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char int total_out_lo32;
14,16c14
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char *total_out_lo32;
15,16d14
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
15,16d14
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
15,16d14
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
15,16d14
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
16,17d15
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
16,18d15
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
(95.4 %, 9521 bytes)
15,19c15
<       unsigned int avail_out;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned int avail_out*bzalloc)(void *,int,void *);
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       bzalloc)(void *,int,void *);
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void )(void *,int,void *);
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(void *,int,void *);
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *statevoid *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void ,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc*);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc));
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(;
19,20c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void void *opaque;
19,20c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void **opaque;
19,20c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,opaque;
19,20c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int;
19,21c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
---
>       void *(*bzalloc)(void *,int,} 
19,22c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,int,void bz_stream;
19,22c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,int,void *;
19,26c19
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void *)#include <stdio.h>
20,26c20
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       include <stdio.h>
20,26c20
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void <stdio.h>
20,26c20
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *stdio.h>
20,26c20
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaque.h>
21,26c21
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    h>
22,26c22
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
22,28c22
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream#   define BZ_API(func) func
26,28c26
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> define BZ_API(func) func
26,28c26
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #BZ_API(func) func
26,28c26
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include (func) func
26,28c26
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <func) func
26,28c26
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio) func
26,28c26
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func
26,29c26
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.h#   define BZ_EXTERN extern
28,29c28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
28,29c28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   BZ_EXTERN extern
28,29c28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define extern
28,34c28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_APIBZ_EXTERN ;
28,34c28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_API(;
28,40c28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(func#define BZ_MAX_UNUSED 0
28,40c28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(func) define BZ_MAX_UNUSED 0
29,40c29
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_MAX_UNUSED 0
29,40c29
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   0
29,42c29
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define typedef void BZFILE;
29,42c29
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN void BZFILE;
34,42c34
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZFILE;
36,43d35
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
40,43d39
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
40,44c40
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZFILE* BZ_API(BZ2_bzReadOpen) ( 
40,44c40
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define * BZ_API(BZ2_bzReadOpen) ( 
40,44c40
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZ_API(BZ2_bzReadOpen) ( 
42,44c42
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
42,44c42
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZ2_bzReadOpen) ( 
42,44c42
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void ) ( 
42,44c42
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILE( 
44,45c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> int*  bzerror,   
44,45c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN *  bzerror,   
44,45c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILEbzerror,   
44,45c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* ,   
44,46c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIFILE* f, 
44,46c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(* f, 
44,46c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenf, 
44,46c44
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) , 
45,46d44
<       int*  bzerror,   
<       FILE* f, 
45,47c45
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       intverbosity, 
(95.4 %, 9477 bytes)
42,44c42
< typedef void BZFILE( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILE, 
43,44d42
<       int*  bzerror,   
<       FILE* f, 
43,45c43
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       intverbosity, 
43,45c43
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  , 
(95.4 %, 9437 bytes)
43,45c43
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       unused,    
43,45c43
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   ,    
43,46c43
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   verbosityint   nUnused 
44,46c44
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
44,47c44
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   );
(95.4 %, 9388 bytes)
43,49c43
<       int   ,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_API(BZ2_bzReadGetUnused) ( 
44,49c44
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       (BZ2_bzReadGetUnused) ( 
44,49c44
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ2_bzReadGetUnused) ( 
45,49c45
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    ) ( 
45,49c45
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )( 
47,50c47
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> *    bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void , 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_APIBZFILE* b, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(* b, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedb, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) , 
50,51d49
<       int*    bzerror, 
<       BZFILE* b, 
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int**  unused,  
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    *  unused,  
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerrorunused,  
51,52c51
<       BZFILE* b, 
<       void**  unused,  
---
>       ,  
51,53c51
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILEint*    nUnused 
51,53c51
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* *    nUnused 
51,53c51
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bnUnused 
52,54c52
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       );
52,54c52
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void;
52,56c52
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void*BZ_EXTERN int BZ_API(BZ2_bzReadlen 
52,56c52
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void**  int BZ_API(BZ2_bzReadlen 
52,56c52
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void**  unusedBZ_API(BZ2_bzReadlen 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       (BZ2_bzReadlen 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       intBZ2_bzReadlen 
53,57c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       int*    );
54,57c54
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>    ;
54,59c54
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
56,59c56
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
(95.4 %, 9333 bytes)
53,55c53
<       int*    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    ) ( 
53,55c53
<       int*    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    )( 
55,56c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> int*  bzerror,      
55,56c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN *  bzerror,      
55,56c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEbzerror,      
55,56c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* ,      
55,57c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIFILE* f, 
55,57c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(* f, 
55,57c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenf, 
55,57c55
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) , 
56,57d55
<       int*  bzerror,      
<       FILE* f, 
56,58c56
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       intblockSize100k, 
56,58c56
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  , 
56,59c56
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorint   verbosity, 
57,59c57
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       verbosity, 
57,59c57
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE, 
57,60c57
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* int   workFactor 
57,60c57
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* fworkFactor 
58,61c58
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
58,61c58
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   ;
58,63c58
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   blockSize100kBZ_EXTERN void BZ_API(BZ2_bzWritelen 
59,63c59
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       void BZ_API(BZ2_bzWritelen 
59,63c59
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   BZ_API(BZ2_bzWritelen 
59,63c59
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   verbosity(BZ2_bzWritelen 
60,63c60
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       BZ2_bzWritelen 
60,64c60
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   );
61,64c61
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>    ;
61,66c61
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
63,66c63
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API(BZ2_bzWriteClose) ( 
(95.5 %, 9273 bytes)
60,62c60
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   ( 
60,63c60
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       int   )int*          bzerror, 
62,63c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> *          bzerror, 
62,63c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN bzerror, 
62,63c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void , 
62,64c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIBZFILE*       b, 
62,64c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(*       b, 
62,64c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseb, 
62,64c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) , 
63,64d62
<       int*          bzerror, 
<       BZFILE*       b, 
63,65c63
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intabandon, 
63,65c63
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          , 
63,66c63
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrorunsigned int* nbytes_in, 
64,66c64
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
64,66c64
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE* nbytes_in, 
64,66c64
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       nbytes_in, 
65,66d64
<       int           abandon, 
<       unsigned int* nbytes_in, 
65,66d64
<       int           abandon, 
<       unsigned int* nbytes_in, 
65,67c65
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           int* nbytes_out 
65,67c65
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandon* nbytes_out 
66,67c66
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
66,68c66
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned );
66,68c66
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int;
66,70c66
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
66,70c66
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_invoid BZ_API(BZ2_bzWriteClose64) ( 
67,70c67
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_API(BZ2_bzWriteClose64) ( 
67,70c67
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned (BZ2_bzWriteClose64) ( 
67,70c67
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ2_bzWriteClose64) ( 
67,70c67
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ) ( 
68,70c68
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    ( 
68,71c68
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    )int*          bzerror, 
70,71c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> *          bzerror, 
70,71c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN bzerror, 
70,71c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void , 
70,72c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIBZFILE*       b, 
70,72c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(*       b, 
70,72c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64b, 
70,72c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) , 
71,72d70
<       int*          bzerror, 
<       BZFILE*       b, 
71,73c71
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intabandon, 
71,73c71
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          , 
71,74c71
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrorunsigned int* nbytes_in_lo32, 
72,74c72
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
72,74c72
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE* nbytes_in_lo32, 
72,74c72
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       nbytes_in_lo32, 
73,74d72
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
73,74d72
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
73,75c73
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           int* nbytes_in_hi32, 
73,75c73
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandon* nbytes_in_hi32, 
74,75c74
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
74,75c74
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned , 
74,76c74
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intunsigned int* nbytes_out_lo32, 
74,76c74
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* int* nbytes_out_lo32, 
74,76c74
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32* nbytes_out_lo32, 
75,76c75
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       nbytes_out_lo32, 
75,76c75
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned , 
75,77c75
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intunsigned int* nbytes_out_hi32
75,77c75
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* int* nbytes_out_hi32
75,77c75
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32* nbytes_out_hi32
76,77c76
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
76,78c76
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
76,78c76
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int;
76,83c76
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
76,83c76
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32int BZ_API(BZ2_bzBuffToBuffCompress) ( 
77,83c77
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffCompress) ( 
77,83c77
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned (BZ2_bzBuffToBuffCompress) ( 
77,83c77
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ2_bzBuffToBuffCompress) ( 
77,83c77
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ) ( 
78,83c78
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    ( 
78,84c78
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    )char*         dest, 
83,84c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> *         dest, 
83,84c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN dest, 
83,84c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int , 
83,85c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIunsigned int* destLen,
83,85c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(int* destLen,
83,85c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress* destLen,
83,85c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) destLen,
84,85c84
<       char*         dest, 
<       unsigned int* destLen,
---
>       ,
84,86c84
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charchar*         source, 
84,86c84
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         *         source, 
84,86c84
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destsource, 
85,86c85
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
85,87c85
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned unsigned int  sourceLen,
85,87c85
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intint  sourceLen,
85,87c85
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* sourceLen,
86,87d85
<       char*         source, 
<       unsigned int  sourceLen,
86,87d85
<       char*         source, 
<       unsigned int  sourceLen,
86,88c86
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       charblockSize100k, 
86,88c86
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         , 
86,89c86
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         sourceint           verbosity, 
87,89c87
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       verbosity, 
87,89c87
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned , 
87,90c87
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  int           workFactor 
87,90c87
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  sourceLenworkFactor 
88,91c88
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
88,91c88
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           ;
88,93c88
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
89,93c89
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
89,93c89
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_API(BZ2_bzBuffToBuffDecompress) ( 
89,93c89
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosity(BZ2_bzBuffToBuffDecompress) ( 
90,93c90
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ2_bzBuffToBuffDecompress) ( 
90,93c90
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ) ( 
91,93c91
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    ( 
91,94c91
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    )char*         dest, 
93,94c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> *         dest, 
93,94c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN dest, 
93,94c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int , 
93,95c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIunsigned int* destLen,
93,95c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(int* destLen,
93,95c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress* destLen,
93,95c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) destLen,
94,95c94
<       char*         dest, 
<       unsigned int* destLen,
---
>       ,
94,96c94
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charchar*         source, 
94,96c94
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         *         source, 
94,96c94
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destsource, 
95,96c95
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
95,97c95
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned unsigned int  sourceLen,
95,97c95
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intint  sourceLen,
95,97c95
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* sourceLen,
96,97d95
<       char*         source, 
<       unsigned int  sourceLen,
96,97d95
<       char*         source, 
<       unsigned int  sourceLen,
96,98c96
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       charsmall, 
96,98c96
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         , 
96,99c96
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         sourceint           );
97,99c97
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       );
97,99c97
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned ;
97,101c97
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
97,101c97
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  sourceLenBZFILE * BZ_API(BZ2_bzopen) (
98,101c98
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       * BZ_API(BZ2_bzopen) (
98,101c98
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           BZ_API(BZ2_bzopen) (
98,101c98
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           small(BZ2_bzopen) (
99,101c99
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       BZ2_bzopen) (
99,101c99
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           ) (
99,101c99
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           )(
101,102c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> const char *path,
101,102c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN char *path,
101,102c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE *path,
101,102c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE * path,
101,102c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ_API,
101,103c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(const char *mode
101,103c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenchar *mode
101,103c101
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) *mode
102,103c102
<       const char *path,
<       const char *mode
---
>       mode
102,104c102
<       const char *path,
<       const char *mode
<    );
---
>       const );
102,104c102
<       const char *path,
<       const char *mode
<    );
---
>       const char ;
102,106c102
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const char *(BZ2_bzflush) (
102,106c102
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const char *pathBZ2_bzflush) (
103,106c103
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       ) (
103,106c103
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const (
103,107c103
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       const char );
103,107c103
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       const char *;
104,109c104
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    #define BZ_VERSION  "1.0.2, 30-Dec-2001"
104,109c104
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    )define BZ_VERSION  "1.0.2, 30-Dec-2001"
106,109c106
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
106,109c106
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> ("1.0.2, 30-Dec-2001"
106,112c106
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> (BZ2_bzflushtypedef unsigned char   Bool;
106,112c106
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> (BZ2_bzflush) unsigned char   Bool;
107,112c107
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
>       char   Bool;
107,112c107
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
>       )Bool;
109,112c109
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> ;
109,114c109
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #typedef int             Int32;
109,114c109
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #define int             Int32;
109,114c109
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> #define BZ_VERSION  Int32;
112,114c112
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> ;
112,115c112
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef typedef unsigned int    UInt32;
112,115c112
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned unsigned int    UInt32;
112,115c112
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   int    UInt32;
112,115c112
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   BoolUInt32;
114,115c114
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> ;
114,119c114
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef #define True  (0)
114,119c114
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef int             define True  (0)
114,119c114
< typedef int             Int32;
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef int             Int32True  (0)
115,119c115
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> (0)
115,119c115
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef 0)
115,119c115
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef unsigned )
115,121c115
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
< 
< #define __inline__  
---
> typedef unsigned int    #define __inline__  
115,121c115
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
< 
< #define __inline__  
---
> typedef unsigned int    UInt32define __inline__  
119,121c119
< #define True  (0)
< 
< #define __inline__  
---
> __inline__  
119,123c119
< #define True  (0)
< 
< #define __inline__  
< 
< \
---
> #\
119,125c119
< #define True  (0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #define #define AssertD(cond,msg) 0x0   
119,125c119
< #define True  (0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #define True  define AssertD(cond,msg) 0x0   
119,125c119
< #define True  (0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #define True  (AssertD(cond,msg) 0x0   
119,125c119
< #define True  (0)
< 
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #define True  (0(cond,msg) 0x0   
121,125c121
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> cond,msg) 0x0   
121,125c121
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #,msg) 0x0   
121,125c121
< #define __inline__  
< 
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> #define msg) 0x0   
123,125c123
< \
<    
< #define AssertD(cond,msg) 0x0   
---
> ) 0x0   
125c125
< #define AssertD(cond,msg) 0x0   
---
> 0x0   
125,129c125
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> ##define BZ_MAX_ALPHA_SIZE 8
125,129c125
< #define AssertD(cond,msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define define BZ_MAX_ALPHA_SIZE 8
(95.5 %, 9232 bytes)
121,126c121
< #define msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> #define define define BZ_G_SIZE))
121,126c121
< #define msg) 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define define BZ_G_SIZE))
---
> #define msgdefine BZ_G_SIZE))
(95.5 %, 9186 bytes)
121,129c121
< #define define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define \
121,130c121
< #define define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define define Int32 rNToGo;                               \
121,130c121
< #define define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define define define rNToGo;                               \
121,130c121
< #define define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define define define BZ_G_SIZE;                               \
121,130c121
< #define define define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define define define BZ_G_SIZE)\
129,131c129
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> Int32 rTPos                                 \
129,131c129
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #rTPos                                 \
129,131c129
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define \
130,133d129
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
130,140c130
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
>    #define BZ_M_IDLE      1
130,140c130
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
>    Int32 define BZ_M_IDLE      1
130,140c130
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
>    Int32 rNToGoBZ_M_IDLE      1
130,140c130
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
>    Int32 rNToGo;                               1
131,141c131
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
>    #define BZ_M_RUNNING   1
131,141c131
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
>    Int32 define BZ_M_RUNNING   1
131,141c131
<    Int32 rTPos                                 \
< 
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
>    Int32 rTPos                                 BZ_M_RUNNING   1
133,141c133
< \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
> 1
140,141d139
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
(95.6 %, 9085 bytes)
129,137c129
< #define BZ_RAND_DECLS                          \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
> #define BZ_RAND_DECLS                          1
136,137d135
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
136,137d135
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
136,137d135
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
(95.6 %, 9035 bytes)
136,138d135
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
136,138d135
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
136,138d135
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
137,139d136
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
138,139d137
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
138,139d137
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
138,139d137
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
138,140c138
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_RADIX 8
139,140d138
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
139,140d138
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
139,140d138
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
139,141c139
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
140,141c140
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
140,141c140
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ BZ_N_QSORT + BZ_N_SHELL + 2)
140,141c140
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT + BZ_N_SHELL + 2)
140,141c140
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL + BZ_N_SHELL + 2)
141c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_SHELL + 2)
141c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ 2)
141c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define 2)
141c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT )
141,148c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_N_OVERSHOOT (typedef
141,149c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX struct {
141,149c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + {
141,151c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT bz_stream* strm;
141,151c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + * strm;
141,151c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL strm;
141,151c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + ;
141,155c141
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2Int32    mode;
148,155c148
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> mode;
149,155c149
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
>    ;
149,156c149
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>    struct Int32    state;
151,156c151
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>       state;
151,156c151
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>       bz_stream;
151,162c151
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* UInt32*  arr1;
151,162c151
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* strm*  arr1;
155,162c155
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       arr1;
155,162c155
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       Int32    ;
(95.6 %, 8971 bytes)
152,158d151
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
157,158d156
<       UInt32*  arr1;
<       UInt32*  arr2;
157,158d156
<       UInt32*  arr1;
<       UInt32*  arr2;
157,158d156
<       UInt32*  arr1;
<       UInt32*  arr2;
158,159d157
<       UInt32*  arr2;
<       UInt32*  ftab;
158,162d157
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
158,162d157
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
158,162d157
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
159,163d158
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
159,163d158
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
159,169c159
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       UInt32Int32    nInUse;
159,169c159
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       UInt32*  nInUse;
160,169d159
<       
< 
<       
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
163,169d162
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
163,170c163
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       UInt32inUse[6];
163,170c163
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       UInt32*  [6];
163,170c163
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       UInt32*  ptr6];
164,170c164
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       ];
169,170c169
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       ;
169,171c169
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    unsigned char    unseqToSeq[6];
169,171c169
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Int32    nInUsechar    unseqToSeq[6];
170,171c170
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       unseqToSeq[6];
170,171c170
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     [6];
170,171c170
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse6];
170,171c170
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[];
170,171c170
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
---
>       Bool     inUse[6;
170,179c170
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       Bool     inUse[6]UInt32   combinedCRC;
171,179c171
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       combinedCRC;
171,179c171
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       unsigned ;
171,182c171
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       unsigned char    Int32    verbosity;
171,182c171
<       unsigned char    unseqToSeq[6];
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       unsigned char    unseqToSeqverbosity;
(95.7 %, 8885 bytes)
173,177d172
<       
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
174,184c174
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       ;
174,186c174
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       Int32    ;
174,196c174
<       Int32    verbosity;
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
---
>       Int32    verbosity#define define MTFL_SIZE 6
175,196c175
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
---
>       define define MTFL_SIZE 6
175,196c175
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
---
>       Int32    define MTFL_SIZE 6
175,196c175
<       Int32    blockNo}
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
---
>       Int32    blockNoMTFL_SIZE 6
176,196c176
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
---
>    6
176,202c176
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
---
>    EStatetypedef
184,203c184
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
186,203c186
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> {
196,205c196
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> bz_stream* strm;
196,205c196
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #* strm;
196,205c196
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define strm;
196,205c196
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define define ;
196,208c196
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define define MTFL_SIZE Int32    state;
202,208c202
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> state;
203,208c203
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
>    ;
203,214c203
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
>    struct BZ_RAND_DECLS;
205,214c205
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
>       ;
205,217c205
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bz_streamUInt32   bsBuff;
205,217c205
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bz_stream* bsBuff;
(95.7 %, 8790 bytes)
205,222d204
<       ;
< 
<       
<       UInt32   bsBuff;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
208,223c208
<       UInt32   bsBuff;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       short   *ll16;
208,223c208
<       UInt32   bsBuff;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
---
>       UInt32   *ll16;
(95.8 %, 8658 bytes)
205,206c205
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       ll4;
205,206c205
<       unsigned short   *ll16;
<       unsigned char    *ll4;
---
>       unsigned ;
205,212c205
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       unsigned short   UInt32   calculatedCombinedCRC;
205,212c205
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       unsigned short   *calculatedCombinedCRC;
206,212d205
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
206,258c206
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>       }
206,259c206
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       unsigned DState;
206,259c206
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       unsigned char    ;
206,265c206
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
---
>       unsigned char    *#\
206,265c206
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
---
>       unsigned char    *ll4\
212,286c212
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>       static
212,287c212
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>       UInt32   void makeMaps_e ( void )
212,287c212
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>       UInt32   calculatedCombinedCRCmakeMaps_e ( void )
258,287c258
<    }
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>    ( void )
259,287c259
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>    void )
259,287c259
<    DState;
< 
< 
< 
< 
< 
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
>    DState)
265,287d264
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
265,289c265
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> #EState * s = 0;
286,289c286
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> * s = 0;
287,289c287
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> s = 0;
287,289c287
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> void = 0;
287,289c287
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> void makeMaps_e 0;
287,289c287
< void makeMaps_e ( void )
< {
<    EState * s = 0;
---
> void makeMaps_e ( ;
287,290c287
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
---
> void makeMaps_e ( void Int32 i;
288,290c288
< {
<    EState * s = 0;
<    Int32 i;
---
> i;
289,290c289
<    EState * s = 0;
<    Int32 i;
---
>    ;
289,291c289
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState s->nInUse = 0;
289,291c289
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState * ->nInUse = 0;
289,291c289
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState * s nInUse = 0;
289,291c289
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState * s = = 0;
289,291c289
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
---
>    EState * s = 00;
290,291c290
<    Int32 i;
<    s->nInUse = 0;
---
>    ;
(95.8 %, 8629 bytes)
289,296c289
<    EState * s = 00;
<    }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
---
>    EState * s = 00{
290,296d289
<    }
< 
< 
< 
< static
< void generateMTFValues ( void )
< {
294,298c294
< static
< void generateMTFValues ( void )
< {
<    ;
<    Int32   i, j;
---
> Int32   i, j;
295,298c295
< void generateMTFValues ( void )
< {
<    ;
<    Int32   i, j;
---
> i, j;
295,298c295
< void generateMTFValues ( void )
< {
<    ;
<    Int32   i, j;
---
> void , j;
295,298c295
< void generateMTFValues ( void )
< {
<    ;
<    Int32   i, j;
---
> void generateMTFValues j;
295,298c295
< void generateMTFValues ( void )
< {
<    ;
<    Int32   i, j;
---
> void generateMTFValues ( ;
295,299c295
< void generateMTFValues ( void )
< {
<    ;
<    Int32   i, j;
<    Int32   zPend;
---
> void generateMTFValues ( void Int32   zPend;
296,299c296
< {
<    ;
<    Int32   i, j;
<    Int32   zPend;
---
> zPend;
298,299d297
<    Int32   i, j;
<    Int32   zPend;
(95.8 %, 8580 bytes)
291,292d290
<    Int32   i, j;
<    Int32   zPend;
291,292d290
<    Int32   i, j;
<    Int32   zPend;
291,292d290
<    Int32   i, j;
<    Int32   zPend;
291,293c291
<    Int32   i, j;
<    Int32   zPend;
<    Int32   mtfv  ;
---
>    Int32   i;
291,295c291
<    Int32   i, j;
<    Int32   zPend;
<    Int32   mtfv  ;
< 
<    {
---
>    Int32   i, {
292,296d291
<    Int32   zPend;
<    Int32   mtfv  ;
< 
<    {
<       ;
292,294d291
<    Int32   zPend;
<    Int32   mtfv  ;
< 
296,298d292
<       ;
< 
<       {
292,300c292
<    Int32   zPend;
<    Int32   mtfv  ;
< 
<    {
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>    Int32   if (zPend > 0) 
292,300c292
<    Int32   zPend;
<    Int32   mtfv  ;
< 
<    {
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>    Int32   zPend(zPend > 0) 
293,300c293
<    Int32   mtfv  ;
< 
<    {
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>    zPend > 0) 
293,300c293
<    Int32   mtfv  ;
< 
<    {
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>    Int32   > 0) 
293,300c293
<    Int32   mtfv  ;
< 
<    {
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>    Int32   mtfv  0) 
295,300c295
<    {
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>    ) 
296,297d295
<       ;
< 
299,301d296
< 
<          if (zPend > 0) 
<          {
298,302c298
<       {
< 
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>       register unsigned char  rtmp  ;
300,302c300
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>          unsigned char  rtmp  ;
300,302c300
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>          if char  rtmp  ;
300,302c300
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>          if (rtmp  ;
300,302c300
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
---
>          if (zPend ;
300,303c300
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
---
>          if (zPend > j;
300,303c300
<          if (zPend > 0) 
<          {
<             register unsigned char  rtmp  ;
<             j;
---
>          if (zPend > 0;
301,303d300
<          {
<             register unsigned char  rtmp  ;
<             j;
302,306c302
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
---
>             }
302,307c302
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
---
>             register }
302,309c302
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
---
>             register unsigned }
302,313c302
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
---
>             register unsigned char  BZ_API(BZ2_bzCompressInit) 
302,313c302
<             register unsigned char  rtmp  ;
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
---
>             register unsigned char  rtmp  (BZ2_bzCompressInit) 
303,313c303
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
---
>             BZ2_bzCompressInit) 
303,313c303
<             j;
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
---
>             j) 
304,314c304
<          }
< 
<       }
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>          ( bz_stream* strm, 
306,314c306
<       }
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>       bz_stream* strm, 
307,314c307
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>    * strm, 
309,314c309
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>    strm, 
313,314c313
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> , 
313,315c313
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> BZ_APIint        blockSize100k,
313,315c313
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> BZ_API(blockSize100k,
313,315c313
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> BZ_API(BZ2_bzCompressInit,
314,316c314
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     int        verbosity,
314,316c314
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( verbosity,
314,316c314
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream,
314,317c314
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* int        workFactor )
314,317c314
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* strmworkFactor )
315,317c315
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                      )
315,318c315
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                      int        {
315,319c315
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        blockSize100kInt32   n;
316,319c316
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      n;
316,319c316
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        ;
316,320c316
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        verbosityEState* s;
317,320c317
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      * s;
317,320c317
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        s;
317,320c317
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        workFactor ;
318,321c318
< {
<    Int32   n;
<    EState* s;
<    ;
---
> ;
319,321d318
<    Int32   n;
<    EState* s;
<    ;
319,322c319
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>    Int32   ;
319,323c319
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    Int32   ns->arr2 = NULL;
320,323c320
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    ->arr2 = NULL;
320,323c320
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    EStatearr2 = NULL;
320,323c320
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    EState* = NULL;
320,323c320
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    EState* sNULL;
322,323d321
<    NULL;
<    s->arr2 = NULL;
322,323d321
<    NULL;
<    s->arr2 = NULL;
(95.8 %, 8552 bytes)
321,322c321
<    ;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    * sizeof(UInt32) );
322c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sizeof(UInt32) );
322c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC(UInt32) );
322c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( UInt32) );
322c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( () );
322c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n);
322c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+;
322,323c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT;
322,325c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) if (s->ftab == NULL) 
322,325c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * (s->ftab == NULL) 
322,325c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeofs->ftab == NULL) 
322,325c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(->ftab == NULL) 
322,325c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32ftab == NULL) 
322,325c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) == NULL) 
322,325c322
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) )NULL) 
323,325c323
<    ;
< 
<    if (s->ftab == NULL) 
---
>    ) 
325,326d324
<    if (s->ftab == NULL) 
< 
325,327c325
<    if (s->ftab == NULL) 
< 
<    strm->state          ;
---
>    if ->state          ;
325,327c325
<    if (s->ftab == NULL) 
< 
<    strm->state          ;
---
>    if (state          ;
325,327c325
<    if (s->ftab == NULL) 
< 
<    strm->state          ;
---
>    if (s;
325,328c325
<    if (s->ftab == NULL) 
< 
<    strm->state          ;
<    return BZ_OK;
---
>    if (s->return BZ_OK;
325,328c325
<    if (s->ftab == NULL) 
< 
<    strm->state          ;
<    return BZ_OK;
---
>    if (s->ftab BZ_OK;
325,328c325
<    if (s->ftab == NULL) 
< 
<    strm->state          ;
<    return BZ_OK;
---
>    if (s->ftab == ;
325,329c325
<    if (s->ftab == NULL) 
< 
<    strm->state          ;
<    return BZ_OK;
< }
---
>    if (s->ftab == NULL}
327,341c327
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>    ;
(95.8 %, 8526 bytes)
325,339c325
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>    ;
325,343c325
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strmint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
325,343c325
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
325,343c325
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->state          (BZ2_bzCompress) ( bz_stream *strm, int action )
326,343c326
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    BZ2_bzCompress) ( bz_stream *strm, int action )
326,343c326
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return ) ( bz_stream *strm, int action )
326,343c326
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OK( bz_stream *strm, int action )
327,343c327
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> bz_stream *strm, int action )
339,343c339
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> *strm, int action )
343c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> strm, int action )
343c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int , int action )
343c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIint action )
343c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(action )
343c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress)
343,344c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> int BZ_API(BZ2_bzCompress) {
343,346c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ( EState* s;
343,346c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream * s;
343,346c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *s;
343,346c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm;
343,347c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, }
343,355c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int int BZ_API(BZ2_bzDecompressInit) 
343,355c343
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action BZ_API(BZ2_bzDecompressInit) 
344,355c344
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> (BZ2_bzDecompressInit) 
346,355c346
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ2_bzDecompressInit) 
346,355c346
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    EState) 
346,356c346
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    EState* ( bz_stream* strm, 
346,356c346
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    EState* sbz_stream* strm, 
347,356c347
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> * strm, 
355,356c355
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> strm, 
355,356c355
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int , 
355,357c355
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_APIint        verbosity,
355,357c355
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API(verbosity,
355,357c355
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API(BZ2_bzDecompressInit,
356,358c356
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      int        small )
356,358c356
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( small )
356,358c356
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream)
356,359c356
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
>                      ( bz_stream* {
356,360c356
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* strmDState* s;
357,360c357
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                        * s;
357,360c357
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                        int        s;
357,360c357
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                        int        verbosity;
358,361c358
<                        int        small )
< {
<    DState* s;
< s;
---
>                        s;
358,361c358
<                        int        small )
< {
<    DState* s;
< s;
---
>                        int        ;
358,362c358
<                        int        small )
< {
<    DState* s;
< s;
<    if (s == NULL) ;
---
>                        int        small if (s == NULL) ;
(95.9 %, 8429 bytes)
356,359c356
<                      ( small )
< {
<    DState* s;
< s;
---
>                      ( ;
356,360c356
<                      ( small )
< {
<    DState* s;
< s;
<    if (s == NULL) ;
---
>                      ( small if (s == NULL) ;
357,360c357
< {
<    DState* s;
< s;
<    if (s == NULL) ;
---
> (s == NULL) ;
358,360c358
<    DState* s;
< s;
<    if (s == NULL) ;
---
>    s == NULL) ;
358,360c358
<    DState* s;
< s;
<    if (s == NULL) ;
---
>    DState== NULL) ;
358,360c358
<    DState* s;
< s;
<    if (s == NULL) ;
---
>    DState* NULL) ;
358,360c358
<    DState* s;
< s;
<    if (s == NULL) ;
---
>    DState* s) ;
359,360c359
< s;
<    if (s == NULL) ;
---
> ;
359,361c359
< s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
> sBZFREE(s->ll4);
(95.9 %, 8408 bytes)
360,362d359
<    BZFREE(s->ll4);
< 
<    ;
360,363c360
<    BZFREE(s->ll4);
< 
<    ;
< }
---
>    }
(95.9 %, 8383 bytes)
359,367c359
< ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
> \
360,369d359
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
367,371c367
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
> struct {
367,371c367
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
> #{
367,372c367
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define FILE*     handle;
367,372c367
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR*     handle;
367,372c367
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(handle;
367,372c367
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(e;
367,373c367
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(e)                    char      buf[BZ_MAX_UNUSED];
370,373c370
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
> buf[BZ_MAX_UNUSED];
371,373c371
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>    [BZ_MAX_UNUSED];
371,373c371
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>    struct BZ_MAX_UNUSED];
372,373c372
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       ];
372,373c372
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE;
372,374c372
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILE*     Int32     bufN;
372,374c372
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILE*     handlebufN;
373,374c373
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       ;
373,375c373
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       char      Bool      writing;
373,375c373
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       char      bufwriting;
373,375c373
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       char      buf[;
373,376c373
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       char      buf[BZ_MAX_UNUSEDbz_stream strm;
373,376c373
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       char      buf[BZ_MAX_UNUSED]strm;
374,376c374
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       ;
374,377c374
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Int32     Int32     lastErr;
374,377c374
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Int32     bufNlastErr;
375,377c375
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       ;
375,378c375
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Bool      Bool      initialisedOk;
375,378c375
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Bool      writinginitialisedOk;
376,378c376
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       ;
376,379c376
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       bz_stream }
376,380c376
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bz_stream strmbzFile;
377,380c377
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       ;
377,388c377
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     BZFILE* BZ_API(BZ2_bzWriteOpen) 
377,388c377
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErr* BZ_API(BZ2_bzWriteOpen) 
378,388c378
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ_API(BZ2_bzWriteOpen) 
378,388c378
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      (BZ2_bzWriteOpen) 
378,388c378
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      initialisedOkBZ2_bzWriteOpen) 
379,388c379
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    ) 
380,389c380
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ( int*  bzerror,      
380,389c380
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFileint*  bzerror,      
388,389c388
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> *  bzerror,      
388,389c388
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILEbzerror,      
388,389c388
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* ,      
388,390c388
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_APIFILE* f, 
388,390c388
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(* f, 
388,390c388
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenf, 
389,390c389
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     , 
389,391c389
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int   blockSize100k, 
389,391c389
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( intblockSize100k, 
389,391c389
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  , 
389,392c389
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorint   verbosity,
390,392c390
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       verbosity,
390,392c390
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE,
390,393c390
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* int   workFactor )
390,393c390
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* fworkFactor )
391,393c391
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
391,394c391
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       int   {
391,395c391
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   blockSize100kInt32   ret;
392,395c392
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ret;
392,395c392
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   ;
392,396c392
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbositybzFile* bzf = NULL;
393,396c393
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       * bzf = NULL;
393,396c393
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   bzf = NULL;
393,396c393
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   workFactor = NULL;
394,396c394
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
> NULL;
395,396c395
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    ;
395,398c395
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   BZ_SETERR(BZ_OK);
395,398c395
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   ret(BZ_OK);
396,398c396
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
396,398c396
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile);
396,398c396
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* ;
396,400c396
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf if (f == NULL ||
396,400c396
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = (f == NULL ||
396,400c396
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = NULLf == NULL ||
398,400c398
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    == NULL ||
398,400c398
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    BZ_SETERRNULL ||
398,400c398
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    BZ_SETERR(||
398,401c398
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK(blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
(95.9 %, 8357 bytes)
398,399c398
<    BZ_SETERR(||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(90 || verbosity > 4))
399c399
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        || verbosity > 4))
399c399
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        (verbosity > 4))
399c399
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        (blockSize100k > 4))
(95.9 %, 8314 bytes)
399,400c399
<        (verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (= fBZ2_bzCompressInit ( );
399,400c399
<        (verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (verbosity fBZ2_bzCompressInit ( );
399,400c399
<        (verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (verbosity > ( );
399,400c399
<        (verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (verbosity > 4);
399,400c399
<        (verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (verbosity > 4);
400,401c400
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>       bzf->initialisedOk = True;
400,401c400
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>       bzf->initialisedOk = True;
(96.0 %, 8265 bytes)
400,401c400
<       bzf->initialisedOk = True;
<    return bzf;   
---
>       ;   
400,402c400
<       bzf->initialisedOk = True;
<    return bzf;   
< }
---
>       bzf}
400,407c400
<       bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->void BZ_API(BZ2_bzWrite)
400,407c400
<       bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->initialisedOk BZ_API(BZ2_bzWrite)
400,407c400
<       bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->initialisedOk = (BZ2_bzWrite)
400,407c400
<       bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->initialisedOk = TrueBZ2_bzWrite)
401,407c401
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    )
401,408c401
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    return ( int*    bzerror, 
401,408c401
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    return bzfint*    bzerror, 
(96.0 %, 8225 bytes)
400,407c400
<       ;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>       int*    bzerror, 
401,407c401
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> *    bzerror, 
406,407c406
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> bzerror, 
406,407c406
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void , 
406,408c406
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_APIBZFILE* b, 
406,408c406
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(* b, 
406,408c406
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWriteb, 
407,408c407
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              , 
407,409c407
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( void*   buf, 
407,409c407
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*   buf, 
407,409c407
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    buf, 
408,409d407
<                BZFILE* b, 
<                void*   buf, 
408,409d407
<                BZFILE* b, 
<                void*   buf, 
408,410c408
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILElen )
408,410c408
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* )
408,411c408
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>                BZFILE* b{
409,412c409
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                Int32   ret;
409,412c409
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                voidret;
409,412c409
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                void*   ;
409,413c409
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   bufbzFile* bzf = (bzFile*)b;
410,413c410
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                * bzf = (bzFile*)b;
410,413c410
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     bzf = (bzFile*)b;
410,413c410
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     len = (bzFile*)b;
411,413c411
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
> (bzFile*)b;
412,413c412
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile*)b;
412,413c412
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   *)b;
412,413c412
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret)b;
413c413
<    bzFile* bzf = (bzFile*)b;
---
>    b;
413c413
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile;
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* BZ_SETERR(ferror(bzf->handle)) {
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf (ferror(bzf->handle)) {
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = ferror(bzf->handle)) {
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = ((bzf->handle)) {
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = (bzFilebzf->handle)) {
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = (bzFile*->handle)) {
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = (bzFile*)handle)) {
413,415c413
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    bzFile* bzf = (bzFile*)b)) {
415c415
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    ) {
415c415
<    BZ_SETERR(ferror(bzf->handle)) {
---
>    BZ_SETERR{
415,416c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(bzf->strm.avail_out ;
415,416c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(ferror->strm.avail_out ;
415,416c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(ferror(strm.avail_out ;
415,416c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(ferror(bzf.avail_out ;
415,416c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(ferror(bzf->avail_out ;
415,416c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
---
>    BZ_SETERR(ferror(bzf->handle;
415,417c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
---
>    BZ_SETERR(ferror(bzf->handle)}
415,418c415
<    BZ_SETERR(ferror(bzf->handle)) {
<       bzf->strm.avail_out ;
<    }
< }
---
>    BZ_SETERR(ferror(bzf->handle)) }
416,422c416
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       void BZ_API(BZ2_bzWriteClose)
416,422c416
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfBZ_API(BZ2_bzWriteClose)
416,422c416
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->(BZ2_bzWriteClose)
416,422c416
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strmBZ2_bzWriteClose)
416,422c416
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzf->strm.)
416,423c416
<       bzf->strm.avail_out ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out ( int*          bzerror, 
417,423c417
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    int*          bzerror, 
418,423c418
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> *          bzerror, 
(96.0 %, 8190 bytes)
415,420c415
<    BZ_SETERR(ferror(bzf->handle)) }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)) *          bzerror, 
419,420c419
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> bzerror, 
419,420c419
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void , 
419,421c419
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_APIBZFILE*       b, 
419,421c419
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(*       b, 
419,421c419
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteCloseb, 
420,421c420
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   , 
420,422c420
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int           abandon,
420,422c420
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intabandon,
420,422c420
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          ,
420,423c420
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrorunsigned int* nbytes_in,
421,423c421
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int* nbytes_in,
421,423c421
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE* nbytes_in,
421,423c421
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       nbytes_in,
421,423c421
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       b,
422,423d421
<                     int           abandon,
<                     unsigned int* nbytes_in,
422,424c422
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           int* nbytes_out )
422,424c422
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandon* nbytes_out )
423,424c423
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
423,424c423
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned )
423,425c423
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     unsigned int{
423,426c423
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned int* BZ2_bzWriteClose64 ;
423,426c423
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned int* nbytes_in;
424,427c424
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
---
>                     }
424,430c424
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned void BZ_API(BZ2_bzWriteClose64)
424,430c424
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intBZ_API(BZ2_bzWriteClose64)
424,430c424
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* (BZ2_bzWriteClose64)
424,430c424
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_out BZ2_bzWriteClose64)
425,430c425
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
> )
426,431c426
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>    ( int*          bzerror, 
426,431c426
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>    BZ2_bzWriteClose64 int*          bzerror, 
427,431c427
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> *          bzerror, 
430,431c430
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> bzerror, 
430,431c430
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void , 
430,432c430
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_APIBZFILE*       b, 
430,432c430
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(*       b, 
430,432c430
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64b, 
431,432c431
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   , 
431,433c431
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int           abandon,
431,433c431
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intabandon,
431,433c431
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          ,
431,434c431
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrorunsigned int* nbytes_in_lo32,
432,434c432
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int* nbytes_in_lo32,
432,434c432
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE* nbytes_in_lo32,
432,434c432
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       nbytes_in_lo32,
432,434c432
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       b,
433,434d432
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
433,435c433
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           int* nbytes_in_hi32,
433,435c433
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandon* nbytes_in_hi32,
434,435c434
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
434,435c434
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned ,
434,436c434
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intunsigned int* nbytes_out_lo32,
434,436c434
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* int* nbytes_out_lo32,
434,436c434
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32* nbytes_out_lo32,
435,436c435
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     nbytes_out_lo32,
435,436c435
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned ,
435,437c435
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intunsigned int* nbytes_out_hi32 )
435,437c435
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* int* nbytes_out_hi32 )
435,437c435
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32* nbytes_out_hi32 )
436,437c436
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
436,437c436
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned )
436,438c436
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int{
436,440c436
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* bzFile* bzf = ((bzf))
436,440c436
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* nbytes_out_lo32* bzf = ((bzf))
437,440c437
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     bzf = ((bzf))
437,440c437
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned = ((bzf))
437,440c437
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int((bzf))
437,440c437
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* (bzf))
437,440c437
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* nbytes_out_hi32 bzf))
438,440c438
< {
<    
<    bzFile* bzf = ((bzf))
---
> ))
440c440
<    bzFile* bzf = ((bzf))
---
>    )
440,441c440
<    bzFile* bzf = ((bzf))
<       ;
---
>    bzFile;
440,443c440
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* (BZ_OK);
440,443c440
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* bzf BZ_OK);
440,443c440
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* bzf = );
440,443c440
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* bzf = (;
440,444c440
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    bzFile* bzf = ((0;
440,444c440
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    bzFile* bzf = ((bzf;
440,445c440
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
---
>    bzFile* bzf = ((bzf)0;
442,445d441
< 
<    (BZ_OK);
<    0;
<    0;
(96.0 %, 8168 bytes)
441,444d440
< 
<    (BZ_OK);
<    0;
<    0;
442,445c442
<    (BZ_OK);
<    0;
<    0;
< }
---
>    }
442,449c442
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZFILE* BZ_API(BZ2_bzReadOpen) 
(96.0 %, 8143 bytes)
440,446c440
<    bzFile;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    bzFile( int*  bzerror, 
441,446c441
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> int*  bzerror, 
445,446c445
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> *  bzerror, 
445,446c445
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILEbzerror, 
445,446c445
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* , 
445,447c445
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_APIFILE* f, 
445,447c445
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(* f, 
445,447c445
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpenf, 
446,447c446
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    , 
446,448c446
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int   verbosity,
446,448c446
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( intverbosity,
446,448c446
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  ,
446,449c446
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerrorint   small,
447,449c447
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      small,
447,449c447
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE,
447,450c447
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* void* unused,
447,450c447
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* f* unused,
448,450c448
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      unused,
448,450c448
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   ,
448,451c448
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbosityint   nUnused )
449,451c449
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
449,451c449
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   )
449,452c449
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      int   small{
450,453c450
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      bzFile* bzf = NULL;
450,453c450
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void* bzf = NULL;
450,453c450
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void* bzf = NULL;
450,453c450
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void* unused= NULL;
451,453c451
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      NULL;
451,453c451
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   ;
451,454c451
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      int   nUnused int     ret;
452,454c452
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
> ret;
453,454c453
<    bzFile* bzf = NULL;
<    int     ret;
---
>    ;
453,456c453
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFileBZ_SETERR(BZ_OK);
453,456c453
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* (BZ_OK);
453,456c453
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf BZ_OK);
453,456c453
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = );
454,456d453
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
454,457d453
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
(96.0 %, 8105 bytes)
453,456c453
<    bzFile* bzf = NULL;
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = NULL< 0 || nUnused > BZ_MAX_UNUSED)))
455,456c455
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    0 || nUnused > BZ_MAX_UNUSED)))
455,456c455
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if || nUnused > BZ_MAX_UNUSED)))
455,456c455
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (nUnused > BZ_MAX_UNUSED)))
455,456c455
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (f > BZ_MAX_UNUSED)))
456c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        BZ_MAX_UNUSED)))
456c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ()))
456c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (())
456c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused )
456,457c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused < bzf->bufN;
456,457c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused < 0 ->bufN;
456,457c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused < 0 || bufN;
456,457c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused < 0 || nUnused ;
456,458c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
---
>        ((nUnused < 0 || nUnused > ;
456,459c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSEDreturn bzf;   
456,459c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)bzf;   
456,459c456
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED));   
457,460c457
<       bzf->bufN;
<    ;
<    return bzf;   
< }
---
>       }
457,464c457
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzfvoid BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
457,464c457
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
457,464c457
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->bufN(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
458,464c458
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
459,464c459
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    ) ( int *bzerror, BZFILE *b )
459,464c459
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return ( int *bzerror, BZFILE *b )
459,464c459
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzfint *bzerror, BZFILE *b )
460,464c460
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *bzerror, BZFILE *b )
464c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> bzerror, BZFILE *b )
464c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void , BZFILE *b )
464c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZFILE *b )
464c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(*b )
464c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadCloseb )
464c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) )
464,465c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API(BZ2_bzReadClose) ( {
464,466c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
---
> void BZ_API(BZ2_bzReadClose) ( int }
464,470c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *int BZ_API(BZ2_bzRead) 
464,470c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerrorBZ_API(BZ2_bzRead) 
464,470c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, (BZ2_bzRead) 
464,470c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE BZ2_bzRead) 
464,470c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *) 
464,471c464
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b ( int*    bzerror, 
465,471c465
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int*    bzerror, 
466,471c466
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    *    bzerror, 
470,471c470
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> bzerror, 
470,471c470
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int , 
470,472c470
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_APIBZFILE* b, 
470,472c470
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(* b, 
470,472c470
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzReadb, 
471,472c471
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            , 
471,473c471
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( void*   buf, 
471,473c471
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*   buf, 
(96.1 %, 8049 bytes)
471,475c471
<            ( void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>            ( buf;
471,475c471
<            ( void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>            ( void;
471,477c471
<            ( void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>            ( void*   while (True) 
471,477c471
<            ( void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>            ( void*   buf(True) 
472,477c472
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              True) 
472,477c472
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              int     ) 
472,479c472
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              int     len return 0; 
473,479c473
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
> 0; 
475,479c475
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    ; 
475,480c475
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
>    buf}
477,484c477
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
477,484c477
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while BZ_API(BZ2_bzReadGetUnused) 
477,484c477
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while ((BZ2_bzReadGetUnused) 
477,484c477
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while (TrueBZ2_bzReadGetUnused) 
479,484c479
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    ) 
479,485c479
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return ( int*    bzerror, 
479,485c479
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return 0int*    bzerror, 
480,485c480
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> *    bzerror, 
(96.1 %, 8014 bytes)
475,481c475
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    int*    bzerror, 
476,481c476
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> *    bzerror, 
480,481c480
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> bzerror, 
480,481c480
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void , 
480,482c480
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_APIBZFILE* b, 
480,482c480
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(* b, 
480,482c480
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnusedb, 
481,482c481
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      , 
481,483c481
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( void**  unused, 
481,483c481
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int**  unused, 
481,483c481
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    *  unused, 
481,483c481
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerrorunused, 
482,483c482
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        , 
482,484c482
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILEint*    nUnused )
482,484c482
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* *    nUnused )
482,484c482
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bnUnused )
483,484c483
<                        void**  unused, 
<                        int*    nUnused )
---
>                        )
483,485c483
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        void{
483,486c483
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        void*nUnused ;
483,486c483
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        void**  ;
483,487c483
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
---
>                        void**  unused}
484,495c484
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int BZ_API(BZ2_bzBuffToBuffCompress) 
484,495c484
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        intBZ_API(BZ2_bzBuffToBuffCompress) 
484,495c484
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    (BZ2_bzBuffToBuffCompress) 
484,495c484
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    nUnused BZ2_bzBuffToBuffCompress) 
485,495c485
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> ) 
486,496c486
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    ( char*         dest, 
486,496c486
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    nUnused char*         dest, 
487,496c487
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> *         dest, 
495,496c495
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> dest, 
495,496c495
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int , 
495,497c495
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_APIunsigned int* destLen,
495,497c495
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(int* destLen,
495,497c495
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress* destLen,
496,497c496
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          destLen,
496,497c496
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( ,
496,498c496
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( charchar*         source, 
496,498c496
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         *         source, 
496,498c496
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         destsource, 
497,498c497
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            , 
497,499c497
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned unsigned int  sourceLen,
497,499c497
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intint  sourceLen,
497,499c497
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* sourceLen,
498,499d497
<                            char*         source, 
<                            unsigned int  sourceLen,
498,499d497
<                            char*         source, 
<                            unsigned int  sourceLen,
498,500c498
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            charblockSize100k, 
498,500c498
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         , 
498,501c498
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceint           verbosity, 
499,501c499
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            verbosity, 
499,501c499
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned , 
499,502c499
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  int           workFactor )
499,502c499
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLenworkFactor )
500,502c500
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
500,503c500
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            int           {
500,504c500
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           blockSize100kbz_stream strm;
501,504c501
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            strm;
501,504c501
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           ;
501,505c501
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           verbosityint ret;
502,505c502
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ret;
502,505c502
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           ;
502,507c502
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>                            int           workFactor if (verbosity > workFactor == 0) ;
503,507c503
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
> (verbosity > workFactor == 0) ;
504,507c504
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    verbosity > workFactor == 0) ;
504,507c504
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    bz_stream > workFactor == 0) ;
504,507c504
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    bz_stream strmworkFactor == 0) ;
505,507c505
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    == 0) ;
505,507c505
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    int 0) ;
505,507c505
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    int ret) ;
507c507
<    if (verbosity > workFactor == 0) ;
---
>    ;
507,508c507
<    if (verbosity > workFactor == 0) ;
<    ;
---
>    if ;
507,510c507
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
---
>    if (0;
507,510c507
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
---
>    if (verbosity ;
507,511c507
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if (verbosity > return ret;
507,511c507
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if (verbosity > workFactor ret;
507,511c507
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if (verbosity > workFactor == ;
507,512c507
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
---
>    if (verbosity > workFactor == 0}
507,516c507
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == 0) int BZ_API(BZ2_bzBuffToBuffDecompress) 
508,516c508
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    BZ_API(BZ2_bzBuffToBuffDecompress) 
(96.1 %, 7981 bytes)
507,516c507
<    ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    int BZ_API(BZ2_bzBuffToBuffDecompress) 
508,516c508
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    BZ_API(BZ2_bzBuffToBuffDecompress) 
510,516c510
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    (BZ2_bzBuffToBuffDecompress) 
510,516c510
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    0BZ2_bzBuffToBuffDecompress) 
511,516c511
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    ) 
511,517c511
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return ( char*         dest, 
511,517c511
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return retchar*         dest, 
512,517c512
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> *         dest, 
516,517c516
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> dest, 
516,517c516
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int , 
516,518c516
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_APIunsigned int* destLen,
516,518c516
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(int* destLen,
516,518c516
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress* destLen,
517,518c517
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            destLen,
517,518c517
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( ,
517,519c517
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( charchar*         source, 
517,519c517
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         *         source, 
517,519c517
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destsource, 
518,519c518
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              , 
518,520c518
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned unsigned int  sourceLen,
518,520c518
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intint  sourceLen,
518,520c518
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* sourceLen,
519,520d518
<                              char*         source, 
<                              unsigned int  sourceLen,
519,520d518
<                              char*         source, 
<                              unsigned int  sourceLen,
519,521c519
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              charsmall,
519,521c519
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         ,
519,522c519
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceint           verbosity )
520,522c520
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
520,522c520
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned )
520,523c520
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              unsigned int  {
520,524c520
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned int  sourceLenbz_stream strm;
521,524c521
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              strm;
521,524c521
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           ;
521,525c521
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              int           smallint ret;
522,525c522
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ret;
522,525c522
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              int           ;
522,527c522
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              int           verbosity if (0 || verbosity > 4) 
523,527c523
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
> (0 || verbosity > 4) 
524,527c524
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    0 || verbosity > 4) 
524,527c524
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    bz_stream || verbosity > 4) 
524,527c524
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    bz_stream strmverbosity > 4) 
525,527c525
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    > 4) 
525,527c525
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    int 4) 
525,527c525
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    int ret) 
527,528c527
<    if (0 || verbosity > 4) 
<           ;
---
>    ;
527,530c527
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
---
>    if ret ;
527,530c527
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
---
>    if (;
527,531c527
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
---
>    if (0 }
527,536c527
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
---
>    if (0 || static
527,537c527
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    if (0 || verbosity BZFILE * bzopen_or_bzdopen
527,537c527
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    if (0 || verbosity > * bzopen_or_bzdopen
527,537c527
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    if (0 || verbosity > 4bzopen_or_bzdopen
528,538c528
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>           ( )      
(96.1 %, 7946 bytes)
527,537c527
<    ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    ( )      
529,537c529
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    )      
530,538d529
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
530,542d529
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
535,543c535
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> * BZ_API(BZ2_bzopen)
536,543c536
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ_API(BZ2_bzopen)
536,543c536
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE (BZ2_bzopen)
536,543c536
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ2_bzopen)
537,543c537
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                )
537,544c537
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                ( ( const char *path,
538,544c538
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char *path,
543,544c543
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> char *path,
543,544c543
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE *path,
543,544c543
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * path,
543,544c543
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API,
543,545c543
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(const char *mode )
543,545c543
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(BZ2_bzopenchar *mode )
544,545c544
<                ( const char *path,
<                  const char *mode )
---
>                *mode )
544,545c544
<                ( const char *path,
<                  const char *mode )
---
>                ( mode )
544,545c544
<                ( const char *path,
<                  const char *mode )
---
>                ( const )
544,546c544
<                ( const char *path,
<                  const char *mode )
< {
---
>                ( const char {
544,547c544
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const char *return 0;
544,547c544
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const char *path0;
545,547c545
<                  const char *mode )
< {
<    return 0;
---
>                  ;
545,548c545
<                  const char *mode )
< {
<    return 0;
< }
---
>                  const }
545,552c545
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char BZFILE * BZ_API(BZ2_bzdopen)
545,552c545
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char ** BZ_API(BZ2_bzdopen)
545,552c545
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *mode BZ_API(BZ2_bzdopen)
546,552c546
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> (BZ2_bzdopen)
547,552c547
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    BZ2_bzdopen)
547,552c547
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return )
547,553c547
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return 0( int fd,
548,553c548
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> int fd,
552,553c552
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> fd,
552,553c552
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE ,
552,554c552
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * const char *mode )
552,554c552
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_APIchar *mode )
552,554c552
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API(*mode )
552,554c552
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API(BZ2_bzdopenmode )
553,554c553
<                ( int fd,
<                  const char *mode )
---
>                )
553,555c553
<                ( int fd,
<                  const char *mode )
< {
---
>                ( {
553,556c553
<                ( int fd,
<                  const char *mode )
< {
<    }
---
>                ( int }
553,560c553
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int fdint BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
554,560c554
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
554,560c554
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const (BZ2_bzread) (BZFILE* b, void* buf, int len )
554,560c554
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char BZ2_bzread) (BZFILE* b, void* buf, int len )
554,560c554
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *) (BZFILE* b, void* buf, int len )
554,560c554
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode (BZFILE* b, void* buf, int len )
555,560c555
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZFILE* b, void* buf, int len )
556,560c556
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    * b, void* buf, int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int , void* buf, int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIvoid* buf, int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(* buf, int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzreadbuf, int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) , int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (int len )
560c560
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILElen )
(96.1 %, 7924 bytes)
560,562c560
< int BZ_API(BZ2_bzread) (int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (;
560,563c560
< int BZ_API(BZ2_bzread) (int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (int 0;
560,563c560
< int BZ_API(BZ2_bzread) (int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (int len ;
561,564c561
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> nread = 0;
562,564c562
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    = 0;
562,564c562
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int 0;
562,564c562
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int bzerr;
562,565c562
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
562,565c562
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread(bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
563,565c563
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
563,565c563
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    0== BZ_OK || bzerr == BZ_STREAM_END) {
564,565c564
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    BZ_OK || bzerr == BZ_STREAM_END) {
564,565c564
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    nread || bzerr == BZ_STREAM_END) {
564,565c564
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    nread = bzerr == BZ_STREAM_END) {
564,565c564
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    nread = 0== BZ_STREAM_END) {
565c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    BZ_STREAM_END) {
565c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if ) {
565c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if ({
565,566c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (bzerr return nread;
565,566c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (bzerr == nread;
565,566c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (bzerr == BZ_OK ;
565,567c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || } else {
565,567c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr else {
565,567c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == {
565,568c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDreturn -1;
565,568c565
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) -1;
566,568c566
<       return nread;
<    } else {
<       return -1;
---
>       1;
566,568c566
<       return nread;
<    } else {
<       return -1;
---
>       return ;
566,569c566
<       return nread;
<    } else {
<       return -1;
<    }
---
>       return nread}
(96.2 %, 7884 bytes)
566,572c566
<       1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       ) (BZFILE* b, void* buf, int len )
566,572c566
<       1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       1(BZFILE* b, void* buf, int len )
567,572c567
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    BZFILE* b, void* buf, int len )
568,572c568
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * b, void* buf, int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int , void* buf, int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIvoid* buf, int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(* buf, int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwritebuf, int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) , int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (int len )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILElen )
572c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* )
572,573c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b{
572,574c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, int bzerr;
572,574c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidbzerr;
572,574c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* ;
572,576c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf{
572,577c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, return -1;
572,577c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int -1;
572,577c572
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len 1;
573,577c573
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> ;
574,577d573
<    int bzerr;
< 
<    {
<       return -1;
574,579c574
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    int FILE *fp = ((bzFile *)b)->handle;
574,579c574
<    int bzerr;
< 
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr*fp = ((bzFile *)b)->handle;
576,579c576
<    {
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    fp = ((bzFile *)b)->handle;
577,579c577
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       = ((bzFile *)b)->handle;
577,579c577
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return ((bzFile *)b)->handle;
577,579c577
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return -(bzFile *)b)->handle;
577,579c577
<       return -1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       return -1bzFile *)b)->handle;
578,579c578
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    *)b)->handle;
579c579
< FILE *fp = ((bzFile *)b)->handle;
---
> )b)->handle;
579c579
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE b)->handle;
579c579
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *)->handle;
579c579
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp ->handle;
579c579
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = handle;
579c579
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = (;
579,581c579
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((if (b==NULL){
579,581c579
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile (b==NULL){
579,581c579
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *b==NULL){
579,581c579
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *)==NULL){
579,581c579
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *)bNULL){
579,581c579
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *)b)){
579,581c579
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *)b)->{
580,582d579
<    
<    if (b==NULL){
<       ;
581,583c581
<    if (b==NULL){
<       ;
<       ;
---
>    ;
581,584c581
<    if (b==NULL){
<       ;
<       ;
<    }
---
>    if }
581,585c581
<    if (b==NULL){
<       ;
<       ;
<    }
< }
---
>    if (}
581,590c581
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (bstatic char *bzerrorstrings[] = {
581,590c581
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==char *bzerrorstrings[] = {
581,590c581
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULL*bzerrorstrings[] = {
581,590c581
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULL)bzerrorstrings[] = {
582,590c582
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       [] = {
583,590c583
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       ] = {
584,590c584
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    = {
585,590c585
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> {
590,591c590
< static char *bzerrorstrings[] = {
<        "OK"
---
> "OK"
590,592c590
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
> static };
590,592c590
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
> static char ;
590,595c590
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
590,595c590
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstringschar * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
590,595c590
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[* BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
590,595c590
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
590,595c590
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = (BZ2_bzerror) (BZFILE *b, int *errnum)
591,595c591
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        BZ2_bzerror) (BZFILE *b, int *errnum)
592,595c592
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ) (BZFILE *b, int *errnum)
592,595c592
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }(BZFILE *b, int *errnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> BZFILE *b, int *errnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const *b, int *errnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char b, int *errnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * , int *errnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIint *errnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(*errnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerrorerrnum)
595c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) )
595,596c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * BZ_API(BZ2_bzerror) ({
595,597c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE int err = ((bzFile *)b)->lastErr;
595,597c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *err = ((bzFile *)b)->lastErr;
595,597c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b= ((bzFile *)b)->lastErr;
595,597c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, ((bzFile *)b)->lastErr;
595,597c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int (bzFile *)b)->lastErr;
595,597c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *bzFile *)b)->lastErr;
595,597c595
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum*)b)->lastErr;
596,597c596
< {
<    int err = ((bzFile *)b)->lastErr;
---
> )b)->lastErr;
597c597
<    int err = ((bzFile *)b)->lastErr;
---
>    b)->lastErr;
597c597
<    int err = ((bzFile *)b)->lastErr;
---
>    int )->lastErr;
597c597
<    int err = ((bzFile *)b)->lastErr;
---
>    int err ->lastErr;
597c597
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = lastErr;
597c597
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (;
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((return bzerrorstrings[err*-1];
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile bzerrorstrings[err*-1];
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *[err*-1];
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)err*-1];
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b*-1];
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b)-1];
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b)->1];
597,598c597
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b)->lastErr];
598c598
<    return bzerrorstrings[err*-1];
---
>    ;
598,599c598
<    return bzerrorstrings[err*-1];
< }
---
>    return }
598,627c598
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings
\ No newline at end of file
598,627c598
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[
\ No newline at end of file
598,627c598
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err
\ No newline at end of file
598,627c598
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*
\ No newline at end of file
598,627c598
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*-
\ No newline at end of file
598,627c598
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*-1
\ No newline at end of file
598,627c598
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    return bzerrorstrings[err*-1]
\ No newline at end of file
(96.2 %, 7855 bytes)
598,627c598
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    
\ No newline at end of file
599,627d598
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
===< pass_clex :: rm-toks-2 >===
9c9
< #define BZ_OK                3
---
> BZ_OK                3
9c9
< #define BZ_OK                3
---
> #3
9,10c9
< #define BZ_OK                3
< #define BZ_STREAM_END        (-9)
---
> #define #define BZ_STREAM_END        (-9)
9,10c9
< #define BZ_OK                3
< #define BZ_STREAM_END        (-9)
---
> #define BZ_OK                define BZ_STREAM_END        (-9)
10c10
< #define BZ_STREAM_END        (-9)
---
> BZ_STREAM_END        (-9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #(-9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define -9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        ()
10,12c10
< #define BZ_STREAM_END        (-9)
< 
< typedef 
---
> #define BZ_STREAM_END        (-typedef 
10,13c10
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        (-9struct {
12,13c12
< typedef 
<    struct {
---
> {
13,14c13
<    struct {
<       char *next_out;
---
>    char *next_out;
13,14c13
<    struct {
<       char *next_out;
---
>    struct *next_out;
14c14
<       char *next_out;
---
>       next_out;
14c14
<       char *next_out;
---
>       char ;
14,15c14
<       char *next_out;
<       unsigned int avail_out;
---
>       char *unsigned int avail_out;
14,15c14
<       char *next_out;
<       unsigned int avail_out;
---
>       char *next_outint avail_out;
15c15
<       unsigned int avail_out;
---
>       avail_out;
15c15
<       unsigned int avail_out;
---
>       unsigned ;
(96.2 %, 7846 bytes)
14,15c14
<       char ;
<       unsigned int avail_out;
---
>       char int avail_out;
15c15
<       unsigned int avail_out;
---
>       avail_out;
15c15
<       unsigned int avail_out;
---
>       unsigned ;
15,17c15
<       unsigned int avail_out;
< 
<       void *state;
---
>       unsigned int void *state;
15,17c15
<       unsigned int avail_out;
< 
<       void *state;
---
>       unsigned int avail_out*state;
17c17
<       void *state;
---
>       state;
17c17
<       void *state;
---
>       void ;
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *void *(*bzalloc)(void *,int,void *);
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *state*(*bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       (*bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *()(void *,int,void *);
(96.2 %, 7833 bytes)
15,17c15
<       unsigned ;
< 
<       void *state;
---
>       unsigned *state;
17c17
<       void *state;
---
>       state;
17c17
<       void *state;
---
>       void ;
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *void *(*bzalloc)(void *,int,void *);
17,19c17
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *state*(*bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       (*bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *()(void *,int,void *);
19c19
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*(void *,int,void *);
(96.2 %, 7819 bytes)
15c15
<       unsigned *state;
---
>       unsigned ;
15,17c15
<       unsigned *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned *void *(*bzalloc)(void *,int,void *);
15,17c15
<       unsigned *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned *state*(*bzalloc)(void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       (*bzalloc)(void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *()(void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*(void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzallocvoid *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)*,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(void int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(void *,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(void *,void *);
(96.2 %, 7815 bytes)
17c17
<       void *(*bzalloc)(void *,void *);
---
>       void *(*bzalloc)(void **);
17c17
<       void *(*bzalloc)(void *,void *);
---
>       void *(*bzalloc)(void *,);
17c17
<       void *(*bzalloc)(void *,void *);
---
>       void *(*bzalloc)(void *,void ;
17,18c17
<       void *(*bzalloc)(void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,void *void *opaque;
17,18c17
<       void *(*bzalloc)(void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,void *)*opaque;
18c18
<       void *opaque;
---
>       opaque;
18c18
<       void *opaque;
---
>       void ;
(96.2 %, 7809 bytes)
17c17
<       void *(*bzalloc)(void **);
---
>       void *(*bzalloc)(void *;
17,18c17
<       void *(*bzalloc)(void **);
<       void *opaque;
---
>       void *(*bzalloc)(void **void *opaque;
17,18c17
<       void *(*bzalloc)(void **);
<       void *opaque;
---
>       void *(*bzalloc)(void **)*opaque;
18c18
<       void *opaque;
---
>       opaque;
18c18
<       void *opaque;
---
>       void ;
18,19c18
<       void *opaque;
<    } 
---
>       void *} 
18,20c18
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *opaquebz_stream;
19,20c19
<    } 
<    bz_stream;
---
>    ;
20,24c20
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    #include <stdio.h>
20,24c20
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streaminclude <stdio.h>
24c24
< #include <stdio.h>
---
> <stdio.h>
24c24
< #include <stdio.h>
---
> #stdio.h>
24c24
< #include <stdio.h>
---
> #include .h>
24c24
< #include <stdio.h>
---
> #include <h>
(96.2 %, 7802 bytes)
18,20c18
<       void ;
<    } 
<    bz_stream;
---
>       void bz_stream;
19,20c19
<    } 
<    bz_stream;
---
>    ;
20,24c20
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    #include <stdio.h>
20,24c20
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streaminclude <stdio.h>
24c24
< #include <stdio.h>
---
> <stdio.h>
24c24
< #include <stdio.h>
---
> #stdio.h>
24c24
< #include <stdio.h>
---
> #include .h>
24c24
< #include <stdio.h>
---
> #include <h>
24c24
< #include <stdio.h>
---
> #include <stdio>
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.#   define BZ_API(func) func
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.hdefine BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
> BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
> #   (func) func
26c26
< #   define BZ_API(func) func
---
> #   define func) func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API) func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API(func
26,27c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func#   define BZ_EXTERN extern
26,27c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func) define BZ_EXTERN extern
27c27
< #   define BZ_EXTERN extern
---
> BZ_EXTERN extern
27c27
< #   define BZ_EXTERN extern
---
> #   extern
27,32c27
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_EXTERN ;
27,32c27
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_EXTERN ;
32,37d31
< BZ_EXTERN ;
< 
< 
< 
< 
< 
(96.2 %, 7781 bytes)
27,33c27
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define #define BZ_MAX_UNUSED 0
27,33c27
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_EXTERN define BZ_MAX_UNUSED 0
33c33
< #define BZ_MAX_UNUSED 0
---
> BZ_MAX_UNUSED 0
33c33
< #define BZ_MAX_UNUSED 0
---
> #0
33,35c33
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE( 
---
> #define typedef void BZFILE( 
33,35c33
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE( 
---
> #define BZ_MAX_UNUSED void BZFILE( 
35c35
< typedef void BZFILE( 
---
> BZFILE( 
35c35
< typedef void BZFILE( 
---
> typedef ( 
35,36c35
< typedef void BZFILE( 
<       int   ,    
---
> typedef void int   ,    
35,36c35
< typedef void BZFILE( 
<       int   ,    
---
> typedef void BZFILE,    
36d35
<       int   ,    
36d35
<       int   ,    
(96.2 %, 7763 bytes)
36,37c36
<       int   nUnused 
<    );
---
>       );
36,37c36
<       int   nUnused 
<    );
---
>       int   ;
37,39c37
<    );
< 
< ;
---
>    ;
37,41c37
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
(96.2 %, 7745 bytes)
36,38c36
<       );
< 
< ;
---
>       ;
36,40c36
<       );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
38,40c38
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
(96.2 %, 7739 bytes)
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ_API) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ_API(( 
36,37c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedint*    bzerror, 
36,37c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) *    bzerror, 
37c37
<       int*    bzerror, 
---
>       bzerror, 
37c37
<       int*    bzerror, 
---
>       int, 
37,38c37
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
37,38c37
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror* b, 
38c38
<       BZFILE* b, 
---
>       b, 
38c38
<       BZFILE* b, 
---
>       BZFILE, 
38,39c38
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* void**  unused,  
38,39c38
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b**  unused,  
39c39
<       void**  unused,  
---
>       *  unused,  
39c39
<       void**  unused,  
---
>       voidunused,  
39c39
<       void**  unused,  
---
>       void*,  
39,40c39
<       void**  unused,  
<       int*    );
---
>       void**  int*    );
39,40c39
<       void**  unused,  
<       int*    );
---
>       void**  unused*    );
40c40
<       int*    );
---
>       );
40c40
<       int*    );
---
>       int;
(96.2 %, 7736 bytes)
38,39c38
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE**  unused,  
39c39
<       void**  unused,  
---
>       *  unused,  
39c39
<       void**  unused,  
---
>       voidunused,  
39c39
<       void**  unused,  
---
>       void*,  
39,40c39
<       void**  unused,  
<       int*    );
---
>       void**  int*    );
39,40c39
<       void**  unused,  
<       int*    );
---
>       void**  unused*    );
40c40
<       int*    );
---
>       );
40c40
<       int*    );
---
>       int;
40,42c40
<       int*    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40,42c40
<       int*    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    )BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(( 
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenint*  bzerror,      
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) *  bzerror,      
43c43
<       int*  bzerror,      
---
>       bzerror,      
43c43
<       int*  bzerror,      
---
>       int,      
43,44c43
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  FILE* f, 
43,44c43
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror* f, 
44c44
<       FILE* f, 
---
>       f, 
44c44
<       FILE* f, 
---
>       FILE, 
44,45c44
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* int   blockSize100k, 
44,45c44
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* fblockSize100k, 
45c45
<       int   blockSize100k, 
---
>       , 
45,46c45
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   int   verbosity, 
45,46c45
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   blockSize100kverbosity, 
46c46
<       int   verbosity, 
---
>       , 
46,47c46
<       int   verbosity, 
<       int   );
---
>       int   int   );
46,47c46
<       int   verbosity, 
<       int   );
---
>       int   verbosity);
47c47
<       int   );
---
>       ;
47,49c47
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
47,49c47
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   )void BZ_API(BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_API(BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN (BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API(( 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseint*          bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) *          bzerror, 
50c50
<       int*          bzerror, 
---
>       bzerror, 
50c50
<       int*          bzerror, 
---
>       int, 
50,51c50
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          BZFILE*       b, 
50,51c50
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror*       b, 
51c51
<       BZFILE*       b, 
---
>       b, 
51c51
<       BZFILE*       b, 
---
>       BZFILE, 
51,52c51
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       int           abandon, 
51,52c51
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       babandon, 
52c52
<       int           abandon, 
---
>       , 
52,53c52
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           unsigned int* nbytes_in, 
52,53c52
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           abandonint* nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       unsigned nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       unsigned int, 
53,54c53
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned int* unsigned int* nbytes_out 
(96.2 %, 7727 bytes)
51,52c51
<       BZFILE, 
<       int           abandon, 
---
>       BZFILEabandon, 
52c52
<       int           abandon, 
---
>       , 
52,53c52
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           unsigned int* nbytes_in, 
52,53c52
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           abandonint* nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       unsigned nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       unsigned int, 
53,54c53
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned int* unsigned int* nbytes_out 
53,54c53
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned int* nbytes_inint* nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>       * nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>       unsigned nbytes_out 
54,55c54
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int);
54,55c54
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* ;
55,57c55
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
55,57c55
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )void BZ_API(BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_API(BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN (BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(( 
57,58c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64int*          bzerror, 
57,58c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) *          bzerror, 
58c58
<       int*          bzerror, 
---
>       bzerror, 
58c58
<       int*          bzerror, 
---
>       int, 
58,59c58
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          BZFILE*       b, 
58,59c58
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror*       b, 
59c59
<       BZFILE*       b, 
---
>       b, 
59c59
<       BZFILE*       b, 
---
>       BZFILE, 
59,60c59
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       int           abandon, 
59,60c59
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       babandon, 
60c60
<       int           abandon, 
---
>       , 
60,61c60
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           unsigned int* nbytes_in_lo32, 
60,61c60
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           abandonint* nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned int, 
61,62c61
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* unsigned int* nbytes_in_hi32, 
(96.2 %, 7718 bytes)
59,60c59
<       BZFILE, 
<       int           abandon, 
---
>       BZFILEabandon, 
60c60
<       int           abandon, 
---
>       , 
60,61c60
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           unsigned int* nbytes_in_lo32, 
60,61c60
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           abandonint* nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned int, 
61,62c61
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* unsigned int* nbytes_in_hi32, 
61,62c61
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* nbytes_in_lo32int* nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       * nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int, 
62,63c62
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* unsigned int* nbytes_out_lo32, 
62,63c62
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_hi32int* nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int, 
63,64c63
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* unsigned int* nbytes_out_hi32
63,64c63
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_out_lo32int* nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>       * nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
64,65c64
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int);
64,65c64
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* ;
65,70c65
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
65,70c65
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )int BZ_API(BZ2_bzBuffToBuffCompress) ( 
70c70
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffCompress) ( 
70c70
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN (BZ2_bzBuffToBuffCompress) ( 
(96.2 %, 7704 bytes)
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API) ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API(( 
70,71c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffCompresschar*         dest, 
70,71c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffCompress) *         dest, 
71c71
<       char*         dest, 
---
>       dest, 
71c71
<       char*         dest, 
---
>       char, 
71,72c71
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         unsigned int* destLen,
71,72c71
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destint* destLen,
72c72
<       unsigned int* destLen,
---
>       * destLen,
72c72
<       unsigned int* destLen,
---
>       unsigned destLen,
72c72
<       unsigned int* destLen,
---
>       unsigned int,
72,73c72
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* char*         source, 
72,73c72
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* destLen*         source, 
73c73
<       char*         source, 
---
>       source, 
73c73
<       char*         source, 
---
>       char, 
73,74c73
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
73,74c73
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceint  sourceLen,
74c74
<       unsigned int  sourceLen,
---
>       sourceLen,
74c74
<       unsigned int  sourceLen,
---
>       unsigned ,
74,75c74
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int  int           blockSize100k, 
74,75c74
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int  sourceLenblockSize100k, 
75c75
<       int           blockSize100k, 
---
>       , 
75,76c75
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           int           verbosity, 
75,76c75
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           blockSize100kverbosity, 
76c76
<       int           verbosity, 
---
>       , 
76,77c76
<       int           verbosity, 
<       int           workFactor 
---
>       int           int           workFactor 
76,77c76
<       int           verbosity, 
<       int           workFactor 
---
>       int           verbosityworkFactor 
77,78c77
<       int           workFactor 
<    );
---
>       );
(96.2 %, 7690 bytes)
74,75c74
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned blockSize100k, 
75c75
<       int           blockSize100k, 
---
>       , 
75,76c75
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           int           verbosity, 
75,76c75
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           blockSize100kverbosity, 
76c76
<       int           verbosity, 
---
>       , 
76,77c76
<       int           verbosity, 
<       int           workFactor 
---
>       int           int           workFactor 
76,77c76
<       int           verbosity, 
<       int           workFactor 
---
>       int           verbosityworkFactor 
77,78c77
<       int           workFactor 
<    );
---
>       );
77,78c77
<       int           workFactor 
<    );
---
>       int           ;
78,80c78
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
78,80c78
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
80c80
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) ( 
80c80
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN (BZ2_bzBuffToBuffDecompress) ( 
(96.3 %, 7676 bytes)
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API) ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(( 
80,81c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompresschar*         dest, 
80,81c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) *         dest, 
81c81
<       char*         dest, 
---
>       dest, 
81c81
<       char*         dest, 
---
>       char, 
81,82c81
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         unsigned int* destLen,
81,82c81
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destint* destLen,
82c82
<       unsigned int* destLen,
---
>       * destLen,
82c82
<       unsigned int* destLen,
---
>       unsigned destLen,
82c82
<       unsigned int* destLen,
---
>       unsigned int,
82,83c82
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* char*         source, 
82,83c82
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* destLen*         source, 
83c83
<       char*         source, 
---
>       source, 
83c83
<       char*         source, 
---
>       char, 
83,84c83
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
83,84c83
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceint  sourceLen,
84c84
<       unsigned int  sourceLen,
---
>       sourceLen,
84c84
<       unsigned int  sourceLen,
---
>       unsigned ,
84,85c84
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int  int           small, 
84,85c84
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int  sourceLensmall, 
85c85
<       int           small, 
---
>       , 
85,86c85
<       int           small, 
<       int           );
---
>       int           int           );
85,86c85
<       int           small, 
<       int           );
---
>       int           small);
86c86
<       int           );
---
>       ;
86,88c86
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
86,88c86
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           )BZFILE * BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> * BZ_API(BZ2_bzopen) (
(96.3 %, 7662 bytes)
84,85c84
<       unsigned ,
<       int           small, 
---
>       unsigned small, 
85c85
<       int           small, 
---
>       , 
85,86c85
<       int           small, 
<       int           );
---
>       int           int           );
85,86c85
<       int           small, 
<       int           );
---
>       int           small);
86c86
<       int           );
---
>       ;
86,88c86
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
86,88c86
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           )BZFILE * BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> * BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API((
88,89c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenconst char *path,
88,89c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) char *path,
89c89
<       const char *path,
---
>       *path,
89c89
<       const char *path,
---
>       const path,
89c89
<       const char *path,
---
>       const char ,
89,90c89
<       const char *path,
<       const char *mode
---
>       const char *const char *mode
89,90c89
<       const char *path,
<       const char *mode
---
>       const char *pathchar *mode
90c90
<       const char *mode
---
>       *mode
90c90
<       const char *mode
---
>       const mode
90,91c90
<       const char *mode
<    );
---
>       const char );
90,91c90
<       const char *mode
<    );
---
>       const char *;
91,93c91
<    );
< 
< (BZ2_bzflush) (
---
>    (BZ2_bzflush) (
91,93c91
<    );
< 
< (BZ2_bzflush) (
---
>    )BZ2_bzflush) (
93c93
< (BZ2_bzflush) (
---
> ) (
93c93
< (BZ2_bzflush) (
---
> ((
93,94c93
< (BZ2_bzflush) (
<       );
---
> (BZ2_bzflush);
93,94c93
< (BZ2_bzflush) (
<       );
---
> (BZ2_bzflush) ;
(96.3 %, 7652 bytes)
93,95c93
< (BZ2_bzflush);
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> (BZ2_bzflush#define BZ_VERSION  "1.0.2, 30-Dec-2001"
93,95c93
< (BZ2_bzflush);
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> (BZ2_bzflush)define BZ_VERSION  "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
95,98c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #define typedef unsigned char   Bool;
95,98c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< typedef unsigned char   Bool;
---
> #define BZ_VERSION  unsigned char   Bool;
98c98
< typedef unsigned char   Bool;
---
> char   Bool;
98c98
< typedef unsigned char   Bool;
---
> typedef Bool;
98c98
< typedef unsigned char   Bool;
---
> typedef unsigned ;
98,100c98
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> typedef unsigned char   typedef int             Int32;
98,100c98
< typedef unsigned char   Bool;
< 
< typedef int             Int32;
---
> typedef unsigned char   Boolint             Int32;
100c100
< typedef int             Int32;
---
> Int32;
100c100
< typedef int             Int32;
---
> typedef ;
100,101c100
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             typedef unsigned int    UInt32;
100,101c100
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             Int32unsigned int    UInt32;
101c101
< typedef unsigned int    UInt32;
---
> int    UInt32;
(96.3 %, 7636 bytes)
98,100c98
< typedef Bool;
< 
< typedef int             Int32;
---
> typedef typedef int             Int32;
98,100c98
< typedef Bool;
< 
< typedef int             Int32;
---
> typedef Boolint             Int32;
100c100
< typedef int             Int32;
---
> Int32;
100c100
< typedef int             Int32;
---
> typedef ;
100,101c100
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             typedef unsigned int    UInt32;
100,101c100
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             Int32unsigned int    UInt32;
101c101
< typedef unsigned int    UInt32;
---
> int    UInt32;
101c101
< typedef unsigned int    UInt32;
---
> typedef UInt32;
101c101
< typedef unsigned int    UInt32;
---
> typedef unsigned ;
101,105c101
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef unsigned int    #define True  (0)
101,105c101
< typedef unsigned int    UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef unsigned int    UInt32define True  (0)
105c105
< #define True  (0)
---
> True  (0)
105c105
< #define True  (0)
---
> #(0)
105c105
< #define True  (0)
---
> #define 0)
105c105
< #define True  (0)
---
> #define True  )
(96.3 %, 7620 bytes)
101,105c101
< typedef UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef #define True  (0)
101,105c101
< typedef UInt32;
< 
< 
< 
< #define True  (0)
---
> typedef UInt32define True  (0)
105c105
< #define True  (0)
---
> True  (0)
105c105
< #define True  (0)
---
> #(0)
105c105
< #define True  (0)
---
> #define 0)
105c105
< #define True  (0)
---
> #define True  )
105,107c105
< #define True  (0)
< 
< #define define define BZ_G_SIZE))
---
> #define True  (#define define define BZ_G_SIZE))
(96.3 %, 7618 bytes)
105,107c105
< #define True  )
< 
< #define define define BZ_G_SIZE))
---
> #define True  define define define BZ_G_SIZE))
107c107
< #define define define BZ_G_SIZE))
---
> define define BZ_G_SIZE))
107c107
< #define define define BZ_G_SIZE))
---
> #define BZ_G_SIZE))
(96.3 %, 7614 bytes)
105c105
< #define True  define define define BZ_G_SIZE))
---
> #define True  define BZ_G_SIZE))
105c105
< #define True  define define define BZ_G_SIZE))
---
> #define True  define BZ_G_SIZE))
105c105
< #define True  define define define BZ_G_SIZE))
---
> #define True  define define ))
(96.3 %, 7600 bytes)
105c105
< #define True  define BZ_G_SIZE))
---
> #define True  ))
105c105
< #define True  define BZ_G_SIZE))
---
> #define True  define )
105,113c105
< #define True  define BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define True  define BZ_G_SIZE#define BZ_RAND_DECLS                          \
(96.3 %, 7584 bytes)
105,113c105
< #define True  ))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define True  #define BZ_RAND_DECLS                          \
105,113c105
< #define True  ))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define True  )define BZ_RAND_DECLS                          \
(96.3 %, 7574 bytes)
105c105
< #define True  #define BZ_RAND_DECLS                          \
---
> #define True  BZ_RAND_DECLS                          \
105c105
< #define True  #define BZ_RAND_DECLS                          \
---
> #define True  #\
(96.3 %, 7566 bytes)
105,112c105
< #define True  BZ_RAND_DECLS                          \
< 
< 
< 
< 
< 
< 
< #define BZ_S_INPUT     2
---
> #define True  #define BZ_S_INPUT     2
105,112c105
< #define True  BZ_RAND_DECLS                          \
< 
< 
< 
< 
< 
< 
< #define BZ_S_INPUT     2
---
> #define True  BZ_RAND_DECLS                          define BZ_S_INPUT     2
112c112
< #define BZ_S_INPUT     2
---
> BZ_S_INPUT     2
(96.3 %, 7519 bytes)
105c105
< #define True  #define BZ_S_INPUT     2
---
> #define True  BZ_S_INPUT     2
105c105
< #define True  #define BZ_S_INPUT     2
---
> #define True  #2
105,107c105
< #define True  #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define True  #define #define BZ_N_RADIX 2
(96.3 %, 7511 bytes)
105,107c105
< #define True  BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define True  #define BZ_N_RADIX 2
105,107c105
< #define True  BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define True  BZ_S_INPUT     define BZ_N_RADIX 2
107c107
< #define BZ_N_RADIX 2
---
> BZ_N_RADIX 2
107c107
< #define BZ_N_RADIX 2
---
> #2
107,108c107
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define #define BZ_N_QSORT 2
107,108c107
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX define BZ_N_QSORT 2
108c108
< #define BZ_N_QSORT 2
---
> BZ_N_QSORT 2
108c108
< #define BZ_N_QSORT 2
---
> #2
108,109c108
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define #define BZ_N_SHELL 8
108,109c108
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT define BZ_N_SHELL 8
109c109
< #define BZ_N_SHELL 8
---
> BZ_N_SHELL 8
109c109
< #define BZ_N_SHELL 8
---
> #8
109,110c109
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
109,110c109
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #(BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT + BZ_N_QSORT + BZ_N_SHELL + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (BZ_N_QSORT + BZ_N_SHELL + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_SHELL + 2)
(96.3 %, 7498 bytes)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (BZ_N_SHELL + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (BZ_N_QSORT + 2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (BZ_N_QSORT + 2)
(96.3 %, 7485 bytes)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (2)
110c110
< #define BZ_N_OVERSHOOT (BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (BZ_N_SHELL )
(96.4 %, 7472 bytes)
110,117c110
< #define BZ_N_OVERSHOOT (2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_N_OVERSHOOT (typedef
110,118c110
< #define BZ_N_OVERSHOOT (2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_OVERSHOOT (2struct {
117,118c117
< typedef
<    struct {
---
> {
118,120c118
<    struct {
<       
<       bz_stream;
---
>    bz_stream;
118,120c118
<    struct {
<       
<       bz_stream;
---
>    struct ;
120,125d119
<       bz_stream;
< 
<       
<       
< 
<       
120,126c120
<       bz_stream;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       bz_stream*  arr1;
(96.4 %, 7432 bytes)
120c120
<       UInt32*  arr1;
---
>       arr1;
120c120
<       UInt32*  arr1;
---
>       UInt32;
120,121c120
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32*  UInt32*  arr2;
120,121c120
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32*  arr1*  arr2;
121c121
<       UInt32*  arr2;
---
>       arr2;
121c121
<       UInt32*  arr2;
---
>       UInt32;
(96.4 %, 7425 bytes)
120d119
<       UInt32;
121c121
<       UInt32*  arr2;
---
>       arr2;
121c121
<       UInt32*  arr2;
---
>       UInt32;
(96.4 %, 7411 bytes)
120c120
<       UInt32*  arr2;
---
>       UInt32;
120,121c120
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  UInt32*  ftab;
120,121c120
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  arr2*  ftab;
121c121
<       UInt32*  ftab;
---
>       ftab;
121c121
<       UInt32*  ftab;
---
>       UInt32;
(96.4 %, 7404 bytes)
120d119
<       UInt32;
121c121
<       UInt32*  ftab;
---
>       ftab;
121c121
<       UInt32*  ftab;
---
>       UInt32;
121,125c121
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  UInt32*  ptr;
(96.4 %, 7390 bytes)
120c120
<       UInt32*  ftab;
---
>       UInt32;
120,124c120
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  UInt32*  ptr;
120,124c120
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  ftab*  ptr;
124c124
<       UInt32*  ptr;
---
>       ptr;
124c124
<       UInt32*  ptr;
---
>       UInt32;
(96.4 %, 7383 bytes)
120,123d119
<       UInt32;
<       
< 
<       
124c124
<       UInt32*  ptr;
---
>       ptr;
124c124
<       UInt32*  ptr;
---
>       UInt32;
(96.4 %, 7354 bytes)
120c120
<       UInt32*  ptr;
---
>       UInt32;
120,121c120
<       UInt32*  ptr;
<       ;
---
>       UInt32*  ;
120,126c120
<       UInt32*  ptr;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       UInt32*  ptrInt32    nInUse;
121,126c121
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       nInUse;
126c126
<       Int32    nInUse;
---
>       ;
(96.4 %, 7348 bytes)
120,126c120
<       UInt32;
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       UInt32Int32    nInUse;
121,126c121
<       ;
<       
<       
< 
<       
<       Int32    nInUse;
---
>       nInUse;
126c126
<       Int32    nInUse;
---
>       ;
126,127c126
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    Bool     inUse[6];
126,127c126
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUseinUse[6];
(96.4 %, 7333 bytes)
126,127c126
<       ;
<       Bool     inUse[6];
---
>       inUse[6];
127c127
<       Bool     inUse[6];
---
>       [6];
127c127
<       Bool     inUse[6];
---
>       Bool     6];
127c127
<       Bool     inUse[6];
---
>       Bool     inUse];
127c127
<       Bool     inUse[6];
---
>       Bool     inUse[;
127,128c127
<       Bool     inUse[6];
<       unsigned ;
---
>       Bool     inUse[6unsigned ;
128d127
<       unsigned ;
128,130d127
<       unsigned ;
< 
<       
(96.4 %, 7316 bytes)
127,130c127
<       Bool     inUse[6];
< 
<       
<       Int32    verbosity;
---
>       Bool     inUse[6]verbosity;
130c130
<       Int32    verbosity;
---
>       ;
130,131c130
<       Int32    verbosity;
<       Int32    blockNo}
---
>       Int32    Int32    blockNo}
130,131c130
<       Int32    verbosity;
<       Int32    blockNo}
---
>       Int32    verbosityblockNo}
(96.4 %, 7298 bytes)
130,131c130
<       ;
<       Int32    blockNo}
---
>       blockNo}
131c131
<       Int32    blockNo}
---
>       }
131,132c131
<       Int32    blockNo}
<    EState;
---
>       Int32    EState;
131,132c131
<       Int32    blockNo}
<    EState;
---
>       Int32    blockNo;
132,140c132
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>    ;
140,149d139
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
(96.4 %, 7282 bytes)
131,132c131
<       }
<    EState;
---
>       ;
132,140c132
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>    ;
140,149d139
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
140,151d139
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
(96.5 %, 7270 bytes)
132,142c132
<    EState;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define MTFL_SIZE 6
---
>    EStatedefine define MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> define MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> #MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> #define 6
142,148c142
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
---
> #define define typedef
142,149c142
< #define define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define MTFL_SIZE struct {
148,149c148
< typedef
<    struct {
---
> {
149,151c149
<    struct {
<       
<       unsigned short   *ll16;
---
>    unsigned short   *ll16;
149,151c149
<    struct {
<       
<       unsigned short   *ll16;
---
>    struct short   *ll16;
151c151
<       unsigned short   *ll16;
---
>       *ll16;
151c151
<       unsigned short   *ll16;
---
>       unsigned ll16;
151c151
<       unsigned short   *ll16;
---
>       unsigned short   ;
(96.5 %, 7261 bytes)
151,152c151
<       unsigned ll16;
<       unsigned char    *ll4;
---
>       unsigned unsigned char    *ll4;
151,152c151
<       unsigned ll16;
<       unsigned char    *ll4;
---
>       unsigned ll16char    *ll4;
152c152
<       unsigned char    *ll4;
---
>       *ll4;
152c152
<       unsigned char    *ll4;
---
>       unsigned ll4;
152c152
<       unsigned char    *ll4;
---
>       unsigned char    ;
152,158c152
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       unsigned char    *UInt32   calculatedCombinedCRC;
152,158c152
<       unsigned char    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       unsigned char    *ll4calculatedCombinedCRC;
(96.5 %, 7252 bytes)
152,158c152
<       unsigned ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       unsigned UInt32   calculatedCombinedCRC;
152,158c152
<       unsigned ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       unsigned ll4calculatedCombinedCRC;
158c158
<       UInt32   calculatedCombinedCRC;
---
>       ;
(96.5 %, 7206 bytes)
152,199c152
<       unsigned ll4calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       unsigned ll4calculatedCombinedCRCDState;
198,199c198
<    }
<    DState;
---
>    ;
199,205c199
<    DState;
< 
< 
< 
< 
< 
< #\
---
>    #\
199,205c199
<    DState;
< 
< 
< 
< 
< 
< #\
---
>    DState\
205,225d204
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
205,227c205
< #\
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
> #void makeMaps_e ( void )
226,227c226
< static
< void makeMaps_e ( void )
---
> makeMaps_e ( void )
(96.5 %, 7183 bytes)
205,206c205
< static
< void makeMaps_e ( void )
---
> makeMaps_e ( void )
206c206
< void makeMaps_e ( void )
---
> ( void )
206c206
< void makeMaps_e ( void )
---
> void void )
206c206
< void makeMaps_e ( void )
---
> void makeMaps_e )
206,207c206
< void makeMaps_e ( void )
< {
---
> void makeMaps_e ( {
206,208c206
< void makeMaps_e ( void )
< {
<    EState * s = 00;
---
> void makeMaps_e ( void EState * s = 00;
207,208c207
< {
<    EState * s = 00;
---
> * s = 00;
208c208
<    EState * s = 00;
---
>    s = 00;
208c208
<    EState * s = 00;
---
>    EState = 00;
208c208
<    EState * s = 00;
---
>    EState * 00;
(96.5 %, 7171 bytes)
205c205
< makeMaps_e ( void )
---
> void )
205c205
< makeMaps_e ( void )
---
> makeMaps_e )
205,206c205
< makeMaps_e ( void )
< {
---
> makeMaps_e ( {
205,207c205
< makeMaps_e ( void )
< {
<    EState * s = 00;
---
> makeMaps_e ( void EState * s = 00;
206,207c206
< {
<    EState * s = 00;
---
> * s = 00;
207c207
<    EState * s = 00;
---
>    s = 00;
207c207
<    EState * s = 00;
---
>    EState = 00;
207c207
<    EState * s = 00;
---
>    EState * 00;
207c207
<    EState * s = 00;
---
>    EState * s ;
207,208c207
<    EState * s = 00;
<    ;
---
>    EState * s = ;
207,209c207
<    EState * s = 00;
<    ;
<    Int32   i, j;
---
>    EState * s = 00Int32   i, j;
208,209c208
<    ;
<    Int32   i, j;
---
>    i, j;
209c209
<    Int32   i, j;
---
>    , j;
209c209
<    Int32   i, j;
---
>    Int32   j;
(96.5 %, 7167 bytes)
207,209c207
<    EState * s ;
<    ;
<    Int32   i, j;
---
>    EState * s Int32   i, j;
208,209c208
<    ;
<    Int32   i, j;
---
>    i, j;
209c209
<    Int32   i, j;
---
>    , j;
209c209
<    Int32   i, j;
---
>    Int32   j;
209c209
<    Int32   i, j;
---
>    Int32   i;
209,210c209
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, Int32   zPend;
209,210c209
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, jzPend;
210c210
<    Int32   zPend;
---
>    ;
210,211c210
<    Int32   zPend;
<    Int32   mtfv  ;
---
>    Int32   Int32   mtfv  ;
210,211c210
<    Int32   zPend;
<    Int32   mtfv  ;
---
>    Int32   zPendmtfv  ;
211c211
<    Int32   mtfv  ;
---
>    ;
(96.5 %, 7164 bytes)
209,210c209
<    Int32   j;
<    Int32   zPend;
---
>    Int32   Int32   zPend;
209,210c209
<    Int32   j;
<    Int32   zPend;
---
>    Int32   jzPend;
210c210
<    Int32   zPend;
---
>    ;
210,211c210
<    Int32   zPend;
<    Int32   mtfv  ;
---
>    Int32   Int32   mtfv  ;
210,211c210
<    Int32   zPend;
<    Int32   mtfv  ;
---
>    Int32   zPendmtfv  ;
211c211
<    Int32   mtfv  ;
---
>    ;
211,213c211
<    Int32   mtfv  ;
< 
<    {
---
>    Int32   {
213,215d212
<    {
<       ;
< 
214,216d213
<       ;
< 
<       {
214,218c214
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>       if (zPend > 0) 
216,218c216
<       {
< 
<          if (zPend > 0) 
---
>       (zPend > 0) 
218c218
<          if (zPend > 0) 
---
>          zPend > 0) 
218c218
<          if (zPend > 0) 
---
>          if > 0) 
(96.5 %, 7150 bytes)
213,215d212
<    {
<       ;
< 
214,216d213
<       ;
< 
<       {
214,218c214
<       ;
< 
<       {
< 
<          if (zPend > 0) 
---
>       if (zPend > 0) 
216,218c216
<       {
< 
<          if (zPend > 0) 
---
>       (zPend > 0) 
218c218
<          if (zPend > 0) 
---
>          zPend > 0) 
218c218
<          if (zPend > 0) 
---
>          if > 0) 
218c218
<          if (zPend > 0) 
---
>          if (0) 
218c218
<          if (zPend > 0) 
---
>          if (zPend ) 
(96.5 %, 7142 bytes)
218,219c218
<          if (0) 
<          {
---
>          if ({
218,220c218
<          if (0) 
<          {
<             register unsigned char  rtmp  ;
---
>          if (0register unsigned char  rtmp  ;
219,220c219
<          {
<             register unsigned char  rtmp  ;
---
>          unsigned char  rtmp  ;
220c220
<             register unsigned char  rtmp  ;
---
>             char  rtmp  ;
220c220
<             register unsigned char  rtmp  ;
---
>             register rtmp  ;
220c220
<             register unsigned char  rtmp  ;
---
>             register unsigned ;
(96.5 %, 7124 bytes)
220c220
<             char  rtmp  ;
---
>             ;
220,221c220
<             char  rtmp  ;
<             j;
---
>             char  j;
221d220
<             j;
(96.5 %, 7112 bytes)
221d220
<             j;
221,222c221
<             j;
<          }
---
>             }
(96.5 %, 7097 bytes)
220,223c220
<             ;
<          }
< 
<       }
---
>             }
223,225d222
<       }
<    }
< 
224,226d223
<    }
< 
<    }
224,230c224
<    }
< 
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
---
>    BZ_API(BZ2_bzCompressInit) 
226,230c226
<    }
< 
< 
< 
< BZ_API(BZ2_bzCompressInit) 
---
>    (BZ2_bzCompressInit) 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ_API) 
230,231c230
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> BZ_API(( bz_stream* strm, 
230,231c230
< BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> BZ_API(BZ2_bzCompressInitbz_stream* strm, 
231c231
<                     ( bz_stream* strm, 
---
>                     * strm, 
231c231
<                     ( bz_stream* strm, 
---
>                     ( strm, 
231c231
<                     ( bz_stream* strm, 
---
>                     ( bz_stream, 
231,232c231
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* int        blockSize100k,
231,232c231
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strmblockSize100k,
232c232
<                      int        blockSize100k,
---
>                      ,
232,233c232
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        int        verbosity,
232,233c232
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100kverbosity,
233c233
<                      int        verbosity,
---
>                      ,
233,234c233
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        int        workFactor )
233,234c233
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosityworkFactor )
(96.6 %, 7063 bytes)
232,233c232
<                      int        blockSize100kverbosity,
<                      int        workFactor )
---
>                      int        blockSize100kverbosityworkFactor )
233c233
<                      int        workFactor )
---
>                      )
233,234c233
<                      int        workFactor )
< {
---
>                      int        {
233,235c233
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor Int32   n;
234,235c234
< {
<    Int32   n;
---
> n;
235c235
<    Int32   n;
---
>    ;
235,236c235
<    Int32   n;
<    EState* s;
---
>    Int32   EState* s;
235,236c235
<    Int32   n;
<    EState* s;
---
>    Int32   n* s;
236c236
<    EState* s;
---
>    s;
(96.6 %, 7029 bytes)
232,234c232
<                      int        blockSize100kverbosityworkFactor )
< {
<    Int32   n;
---
>                      int        blockSize100kverbosityworkFactor Int32   n;
233,234c233
< {
<    Int32   n;
---
> n;
234c234
<    Int32   n;
---
>    ;
234,235c234
<    Int32   n;
<    EState* s;
---
>    Int32   EState* s;
234,235c234
<    Int32   n;
<    EState* s;
---
>    Int32   n* s;
235c235
<    EState* s;
---
>    s;
235c235
<    EState* s;
---
>    EState;
235,236c235
<    EState* s;
<    ;
---
>    EState* ;
235,237c235
<    EState* s;
<    ;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* ssBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
236,237c236
<    ;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(96.6 %, 7026 bytes)
235,237c235
<    EState;
<    ;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
236,237c236
<    ;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(96.6 %, 7016 bytes)
235c235
<    EStatesBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOCn+BZ_N_OVERSHOOT) * sizeof(UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( +BZ_N_OVERSHOOT) * sizeof(UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (n) * sizeof(UInt32) );
(96.6 %, 7014 bytes)
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (* sizeof(UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOTsizeof(UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) (UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof) );
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof();
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32;
235,236c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) ;
235,238c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    strm->state          ;
---
>    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) )strm->state          ;
236,238c236
<    ;
< 
<    strm->state          ;
---
>    ->state          ;
238c238
<    strm->state          ;
---
>    state          ;
238c238
<    strm->state          ;
---
>    strm;
238,239c238
<    strm->state          ;
<    return BZ_OK;
---
>    strm->return BZ_OK;
238,239c238
<    strm->state          ;
<    return BZ_OK;
---
>    strm->state          BZ_OK;
239c239
<    return BZ_OK;
---
>    ;
(96.6 %, 6997 bytes)
238,239c238
<    strm;
<    return BZ_OK;
---
>    strmBZ_OK;
239c239
<    return BZ_OK;
---
>    ;
239,240c239
<    return BZ_OK;
< }
---
>    return }
240,252d239
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
240,255d239
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
252,256c252
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
(96.6 %, 6985 bytes)
240,252d239
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
240,255d239
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
252,256c252
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
256c256
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompress) ( bz_stream *strm, int action )
256c256
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ2_bzCompress) ( bz_stream *strm, int action )
(96.6 %, 6976 bytes)
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ2_bzCompress) ( bz_stream *strm, int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API) ( bz_stream *strm, int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(( bz_stream *strm, int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompressbz_stream *strm, int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) *strm, int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( strm, int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream , int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *int action )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strmaction )
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, )
252,253c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int {
252,255c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action EState* s;
253,255c253
< {
<    
<    EState* s;
---
> * s;
255c255
<    EState* s;
---
>    s;
255c255
<    EState* s;
---
>    EState;
(96.6 %, 6970 bytes)
252,255c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strmaction )
< {
<    
<    EState* s;
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strmaction EState* s;
253,255c253
< {
<    
<    EState* s;
---
> * s;
255c255
<    EState* s;
---
>    s;
255c255
<    EState* s;
---
>    EState;
255,256c255
<    EState* s;
< }
---
>    EState* }
255,264c255
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    EState* sint BZ_API(BZ2_bzDecompressInit) 
256,264c256
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
264c264
< int BZ_API(BZ2_bzDecompressInit) 
---
> (BZ2_bzDecompressInit) 
(96.6 %, 6967 bytes)
255,264c255
<    EState;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    EStateint BZ_API(BZ2_bzDecompressInit) 
256,264c256
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
264c264
< int BZ_API(BZ2_bzDecompressInit) 
---
> (BZ2_bzDecompressInit) 
264c264
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ2_bzDecompressInit) 
264c264
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API) 
264,265c264
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( small )
---
> int BZ_API(( small )
264,265c264
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( small )
---
> int BZ_API(BZ2_bzDecompressInitsmall )
265c265
<                      ( small )
---
>                      )
265,266c265
<                      ( small )
< {
---
>                      ( {
265,267c265
<                      ( small )
< {
<    DState* s;
---
>                      ( small DState* s;
(96.6 %, 6957 bytes)
264c264
< (BZ2_bzDecompressInit) 
---
> ) 
264,265c264
< (BZ2_bzDecompressInit) 
<                      ( small )
---
> (( small )
264,265c264
< (BZ2_bzDecompressInit) 
<                      ( small )
---
> (BZ2_bzDecompressInitsmall )
265c265
<                      ( small )
---
>                      )
265,266c265
<                      ( small )
< {
---
>                      ( {
265,267c265
<                      ( small )
< {
<    DState* s;
---
>                      ( small DState* s;
266,267c266
< {
<    DState* s;
---
> * s;
267c267
<    DState* s;
---
>    s;
267c267
<    DState* s;
---
>    DState;
267,268c267
<    DState* s;
< ;
---
>    DState* ;
267,269c267
<    DState* s;
< ;
< }
---
>    DState* s}
268,275d267
< ;
< }
< 
< 
< 
< 
< 
< 
269,276c269
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
> define BZ_SETERR(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> BZ_SETERR(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(\
(96.6 %, 6954 bytes)
267,269c267
<    DState;
< ;
< }
---
>    DState}
268,275d267
< ;
< }
< 
< 
< 
< 
< 
< 
269,276c269
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
---
> define BZ_SETERR(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> BZ_SETERR(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(\
276,279c276
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
---
> #define BZ_SETERR(etypedef 
276,280c276
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
---
> #define BZ_SETERR(e)                    struct {
279,280c279
< typedef 
<    struct {
---
> {
280,281c280
<    struct {
<       FILE*     handle;
---
>    FILE*     handle;
280,281c280
<    struct {
<       FILE*     handle;
---
>    struct *     handle;
281c281
<       FILE*     handle;
---
>       handle;
281c281
<       FILE*     handle;
---
>       FILE;
281,282c281
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     char      buf[BZ_MAX_UNUSED];
281,282c281
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
---
>       FILE*     handlebuf[BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       [BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf[;
282,283c282
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       char      buf[BZ_MAX_UNUSEDInt32     bufN;
282,283c282
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       char      buf[BZ_MAX_UNUSED]bufN;
283c283
<       Int32     bufN;
---
>       ;
283,284c283
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     Bool      writing;
283,284c283
<       Int32     bufN;
<       Bool      writing;
---
>       Int32     bufNwriting;
284c284
<       Bool      writing;
---
>       ;
284,285c284
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      bz_stream strm;
284,285c284
<       Bool      writing;
<       bz_stream strm;
---
>       Bool      writingstrm;
(96.6 %, 6937 bytes)
284,285c284
<       ;
<       bz_stream strm;
---
>       strm;
285c285
<       bz_stream strm;
---
>       ;
285,286c285
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream Int32     lastErr;
285,286c285
<       bz_stream strm;
<       Int32     lastErr;
---
>       bz_stream strmlastErr;
286c286
<       Int32     lastErr;
---
>       ;
286,287c286
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     Bool      initialisedOk;
286,287c286
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErrinitialisedOk;
287c287
<       Bool      initialisedOk;
---
>       ;
(96.6 %, 6923 bytes)
285,286c285
<       ;
<       Int32     lastErr;
---
>       lastErr;
286c286
<       Int32     lastErr;
---
>       ;
286,287c286
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     Bool      initialisedOk;
286,287c286
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     lastErrinitialisedOk;
287c287
<       Bool      initialisedOk;
---
>       ;
287,288c287
<       Bool      initialisedOk;
<    }
---
>       Bool      }
287,289c287
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      initialisedOkbzFile;
(96.6 %, 6900 bytes)
287,289c287
<       ;
<    }
<    bzFile;
---
>       bzFile;
288,289c288
<    }
<    bzFile;
---
>    ;
289,297c289
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    BZFILE* BZ_API(BZ2_bzWriteOpen) 
289,297c289
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    bzFile* BZ_API(BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZ_API(BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE(BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API) 
297,298c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(( int*  bzerror,      
297,298c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint*  bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                     *  bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                     ( bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                     ( int,      
298,299c298
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  FILE* f, 
298,299c298
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror* f, 
299c299
<                       FILE* f, 
---
>                       f, 
299c299
<                       FILE* f, 
---
>                       FILE, 
299,300c299
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* int   blockSize100k, 
299,300c299
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* fblockSize100k, 
300c300
<                       int   blockSize100k, 
---
>                       , 
300,301c300
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   int   verbosity,
300,301c300
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100kverbosity,
301c301
<                       int   verbosity,
---
>                       ,
301,302c301
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   int   workFactor )
301,302c301
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosityworkFactor )
302c302
<                       int   workFactor )
---
>                       )
302,303c302
<                       int   workFactor )
< {
---
>                       int   {
302,304c302
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   workFactor Int32   ret;
303,304c303
< {
<    Int32   ret;
---
> ret;
304c304
<    Int32   ret;
---
>    ;
304,305c304
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   bzFile* bzf = NULL;
304,305c304
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   ret* bzf = NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzf = NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzFile= NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzFile* NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzFile* bzf ;
(96.6 %, 6889 bytes)
304,305c304
<    ;
<    bzFile* bzf = NULL;
---
>    * bzf = NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzf = NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzFile= NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzFile* NULL;
305c305
<    bzFile* bzf = NULL;
---
>    bzFile* bzf ;
305,307c305
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(||
---
>    bzFile* bzf = BZ_SETERR(||
305,307c305
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(||
---
>    bzFile* bzf = NULL(||
307c307
<    BZ_SETERR(||
---
>    ||
307,308c307
<    BZ_SETERR(||
<        (verbosity > 4))
---
>    BZ_SETERR(verbosity > 4))
307,308c307
<    BZ_SETERR(||
<        (verbosity > 4))
---
>    BZ_SETERR(verbosity > 4))
308c308
<        (verbosity > 4))
---
>        > 4))
308c308
<        (verbosity > 4))
---
>        (4))
(96.6 %, 6883 bytes)
305,307c305
<    bzFile* bzf ;
< 
<    BZ_SETERR(||
---
>    bzFile* bzf (||
307c307
<    BZ_SETERR(||
---
>    ||
307,308c307
<    BZ_SETERR(||
<        (verbosity > 4))
---
>    BZ_SETERR(verbosity > 4))
307,308c307
<    BZ_SETERR(||
<        (verbosity > 4))
---
>    BZ_SETERR(verbosity > 4))
308c308
<        (verbosity > 4))
---
>        > 4))
308c308
<        (verbosity > 4))
---
>        (4))
308c308
<        (verbosity > 4))
---
>        (verbosity ))
(96.6 %, 6871 bytes)
308c308
<        (4))
---
>        ()
308,309c308
<        (4))
<       ;   
---
>        (4;   
308,310c308
<        (4))
<       ;   
< }
---
>        (4)}
309,315c309
<       ;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       void BZ_API(BZ2_bzWrite)
310,315c310
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
> BZ_API(BZ2_bzWrite)
315c315
< void BZ_API(BZ2_bzWrite)
---
> (BZ2_bzWrite)
315c315
< void BZ_API(BZ2_bzWrite)
---
> void BZ2_bzWrite)
315c315
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API)
315,316c315
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(( int*    bzerror, 
315,316c315
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(BZ2_bzWriteint*    bzerror, 
316c316
<              ( int*    bzerror, 
---
>              *    bzerror, 
316c316
<              ( int*    bzerror, 
---
>              ( bzerror, 
316c316
<              ( int*    bzerror, 
---
>              ( int, 
316,317c316
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    BZFILE* b, 
(96.7 %, 6860 bytes)
315c315
< (BZ2_bzWrite)
---
> )
315,316c315
< (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> (( int*    bzerror, 
315,316c315
< (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> (BZ2_bzWriteint*    bzerror, 
316c316
<              ( int*    bzerror, 
---
>              *    bzerror, 
316c316
<              ( int*    bzerror, 
---
>              ( bzerror, 
316c316
<              ( int*    bzerror, 
---
>              ( int, 
316,317c316
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    BZFILE* b, 
316,317c316
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror* b, 
317c317
<                BZFILE* b, 
---
>                b, 
317c317
<                BZFILE* b, 
---
>                BZFILE, 
317,318c317
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* void*   buf, 
317,318c317
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* b*   buf, 
318c318
<                void*   buf, 
---
>                buf, 
318c318
<                void*   buf, 
---
>                void, 
318,319c318
<                void*   buf, 
<                int     len )
---
>                void*   int     len )
318,319c318
<                void*   buf, 
<                int     len )
---
>                void*   buflen )
319c319
<                int     len )
---
>                )
319,320c319
<                int     len )
< {
---
>                int     {
319,321c319
<                int     len )
< {
<    Int32   ret;
---
>                int     len Int32   ret;
320,321c320
< {
<    Int32   ret;
---
> ret;
321c321
<    Int32   ret;
---
>    ;
(96.7 %, 6834 bytes)
318,320c318
<                void*   buflen )
< {
<    Int32   ret;
---
>                void*   buflen Int32   ret;
319,320c319
< {
<    Int32   ret;
---
> ret;
320c320
<    Int32   ret;
---
>    ;
320,321c320
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   bzFile* bzf = (bzFile*)b;
320,321c320
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    Int32   ret* bzf = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzf = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile= (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = ()b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = (bzFileb;
(96.7 %, 6823 bytes)
320,321c320
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzf = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile= (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = *)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = ()b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = (bzFileb;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = (bzFile*;
321,323c321
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    bzFile* bzf = (bzFile*)BZ_SETERR(ferror(bzf->handle)) }
321,323c321
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    bzFile* bzf = (bzFile*)b(ferror(bzf->handle)) }
323c323
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    ferror(bzf->handle)) }
323c323
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    BZ_SETERR(bzf->handle)) }
323c323
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    BZ_SETERR(bzf->handle)) }
323c323
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    BZ_SETERR(ferror->handle)) }
323c323
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    BZ_SETERR(ferror(handle)) }
323c323
<    BZ_SETERR(ferror(bzf->handle)) }
---
>    BZ_SETERR(ferror(bzf)) }
(96.7 %, 6818 bytes)
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR(ferror() }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR(ferror(handle}
323,327c323
<    BZ_SETERR(ferror(handle)) }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(handle)void BZ_API(BZ2_bzWriteClose)
323,327c323
<    BZ_SETERR(ferror(handle)) }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(handle)) BZ_API(BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> (BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API)
327,328c327
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(( int*          bzerror, 
327,328c327
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteCloseint*          bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                   *          bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                   ( bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                   ( int, 
328,329c328
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          BZFILE*       b, 
328,329c328
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror*       b, 
329c329
<                     BZFILE*       b, 
---
>                     b, 
329c329
<                     BZFILE*       b, 
---
>                     BZFILE, 
329,330c329
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       int           abandon,
329,330c329
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       babandon,
330c330
<                     int           abandon,
---
>                     ,
330,331c330
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           unsigned int* nbytes_in,
330,331c330
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandonint* nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                     * nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned int,
331,332c331
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* unsigned int* nbytes_out )
331,332c331
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_inint* nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                     * nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned int)
332,333c332
<                     unsigned int* nbytes_out )
< {
---
>                     unsigned int* {
332,334c332
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned int* nbytes_out BZ2_bzWriteClose64 ;
333,334c333
< {
<    BZ2_bzWriteClose64 ;
---
> ;
334,335c334
<    BZ2_bzWriteClose64 ;
< }
---
>    }
334,338c334
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 void BZ_API(BZ2_bzWriteClose64)
335,338c335
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
> BZ_API(BZ2_bzWriteClose64)
338c338
< void BZ_API(BZ2_bzWriteClose64)
---
> (BZ2_bzWriteClose64)
(96.7 %, 6797 bytes)
334,337c334
<    }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ_API(BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> (BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API)
337,338c337
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(( int*          bzerror, 
337,338c337
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose64int*          bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                   *          bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                   ( bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                   ( int, 
338,339c338
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          BZFILE*       b, 
338,339c338
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror*       b, 
339c339
<                     BZFILE*       b, 
---
>                     b, 
339c339
<                     BZFILE*       b, 
---
>                     BZFILE, 
339,340c339
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       int           abandon,
339,340c339
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       babandon,
340c340
<                     int           abandon,
---
>                     ,
340,341c340
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           unsigned int* nbytes_in_lo32,
340,341c340
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandonint* nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     * nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned int,
341,342c341
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* unsigned int* nbytes_in_hi32,
341,342c341
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* nbytes_in_lo32int* nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     * nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int,
342,343c342
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* unsigned int* nbytes_out_lo32,
342,343c342
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_hi32int* nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int,
343,344c343
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* unsigned int* nbytes_out_hi32 )
343,344c343
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_lo32int* nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int)
344,345c344
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* {
344,347c344
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile;
---
>                     unsigned int* nbytes_out_hi32 bzFile;
345,347c345
< {
<    
<    bzFile;
---
> ;
347,348c347
<    bzFile;
< }
---
>    }
347,352c347
<    bzFile;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    bzFileBZFILE* BZ_API(BZ2_bzReadOpen) 
348,352c348
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API(BZ2_bzReadOpen) 
352c352
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZ_API(BZ2_bzReadOpen) 
(96.7 %, 6789 bytes)
347,351c347
<    }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    * BZ_API(BZ2_bzReadOpen) 
351c351
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZ_API(BZ2_bzReadOpen) 
351c351
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE(BZ2_bzReadOpen) 
351c351
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ2_bzReadOpen) 
351c351
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_API) 
351,352c351
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(( int*  bzerror, 
351,352c351
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(BZ2_bzReadOpenint*  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                    *  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                    ( bzerror, 
(96.7 %, 6781 bytes)
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ_API) 
351,352c351
< BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZ_API(( int*  bzerror, 
351,352c351
< BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZ_API(BZ2_bzReadOpenint*  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                    *  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                    ( bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                    ( int, 
352,353c352
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  FILE* f, 
352,353c352
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror* f, 
353c353
<                      FILE* f, 
---
>                      f, 
353c353
<                      FILE* f, 
---
>                      FILE, 
353,354c353
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* int   verbosity,
353,354c353
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* fverbosity,
354c354
<                      int   verbosity,
---
>                      ,
354,355c354
<                      int   verbosity,
<                      int   small,
---
>                      int   int   small,
354,355c354
<                      int   verbosity,
<                      int   small,
---
>                      int   verbositysmall,
355c355
<                      int   small,
---
>                      ,
355,356c355
<                      int   small,
<                      void* unused,
---
>                      int   void* unused,
355,356c355
<                      int   small,
<                      void* unused,
---
>                      int   small* unused,
356c356
<                      void* unused,
---
>                      unused,
356c356
<                      void* unused,
---
>                      void,
356,357c356
<                      void* unused,
<                      int   nUnused )
---
>                      void* int   nUnused )
356,357c356
<                      void* unused,
<                      int   nUnused )
---
>                      void* unusednUnused )
357c357
<                      int   nUnused )
---
>                      )
(96.7 %, 6752 bytes)
354,355c354
<                      int   verbositysmall,
<                      void* unused,
---
>                      int   verbositysmall* unused,
355c355
<                      void* unused,
---
>                      unused,
355c355
<                      void* unused,
---
>                      void,
355,356c355
<                      void* unused,
<                      int   nUnused )
---
>                      void* int   nUnused )
355,356c355
<                      void* unused,
<                      int   nUnused )
---
>                      void* unusednUnused )
356c356
<                      int   nUnused )
---
>                      )
356,357c356
<                      int   nUnused )
< {
---
>                      int   {
356,358c356
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   nUnused bzFile* bzf = NULL;
357,358c357
< {
<    bzFile* bzf = NULL;
---
> * bzf = NULL;
358c358
<    bzFile* bzf = NULL;
---
>    bzf = NULL;
358c358
<    bzFile* bzf = NULL;
---
>    bzFile= NULL;
358c358
<    bzFile* bzf = NULL;
---
>    bzFile* NULL;
358c358
<    bzFile* bzf = NULL;
---
>    bzFile* bzf ;
358,360c358
<    bzFile* bzf = NULL;
< 
<    if (f ||
---
>    bzFile* bzf = if (f ||
358,360c358
<    bzFile* bzf = NULL;
< 
<    if (f ||
---
>    bzFile* bzf = NULL(f ||
360c360
<    if (f ||
---
>    f ||
360c360
<    if (f ||
---
>    if ||
360,361c360
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
(96.7 %, 6746 bytes)
358,360c358
<    bzFile* bzf ;
< 
<    if (f ||
---
>    bzFile* bzf (f ||
360c360
<    if (f ||
---
>    f ||
360c360
<    if (f ||
---
>    if ||
360,361c360
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
360,361c360
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (f (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
361c361
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
361c361
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (< 0 || nUnused > BZ_MAX_UNUSED)))
361c361
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((0 || nUnused > BZ_MAX_UNUSED)))
(96.7 %, 6734 bytes)
360c360
<    if (((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
360c360
<    if (((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if ((< 0 || nUnused > BZ_MAX_UNUSED)))
360c360
<    if (((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (((0 || nUnused > BZ_MAX_UNUSED)))
360c360
<    if (((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (((nUnused || nUnused > BZ_MAX_UNUSED)))
(96.7 %, 6724 bytes)
360c360
<    if (((0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (((nUnused > BZ_MAX_UNUSED)))
360c360
<    if (((0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (((0 > BZ_MAX_UNUSED)))
(96.7 %, 6719 bytes)
360c360
<    if (((nUnused > BZ_MAX_UNUSED)))
---
>    if (((BZ_MAX_UNUSED)))
360c360
<    if (((nUnused > BZ_MAX_UNUSED)))
---
>    if (((nUnused )))
360c360
<    if (((nUnused > BZ_MAX_UNUSED)))
---
>    if (((nUnused > ))
(96.7 %, 6709 bytes)
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((())
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (((BZ_MAX_UNUSED)
360,361c360
<    if (((BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>    if (((BZ_MAX_UNUSED)bzf->bufN;
360,361c360
<    if (((BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>    if (((BZ_MAX_UNUSED))->bufN;
361c361
<       bzf->bufN;
---
>       bufN;
361c361
<       bzf->bufN;
---
>       bzf;
361,362c361
<       bzf->bufN;
<    ;
---
>       bzf->;
361,363c361
<       bzf->bufN;
<    ;
<    return bzf;   
---
>       bzf->bufNreturn bzf;   
362,363c362
<    ;
<    return bzf;   
---
>    bzf;   
(96.7 %, 6703 bytes)
361,363c361
<       bzf;
<    ;
<    return bzf;   
---
>       bzfreturn bzf;   
362,363c362
<    ;
<    return bzf;   
---
>    bzf;   
363c363
<    return bzf;   
---
>    ;   
(96.7 %, 6691 bytes)
362,363c362
<    bzf;   
< }
---
>    }
362,367c362
<    bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzfvoid BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
363,367c363
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
367c367
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
(96.7 %, 6683 bytes)
362,366c362
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API) ( int *bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(( int *bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadCloseint *bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) *bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) ( bzerror, BZFILE *b )
366c366
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) ( int , BZFILE *b )
(96.7 %, 6672 bytes)
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ) ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadCloseint *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( int , BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( int *BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( int *bzerror*b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( int *bzerror, b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose) ( int *bzerror, BZFILE )
366,367c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> (BZ2_bzReadClose) ( int *bzerror, BZFILE *{
366,368c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
---
> (BZ2_bzReadClose) ( int *bzerror, BZFILE *b }
367,371d366
< {
<    }
< 
< 
< 
368,372c368
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    BZ_API(BZ2_bzRead) 
372c372
< int BZ_API(BZ2_bzRead) 
---
> (BZ2_bzRead) 
372c372
< int BZ_API(BZ2_bzRead) 
---
> int BZ2_bzRead) 
372c372
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API) 
372,373c372
< int BZ_API(BZ2_bzRead) 
<            ( void*   buf, 
---
> int BZ_API(( void*   buf, 
372,373c372
< int BZ_API(BZ2_bzRead) 
<            ( void*   buf, 
---
> int BZ_API(BZ2_bzReadvoid*   buf, 
373c373
<            ( void*   buf, 
---
>            *   buf, 
373c373
<            ( void*   buf, 
---
>            ( buf, 
373c373
<            ( void*   buf, 
---
>            ( void, 
373,374c373
<            ( void*   buf, 
<              int     len )
---
>            ( void*   int     len )
(96.7 %, 6662 bytes)
372c372
< (BZ2_bzRead) 
---
> ) 
372,373c372
< (BZ2_bzRead) 
<            ( void*   buf, 
---
> (( void*   buf, 
372,373c372
< (BZ2_bzRead) 
<            ( void*   buf, 
---
> (BZ2_bzReadvoid*   buf, 
373c373
<            ( void*   buf, 
---
>            *   buf, 
373c373
<            ( void*   buf, 
---
>            ( buf, 
373c373
<            ( void*   buf, 
---
>            ( void, 
373,374c373
<            ( void*   buf, 
<              int     len )
---
>            ( void*   int     len )
373,374c373
<            ( void*   buf, 
<              int     len )
---
>            ( void*   buflen )
374c374
<              int     len )
---
>              )
374,375c374
<              int     len )
< {
---
>              int     {
374,377c374
<              int     len )
< {
<    
<    ; 
---
>              int     len ; 
375,377d374
< {
<    
<    ; 
377,382c377
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
378,382c378
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
382c382
< void BZ_API(BZ2_bzReadGetUnused) 
---
> (BZ2_bzReadGetUnused) 
(96.8 %, 6638 bytes)
373,376c373
<            ( void*   buflen )
< {
<    
<    ; 
---
>            ( void*   buflen ; 
374,376d373
< {
<    
<    ; 
376,381c376
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
377,381c377
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> (BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API) 
381,382c381
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(( int*    bzerror, 
381,382c381
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnusedint*    bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                      *    bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                      ( bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                      ( int, 
382,383c382
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    BZFILE* b, 
382,383c382
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror* b, 
383c383
<                        BZFILE* b, 
---
>                        b, 
383c383
<                        BZFILE* b, 
---
>                        BZFILE, 
383,384c383
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* void**  unused, 
383,384c383
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b**  unused, 
384c384
<                        void**  unused, 
---
>                        *  unused, 
384c384
<                        void**  unused, 
---
>                        voidunused, 
384c384
<                        void**  unused, 
---
>                        void*, 
384,385c384
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  int*    nUnused )
384,385c384
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused*    nUnused )
385c385
<                        int*    nUnused )
---
>                        nUnused )
385c385
<                        int*    nUnused )
---
>                        int)
385,386c385
<                        int*    nUnused )
< {
---
>                        int*    {
385,387c385
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        int*    nUnused nUnused ;
386,387c386
< {
<    nUnused ;
---
> ;
387,388c387
<    nUnused ;
< }
---
>    }
387,396c387
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    nUnused int BZ_API(BZ2_bzBuffToBuffCompress) 
388,396c388
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_API(BZ2_bzBuffToBuffCompress) 
396c396
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> (BZ2_bzBuffToBuffCompress) 
(96.8 %, 6628 bytes)
387,395c387
<    }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    BZ_API(BZ2_bzBuffToBuffCompress) 
395c395
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> (BZ2_bzBuffToBuffCompress) 
395c395
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ2_bzBuffToBuffCompress) 
395c395
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API) 
395,396c395
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(( char*         dest, 
395,396c395
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresschar*         dest, 
396c396
<                          ( char*         dest, 
---
>                          *         dest, 
396c396
<                          ( char*         dest, 
---
>                          ( dest, 
396c396
<                          ( char*         dest, 
---
>                          ( char, 
(96.8 %, 6618 bytes)
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> ) 
395,396c395
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> (( char*         dest, 
395,396c395
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> (BZ2_bzBuffToBuffCompresschar*         dest, 
396c396
<                          ( char*         dest, 
---
>                          *         dest, 
396c396
<                          ( char*         dest, 
---
>                          ( dest, 
396c396
<                          ( char*         dest, 
---
>                          ( char, 
396,397c396
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         unsigned int* destLen,
396,397c396
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         destint* destLen,
397c397
<                            unsigned int* destLen,
---
>                            * destLen,
397c397
<                            unsigned int* destLen,
---
>                            unsigned destLen,
397c397
<                            unsigned int* destLen,
---
>                            unsigned int,
397,398c397
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int* char*         source, 
397,398c397
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int* destLen*         source, 
398c398
<                            char*         source, 
---
>                            source, 
398c398
<                            char*         source, 
---
>                            char, 
398,399c398
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         unsigned int  sourceLen,
398,399c398
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         sourceint  sourceLen,
399c399
<                            unsigned int  sourceLen,
---
>                            sourceLen,
399c399
<                            unsigned int  sourceLen,
---
>                            unsigned ,
399,400c399
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int  int           blockSize100k, 
399,400c399
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int  sourceLenblockSize100k, 
400c400
<                            int           blockSize100k, 
---
>                            , 
400,401c400
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           int           verbosity, 
400,401c400
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100kverbosity, 
401c401
<                            int           verbosity, 
---
>                            , 
401,402c401
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           int           workFactor )
401,402c401
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosityworkFactor )
402c402
<                            int           workFactor )
---
>                            )
402,403c402
<                            int           workFactor )
< {
---
>                            int           {
402,404c402
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           workFactor bz_stream strm;
403,404c403
< {
<    bz_stream strm;
---
> strm;
404c404
<    bz_stream strm;
---
>    ;
404,405c404
<    bz_stream strm;
<    int ret;
---
>    bz_stream int ret;
404,405c404
<    bz_stream strm;
<    int ret;
---
>    bz_stream strmret;
405c405
<    int ret;
---
>    ;
405,407c405
<    int ret;
< 
<    ;
---
>    int ;
407,409d406
<    ;
<    ;
< 
(96.8 %, 6604 bytes)
404,405c404
<    ;
<    int ret;
---
>    ret;
405c405
<    int ret;
---
>    ;
405,407c405
<    int ret;
< 
<    ;
---
>    int ;
407,409d406
<    ;
<    ;
< 
407,409d406
<    ;
<    ;
< 
(96.8 %, 6593 bytes)
406,407d405
< 
<    0;
407d406
<    0;
407,408c407
<    0;
<    return ret;
---
>    0ret;
(96.8 %, 6586 bytes)
405,406c405
<    int ret;
<    return ret;
---
>    int retret;
406c406
<    return ret;
---
>    ;
(96.8 %, 6574 bytes)
405,410c405
<    int retret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    int retretint BZ_API(BZ2_bzBuffToBuffDecompress) 
406,410c406
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) 
410c410
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> (BZ2_bzBuffToBuffDecompress) 
410c410
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ2_bzBuffToBuffDecompress) 
410c410
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API) 
410,411c410
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(( char*         dest, 
410,411c410
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresschar*         dest, 
411c411
<                            ( char*         dest, 
---
>                            *         dest, 
411c411
<                            ( char*         dest, 
---
>                            ( dest, 
411c411
<                            ( char*         dest, 
---
>                            ( char, 
411,412c411
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         unsigned int* destLen,
(96.8 %, 6564 bytes)
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> ) 
410,411c410
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (( char*         dest, 
410,411c410
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (BZ2_bzBuffToBuffDecompresschar*         dest, 
411c411
<                            ( char*         dest, 
---
>                            *         dest, 
411c411
<                            ( char*         dest, 
---
>                            ( dest, 
411c411
<                            ( char*         dest, 
---
>                            ( char, 
411,412c411
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         unsigned int* destLen,
411,412c411
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destint* destLen,
412c412
<                              unsigned int* destLen,
---
>                              * destLen,
412c412
<                              unsigned int* destLen,
---
>                              unsigned destLen,
412c412
<                              unsigned int* destLen,
---
>                              unsigned int,
412,413c412
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* char*         source, 
412,413c412
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* destLen*         source, 
413c413
<                              char*         source, 
---
>                              source, 
413c413
<                              char*         source, 
---
>                              char, 
413,414c413
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         unsigned int  sourceLen,
413,414c413
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         sourceint  sourceLen,
414c414
<                              unsigned int  sourceLen,
---
>                              sourceLen,
414c414
<                              unsigned int  sourceLen,
---
>                              unsigned ,
414,415c414
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  int           small,
414,415c414
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  sourceLensmall,
415c415
<                              int           small,
---
>                              ,
415,416c415
<                              int           small,
<                              int           verbosity )
---
>                              int           int           verbosity )
415,416c415
<                              int           small,
<                              int           verbosity )
---
>                              int           smallverbosity )
416c416
<                              int           verbosity )
---
>                              )
416,417c416
<                              int           verbosity )
< {
---
>                              int           {
416,418c416
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           verbosity bz_stream strm;
417,418c417
< {
<    bz_stream strm;
---
> strm;
418c418
<    bz_stream strm;
---
>    ;
418,419c418
<    bz_stream strm;
<    int ret;
---
>    bz_stream int ret;
418,419c418
<    bz_stream strm;
<    int ret;
---
>    bz_stream strmret;
419c419
<    int ret;
---
>    ;
419,421c419
<    int ret;
< 
<    ;
---
>    int ;
419,423c419
<    int ret;
< 
<    ;
< 
<    ret ;
---
>    int retret ;
(96.8 %, 6550 bytes)
418,419c418
<    ;
<    int ret;
---
>    ret;
419c419
<    int ret;
---
>    ;
419,421c419
<    int ret;
< 
<    ;
---
>    int ;
419,423c419
<    int ret;
< 
<    ;
< 
<    ret ;
---
>    int retret ;
422,423d421
< 
<    ret ;
(96.8 %, 6538 bytes)
419,425c419
<    int retret ;
< }
< 
< 
< 
< 
< static
---
>    int retret static
420,425d419
< }
< 
< 
< 
< 
< static
425,426c425
< static
< BZFILE * bzopen_or_bzdopen
---
> * bzopen_or_bzdopen
426c426
< BZFILE * bzopen_or_bzdopen
---
> bzopen_or_bzdopen
(96.8 %, 6524 bytes)
425,426c425
< * bzopen_or_bzdopen
<                ( )      
---
> ( )      
425,426c425
< * bzopen_or_bzdopen
<                ( )      
---
> * )      
426,427c426
<                ( )      
< ;
---
>                ;
426,432c426
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( BZFILE * BZ_API(BZ2_bzopen)
427,432c427
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> * BZ_API(BZ2_bzopen)
432c432
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ_API(BZ2_bzopen)
432c432
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE (BZ2_bzopen)
432c432
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ2_bzopen)
432c432
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API)
432,433c432
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API(( const char *path,
432,433c432
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API(BZ2_bzopenconst char *path,
(96.8 %, 6514 bytes)
426,431c426
<                ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                * BZ_API(BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ_API(BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE (BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API)
431,432c431
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API(( const char *path,
431,432c431
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API(BZ2_bzopenconst char *path,
432c432
<                ( const char *path,
---
>                char *path,
432c432
<                ( const char *path,
---
>                ( *path,
432c432
<                ( const char *path,
---
>                ( const path,
432c432
<                ( const char *path,
---
>                ( const char ,
432,433c432
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *const char *mode )
432,433c432
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *pathchar *mode )
433c433
<                  const char *mode )
---
>                  *mode )
433c433
<                  const char *mode )
---
>                  const mode )
433c433
<                  const char *mode )
---
>                  const char )
433,434c433
<                  const char *mode )
< {
---
>                  const char *{
433,435c433
<                  const char *mode )
< {
<    return 0;
---
>                  const char *mode return 0;
434,435c434
< {
<    return 0;
---
> 0;
435c435
<    return 0;
---
>    ;
435,436c435
<    return 0;
< }
---
>    return }
435,440c435
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return 0BZFILE * BZ_API(BZ2_bzdopen)
436,440c436
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> * BZ_API(BZ2_bzdopen)
440c440
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZ_API(BZ2_bzdopen)
(96.8 %, 6506 bytes)
435,440c435
<    ;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    BZFILE * BZ_API(BZ2_bzdopen)
436,440c436
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> * BZ_API(BZ2_bzdopen)
440c440
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZ_API(BZ2_bzdopen)
440c440
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE (BZ2_bzdopen)
440c440
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ2_bzdopen)
440c440
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API)
440,441c440
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * BZ_API(( int fd,
440,441c440
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * BZ_API(BZ2_bzdopenint fd,
441c441
<                ( int fd,
---
>                fd,
441c441
<                ( int fd,
---
>                ( ,
441,442c441
<                ( int fd,
<                  const char *mode )
---
>                ( int const char *mode )
(96.8 %, 6497 bytes)
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ2_bzdopen)
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ_API)
440,441c440
< BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZ_API(( int fd,
440,441c440
< BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZ_API(BZ2_bzdopenint fd,
441c441
<                ( int fd,
---
>                fd,
441c441
<                ( int fd,
---
>                ( ,
441,442c441
<                ( int fd,
<                  const char *mode )
---
>                ( int const char *mode )
441,442c441
<                ( int fd,
<                  const char *mode )
---
>                ( int fdchar *mode )
442c442
<                  const char *mode )
---
>                  *mode )
442c442
<                  const char *mode )
---
>                  const mode )
442c442
<                  const char *mode )
---
>                  const char )
442,443c442
<                  const char *mode )
< {
---
>                  const char *{
442,444c442
<                  const char *mode )
< {
<    }
---
>                  const char *mode }
443,447d442
< {
<    }
< 
< 
< 
444,448c444
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (int len )
---
>    BZ_API(BZ2_bzread) (int len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> (BZ2_bzread) (int len )
(96.8 %, 6491 bytes)
442,443c442
<                  const mode )
< {
---
>                  const {
442,444c442
<                  const mode )
< {
<    }
---
>                  const mode }
443,447d442
< {
<    }
< 
< 
< 
444,448c444
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (int len )
---
>    BZ_API(BZ2_bzread) (int len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> (BZ2_bzread) (int len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> int BZ2_bzread) (int len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> int BZ_API) (int len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> int BZ_API((int len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> int BZ_API(BZ2_bzreadint len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> int BZ_API(BZ2_bzread) len )
448c448
< int BZ_API(BZ2_bzread) (int len )
---
> int BZ_API(BZ2_bzread) ()
(96.8 %, 6481 bytes)
448c448
< (BZ2_bzread) (int len )
---
> ) (int len )
448c448
< (BZ2_bzread) (int len )
---
> ((int len )
448c448
< (BZ2_bzread) (int len )
---
> (BZ2_bzreadint len )
448c448
< (BZ2_bzread) (int len )
---
> (BZ2_bzread) len )
448c448
< (BZ2_bzread) (int len )
---
> (BZ2_bzread) ()
448,449c448
< (BZ2_bzread) (int len )
< {
---
> (BZ2_bzread) (int {
448,450c448
< (BZ2_bzread) (int len )
< {
<    int bzerr, nread;
---
> (BZ2_bzread) (int len int bzerr, nread;
449,450c449
< {
<    int bzerr, nread;
---
> bzerr, nread;
450c450
<    int bzerr, nread;
---
>    , nread;
450c450
<    int bzerr, nread;
---
>    int nread;
450c450
<    int bzerr, nread;
---
>    int bzerr;
450,451c450
<    int bzerr, nread;
<    0;
---
>    int bzerr, 0;
451d450
<    0;
(96.8 %, 6473 bytes)
448,450c448
< (BZ2_bzread) ()
< {
<    int bzerr, nread;
---
> (BZ2_bzread) (int bzerr, nread;
449,450c449
< {
<    int bzerr, nread;
---
> bzerr, nread;
450c450
<    int bzerr, nread;
---
>    , nread;
450c450
<    int bzerr, nread;
---
>    int nread;
450c450
<    int bzerr, nread;
---
>    int bzerr;
450,451c450
<    int bzerr, nread;
<    0;
---
>    int bzerr, 0;
451d450
<    0;
451d450
<    0;
(96.8 %, 6467 bytes)
450,451c450
<    int bzerr, nread;
<    nread = 0;
---
>    int bzerr, nread= 0;
451c451
<    nread = 0;
---
>    0;
(96.8 %, 6456 bytes)
450c450
<    int bzerr, nread= 0;
---
>    int bzerr, nread;
450,451c450
<    int bzerr, nread= 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread= if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
450,451c450
<    int bzerr, nread= 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread= 0(bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if == BZ_OK || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) {
(96.9 %, 6453 bytes)
450,451c450
<    int bzerr, nread;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread(bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if == BZ_OK || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (bzerr || bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (bzerr == bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_OK == BZ_STREAM_END) {
(96.9 %, 6444 bytes)
451c451
<    if (bzerr == bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == bzerr == BZ_STREAM_END) {
---
>    if (bzerr == bzerr ) {
451c451
<    if (bzerr == bzerr == BZ_STREAM_END) {
---
>    if (bzerr == bzerr == {
(96.9 %, 6435 bytes)
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == {
451,452c451
<    if (bzerr == BZ_STREAM_END) {
<       1;
---
>    if (bzerr == BZ_STREAM_END1;
451,452c451
<    if (bzerr == BZ_STREAM_END) {
<       1;
---
>    if (bzerr == BZ_STREAM_END) ;
452,453c452
<       1;
<    }
---
>       }
452,454c452
<       1;
<    }
< }
---
>       1}
453,458c453
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
454,458c454
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
458c458
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
(96.9 %, 6429 bytes)
452,457c452
<       }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
453,457c453
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ2_bzwrite) (BZFILE* b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API) (BZFILE* b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API((BZFILE* b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwriteBZFILE* b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) * b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (b, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE, void* buf, int len )
457c457
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* void* buf, int len )
(96.9 %, 6419 bytes)
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> ) (BZFILE* b, void* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> ((BZFILE* b, void* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwriteBZFILE* b, void* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) * b, void* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (b, void* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE, void* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* void* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b* buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b, buf, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b, void, int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b, void* int len )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZ2_bzwrite) (BZFILE* b, void* buf, )
457,458c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> (BZ2_bzwrite) (BZFILE* b, void* buf, int {
457,459c457
< (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> (BZ2_bzwrite) (BZFILE* b, void* buf, int len int bzerr;
458,459c458
< {
<    int bzerr;
---
> bzerr;
459c459
<    int bzerr;
---
>    ;
(96.9 %, 6413 bytes)
457,459c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
< {
<    int bzerr;
---
> (BZ2_bzwrite) (BZFILE* b, void* buflen int bzerr;
458,459c458
< {
<    int bzerr;
---
> bzerr;
459c459
<    int bzerr;
---
>    ;
459,461c459
<    int bzerr;
< 
<    {
---
>    int {
459,462c459
<    int bzerr;
< 
<    {
<       return -1;
---
>    int bzerrreturn -1;
461,462c461
<    {
<       return -1;
---
>    -1;
462c462
<       return -1;
---
>       1;
(96.9 %, 6404 bytes)
459,462c459
<    ;
< 
<    {
<       return -1;
---
>    return -1;
461,462c461
<    {
<       return -1;
---
>    -1;
462c462
<       return -1;
---
>       1;
462c462
<       return -1;
---
>       return ;
462,463c462
<       return -1;
<    }
---
>       return -}
(96.9 %, 6396 bytes)
462,463c462
<       1;
<    }
---
>       }
462,464c462
<       1;
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>       1FILE *fp = ((bzFile *)b)->handle;
463,464c463
<    }
< FILE *fp = ((bzFile *)b)->handle;
---
>    *fp = ((bzFile *)b)->handle;
464c464
< FILE *fp = ((bzFile *)b)->handle;
---
> fp = ((bzFile *)b)->handle;
464c464
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE = ((bzFile *)b)->handle;
464c464
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *((bzFile *)b)->handle;
464c464
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp (bzFile *)b)->handle;
464c464
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = bzFile *)b)->handle;
464c464
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = (*)b)->handle;
(96.9 %, 6390 bytes)
462,463c462
<       }
< FILE *fp = ((bzFile *)b)->handle;
---
>       *fp = ((bzFile *)b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> fp = ((bzFile *)b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE = ((bzFile *)b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *((bzFile *)b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp (bzFile *)b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = bzFile *)b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = (*)b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = (()b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = ((bzFile b)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = ((bzFile *)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = ((bzFile *)->handle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = ((bzFile *)bhandle;
463c463
< FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = ((bzFile *)b);
463,465c463
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *)b)->if (b==NULL){
463,465c463
< FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *)b)->handle(b==NULL){
465c465
<    if (b==NULL){
---
>    b==NULL){
465c465
<    if (b==NULL){
---
>    if ==NULL){
465c465
<    if (b==NULL){
---
>    if (NULL){
(96.9 %, 6382 bytes)
463,465c463
< FILE *fp = ((bzFile *)b);
<    
<    if (b==NULL){
---
> FILE *fp = ((bzFile *)b)(b==NULL){
465c465
<    if (b==NULL){
---
>    b==NULL){
465c465
<    if (b==NULL){
---
>    if ==NULL){
465c465
<    if (b==NULL){
---
>    if (NULL){
465c465
<    if (b==NULL){
---
>    if (b){
(96.9 %, 6379 bytes)
465c465
<    if (NULL){
---
>    if ({
465,466c465
<    if (NULL){
<       ;
---
>    if (NULL;
465,467c465
<    if (NULL){
<       ;
<       ;
---
>    if (NULL);
466,468c466
<       ;
<       ;
<    }
---
>       }
467,469c467
<       ;
<    }
< }
---
>       }
468,474c468
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    static char *bzerrorstrings[] = {
469,474c469
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> char *bzerrorstrings[] = {
474c474
< static char *bzerrorstrings[] = {
---
> *bzerrorstrings[] = {
(96.9 %, 6366 bytes)
466,472c466
<       }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       static char *bzerrorstrings[] = {
467,472c467
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> char *bzerrorstrings[] = {
472c472
< static char *bzerrorstrings[] = {
---
> *bzerrorstrings[] = {
472c472
< static char *bzerrorstrings[] = {
---
> static bzerrorstrings[] = {
472c472
< static char *bzerrorstrings[] = {
---
> static char [] = {
472c472
< static char *bzerrorstrings[] = {
---
> static char *] = {
472c472
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings= {
(96.9 %, 6354 bytes)
472c472
< *bzerrorstrings[] = {
---
> [] = {
472c472
< *bzerrorstrings[] = {
---
> *] = {
472c472
< *bzerrorstrings[] = {
---
> *bzerrorstrings= {
472c472
< *bzerrorstrings[] = {
---
> *bzerrorstrings[{
472,473c472
< *bzerrorstrings[] = {
<        "OK"
---
> *bzerrorstrings[] "OK"
472,474c472
< *bzerrorstrings[] = {
<        "OK"
<       };
---
> *bzerrorstrings[] = };
473,474c473
<        "OK"
<       };
---
>        ;
474,477c474
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
474,477c474
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
477c477
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
(96.9 %, 6351 bytes)
472,473c472
< *bzerrorstrings= {
<        "OK"
---
> *bzerrorstrings"OK"
472,474c472
< *bzerrorstrings= {
<        "OK"
<       };
---
> *bzerrorstrings= };
473,474c473
<        "OK"
<       };
---
>        ;
474,477c474
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
474,477c474
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
477c477
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
477c477
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
(96.9 %, 6340 bytes)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) (BZFILE *b, int *errnum)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ2_bzerror) (BZFILE *b, int *errnum)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API) (BZFILE *b, int *errnum)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API((BZFILE *b, int *errnum)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerrorBZFILE *b, int *errnum)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerror) *b, int *errnum)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerror) (b, int *errnum)
477c477
< * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerror) (BZFILE , int *errnum)
(96.9 %, 6332 bytes)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> ) (BZFILE *b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> ((BZFILE *b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerrorBZFILE *b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) *b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) (b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) (BZFILE , int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) (BZFILE *int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) (BZFILE *b*errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) (BZFILE *b, errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZ2_bzerror) (BZFILE *b, int )
477,478c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> (BZ2_bzerror) (BZFILE *b, int *{
477,479c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> (BZ2_bzerror) (BZFILE *b, int *errnumint err = ((bzFile *)b)->lastErr;
478,479c478
< {
<    int err = ((bzFile *)b)->lastErr;
---
> err = ((bzFile *)b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    = ((bzFile *)b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int ((bzFile *)b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err (bzFile *)b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = bzFile *)b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (*)b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (()b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile b)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)->lastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)blastErr;
479c479
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((bzFile *)b);
479,480c479
<    int err = ((bzFile *)b)->lastErr;
<    ;
---
>    int err = ((bzFile *)b)->;
479,481c479
<    int err = ((bzFile *)b)->lastErr;
<    ;
< }
---
>    int err = ((bzFile *)b)->lastErr}
480,509c480
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    
\ No newline at end of file
481,509d480
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(96.9 %, 6323 bytes)
479,481c479
<    int err = ((bzFile *)b);
<    ;
< }
---
>    int err = ((bzFile *)b)}
480,509c480
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    
\ No newline at end of file
481,509d480
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #define BZ_OK                3
---
> define BZ_OK                3
9c9
< #define BZ_OK                3
---
>  BZ_OK                3
9c9
< #define BZ_OK                3
---
> define                 3
9c9
< #define BZ_OK                3
---
>                  3
9c9
< #define BZ_OK                3
---
> define BZ_OK                
9c9
< #define BZ_OK                3
---
>  BZ_OK                
9c9
< #define BZ_OK                3
---
> define                 
9c9
< #define BZ_OK                3
---
>                  
9c9
< #define BZ_OK                3
---
> # BZ_OK                3
9c9
< #define BZ_OK                3
---
> #                 3
(96.9 %, 6310 bytes)
10c10
< #define BZ_STREAM_END        (-9)
---
>          -9)
10c10
< #define BZ_STREAM_END        (-9)
---
> # BZ_STREAM_END        (-9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #         (-9)
10c10
< #define BZ_STREAM_END        (-9)
---
> # BZ_STREAM_END        -9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #         -9)
10c10
< #define BZ_STREAM_END        (-9)
---
> # BZ_STREAM_END        (9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #         (9)
10c10
< #define BZ_STREAM_END        (-9)
---
> # BZ_STREAM_END        9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #         9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         (-9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         -9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         (9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         (-)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         -)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         ()
10c10
< #define BZ_STREAM_END        (-9)
---
> #define         )
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        -9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        9)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        -)
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        )
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        -9
10c10
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        9
(96.9 %, 6308 bytes)
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        9
13c13
<    struct {
---
>     {
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        
13c13
<    struct {
---
>     {
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        9
12,13c12,13
< typedef 
<    struct {
---
>  
>     {
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        
12,13c12,13
< typedef 
<    struct {
---
>  
>     {
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
12c12
< typedef 
---
>  
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
13c13
<    struct {
---
>     {
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
12,13c12,13
< typedef 
<    struct {
---
>  
>     {
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
13c13
<    struct {
---
>    struct 
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
12,13c12,13
< typedef 
<    struct {
---
>  
>    struct 
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
13c13
<    struct {
---
>     
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        -
12,13c12,13
< typedef 
<    struct {
---
>  
>     
12c12
< typedef 
---
>  
12,13c12,13
< typedef 
<    struct {
---
>  
>     {
12,13c12,13
< typedef 
<    struct {
---
>  
>    struct 
12,13c12,13
< typedef 
<    struct {
---
>  
>     
12c12
< typedef 
---
>  
14c14
<       char ;
---
>        ;
12,14c12,14
< typedef 
<    struct {
<       char ;
---
>  
>     {
>        ;
12,14c12,14
< typedef 
<    struct {
<       char ;
---
>  
>    struct 
>        ;
12,14c12,14
< typedef 
<    struct {
<       char ;
---
>  
>     
>        ;
13c13
<    struct {
---
>     {
13c13
<    struct {
---
>     
13,14c13,14
<    struct {
<       char ;
---
>     {
>        ;
13,14c13,14
<    struct {
<       char ;
---
>     
>        ;
13,14c13,14
<    struct {
<       char ;
---
>     {
>       char 
13,14c13,14
<    struct {
<       char ;
---
>     
>       char 
13,14c13,14
<    struct {
<       char ;
---
>     {
>        
13,14c13,14
<    struct {
<       char ;
---
>     
>        
13c13
<    struct {
---
>    struct 
13,14c13,14
<    struct {
<       char ;
---
>    struct 
>        ;
13,14c13,14
<    struct {
<       char ;
---
>    struct 
>       char 
13,14c13,14
<    struct {
<       char ;
---
>    struct 
>        
13c13
<    struct {
---
>    struct 
15c15
<       unsigned *state;
---
>        *state;
13,15c13,15
<    struct {
<       char ;
<       unsigned *state;
---
>    struct 
>        ;
>        *state;
13,15c13,15
<    struct {
<       char ;
<       unsigned *state;
---
>    struct 
>       char 
>        *state;
13,15c13,15
<    struct {
<       char ;
<       unsigned *state;
---
>    struct 
>        
>        *state;
14c14
<       char ;
---
>        ;
14c14
<       char ;
---
>        
(96.9 %, 6304 bytes)
14c14
<        ;
---
>        
14,15c14,15
<        ;
<       unsigned *state;
---
>        
>        *state;
14,15c14,15
<        ;
<       unsigned *state;
---
>        
>       unsigned state;
(96.9 %, 6303 bytes)
15c15
<       unsigned *state;
---
>        *state;
15c15
<       unsigned *state;
---
>        state;
15c15
<       unsigned *state;
---
>        *;
15c15
<       unsigned *state;
---
>        ;
15c15
<       unsigned *state;
---
>        *state
15c15
<       unsigned *state;
---
>        state
15c15
<       unsigned *state;
---
>        *
15c15
<       unsigned *state;
---
>        
(96.9 %, 6289 bytes)
15c15
<        ;
---
>        
17c17
<       void *(*bzalloc)(void **);
---
>        (*bzalloc)(void **);
15c15
<        ;
---
>        
17c17
<       void *(*bzalloc)(void **);
---
>       void **bzalloc)(void **);
15c15
<        ;
---
>        
17c17
<       void *(*bzalloc)(void **);
---
>        **bzalloc)(void **);
15c15
<        ;
---
>        
17c17
<       void *(*bzalloc)(void **);
---
>       void *bzalloc)(void **);
15c15
<        ;
---
>        
17c17
<       void *(*bzalloc)(void **);
---
>        *bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        *(*bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        (*bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        **bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        *bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        *(bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        (bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        *bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>        bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void (*bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void *bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void (bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void bzalloc)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void (*)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void *)(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void ()(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void )(void **);
17c17
<       void *(*bzalloc)(void **);
---
>       void **bzalloc)(void **);
(96.9 %, 6288 bytes)
17c17
<       void (*bzalloc)(void **);
---
>       void *bzalloc)(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void bzalloc)(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void *)(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void )(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void *bzalloc(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void bzalloc(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void *(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (bzalloc)(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void ()(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (bzalloc(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void ((void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (bzalloc)void **);
17c17
<       void (*bzalloc)(void **);
---
>       void ()void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (bzallocvoid **);
17c17
<       void (*bzalloc)(void **);
---
>       void (void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*)(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*)void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*)( **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*( **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*) **);
17c17
<       void (*bzalloc)(void **);
---
>       void (* **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc(void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzallocvoid **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc( **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc(void *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzallocvoid *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc( *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)void **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc) **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)void *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc) *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)void *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc) *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)void );
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc) );
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( **);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( *);
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( );
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( **;
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( *;
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( *;
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)( ;
17c17
<       void (*bzalloc)(void **);
---
>       void (*bzalloc)(void *);
(96.9 %, 6282 bytes)
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( 
>        ;
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( ;
>       void 
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( 
>       void 
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( ;
>        
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( 
>        
17c17
<       void (*bzalloc)( );
---
>       void (*bzalloc)( )
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( )
>        ;
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( )
>       void 
17,18c17,18
<       void (*bzalloc)( );
<       void ;
---
>       void (*bzalloc)( )
>        
(96.9 %, 6277 bytes)
18,19c18,19
<        ;
<    } 
---
>        
>     
18c18
<        ;
---
>        
20c20
<    bz_stream;
---
>    ;
18,20c18,20
<        ;
<    } 
<    bz_stream;
---
>        
>     
>    ;
18c18
<        ;
---
>        
20c20
<    bz_stream;
---
>    bz_stream
18,20c18,20
<        ;
<    } 
<    bz_stream;
---
>        
>     
>    bz_stream
18c18
<        ;
---
>        
20c20
<    bz_stream;
---
>    
18,20c18,20
<        ;
<    } 
<    bz_stream;
---
>        
>     
>    
19c19
<    } 
---
>     
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    ;
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    bz_stream
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    
19c19
<    } 
---
>     
24c24
< #include <stdio.h>
---
> include <stdio.h>
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    ;
24c24
< #include <stdio.h>
---
> include <stdio.h>
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    bz_stream
24c24
< #include <stdio.h>
---
> include <stdio.h>
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    ;
20c20
<    bz_stream;
---
>    
20c20
<    bz_stream;
---
>    ;
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    ;
24c24
< #include <stdio.h>
---
> # <stdio.h>
20c20
<    bz_stream;
---
>    
24c24
< #include <stdio.h>
---
> # <stdio.h>
20c20
<    bz_stream;
---
>    ;
24c24
< #include <stdio.h>
---
>  <stdio.h>
20c20
<    bz_stream;
---
>    
24c24
< #include <stdio.h>
---
>  <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> # <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
>  <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> #include stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> include stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> # stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
>  stdio.h>
24c24
< #include <stdio.h>
---
> include <stdio.h>
24c24
< #include <stdio.h>
---
>  <stdio.h>
24c24
< #include <stdio.h>
---
> include stdio.h>
24c24
< #include <stdio.h>
---
>  stdio.h>
24c24
< #include <stdio.h>
---
> include <.h>
24c24
< #include <stdio.h>
---
>  <.h>
24c24
< #include <stdio.h>
---
> include .h>
24c24
< #include <stdio.h>
---
>  .h>
24c24
< #include <stdio.h>
---
> # <stdio.h>
24c24
< #include <stdio.h>
---
> # stdio.h>
24c24
< #include <stdio.h>
---
> # <.h>
24c24
< #include <stdio.h>
---
> # .h>
24c24
< #include <stdio.h>
---
> # <stdioh>
24c24
< #include <stdio.h>
---
> # stdioh>
24c24
< #include <stdio.h>
---
> # <h>
24c24
< #include <stdio.h>
---
> # h>
24c24
< #include <stdio.h>
---
> #include stdio.h>
24c24
< #include <stdio.h>
---
> #include .h>
24c24
< #include <stdio.h>
---
> #include stdioh>
24c24
< #include <stdio.h>
---
> #include h>
24c24
< #include <stdio.h>
---
> #include stdio.>
24c24
< #include <stdio.h>
---
> #include .>
24c24
< #include <stdio.h>
---
> #include stdio>
24c24
< #include <stdio.h>
---
> #include >
24c24
< #include <stdio.h>
---
> #include <.h>
24c24
< #include <stdio.h>
---
> #include <h>
24c24
< #include <stdio.h>
---
> #include <.>
24c24
< #include <stdio.h>
---
> #include <>
24c24
< #include <stdio.h>
---
> #include <.h
24c24
< #include <stdio.h>
---
> #include <h
24c24
< #include <stdio.h>
---
> #include <.
24c24
< #include <stdio.h>
---
> #include <
24c24
< #include <stdio.h>
---
> #include <stdioh>
24c24
< #include <stdio.h>
---
> #include <stdio>
24c24
< #include <stdio.h>
---
> #include <stdioh
24c24
< #include <stdio.h>
---
> #include <stdio
24c24
< #include <stdio.h>
---
> #include <stdioh>
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio>
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdioh
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.>
24c24
< #include <stdio.h>
---
> #include <stdio.
24c24
< #include <stdio.h>
---
> #include <stdio.>
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.>
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.>
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
> #   define (func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>    define (func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
> #    (func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>     (func) func
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
>    define (func) func
26c26
< #   define BZ_API(func) func
---
>     (func) func
26c26
< #   define BZ_API(func) func
---
>    define BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
>     BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
>    define func) func
26c26
< #   define BZ_API(func) func
---
>     func) func
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
> #    (func) func
26c26
< #   define BZ_API(func) func
---
> #    BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
> #    func) func
26c26
< #   define BZ_API(func) func
---
> #    BZ_API() func
26c26
< #   define BZ_API(func) func
---
> #    () func
26c26
< #   define BZ_API(func) func
---
> #    BZ_API) func
26c26
< #   define BZ_API(func) func
---
> #    ) func
26c26
< #   define BZ_API(func) func
---
> #   define (func) func
26c26
< #   define BZ_API(func) func
---
> #   define func) func
26c26
< #   define BZ_API(func) func
---
> #   define () func
26c26
< #   define BZ_API(func) func
---
> #   define ) func
26c26
< #   define BZ_API(func) func
---
> #   define (func func
26c26
< #   define BZ_API(func) func
---
> #   define func func
26c26
< #   define BZ_API(func) func
---
> #   define ( func
26c26
< #   define BZ_API(func) func
---
> #   define  func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API) func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API) 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API() func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API( func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API() 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API( 
26,27c26,27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_API() func
>    define BZ_EXTERN ;
26,27c26,27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_API( func
>    define BZ_EXTERN ;
26,27c26,27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_API() 
>    define BZ_EXTERN ;
(96.9 %, 6267 bytes)
27c27
< #   define BZ_EXTERN ;
---
>      
27c27
< #   define BZ_EXTERN ;
---
> #    BZ_EXTERN ;
27c27
< #   define BZ_EXTERN ;
---
> #     ;
27c27
< #   define BZ_EXTERN ;
---
> #    BZ_EXTERN 
27c27
< #   define BZ_EXTERN ;
---
> #     
27c27
< #   define BZ_EXTERN ;
---
> #    BZ_EXTERN ;
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #     ;
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #    BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #     
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define  ;
27c27
< #   define BZ_EXTERN ;
---
> #   define  
27c27
< #   define BZ_EXTERN ;
---
> #   define  ;
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define  
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define  ;
33c33
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define  
33c33
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define  ;
33c33
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define  
33c33
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  0
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
> define  0
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
> #  0
27c27
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
33c33
< #define BZ_MAX_UNUSED 0
---
>   0
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
33c33
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
33c33
< #define BZ_MAX_UNUSED 0
---
> define  0
33c33
< #define BZ_MAX_UNUSED 0
---
>   0
33c33
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 
33c33
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 
33c33
< #define BZ_MAX_UNUSED 0
---
> define  
33c33
< #define BZ_MAX_UNUSED 0
---
>   
33c33
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
33c33
< #define BZ_MAX_UNUSED 0
---
> #  0
33c33
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
33c33
< #define BZ_MAX_UNUSED 0
---
> #  
33c33
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #  0
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #  
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  0
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  0
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  0
35c35
< typedef void BZFILE( 
---
> typedef  BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  
35c35
< typedef void BZFILE( 
---
> typedef  BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  0
35c35
< typedef void BZFILE( 
---
>   BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define  
35c35
< typedef void BZFILE( 
---
>   BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
> typedef  BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
>   BZFILE( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
> typedef void ( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
>  void ( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
> typedef  ( 
33c33
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
35c35
< typedef void BZFILE( 
---
>   ( 
35c35
< typedef void BZFILE( 
---
>  void BZFILE( 
35c35
< typedef void BZFILE( 
---
>   BZFILE( 
35c35
< typedef void BZFILE( 
---
>  void ( 
35c35
< typedef void BZFILE( 
---
>   ( 
35c35
< typedef void BZFILE( 
---
>  void BZFILE 
35c35
< typedef void BZFILE( 
---
>   BZFILE 
35c35
< typedef void BZFILE( 
---
>  void  
35c35
< typedef void BZFILE( 
---
>    
35c35
< typedef void BZFILE( 
---
> typedef  BZFILE( 
35c35
< typedef void BZFILE( 
---
> typedef  ( 
35c35
< typedef void BZFILE( 
---
> typedef  BZFILE 
35c35
< typedef void BZFILE( 
---
> typedef   
35,36c35,36
< typedef void BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE( 
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef void BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  ( 
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef void BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef void BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef   
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
(96.9 %, 6263 bytes)
35c35
< typedef  BZFILE( 
---
> typedef  ( 
35c35
< typedef  BZFILE( 
---
> typedef   
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  ( 
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef   
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  ( 
>       ) void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef   
>       ) void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  ( 
>        void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef   
>        void BZ_API(BZ2_bzReadGetUnused) ( 
35c35
< typedef  BZFILE( 
---
> typedef  BZFILE 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>       ) void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>        void BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>       )BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>       BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>       )  BZ_API(BZ2_bzReadGetUnused) ( 
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef  BZFILE 
>         BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>        void BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>         BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>        void (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN  (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>         (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       ) void BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )  BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       ) void (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )  (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       ) void BZ_APIBZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )  BZ_APIBZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       ) void BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )  BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  BZ_API() ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  () ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  BZ_API) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN  ) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void () ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void ) ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void (BZ2_bzReadGetUnused ( 
36c36
<       )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
(96.9 %, 6257 bytes)
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused) ( 
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void ) ( 
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void  ( 
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused)  
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void )  
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void   
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void () ( 
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void ( ( 
36c36
<       )BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
---
>       )BZ_EXTERN void ()  
(96.9 %, 6255 bytes)
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void  ( 
>       *    bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void   
>       *    bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void  ( 
>       int    bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void   
>       int    bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void  ( 
>           bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void   
>           bzerror, 
36c36
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
>       *    bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
>       int    bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
>           bzerror, 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
>       int*    , 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
>       *    , 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
>       int    , 
36,37c36,37
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
>           , 
37c37
<       int*    bzerror, 
---
>       *    bzerror, 
37c37
<       int*    bzerror, 
---
>           bzerror, 
37c37
<       int*    bzerror, 
---
>       *    , 
37c37
<       int*    bzerror, 
---
>           , 
37c37
<       int*    bzerror, 
---
>       *    bzerror 
37c37
<       int*    bzerror, 
---
>           bzerror 
37c37
<       int*    bzerror, 
---
>       *     
37c37
<       int*    bzerror, 
---
>            
37c37
<       int*    bzerror, 
---
>       int    bzerror, 
37c37
<       int*    bzerror, 
---
>       int    , 
37c37
<       int*    bzerror, 
---
>       int    bzerror 
37c37
<       int*    bzerror, 
---
>       int     
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int    bzerror, 
>       , 
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int    , 
>       , 
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int    bzerror 
>       , 
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int     
>       , 
37c37
<       int*    bzerror, 
---
>       int*    , 
37c37
<       int*    bzerror, 
---
>       int*     
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int*    , 
>       , 
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int*     
>       , 
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int*    , 
>       BZFILE 
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int*     
>       BZFILE 
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int*    , 
>        
37,38c37,38
<       int*    bzerror, 
<       BZFILE, 
---
>       int*     
>        
(97.0 %, 6248 bytes)
37c37
<       int*    , 
---
>       int*     
37,38c37,38
<       int*    , 
<       BZFILE, 
---
>       int*     
>       , 
37,38c37,38
<       int*    , 
<       BZFILE, 
---
>       int*     
>       BZFILE 
37,38c37,38
<       int*    , 
<       BZFILE, 
---
>       int*     
>        
37c37
<       int*    , 
---
>       int*     
39c39
<       void**  unused,  
---
>       **  unused,  
37,39c37,39
<       int*    , 
<       BZFILE, 
<       void**  unused,  
---
>       int*     
>       , 
>       **  unused,  
37,39c37,39
<       int*    , 
<       BZFILE, 
<       void**  unused,  
---
>       int*     
>       BZFILE 
>       **  unused,  
37,39c37,39
<       int*    , 
<       BZFILE, 
<       void**  unused,  
---
>       int*     
>        
>       **  unused,  
38c38
<       BZFILE, 
---
>       , 
38c38
<       BZFILE, 
---
>        
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       , 
>       **  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>        
>       **  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       , 
>       void*  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>        
>       void*  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       , 
>       *  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>        
>       *  unused,  
38c38
<       BZFILE, 
---
>       BZFILE 
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE 
>       **  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE 
>       void*  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE 
>       *  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE 
>       void*  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE 
>       *  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE 
>       void  unused,  
38,39c38,39
<       BZFILE, 
<       void**  unused,  
---
>       BZFILE 
>         unused,  
39c39
<       void**  unused,  
---
>       **  unused,  
39c39
<       void**  unused,  
---
>       *  unused,  
39c39
<       void**  unused,  
---
>       *  unused,  
39c39
<       void**  unused,  
---
>         unused,  
39c39
<       void**  unused,  
---
>       **  ,  
39c39
<       void**  unused,  
---
>       *  ,  
39c39
<       void**  unused,  
---
>       *  ,  
39c39
<       void**  unused,  
---
>         ,  
39c39
<       void**  unused,  
---
>       void*  unused,  
39c39
<       void**  unused,  
---
>       void  unused,  
39c39
<       void**  unused,  
---
>       void*  ,  
39c39
<       void**  unused,  
---
>       void  ,  
39c39
<       void**  unused,  
---
>       void*  unused  
39c39
<       void**  unused,  
---
>       void  unused  
39c39
<       void**  unused,  
---
>       void*    
39c39
<       void**  unused,  
---
>       void    
39c39
<       void**  unused,  
---
>       void*  unused,  
39c39
<       void**  unused,  
---
>       void*  ,  
39c39
<       void**  unused,  
---
>       void*  unused  
39c39
<       void**  unused,  
---
>       void*    
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void*  unused,  
>       *    );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void*  ,  
>       *    );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void*  unused  
>       *    );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void*    
>       *    );
39c39
<       void**  unused,  
---
>       void**  ,  
39c39
<       void**  unused,  
---
>       void**    
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void**  ,  
>       *    );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void**    
>       *    );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void**  ,  
>       int    );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void**    
>       int    );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void**  ,  
>           );
39,40c39,40
<       void**  unused,  
<       int*    );
---
>       void**    
>           );
39c39
<       void**  unused,  
---
>       void**  unused  
(97.0 %, 6242 bytes)
39c39
<       void**  ,  
---
>       void**    
39,40c39,40
<       void**  ,  
<       int*    );
---
>       void**    
>       *    );
39,40c39,40
<       void**  ,  
<       int*    );
---
>       void**    
>       int    );
39,40c39,40
<       void**  ,  
<       int*    );
---
>       void**    
>           );
39,40c39,40
<       void**  ,  
<       int*    );
---
>       void**    
>       int*    ;
39,40c39,40
<       void**  ,  
<       int*    );
---
>       void**    
>       *    ;
39,40c39,40
<       void**  ,  
<       int*    );
---
>       void**    
>       int    ;
39,40c39,40
<       void**  ,  
<       int*    );
---
>       void**    
>           ;
40c40
<       int*    );
---
>       *    );
40c40
<       int*    );
---
>           );
40c40
<       int*    );
---
>       *    ;
40c40
<       int*    );
---
>           ;
40c40
<       int*    );
---
>       *    )
40c40
<       int*    );
---
>           )
40c40
<       int*    );
---
>       *    
40c40
<       int*    );
---
>           
40c40
<       int*    );
---
>       int    );
40c40
<       int*    );
---
>       int    ;
40c40
<       int*    );
---
>       int    )
40c40
<       int*    );
---
>       int    
40c40
<       int*    );
---
>       int    );
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int    ;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int    
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    ;
40c40
<       int*    );
---
>       int*    
40c40
<       int*    );
---
>       int*    ;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    ;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    ;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    )
40c40
<       int*    );
---
>       int*    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteOpen) ( 
40c40
<       int*    );
---
>       int*    )
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
(97.0 %, 6241 bytes)
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN  (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN  BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE BZ_API() ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE () ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE BZ_API) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE ) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* () ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* ) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* (BZ2_bzWriteOpen ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
(97.0 %, 6235 bytes)
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen) ( 
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* ) ( 
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE*  ( 
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen)  
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* )  
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE*   
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* () ( 
42c42
< BZ_EXTERN BZFILE* (BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* ( ( 
(97.0 %, 6233 bytes)
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*  ( 
>       *  bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*   
>       *  bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*  ( 
>       int  bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*   
>       int  bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*  ( 
>         bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*   
>         bzerror,      
42c42
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
>       *  bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
>       int  bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
>         bzerror,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
>       int*  ,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
>       *  ,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
>       int  ,      
42,43c42,43
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
>         ,      
43c43
<       int*  bzerror,      
---
>       *  bzerror,      
43c43
<       int*  bzerror,      
---
>         bzerror,      
43c43
<       int*  bzerror,      
---
>       *  ,      
43c43
<       int*  bzerror,      
---
>         ,      
43c43
<       int*  bzerror,      
---
>       *  bzerror      
43c43
<       int*  bzerror,      
---
>         bzerror      
43c43
<       int*  bzerror,      
---
>       *        
43c43
<       int*  bzerror,      
---
>               
43c43
<       int*  bzerror,      
---
>       int  bzerror,      
43c43
<       int*  bzerror,      
---
>       int  ,      
43c43
<       int*  bzerror,      
---
>       int  bzerror      
43c43
<       int*  bzerror,      
---
>       int        
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror,      
>       * f, 
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int  ,      
>       * f, 
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror      
>       * f, 
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int        
>       * f, 
43c43
<       int*  bzerror,      
---
>       int*  ,      
43c43
<       int*  bzerror,      
---
>       int*        
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       * f, 
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       * f, 
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       FILE f, 
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
43,44c43,44
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>        f, 
(97.0 %, 6226 bytes)
43c43
<       int*  ,      
---
>       int*        
43,44c43,44
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * f, 
43,44c43,44
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
43,44c43,44
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        f, 
43,44c43,44
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE* , 
43,44c43,44
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * , 
43,44c43,44
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE , 
43,44c43,44
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        , 
44c44
<       FILE* f, 
---
>       * f, 
44c44
<       FILE* f, 
---
>        f, 
44c44
<       FILE* f, 
---
>       * , 
44c44
<       FILE* f, 
---
>        , 
44c44
<       FILE* f, 
---
>       * f 
44c44
<       FILE* f, 
---
>        f 
44c44
<       FILE* f, 
---
>       *  
44c44
<       FILE* f, 
---
>         
44c44
<       FILE* f, 
---
>       FILE f, 
44c44
<       FILE* f, 
---
>       FILE , 
44c44
<       FILE* f, 
---
>       FILE f 
44c44
<       FILE* f, 
---
>       FILE  
44,45c44,45
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f, 
>          blockSize100k, 
44,45c44,45
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE , 
>          blockSize100k, 
44,45c44,45
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f 
>          blockSize100k, 
44,45c44,45
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE  
>          blockSize100k, 
44c44
<       FILE* f, 
---
>       FILE* , 
44c44
<       FILE* f, 
---
>       FILE*  
44,45c44,45
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>          blockSize100k, 
44,45c44,45
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
44,45c44,45
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>       int   , 
(97.0 %, 6225 bytes)
44c44
<       FILE* , 
---
>       FILE*  
44,45c44,45
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
44,45c44,45
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   , 
44,45c44,45
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          , 
44,45c44,45
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   blockSize100k 
44,45c44,45
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k 
44,45c44,45
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int    
44,45c44,45
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>           
45c45
<       int   blockSize100k, 
---
>          blockSize100k, 
45c45
<       int   blockSize100k, 
---
>          , 
45c45
<       int   blockSize100k, 
---
>          blockSize100k 
45c45
<       int   blockSize100k, 
---
>           
45,46c45,46
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k, 
>          verbosity, 
45,46c45,46
<       int   blockSize100k, 
<       int   verbosity, 
---
>          , 
>          verbosity, 
45,46c45,46
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k 
>          verbosity, 
45,46c45,46
<       int   blockSize100k, 
<       int   verbosity, 
---
>           
>          verbosity, 
45c45
<       int   blockSize100k, 
---
>       int   , 
45c45
<       int   blockSize100k, 
---
>       int    
45,46c45,46
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>          verbosity, 
45,46c45,46
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int    
>          verbosity, 
45,46c45,46
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>       int   , 
(97.0 %, 6212 bytes)
45c45
<       int   , 
---
>       int    
45,46c45,46
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity, 
44a45
>       int    
46d46
<       int   verbosity, 
45,46c45,46
<       int   , 
<       int   verbosity, 
---
>       int    
>          , 
45,46c45,46
<       int   , 
<       int   verbosity, 
---
>       int    
>       int   verbosity 
45,46c45,46
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity 
45,46c45,46
<       int   , 
<       int   verbosity, 
---
>       int    
>       int    
45,46c45,46
<       int   , 
<       int   verbosity, 
---
>       int    
>           
46c46
<       int   verbosity, 
---
>          verbosity, 
46c46
<       int   verbosity, 
---
>          , 
46c46
<       int   verbosity, 
---
>          verbosity 
46c46
<       int   verbosity, 
---
>           
46,47c46,47
<       int   verbosity, 
<       int   );
---
>          verbosity, 
>          );
46,47c46,47
<       int   verbosity, 
<       int   );
---
>          , 
>          );
46,47c46,47
<       int   verbosity, 
<       int   );
---
>          verbosity 
>          );
46,47c46,47
<       int   verbosity, 
<       int   );
---
>           
>          );
46c46
<       int   verbosity, 
---
>       int   , 
46c46
<       int   verbosity, 
---
>       int    
46,47c46,47
<       int   verbosity, 
<       int   );
---
>       int   , 
>          );
46,47c46,47
<       int   verbosity, 
<       int   );
---
>       int    
>          );
46,47c46,47
<       int   verbosity, 
<       int   );
---
>       int   , 
>       int   ;
46,47c46,47
<       int   verbosity, 
<       int   );
---
>       int    
>       int   ;
46,47c46,47
<       int   verbosity, 
<       int   );
---
>       int   , 
>          ;
46,47c46,47
<       int   verbosity, 
<       int   );
---
>       int    
>          ;
(97.0 %, 6203 bytes)
46c46
<       int   , 
---
>       int    
46,47c46,47
<       int   , 
<       int   );
---
>       int    
>          );
46,47c46,47
<       int   , 
<       int   );
---
>       int    
>       int   ;
46,47c46,47
<       int   , 
<       int   );
---
>       int    
>          ;
46,47c46,47
<       int   , 
<       int   );
---
>       int    
>       int   )
46,47c46,47
<       int   , 
<       int   );
---
>       int    
>          )
46,47c46,47
<       int   , 
<       int   );
---
>       int    
>       int   
46,47c46,47
<       int   , 
<       int   );
---
>       int    
>          
47c47
<       int   );
---
>          );
47c47
<       int   );
---
>          ;
47c47
<       int   );
---
>          )
47c47
<       int   );
---
>          
47c47
<       int   );
---
>          );
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>          ;
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>          )
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>          
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   ;
47c47
<       int   );
---
>       int   
47c47
<       int   );
---
>       int   ;
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   ;
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   ;
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   )
47c47
<       int   );
---
>       int   )
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   )
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   )
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
47c47
<       int   );
---
>       int   )
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose) ( 
(97.0 %, 6202 bytes)
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   (BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_APIBZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_APIBZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  (BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API() ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  () ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  ) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void () ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void ) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose ( 
(97.0 %, 6196 bytes)
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose) ( 
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void ) ( 
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose ( 
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void  ( 
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose)  
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void )  
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose  
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void   
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void () ( 
49c49
< BZ_EXTERN void (BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void ( ( 
(97.0 %, 6194 bytes)
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void  ( 
>       *          bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void   
>       *          bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void  ( 
>       int          bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void   
>       int          bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void  ( 
>                 bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void   
>                 bzerror, 
49c49
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ2_bzWriteClose  
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose  
>       *          bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose  
>       int          bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose  
>                 bzerror, 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose  
>       int*          , 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose  
>       *          , 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose  
>       int          , 
49,50c49,50
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose  
>                 , 
50c50
<       int*          bzerror, 
---
>       *          bzerror, 
50c50
<       int*          bzerror, 
---
>                 bzerror, 
50c50
<       int*          bzerror, 
---
>       *          , 
50c50
<       int*          bzerror, 
---
>                 , 
50c50
<       int*          bzerror, 
---
>       *          bzerror 
50c50
<       int*          bzerror, 
---
>                 bzerror 
50c50
<       int*          bzerror, 
---
>       *           
50c50
<       int*          bzerror, 
---
>                  
50c50
<       int*          bzerror, 
---
>       int          bzerror, 
50c50
<       int*          bzerror, 
---
>       int          , 
50c50
<       int*          bzerror, 
---
>       int          bzerror 
50c50
<       int*          bzerror, 
---
>       int           
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int          bzerror, 
>       , 
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int          , 
>       , 
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int          bzerror 
>       , 
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int           
>       , 
50c50
<       int*          bzerror, 
---
>       int*          , 
50c50
<       int*          bzerror, 
---
>       int*           
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int*          , 
>       , 
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int*           
>       , 
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int*          , 
>       BZFILE 
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int*           
>       BZFILE 
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int*          , 
>        
50,51c50,51
<       int*          bzerror, 
<       BZFILE, 
---
>       int*           
>        
50c50
<       int*          bzerror, 
---
>       int*          bzerror 
(97.0 %, 6187 bytes)
50c50
<       int*          , 
---
>       int*           
50,51c50,51
<       int*          , 
<       BZFILE, 
---
>       int*           
>       , 
50,51c50,51
<       int*          , 
<       BZFILE, 
---
>       int*           
>       BZFILE 
50,51c50,51
<       int*          , 
<       BZFILE, 
---
>       int*           
>        
50c50
<       int*          , 
---
>       int*           
52c52
<       int           abandon, 
---
>                  abandon, 
50,52c50,52
<       int*          , 
<       BZFILE, 
<       int           abandon, 
---
>       int*           
>       , 
>                  abandon, 
50,52c50,52
<       int*          , 
<       BZFILE, 
<       int           abandon, 
---
>       int*           
>       BZFILE 
>                  abandon, 
50,52c50,52
<       int*          , 
<       BZFILE, 
<       int           abandon, 
---
>       int*           
>        
>                  abandon, 
51c51
<       BZFILE, 
---
>       , 
51c51
<       BZFILE, 
---
>        
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       , 
>                  abandon, 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>        
>                  abandon, 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       , 
>       int           , 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>        
>       int           , 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       , 
>                  , 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>        
>                  , 
51c51
<       BZFILE, 
---
>       BZFILE 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                  abandon, 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>       int           , 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                  , 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>       int           abandon 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                  abandon 
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>       int            
51,52c51,52
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                   
52c52
<       int           abandon, 
---
>                  abandon, 
52c52
<       int           abandon, 
---
>                  , 
52c52
<       int           abandon, 
---
>                  abandon 
52c52
<       int           abandon, 
---
>                   
52,53c52,53
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon, 
>        int* nbytes_in, 
52,53c52,53
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  , 
>        int* nbytes_in, 
52,53c52,53
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon 
>        int* nbytes_in, 
52,53c52,53
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                   
>        int* nbytes_in, 
52c52
<       int           abandon, 
---
>       int           , 
52c52
<       int           abandon, 
---
>       int            
52,53c52,53
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>        int* nbytes_in, 
52,53c52,53
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
52,53c52,53
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>       unsigned * nbytes_in, 
(97.0 %, 6180 bytes)
52c52
<       int           , 
---
>       int            
52,53c52,53
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
52,53c52,53
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned * nbytes_in, 
52,53c52,53
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        * nbytes_in, 
52,53c52,53
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned int nbytes_in, 
52,53c52,53
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int nbytes_in, 
52,53c52,53
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned  nbytes_in, 
52,53c52,53
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>         nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>        int* nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>        * nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>        int nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>         nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>        int* , 
53c53
<       unsigned int* nbytes_in, 
---
>        * , 
53c53
<       unsigned int* nbytes_in, 
---
>        int , 
53c53
<       unsigned int* nbytes_in, 
---
>         , 
53c53
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       unsigned  nbytes_in, 
53c53
<       unsigned int* nbytes_in, 
---
>       unsigned * , 
(97.0 %, 6177 bytes)
53c53
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in, 
53c53
<       unsigned * nbytes_in, 
---
>       unsigned  , 
53c53
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in 
53c53
<       unsigned * nbytes_in, 
---
>       unsigned   
53,54c53,54
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in, 
>        int* nbytes_out 
53,54c53,54
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  , 
>        int* nbytes_out 
53,54c53,54
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in 
>        int* nbytes_out 
53,54c53,54
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned   
>        int* nbytes_out 
53c53
<       unsigned * nbytes_in, 
---
>       unsigned * , 
53c53
<       unsigned * nbytes_in, 
---
>       unsigned *  
53,54c53,54
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>        int* nbytes_out 
53,54c53,54
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
53,54c53,54
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>       unsigned * nbytes_out 
(97.0 %, 6168 bytes)
53c53
<       unsigned * , 
---
>       unsigned *  
53,54c53,54
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
53,54c53,54
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned * nbytes_out 
53,54c53,54
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        * nbytes_out 
53,54c53,54
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned int nbytes_out 
53,54c53,54
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int nbytes_out 
53,54c53,54
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned  nbytes_out 
53,54c53,54
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>         nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>        int* nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>        * nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>        int nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>         nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>        int*  
54c54
<       unsigned int* nbytes_out 
---
>        *  
54c54
<       unsigned int* nbytes_out 
---
>        int  
54c54
<       unsigned int* nbytes_out 
---
>          
54c54
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_out 
54c54
<       unsigned int* nbytes_out 
---
>       unsigned *  
(97.0 %, 6165 bytes)
54c54
<       unsigned * nbytes_out 
---
>       unsigned  nbytes_out 
54c54
<       unsigned * nbytes_out 
---
>       unsigned   
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    ;
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    ;
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    )
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    )
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    
54c54
<       unsigned * nbytes_out 
---
>       unsigned *  
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    ;
54,55c54,55
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    )
(97.0 %, 6155 bytes)
55c55
<    );
---
>    ;
55c55
<    );
---
>    
55c55
<    );
---
>    ;
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    ;
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    ;
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    )
55c55
<    );
---
>    )
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    )
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    )
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
55c55
<    );
---
>    )
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64) ( 
(97.0 %, 6154 bytes)
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_APIBZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_APIBZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  (BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API() ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  () ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  ) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void () ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void ) ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64 ( 
57c57
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64 ( 
(97.0 %, 6148 bytes)
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64) ( 
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void ) ( 
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64 ( 
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void  ( 
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64)  
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void )  
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void   
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void () ( 
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void ( ( 
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void ()  
57c57
< BZ_EXTERN void (BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (  
(97.0 %, 6146 bytes)
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void  ( 
>       *          bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void   
>       *          bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void  ( 
>       int          bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void   
>       int          bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void  ( 
>                 bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void   
>                 bzerror, 
57c57
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
>       *          bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
>       int          bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
>                 bzerror, 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
>       int*          , 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
>       *          , 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
>       int          , 
57,58c57,58
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
>                 , 
58c58
<       int*          bzerror, 
---
>       *          bzerror, 
58c58
<       int*          bzerror, 
---
>                 bzerror, 
58c58
<       int*          bzerror, 
---
>       *          , 
58c58
<       int*          bzerror, 
---
>                 , 
58c58
<       int*          bzerror, 
---
>       *          bzerror 
58c58
<       int*          bzerror, 
---
>                 bzerror 
58c58
<       int*          bzerror, 
---
>       *           
58c58
<       int*          bzerror, 
---
>                  
58c58
<       int*          bzerror, 
---
>       int          bzerror, 
58c58
<       int*          bzerror, 
---
>       int          , 
58c58
<       int*          bzerror, 
---
>       int          bzerror 
58c58
<       int*          bzerror, 
---
>       int           
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int          bzerror, 
>       , 
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int          , 
>       , 
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int          bzerror 
>       , 
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int           
>       , 
58c58
<       int*          bzerror, 
---
>       int*          , 
58c58
<       int*          bzerror, 
---
>       int*           
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int*          , 
>       , 
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int*           
>       , 
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int*          , 
>       BZFILE 
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int*           
>       BZFILE 
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int*          , 
>        
58,59c58,59
<       int*          bzerror, 
<       BZFILE, 
---
>       int*           
>        
(97.0 %, 6139 bytes)
58c58
<       int*          , 
---
>       int*           
58,59c58,59
<       int*          , 
<       BZFILE, 
---
>       int*           
>       , 
58,59c58,59
<       int*          , 
<       BZFILE, 
---
>       int*           
>       BZFILE 
58,59c58,59
<       int*          , 
<       BZFILE, 
---
>       int*           
>        
58c58
<       int*          , 
---
>       int*           
60c60
<       int           abandon, 
---
>                  abandon, 
58,60c58,60
<       int*          , 
<       BZFILE, 
<       int           abandon, 
---
>       int*           
>       , 
>                  abandon, 
58,60c58,60
<       int*          , 
<       BZFILE, 
<       int           abandon, 
---
>       int*           
>       BZFILE 
>                  abandon, 
58,60c58,60
<       int*          , 
<       BZFILE, 
<       int           abandon, 
---
>       int*           
>        
>                  abandon, 
59c59
<       BZFILE, 
---
>       , 
59c59
<       BZFILE, 
---
>        
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       , 
>                  abandon, 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>        
>                  abandon, 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       , 
>       int           , 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>        
>       int           , 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       , 
>                  , 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>        
>                  , 
59c59
<       BZFILE, 
---
>       BZFILE 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                  abandon, 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>       int           , 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                  , 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>       int           abandon 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                  abandon 
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>       int            
59,60c59,60
<       BZFILE, 
<       int           abandon, 
---
>       BZFILE 
>                   
60c60
<       int           abandon, 
---
>                  abandon, 
60c60
<       int           abandon, 
---
>                  , 
60c60
<       int           abandon, 
---
>                  abandon 
60c60
<       int           abandon, 
---
>                   
60,61c60,61
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon, 
>        int* nbytes_in_lo32, 
60,61c60,61
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  , 
>        int* nbytes_in_lo32, 
60,61c60,61
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon 
>        int* nbytes_in_lo32, 
60,61c60,61
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                   
>        int* nbytes_in_lo32, 
60c60
<       int           abandon, 
---
>       int           , 
60c60
<       int           abandon, 
---
>       int            
60,61c60,61
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>        int* nbytes_in_lo32, 
60,61c60,61
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
60,61c60,61
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>       unsigned * nbytes_in_lo32, 
(97.0 %, 6132 bytes)
60c60
<       int           , 
---
>       int            
60,61c60,61
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
60,61c60,61
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned * nbytes_in_lo32, 
60,61c60,61
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        * nbytes_in_lo32, 
60,61c60,61
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned int nbytes_in_lo32, 
60,61c60,61
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int nbytes_in_lo32, 
60,61c60,61
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned  nbytes_in_lo32, 
60,61c60,61
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>         nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>        int* nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>        * nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>        int nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>         nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>        int* , 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>        * , 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>        int , 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>         , 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
61c61
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * , 
(97.0 %, 6129 bytes)
61c61
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
61c61
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  , 
61c61
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32 
61c61
<       unsigned * nbytes_in_lo32, 
---
>       unsigned   
61,62c61,62
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32, 
>        int* nbytes_in_hi32, 
61,62c61,62
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  , 
>        int* nbytes_in_hi32, 
61,62c61,62
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32 
>        int* nbytes_in_hi32, 
61,62c61,62
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned   
>        int* nbytes_in_hi32, 
61c61
<       unsigned * nbytes_in_lo32, 
---
>       unsigned * , 
61c61
<       unsigned * nbytes_in_lo32, 
---
>       unsigned *  
61,62c61,62
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>        int* nbytes_in_hi32, 
61,62c61,62
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
61,62c61,62
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>       unsigned * nbytes_in_hi32, 
(97.0 %, 6115 bytes)
61c61
<       unsigned * , 
---
>       unsigned *  
61,62c61,62
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
61,62c61,62
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned * nbytes_in_hi32, 
61,62c61,62
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        * nbytes_in_hi32, 
61,62c61,62
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned int nbytes_in_hi32, 
61,62c61,62
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int nbytes_in_hi32, 
61,62c61,62
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned  nbytes_in_hi32, 
61,62c61,62
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>         nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>        int* nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>        * nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>        int nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>         nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>        int* , 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>        * , 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>        int , 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>         , 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  , 
62c62
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32 
(97.0 %, 6112 bytes)
62c62
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
62c62
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  , 
62c62
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32 
62c62
<       unsigned * nbytes_in_hi32, 
---
>       unsigned   
62,63c62,63
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32, 
>        int* nbytes_out_lo32, 
62,63c62,63
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  , 
>        int* nbytes_out_lo32, 
62,63c62,63
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32 
>        int* nbytes_out_lo32, 
62,63c62,63
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned   
>        int* nbytes_out_lo32, 
62c62
<       unsigned * nbytes_in_hi32, 
---
>       unsigned * , 
62c62
<       unsigned * nbytes_in_hi32, 
---
>       unsigned *  
62,63c62,63
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>        int* nbytes_out_lo32, 
62,63c62,63
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
62,63c62,63
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>       unsigned * nbytes_out_lo32, 
(97.0 %, 6098 bytes)
62c62
<       unsigned * , 
---
>       unsigned *  
62,63c62,63
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
62,63c62,63
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned * nbytes_out_lo32, 
62,63c62,63
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        * nbytes_out_lo32, 
62,63c62,63
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned int nbytes_out_lo32, 
62,63c62,63
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int nbytes_out_lo32, 
62,63c62,63
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned  nbytes_out_lo32, 
62,63c62,63
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>         nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>        int* nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>        * nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>        int nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>         nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>        int* , 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>        * , 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>        int , 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>         , 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
63c63
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
(97.0 %, 6095 bytes)
63c63
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
63c63
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  , 
63c63
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32 
63c63
<       unsigned * nbytes_out_lo32, 
---
>       unsigned   
63,64c63,64
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32, 
>        int* nbytes_out_hi32
63,64c63,64
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  , 
>        int* nbytes_out_hi32
63,64c63,64
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32 
>        int* nbytes_out_hi32
63,64c63,64
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned   
>        int* nbytes_out_hi32
63c63
<       unsigned * nbytes_out_lo32, 
---
>       unsigned * , 
63c63
<       unsigned * nbytes_out_lo32, 
---
>       unsigned *  
63,64c63,64
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>        int* nbytes_out_hi32
63,64c63,64
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
63,64c63,64
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>       unsigned * nbytes_out_hi32
(97.0 %, 6080 bytes)
63c63
<       unsigned * , 
---
>       unsigned *  
63,64c63,64
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
63,64c63,64
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned * nbytes_out_hi32
63,64c63,64
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        * nbytes_out_hi32
63,64c63,64
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned int nbytes_out_hi32
63,64c63,64
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int nbytes_out_hi32
63,64c63,64
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned  nbytes_out_hi32
63,64c63,64
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>         nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>        int* nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>        * nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>        int nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>         nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>        int* 
64c64
<       unsigned int* nbytes_out_hi32
---
>        * 
64c64
<       unsigned int* nbytes_out_hi32
---
>        int 
64c64
<       unsigned int* nbytes_out_hi32
---
>         
64c64
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
64c64
<       unsigned int* nbytes_out_hi32
---
>       unsigned * 
(97.0 %, 6077 bytes)
64c64
<       unsigned * nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
64c64
<       unsigned * nbytes_out_hi32
---
>       unsigned  
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    ;
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    ;
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    )
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    )
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    
64c64
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    ;
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    )
64,65c64,65
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    
64c64
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress) ( 
(97.0 %, 6062 bytes)
65c65
<    );
---
>    ;
65c65
<    );
---
>    
65c65
<    );
---
>    ;
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    ;
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    ;
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    )
65c65
<    );
---
>    )
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    )
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    )
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
65c65
<    );
---
>    )
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API() ( 
65c65
<    );
---
>    )
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> () ( 
65c65
<    );
---
>    )
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API) ( 
65c65
<    );
---
>    )
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ) ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress) ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> () ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ) ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress ( 
70c70
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress ( 
(97.0 %, 6056 bytes)
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> ) ( 
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress ( 
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
>  ( 
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress)  
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> )  
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress  
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
>   
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> () ( 
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> ( ( 
70c70
< (BZ2_bzBuffToBuffCompress) ( 
---
> ()  
(97.0 %, 6054 bytes)
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  ( 
>       *         dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   
>       *         dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  ( 
>       char         dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   
>       char         dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>  ( 
>                dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   
>                dest, 
70c70
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffCompress  
>       *         dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffCompress  
>       char         dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffCompress  
>                dest, 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffCompress  
>       char*         , 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffCompress  
>       *         , 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffCompress  
>       char         , 
70,71c70,71
< BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffCompress  
>                , 
71c71
<       char*         dest, 
---
>       *         dest, 
71c71
<       char*         dest, 
---
>                dest, 
71c71
<       char*         dest, 
---
>       *         , 
71c71
<       char*         dest, 
---
>                , 
71c71
<       char*         dest, 
---
>       *         dest 
71c71
<       char*         dest, 
---
>                dest 
71c71
<       char*         dest, 
---
>       *          
71c71
<       char*         dest, 
---
>                 
71c71
<       char*         dest, 
---
>       char         dest, 
71c71
<       char*         dest, 
---
>       char         , 
71c71
<       char*         dest, 
---
>       char         dest 
71c71
<       char*         dest, 
---
>       char          
71,72c71,72
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
71,72c71,72
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
71,72c71,72
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
71,72c71,72
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
71c71
<       char*         dest, 
---
>       char*         , 
71c71
<       char*         dest, 
---
>       char*          
71,72c71,72
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
71,72c71,72
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
71,72c71,72
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(97.0 %, 6050 bytes)
71c71
<       char*         , 
---
>       char*          
71,72c71,72
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
71,72c71,72
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
71,72c71,72
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
71,72c71,72
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
71,72c71,72
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
71,72c71,72
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
71,72c71,72
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
72c72
<       unsigned int* destLen,
---
>        int* destLen,
72c72
<       unsigned int* destLen,
---
>        * destLen,
72c72
<       unsigned int* destLen,
---
>        int destLen,
72c72
<       unsigned int* destLen,
---
>         destLen,
72c72
<       unsigned int* destLen,
---
>        int* ,
72c72
<       unsigned int* destLen,
---
>        * ,
72c72
<       unsigned int* destLen,
---
>        int ,
72c72
<       unsigned int* destLen,
---
>         ,
72c72
<       unsigned int* destLen,
---
>       unsigned * destLen,
72c72
<       unsigned int* destLen,
---
>       unsigned  destLen,
72c72
<       unsigned int* destLen,
---
>       unsigned * ,
(97.0 %, 6047 bytes)
72c72
<       unsigned * destLen,
---
>       unsigned  destLen,
72c72
<       unsigned * destLen,
---
>       unsigned  ,
72c72
<       unsigned * destLen,
---
>       unsigned  destLen
72c72
<       unsigned * destLen,
---
>       unsigned  
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
72c72
<       unsigned * destLen,
---
>       unsigned * ,
72c72
<       unsigned * destLen,
---
>       unsigned * 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
72,73c72,73
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
72c72
<       unsigned * destLen,
---
>       unsigned * destLen
(97.1 %, 6040 bytes)
72c72
<       unsigned * ,
---
>       unsigned * 
72,73c72,73
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
72,73c72,73
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
72,73c72,73
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
72,73c72,73
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
72,73c72,73
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
72,73c72,73
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
72,73c72,73
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
73c73
<       char*         source, 
---
>       *         source, 
73c73
<       char*         source, 
---
>                source, 
73c73
<       char*         source, 
---
>       *         , 
73c73
<       char*         source, 
---
>                , 
73c73
<       char*         source, 
---
>       *         source 
73c73
<       char*         source, 
---
>                source 
73c73
<       char*         source, 
---
>       *          
73c73
<       char*         source, 
---
>                 
73c73
<       char*         source, 
---
>       char         source, 
73c73
<       char*         source, 
---
>       char         , 
73c73
<       char*         source, 
---
>       char         source 
73c73
<       char*         source, 
---
>       char          
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char         source, 
>        ,
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char         , 
>        ,
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char         source 
>        ,
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char          
>        ,
73c73
<       char*         source, 
---
>       char*         , 
73c73
<       char*         source, 
---
>       char*          
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>        ,
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char*          
>        ,
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>       unsigned 
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char*          
>       unsigned 
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>        
73,74c73,74
<       char*         source, 
<       unsigned ,
---
>       char*          
>        
(97.1 %, 6034 bytes)
73c73
<       char*         , 
---
>       char*          
73,74c73,74
<       char*         , 
<       unsigned ,
---
>       char*          
>        ,
73,74c73,74
<       char*         , 
<       unsigned ,
---
>       char*          
>       unsigned 
73,74c73,74
<       char*         , 
<       unsigned ,
---
>       char*          
>        
73c73
<       char*         , 
---
>       char*          
75c75
<       int           blockSize100k, 
---
>                  blockSize100k, 
73,75c73,75
<       char*         , 
<       unsigned ,
<       int           blockSize100k, 
---
>       char*          
>        ,
>                  blockSize100k, 
73,75c73,75
<       char*         , 
<       unsigned ,
<       int           blockSize100k, 
---
>       char*          
>       unsigned 
>                  blockSize100k, 
73,75c73,75
<       char*         , 
<       unsigned ,
<       int           blockSize100k, 
---
>       char*          
>        
>                  blockSize100k, 
74c74
<       unsigned ,
---
>        ,
74c74
<       unsigned ,
---
>        
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>        ,
>                  blockSize100k, 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>        
>                  blockSize100k, 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>        ,
>       int           , 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>        
>       int           , 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>        ,
>                  , 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>        
>                  , 
74c74
<       unsigned ,
---
>       unsigned 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned 
>                  blockSize100k, 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned 
>       int           , 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned 
>                  , 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned 
>       int           blockSize100k 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned 
>                  blockSize100k 
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned 
>       int            
74,75c74,75
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned 
>                   
75c75
<       int           blockSize100k, 
---
>                  blockSize100k, 
75c75
<       int           blockSize100k, 
---
>                  , 
75c75
<       int           blockSize100k, 
---
>                  blockSize100k 
75c75
<       int           blockSize100k, 
---
>                   
75,76c75,76
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k, 
>                  verbosity, 
75,76c75,76
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  , 
>                  verbosity, 
75,76c75,76
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k 
>                  verbosity, 
75,76c75,76
<       int           blockSize100k, 
<       int           verbosity, 
---
>                   
>                  verbosity, 
75c75
<       int           blockSize100k, 
---
>       int           , 
75c75
<       int           blockSize100k, 
---
>       int            
75,76c75,76
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>                  verbosity, 
75,76c75,76
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
75,76c75,76
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>       int           , 
(97.1 %, 6021 bytes)
75c75
<       int           , 
---
>       int            
75,76c75,76
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
74a75
>       int            
76d76
<       int           verbosity, 
75,76c75,76
<       int           , 
<       int           verbosity, 
---
>       int            
>                  , 
75,76c75,76
<       int           , 
<       int           verbosity, 
---
>       int            
>       int           verbosity 
75,76c75,76
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity 
75,76c75,76
<       int           , 
<       int           verbosity, 
---
>       int            
>       int            
75,76c75,76
<       int           , 
<       int           verbosity, 
---
>       int            
>                   
76c76
<       int           verbosity, 
---
>                  verbosity, 
76c76
<       int           verbosity, 
---
>                  , 
76c76
<       int           verbosity, 
---
>                  verbosity 
76c76
<       int           verbosity, 
---
>                   
76,77c76,77
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity, 
>                  workFactor 
76,77c76,77
<       int           verbosity, 
<       int           workFactor 
---
>                  , 
>                  workFactor 
76,77c76,77
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity 
>                  workFactor 
76,77c76,77
<       int           verbosity, 
<       int           workFactor 
---
>                   
>                  workFactor 
76c76
<       int           verbosity, 
---
>       int           , 
76c76
<       int           verbosity, 
---
>       int            
76,77c76,77
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>                  workFactor 
76,77c76,77
<       int           verbosity, 
<       int           workFactor 
---
>       int            
>                  workFactor 
76,77c76,77
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>       int            
(97.1 %, 6012 bytes)
76c76
<       int           , 
---
>       int            
76,77c76,77
<       int           , 
<       int           workFactor 
---
>       int            
>                  workFactor 
76,77c76,77
<       int           , 
<       int           workFactor 
---
>       int            
>       int            
76,77c76,77
<       int           , 
<       int           workFactor 
---
>       int            
>                   
76c76
<       int           , 
---
>       int            
78c78
<    );
---
>    ;
76,78c76,78
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                  workFactor 
>    ;
76,78c76,78
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>       int            
>    ;
76,78c76,78
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                   
>    ;
77c77
<       int           workFactor 
---
>                  workFactor 
77c77
<       int           workFactor 
---
>                   
77,78c77,78
<       int           workFactor 
<    );
---
>                  workFactor 
>    ;
77,78c77,78
<       int           workFactor 
<    );
---
>                   
>    ;
77,78c77,78
<       int           workFactor 
<    );
---
>                  workFactor 
>    )
77,78c77,78
<       int           workFactor 
<    );
---
>                   
>    )
77,78c77,78
<       int           workFactor 
<    );
---
>                  workFactor 
>    
77,78c77,78
<       int           workFactor 
<    );
---
>                   
>    
77c77
<       int           workFactor 
---
>       int            
77,78c77,78
<       int           workFactor 
<    );
---
>       int            
>    ;
77,78c77,78
<       int           workFactor 
<    );
---
>       int            
>    )
77,78c77,78
<       int           workFactor 
<    );
---
>       int            
>    
77c77
<       int           workFactor 
---
>       int            
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
(97.1 %, 6002 bytes)
78c78
<    );
---
>    ;
78c78
<    );
---
>    
78c78
<    );
---
>    ;
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    ;
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    ;
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    )
78c78
<    );
---
>    )
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    )
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    )
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
78c78
<    );
---
>    )
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API() ( 
78c78
<    );
---
>    )
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> () ( 
78c78
<    );
---
>    )
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API) ( 
78c78
<    );
---
>    )
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> () ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress ( 
80c80
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress ( 
(97.1 %, 5996 bytes)
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress ( 
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
>  ( 
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress)  
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> )  
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress  
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
>   
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> () ( 
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> ( ( 
80c80
< (BZ2_bzBuffToBuffDecompress) ( 
---
> ()  
(97.1 %, 5994 bytes)
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>  ( 
>       *         dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   
>       *         dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>  ( 
>       char         dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   
>       char         dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>  ( 
>                dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   
>                dest, 
80c80
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       *         dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       char         dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>                dest, 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       char*         , 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       *         , 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>       char         , 
80,81c80,81
< BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
> BZ2_bzBuffToBuffDecompress  
>                , 
81c81
<       char*         dest, 
---
>       *         dest, 
81c81
<       char*         dest, 
---
>                dest, 
81c81
<       char*         dest, 
---
>       *         , 
81c81
<       char*         dest, 
---
>                , 
81c81
<       char*         dest, 
---
>       *         dest 
81c81
<       char*         dest, 
---
>                dest 
81c81
<       char*         dest, 
---
>       *          
81c81
<       char*         dest, 
---
>                 
81c81
<       char*         dest, 
---
>       char         dest, 
81c81
<       char*         dest, 
---
>       char         , 
81c81
<       char*         dest, 
---
>       char         dest 
81c81
<       char*         dest, 
---
>       char          
81,82c81,82
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
81,82c81,82
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
81,82c81,82
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
81,82c81,82
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
81c81
<       char*         dest, 
---
>       char*         , 
81c81
<       char*         dest, 
---
>       char*          
81,82c81,82
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
81,82c81,82
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
81,82c81,82
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(97.1 %, 5990 bytes)
81c81
<       char*         , 
---
>       char*          
81,82c81,82
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
81,82c81,82
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
81,82c81,82
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
81,82c81,82
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
81,82c81,82
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
81,82c81,82
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
81,82c81,82
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
82c82
<       unsigned int* destLen,
---
>        int* destLen,
82c82
<       unsigned int* destLen,
---
>        * destLen,
82c82
<       unsigned int* destLen,
---
>        int destLen,
82c82
<       unsigned int* destLen,
---
>         destLen,
82c82
<       unsigned int* destLen,
---
>        int* ,
82c82
<       unsigned int* destLen,
---
>        * ,
82c82
<       unsigned int* destLen,
---
>        int ,
82c82
<       unsigned int* destLen,
---
>         ,
82c82
<       unsigned int* destLen,
---
>       unsigned * destLen,
82c82
<       unsigned int* destLen,
---
>       unsigned  destLen,
82c82
<       unsigned int* destLen,
---
>       unsigned * ,
82c82
<       unsigned int* destLen,
---
>       unsigned  ,
(97.1 %, 5987 bytes)
82c82
<       unsigned * destLen,
---
>       unsigned  destLen,
82c82
<       unsigned * destLen,
---
>       unsigned  ,
82c82
<       unsigned * destLen,
---
>       unsigned  destLen
82c82
<       unsigned * destLen,
---
>       unsigned  
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
82c82
<       unsigned * destLen,
---
>       unsigned * ,
82c82
<       unsigned * destLen,
---
>       unsigned * 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
82,83c82,83
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
(97.1 %, 5980 bytes)
82c82
<       unsigned * ,
---
>       unsigned * 
82,83c82,83
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
82,83c82,83
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
82,83c82,83
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
82,83c82,83
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
82,83c82,83
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
82,83c82,83
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
82,83c82,83
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
83c83
<       char*         source, 
---
>       *         source, 
83c83
<       char*         source, 
---
>                source, 
83c83
<       char*         source, 
---
>       *         , 
83c83
<       char*         source, 
---
>                , 
83c83
<       char*         source, 
---
>       *         source 
83c83
<       char*         source, 
---
>                source 
83c83
<       char*         source, 
---
>       *          
83c83
<       char*         source, 
---
>                 
83c83
<       char*         source, 
---
>       char         source, 
83c83
<       char*         source, 
---
>       char         , 
83c83
<       char*         source, 
---
>       char         source 
83c83
<       char*         source, 
---
>       char          
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char         source, 
>        ,
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char         , 
>        ,
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char         source 
>        ,
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char          
>        ,
83c83
<       char*         source, 
---
>       char*         , 
83c83
<       char*         source, 
---
>       char*          
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>        ,
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char*          
>        ,
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>       unsigned 
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char*          
>       unsigned 
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char*         , 
>        
83,84c83,84
<       char*         source, 
<       unsigned ,
---
>       char*          
>        
83c83
<       char*         source, 
---
>       char*         source 
(97.1 %, 5974 bytes)
83c83
<       char*         , 
---
>       char*          
83,84c83,84
<       char*         , 
<       unsigned ,
---
>       char*          
>        ,
83,84c83,84
<       char*         , 
<       unsigned ,
---
>       char*          
>       unsigned 
83,84c83,84
<       char*         , 
<       unsigned ,
---
>       char*          
>        
83c83
<       char*         , 
---
>       char*          
85c85
<       int           small, 
---
>                  small, 
83,85c83,85
<       char*         , 
<       unsigned ,
<       int           small, 
---
>       char*          
>        ,
>                  small, 
83,85c83,85
<       char*         , 
<       unsigned ,
<       int           small, 
---
>       char*          
>       unsigned 
>                  small, 
83,85c83,85
<       char*         , 
<       unsigned ,
<       int           small, 
---
>       char*          
>        
>                  small, 
84c84
<       unsigned ,
---
>        ,
84c84
<       unsigned ,
---
>        
84,85c84,85
<       unsigned ,
<       int           small, 
---
>        ,
>                  small, 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>        
>                  small, 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>        ,
>       int           , 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>        
>       int           , 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>        ,
>                  , 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>        
>                  , 
84c84
<       unsigned ,
---
>       unsigned 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                  small, 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>       unsigned 
>       int           , 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                  , 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>       unsigned 
>       int           small 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                  small 
84,85c84,85
<       unsigned ,
<       int           small, 
---
>       unsigned 
>       int            
84,85c84,85
<       unsigned ,
<       int           small, 
---
>       unsigned 
>                   
85c85
<       int           small, 
---
>                  small, 
85c85
<       int           small, 
---
>                  , 
85c85
<       int           small, 
---
>                  small 
85c85
<       int           small, 
---
>                   
85,86c85,86
<       int           small, 
<       int           );
---
>                  small, 
>                  );
85,86c85,86
<       int           small, 
<       int           );
---
>                  , 
>                  );
85,86c85,86
<       int           small, 
<       int           );
---
>                  small 
>                  );
85,86c85,86
<       int           small, 
<       int           );
---
>                   
>                  );
85c85
<       int           small, 
---
>       int           , 
85c85
<       int           small, 
---
>       int            
85,86c85,86
<       int           small, 
<       int           );
---
>       int           , 
>                  );
85,86c85,86
<       int           small, 
<       int           );
---
>       int            
>                  );
85,86c85,86
<       int           small, 
<       int           );
---
>       int           , 
>       int           ;
85,86c85,86
<       int           small, 
<       int           );
---
>       int            
>       int           ;
85,86c85,86
<       int           small, 
<       int           );
---
>       int           , 
>                  ;
85,86c85,86
<       int           small, 
<       int           );
---
>       int            
>                  ;
(97.1 %, 5969 bytes)
85c85
<       int           , 
---
>       int            
85,86c85,86
<       int           , 
<       int           );
---
>       int            
>                  );
85,86c85,86
<       int           , 
<       int           );
---
>       int            
>       int           ;
85,86c85,86
<       int           , 
<       int           );
---
>       int            
>                  ;
85,86c85,86
<       int           , 
<       int           );
---
>       int            
>       int           )
85,86c85,86
<       int           , 
<       int           );
---
>       int            
>                  )
85,86c85,86
<       int           , 
<       int           );
---
>       int            
>       int           
85,86c85,86
<       int           , 
<       int           );
---
>       int            
>                  
86c86
<       int           );
---
>                  );
86c86
<       int           );
---
>                  ;
86c86
<       int           );
---
>                  )
86c86
<       int           );
---
>                  
86c86
<       int           );
---
>                  );
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>                  ;
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>                  )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>                  
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           ;
86c86
<       int           );
---
>       int           
86c86
<       int           );
---
>       int           ;
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           ;
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           ;
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           )
86c86
<       int           );
---
>       int           )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE  BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN   BZ_API(BZ2_bzopen) (
86c86
<       int           );
---
>       int           )
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
(97.1 %, 5968 bytes)
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE  BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE  (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN   BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN   (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_APIBZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN   BZ_APIBZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN   BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  BZ_API(BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  BZ_APIBZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  BZ_API() (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  () (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  BZ_API) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  ) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * (BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * () (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * ) (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * (BZ2_bzopen (
88c88
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ2_bzopen (
(97.1 %, 5962 bytes)
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ2_bzopen) (
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * ) (
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ2_bzopen (
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE *  (
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ2_bzopen) 
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * ) 
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE *  
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * () (
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * ( (
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * () 
88c88
< BZ_EXTERN BZFILE * (BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * ( 
(97.1 %, 5960 bytes)
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE *  (
>        char *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE *  
>        char *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE *  (
>       const  *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE *  
>       const  *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE *  (
>         *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE *  
>         *path,
88c88
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
>        char *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
>       const  *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
>         *path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
>       const char path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
>        char path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
>       const  path,
88,89c88,89
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
>         path,
89c89
<       const char *path,
---
>        char *path,
89c89
<       const char *path,
---
>         *path,
89c89
<       const char *path,
---
>        char path,
89c89
<       const char *path,
---
>         path,
89c89
<       const char *path,
---
>        char *,
89c89
<       const char *path,
---
>         *,
89c89
<       const char *path,
---
>        char ,
89c89
<       const char *path,
---
>         ,
89c89
<       const char *path,
---
>       const  *path,
89c89
<       const char *path,
---
>       const  path,
89c89
<       const char *path,
---
>       const  *,
89c89
<       const char *path,
---
>       const  ,
89c89
<       const char *path,
---
>       const  *path
89c89
<       const char *path,
---
>       const  path
89c89
<       const char *path,
---
>       const  *
89c89
<       const char *path,
---
>       const  
89c89
<       const char *path,
---
>       const char path,
89c89
<       const char *path,
---
>       const char ,
89c89
<       const char *path,
---
>       const char path
89c89
<       const char *path,
---
>       const char 
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char path,
>        char *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char ,
>        char *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char path
>        char *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char 
>        char *mode
89c89
<       const char *path,
---
>       const char *,
89c89
<       const char *path,
---
>       const char *
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char *,
>        char *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char *
>        char *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char *,
>       const  *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char *
>       const  *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char *,
>         *mode
89,90c89,90
<       const char *path,
<       const char *mode
---
>       const char *
>         *mode
(97.1 %, 5956 bytes)
89c89
<       const char *,
---
>       const char *
89,90c89,90
<       const char *,
<       const char *mode
---
>       const char *
>        char *mode
89,90c89,90
<       const char *,
<       const char *mode
---
>       const char *
>       const  *mode
89,90c89,90
<       const char *,
<       const char *mode
---
>       const char *
>         *mode
89,90c89,90
<       const char *,
<       const char *mode
---
>       const char *
>       const char mode
89,90c89,90
<       const char *,
<       const char *mode
---
>       const char *
>        char mode
89,90c89,90
<       const char *,
<       const char *mode
---
>       const char *
>       const  mode
89,90c89,90
<       const char *,
<       const char *mode
---
>       const char *
>         mode
90c90
<       const char *mode
---
>        char *mode
90c90
<       const char *mode
---
>         *mode
90c90
<       const char *mode
---
>        char mode
90c90
<       const char *mode
---
>         mode
90c90
<       const char *mode
---
>        char *
90c90
<       const char *mode
---
>         *
90c90
<       const char *mode
---
>        char 
90c90
<       const char *mode
---
>         
90c90
<       const char *mode
---
>       const  *mode
90c90
<       const char *mode
---
>       const  mode
90c90
<       const char *mode
---
>       const  *
90c90
<       const char *mode
---
>       const  
90,91c90,91
<       const char *mode
<    );
---
>       const  *mode
>    ;
90,91c90,91
<       const char *mode
<    );
---
>       const  mode
>    ;
90,91c90,91
<       const char *mode
<    );
---
>       const  *
>    ;
90,91c90,91
<       const char *mode
<    );
---
>       const  
>    ;
90c90
<       const char *mode
---
>       const char mode
90c90
<       const char *mode
---
>       const char 
90,91c90,91
<       const char *mode
<    );
---
>       const char mode
>    ;
90,91c90,91
<       const char *mode
<    );
---
>       const char 
>    ;
90,91c90,91
<       const char *mode
<    );
---
>       const char mode
>    )
90,91c90,91
<       const char *mode
<    );
---
>       const char 
>    )
90,91c90,91
<       const char *mode
<    );
---
>       const char mode
>    
90,91c90,91
<       const char *mode
<    );
---
>       const char 
>    
90c90
<       const char *mode
---
>       const char *
90,91c90,91
<       const char *mode
<    );
---
>       const char *
>    ;
90,91c90,91
<       const char *mode
<    );
---
>       const char *
>    )
90,91c90,91
<       const char *mode
<    );
---
>       const char *
>    
90c90
<       const char *mode
---
>       const char *
93c93
< (BZ2_bzflush);
---
> BZ2_bzflush);
90,91c90,91
<       const char *mode
<    );
---
>       const char *
>    ;
93c93
< (BZ2_bzflush);
---
> BZ2_bzflush);
90,91c90,91
<       const char *mode
<    );
---
>       const char *
>    )
93c93
< (BZ2_bzflush);
---
> BZ2_bzflush);
90,91c90,91
<       const char *mode
<    );
---
>       const char *
>    
93c93
< (BZ2_bzflush);
---
> BZ2_bzflush);
(97.1 %, 5952 bytes)
91c91
<    );
---
>    ;
91c91
<    );
---
>    
91c91
<    );
---
>    ;
93c93
< (BZ2_bzflush);
---
> BZ2_bzflush);
91c91
<    );
---
>    
93c93
< (BZ2_bzflush);
---
> BZ2_bzflush);
91c91
<    );
---
>    ;
93c93
< (BZ2_bzflush);
---
> ();
91c91
<    );
---
>    
93c93
< (BZ2_bzflush);
---
> ();
91c91
<    );
---
>    ;
93c93
< (BZ2_bzflush);
---
> );
(97.1 %, 5949 bytes)
93c93
< BZ2_bzflush);
---
> 
93c93
< BZ2_bzflush);
---
> );
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> ;
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> )
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
93d92
< BZ2_bzflush);
95c94,95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> 
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush;
93c93
< BZ2_bzflush);
---
> BZ2_bzflush
93c93
< BZ2_bzflush);
---
> BZ2_bzflush;
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush;
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush;
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
93c93
< BZ2_bzflush);
---
> BZ2_bzflush)
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  
95c95
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   
(97.1 %, 5912 bytes)
98c98
< typedef Bool;
---
>  
100c100
< typedef int             Int32;
---
>  int             Int32;
98c98
< typedef Bool;
---
> typedef ;
98c98
< typedef Bool;
---
> typedef 
98c98
< typedef Bool;
---
> typedef ;
100c100
< typedef int             Int32;
---
>  int             Int32;
98c98
< typedef Bool;
---
> typedef 
100c100
< typedef int             Int32;
---
>  int             Int32;
98c98
< typedef Bool;
---
> typedef ;
100c100
< typedef int             Int32;
---
> typedef              Int32;
98c98
< typedef Bool;
---
> typedef 
100c100
< typedef int             Int32;
---
> typedef              Int32;
98c98
< typedef Bool;
---
> typedef ;
100c100
< typedef int             Int32;
---
>               Int32;
98c98
< typedef Bool;
---
> typedef 
100c100
< typedef int             Int32;
---
>               Int32;
98c98
< typedef Bool;
---
> typedef Bool
98c98
< typedef Bool;
---
> typedef Bool
100c100
< typedef int             Int32;
---
>  int             Int32;
98c98
< typedef Bool;
---
> typedef Bool
100c100
< typedef int             Int32;
---
> typedef              Int32;
98c98
< typedef Bool;
---
> typedef Bool
100c100
< typedef int             Int32;
---
>               Int32;
98c98
< typedef Bool;
---
> typedef Bool
100c100
< typedef int             Int32;
---
> typedef int             ;
98c98
< typedef Bool;
---
> typedef Bool
100c100
< typedef int             Int32;
---
>  int             ;
98c98
< typedef Bool;
---
> typedef Bool
100c100
< typedef int             Int32;
---
> typedef              ;
98c98
< typedef Bool;
---
> typedef Bool
100c100
< typedef int             Int32;
---
>               ;
100c100
< typedef int             Int32;
---
>  int             Int32;
100c100
< typedef int             Int32;
---
>               Int32;
100c100
< typedef int             Int32;
---
>  int             ;
100c100
< typedef int             Int32;
---
>               ;
100c100
< typedef int             Int32;
---
>  int             Int32
100c100
< typedef int             Int32;
---
>               Int32
100c100
< typedef int             Int32;
---
>  int             
100c100
< typedef int             Int32;
---
>               
100c100
< typedef int             Int32;
---
> typedef              Int32;
100c100
< typedef int             Int32;
---
> typedef              ;
100c100
< typedef int             Int32;
---
> typedef              Int32
100c100
< typedef int             Int32;
---
> typedef              
100,101c100,101
< typedef int             Int32;
< typedef UInt32;
---
> typedef              Int32;
>  UInt32;
100,101c100,101
< typedef int             Int32;
< typedef UInt32;
---
> typedef              ;
>  UInt32;
100,101c100,101
< typedef int             Int32;
< typedef UInt32;
---
> typedef              Int32
>  UInt32;
100,101c100,101
< typedef int             Int32;
< typedef UInt32;
---
> typedef              
>  UInt32;
(97.1 %, 5909 bytes)
100c100
< typedef              Int32;
---
> typedef              ;
100c100
< typedef              Int32;
---
> typedef              
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              ;
>  UInt32;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              
>  UInt32;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              ;
> typedef ;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              
> typedef ;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              ;
>  ;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              
>  ;
100c100
< typedef              Int32;
---
> typedef              Int32
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              Int32
>  UInt32;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              Int32
> typedef ;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              Int32
>  ;
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              Int32
> typedef UInt32
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              Int32
>  UInt32
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              Int32
> typedef 
100,101c100,101
< typedef              Int32;
< typedef UInt32;
---
> typedef              Int32
>  
101c101
< typedef UInt32;
---
>  UInt32;
101c101
< typedef UInt32;
---
>  ;
101c101
< typedef UInt32;
---
>  UInt32
101c101
< typedef UInt32;
---
>  
101c101
< typedef UInt32;
---
>  UInt32;
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
>  ;
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
>  UInt32
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
>  
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef ;
101c101
< typedef UInt32;
---
> typedef 
101c101
< typedef UInt32;
---
> typedef ;
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef 
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef ;
105c105
< #define True  BZ_S_INPUT     2
---
> # True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef 
105c105
< #define True  BZ_S_INPUT     2
---
> # True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef ;
105c105
< #define True  BZ_S_INPUT     2
---
>  True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef 
105c105
< #define True  BZ_S_INPUT     2
---
>  True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef UInt32
101c101
< typedef UInt32;
---
> typedef UInt32
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef UInt32
105c105
< #define True  BZ_S_INPUT     2
---
> # True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef UInt32
105c105
< #define True  BZ_S_INPUT     2
---
>  True  BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef UInt32
105c105
< #define True  BZ_S_INPUT     2
---
> #define   BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef UInt32
105c105
< #define True  BZ_S_INPUT     2
---
> define   BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef UInt32
105c105
< #define True  BZ_S_INPUT     2
---
> #   BZ_S_INPUT     2
101c101
< typedef UInt32;
---
> typedef UInt32
105c105
< #define True  BZ_S_INPUT     2
---
>    BZ_S_INPUT     2
105c105
< #define True  BZ_S_INPUT     2
---
> define True  BZ_S_INPUT     2
105c105
< #define True  BZ_S_INPUT     2
---
>  True  BZ_S_INPUT     2
105c105
< #define True  BZ_S_INPUT     2
---
> define   BZ_S_INPUT     2
105c105
< #define True  BZ_S_INPUT     2
---
>    BZ_S_INPUT     2
105c105
< #define True  BZ_S_INPUT     2
---
> define True       2
105c105
< #define True  BZ_S_INPUT     2
---
>  True       2
105c105
< #define True  BZ_S_INPUT     2
---
> define        2
105c105
< #define True  BZ_S_INPUT     2
---
>         2
105c105
< #define True  BZ_S_INPUT     2
---
> # True  BZ_S_INPUT     2
105c105
< #define True  BZ_S_INPUT     2
---
> #   BZ_S_INPUT     2
105c105
< #define True  BZ_S_INPUT     2
---
> # True       2
105c105
< #define True  BZ_S_INPUT     2
---
> #        2
105c105
< #define True  BZ_S_INPUT     2
---
> # True  BZ_S_INPUT     
105c105
< #define True  BZ_S_INPUT     2
---
> #   BZ_S_INPUT     
105c105
< #define True  BZ_S_INPUT     2
---
> # True       
105c105
< #define True  BZ_S_INPUT     2
---
> #        
(97.1 %, 5889 bytes)
105c105
< #        2
---
> #        
107c107
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
105c105
< #        2
---
> #        
107c107
< #define BZ_N_RADIX 2
---
> #define  2
105c105
< #        2
---
> #        
107c107
< #define BZ_N_RADIX 2
---
> define  2
105c105
< #        2
---
> #        
107c107
< #define BZ_N_RADIX 2
---
> #  2
105c105
< #        2
---
> #        
107c107
< #define BZ_N_RADIX 2
---
>   2
107c107
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
107c107
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
107c107
< #define BZ_N_RADIX 2
---
> define  2
107c107
< #define BZ_N_RADIX 2
---
>   2
107c107
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 
107c107
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 
(97.1 %, 5872 bytes)
107,108c107,108
< #  2
< #define BZ_N_QSORT 2
---
>   2
>  BZ_N_QSORT 2
107,108c107,108
< #  2
< #define BZ_N_QSORT 2
---
>   
>  BZ_N_QSORT 2
107c107
< #  2
---
> #  
107,108c107,108
< #  2
< #define BZ_N_QSORT 2
---
> #  
> define BZ_N_QSORT 2
107,108c107,108
< #  2
< #define BZ_N_QSORT 2
---
> #  
> # BZ_N_QSORT 2
107,108c107,108
< #  2
< #define BZ_N_QSORT 2
---
> #  
>  BZ_N_QSORT 2
107,108c107,108
< #  2
< #define BZ_N_QSORT 2
---
> #  
> #define  2
107,108c107,108
< #  2
< #define BZ_N_QSORT 2
---
> #  
> define  2
106a107
> #  
108d108
< #define BZ_N_QSORT 2
(97.1 %, 5871 bytes)
108c108
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 2
108c108
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 2
108c108
< #define BZ_N_QSORT 2
---
> define  2
108c108
< #define BZ_N_QSORT 2
---
>   2
108c108
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 
108c108
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 
108c108
< #define BZ_N_QSORT 2
---
> define  
108c108
< #define BZ_N_QSORT 2
---
>   
108c108
< #define BZ_N_QSORT 2
---
> # BZ_N_QSORT 2
108c108
< #define BZ_N_QSORT 2
---
> #  2
(97.1 %, 5853 bytes)
109c109
< #define BZ_N_SHELL 8
---
>   
109c109
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 8
109c109
< #define BZ_N_SHELL 8
---
> #  8
(97.2 %, 5835 bytes)
110c110
< #define BZ_N_OVERSHOOT (2)
---
>   2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT (2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #  (2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT 2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #  2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT ()
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #  ()
110c110
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT )
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #  )
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  (2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  ()
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  )
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  (2
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  2
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  (
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define  
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2)
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT )
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 
110c110,111
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2)
> 
117d117
< typedef
110c110,111
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT )
> 
117d117
< typedef
110c110,111
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2
> 
117d117
< typedef
110c110,111
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 
> 
117d117
< typedef
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT ()
110c110
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT (
110c110,111
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT ()
> 
117d117
< typedef
(97.2 %, 5833 bytes)
110c110
< #define BZ_N_OVERSHOOT 2
---
> #define BZ_N_OVERSHOOT 
118c118
<    struct {
---
>     {
110c110
< #define BZ_N_OVERSHOOT 2
---
> #define BZ_N_OVERSHOOT 
117,118c117,118
< typedef
<    struct {
---
> 
>     {
110c110
< #define BZ_N_OVERSHOOT 2
---
> #define BZ_N_OVERSHOOT 
118c118
<    struct {
---
>    struct 
110c110
< #define BZ_N_OVERSHOOT 2
---
> #define BZ_N_OVERSHOOT 
117,118c117,118
< typedef
<    struct {
---
> 
>    struct 
110c110
< #define BZ_N_OVERSHOOT 2
---
> #define BZ_N_OVERSHOOT 
118c118
<    struct {
---
>     
110c110
< #define BZ_N_OVERSHOOT 2
---
> #define BZ_N_OVERSHOOT 
117,118c117,118
< typedef
<    struct {
---
> 
>     
117c117
< typedef
---
> 
117,118c117,118
< typedef
<    struct {
---
> 
>     {
117,118c117,118
< typedef
<    struct {
---
> 
>    struct 
117,118c117,118
< typedef
<    struct {
---
> 
>     
117c117
< typedef
---
> 
120c120
<       UInt32;
---
>       ;
117,118c117,118
< typedef
<    struct {
---
> 
>     {
120c120
<       UInt32;
---
>       ;
117,118c117,118
< typedef
<    struct {
---
> 
>    struct 
120c120
<       UInt32;
---
>       ;
117,118c117,118
< typedef
<    struct {
---
> 
>     
120c120
<       UInt32;
---
>       ;
118c118
<    struct {
---
>     {
118c118
<    struct {
---
>     
118c118
<    struct {
---
>     {
120c120
<       UInt32;
---
>       ;
118c118
<    struct {
---
>     
120c120
<       UInt32;
---
>       ;
118c118
<    struct {
---
>     {
120c120
<       UInt32;
---
>       UInt32
118c118
<    struct {
---
>     
120c120
<       UInt32;
---
>       UInt32
118c118,119
<    struct {
---
>     {
>       
120d120
<       UInt32;
118c118,119
<    struct {
---
>     
>       
120d120
<       UInt32;
118c118
<    struct {
---
>    struct 
118c118
<    struct {
---
>    struct 
120c120
<       UInt32;
---
>       ;
118c118
<    struct {
---
>    struct 
120c120
<       UInt32;
---
>       UInt32
118c118,119
<    struct {
---
>    struct 
>       
120d120
<       UInt32;
118c118
<    struct {
---
>    struct 
121c121
<       ;
---
>       
118c118
<    struct {
---
>    struct 
120d119
<       UInt32;
121a121
>       
118c118,120
<    struct {
---
>    struct 
>       
>       UInt32
120,121d121
<       UInt32;
<       ;
118c118,120
<    struct {
---
>    struct 
>       
>       
120,121d121
<       UInt32;
<       ;
120c120
<       UInt32;
---
>       ;
120c120
<       UInt32;
---
>       
120d119
<       UInt32;
121a121
>       
(97.2 %, 5827 bytes)
120c120
<       ;
---
>       
120,121c120,121
<       ;
<       ;
---
>       
>       
120c120
<       ;
---
>       
126c126
<       ;
---
>       
(97.2 %, 5826 bytes)
121c121
<       ;
---
>       
121c121
<       ;
---
>       
126c126
<       ;
---
>       
(97.2 %, 5825 bytes)
126c126
<       ;
---
>       
126,127c126,127
<       ;
<       Bool     inUse[6];
---
>       
>            inUse[6];
126,127c126,127
<       ;
<       Bool     inUse[6];
---
>       
>       Bool     [6];
126,127c126,127
<       ;
<       Bool     inUse[6];
---
>       
>            [6];
126,127c126,127
<       ;
<       Bool     inUse[6];
---
>       
>       Bool     inUse6];
126,127c126,127
<       ;
<       Bool     inUse[6];
---
>       
>            inUse6];
126,127c126,127
<       ;
<       Bool     inUse[6];
---
>       
>       Bool     6];
126,127c126,127
<       ;
<       Bool     inUse[6];
---
>       
>            6];
(97.2 %, 5824 bytes)
127c127
<       Bool     inUse[6];
---
>            inUse[6];
127c127
<       Bool     inUse[6];
---
>            [6];
127c127
<       Bool     inUse[6];
---
>            inUse6];
127c127
<       Bool     inUse[6];
---
>            6];
127c127
<       Bool     inUse[6];
---
>            inUse[];
127c127
<       Bool     inUse[6];
---
>            [];
127c127
<       Bool     inUse[6];
---
>            inUse];
127c127
<       Bool     inUse[6];
---
>            ];
127c127
<       Bool     inUse[6];
---
>       Bool     [6];
127c127
<       Bool     inUse[6];
---
>       Bool     6];
127c127
<       Bool     inUse[6];
---
>       Bool     [];
127c127
<       Bool     inUse[6];
---
>       Bool     ];
127c127
<       Bool     inUse[6];
---
>       Bool     [6;
127c127
<       Bool     inUse[6];
---
>       Bool     6;
127c127
<       Bool     inUse[6];
---
>       Bool     [;
127c127
<       Bool     inUse[6];
---
>       Bool     ;
127c127
<       Bool     inUse[6];
---
>       Bool     inUse6];
127c127
<       Bool     inUse[6];
---
>       Bool     inUse];
127c127
<       Bool     inUse[6];
---
>       Bool     inUse6;
(97.2 %, 5816 bytes)
127c127
<       Bool     ;
---
>       Bool     
130,132c130,132
<       ;
<       }
<    EState;
---
>       
>       
>    ;
130c130
<       ;
---
>       
130,131c130,131
<       ;
<       }
---
>       
>       
130c130
<       ;
---
>       
132c132
<    EState;
---
>    ;
130,132c130,132
<       ;
<       }
<    EState;
---
>       
>       
>    ;
130c130
<       ;
---
>       
132c132
<    EState;
---
>    EState
130,132c130,132
<       ;
<       }
<    EState;
---
>       
>       
>    EState
130c130
<       ;
---
>       
132c132
<    EState;
---
>    
130,132c130,132
<       ;
<       }
<    EState;
---
>       
>       
>    
131c131
<       }
---
>       
(97.2 %, 5815 bytes)
131c131
<       }
---
>       
131,132c131,132
<       }
<    EState;
---
>       
>    ;
131,132c131,132
<       }
<    EState;
---
>       
>    EState
131,132c131,132
<       }
<    EState;
---
>       
>    
131c131
<       }
---
>       
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
131,132c131,132
<       }
<    EState;
---
>       
>    ;
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
131,132c131,132
<       }
<    EState;
---
>       
>    EState
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
131,132c131,132
<       }
<    EState;
---
>       
>    
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
132c132
<    EState;
---
>    ;
132c132
<    EState;
---
>    
132c132
<    EState;
---
>    ;
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
132c132
<    EState;
---
>    
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
132c132
<    EState;
---
>    ;
142c142
< #define define MTFL_SIZE 6
---
> # define MTFL_SIZE 6
132c132
<    EState;
---
>    
142c142
< #define define MTFL_SIZE 6
---
> # define MTFL_SIZE 6
132c132
<    EState;
---
>    ;
142c142
< #define define MTFL_SIZE 6
---
>  define MTFL_SIZE 6
132c132
<    EState;
---
>    
142c142
< #define define MTFL_SIZE 6
---
>  define MTFL_SIZE 6
132c132
<    EState;
---
>    EState
132c132
<    EState;
---
>    EState
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
132c132
<    EState;
---
>    EState
142c142
< #define define MTFL_SIZE 6
---
> # define MTFL_SIZE 6
132c132
<    EState;
---
>    EState
142c142
< #define define MTFL_SIZE 6
---
>  define MTFL_SIZE 6
132c132
<    EState;
---
>    EState
142c142
< #define define MTFL_SIZE 6
---
> #define  MTFL_SIZE 6
132c132
<    EState;
---
>    EState
142c142
< #define define MTFL_SIZE 6
---
> define  MTFL_SIZE 6
132c132
<    EState;
---
>    EState
142c142
< #define define MTFL_SIZE 6
---
> #  MTFL_SIZE 6
132c132
<    EState;
---
>    EState
142c142
< #define define MTFL_SIZE 6
---
>   MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> define define MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
>  define MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> define  MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
>   MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> define define  6
142c142
< #define define MTFL_SIZE 6
---
>  define  6
142c142
< #define define MTFL_SIZE 6
---
> define   6
142c142
< #define define MTFL_SIZE 6
---
>    6
142c142
< #define define MTFL_SIZE 6
---
> # define MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> #  MTFL_SIZE 6
142c142
< #define define MTFL_SIZE 6
---
> # define  6
142c142
< #define define MTFL_SIZE 6
---
> #   6
(97.2 %, 5809 bytes)
142c142
< # define MTFL_SIZE 6
---
> #  MTFL_SIZE 6
142c142
< # define MTFL_SIZE 6
---
> #   6
142c142
< # define MTFL_SIZE 6
---
> #  MTFL_SIZE 
142c142
< # define MTFL_SIZE 6
---
> #   
(97.2 %, 5794 bytes)
142c142,143
< #   6
---
> #   
> 
148d148
< typedef
142c142
< #   6
---
> #   
149c149
<    struct {
---
>     {
142c142
< #   6
---
> #   
148,149c148,149
< typedef
<    struct {
---
> 
>     {
142c142
< #   6
---
> #   
149c149
<    struct {
---
>    struct 
142c142
< #   6
---
> #   
148,149c148,149
< typedef
<    struct {
---
> 
>    struct 
142c142
< #   6
---
> #   
149c149
<    struct {
---
>     
142c142
< #   6
---
> #   
148,149c148,149
< typedef
<    struct {
---
> 
>     
148c148
< typedef
---
> 
(97.2 %, 5786 bytes)
149c149
<    struct {
---
>     
149c149
<    struct {
---
>     {
151c151
<       unsigned ll16;
---
>        ll16;
149c149
<    struct {
---
>     
151c151
<       unsigned ll16;
---
>        ll16;
149c149
<    struct {
---
>     {
151c151
<       unsigned ll16;
---
>       unsigned ;
149c149
<    struct {
---
>     
151c151
<       unsigned ll16;
---
>       unsigned ;
149c149
<    struct {
---
>     {
151c151
<       unsigned ll16;
---
>        ;
149c149
<    struct {
---
>     
151c151
<       unsigned ll16;
---
>        ;
149c149
<    struct {
---
>    struct 
149c149
<    struct {
---
>    struct 
151c151
<       unsigned ll16;
---
>        ll16;
149c149
<    struct {
---
>    struct 
151c151
<       unsigned ll16;
---
>       unsigned ;
149c149
<    struct {
---
>    struct 
151c151
<       unsigned ll16;
---
>        ;
149c149
<    struct {
---
>    struct 
151c151
<       unsigned ll16;
---
>       unsigned ll16
149c149
<    struct {
---
>    struct 
151c151
<       unsigned ll16;
---
>        ll16
149c149
<    struct {
---
>    struct 
151c151
<       unsigned ll16;
---
>       unsigned 
149c149
<    struct {
---
>    struct 
151c151
<       unsigned ll16;
---
>        
151c151
<       unsigned ll16;
---
>        ll16;
151c151
<       unsigned ll16;
---
>        ;
151c151
<       unsigned ll16;
---
>        ll16
151c151
<       unsigned ll16;
---
>        
151,152c151,152
<       unsigned ll16;
<       unsigned ll4calculatedCombinedCRC;
---
>        ll16;
>        ll4calculatedCombinedCRC;
(97.2 %, 5774 bytes)
151,152c151,152
<        ;
<       unsigned ll4calculatedCombinedCRC;
---
>        
>        ll4calculatedCombinedCRC;
151,152c151,152
<        ;
<       unsigned ll4calculatedCombinedCRC;
---
>        
>       unsigned ;
150a151
>        
152d152
<       unsigned ll4calculatedCombinedCRC;
(97.2 %, 5749 bytes)
152c152
<       unsigned ;
---
>        ;
198c198
<    }
---
>    
152c152
<       unsigned ;
---
>        
198c198
<    }
---
>    
152c152
<       unsigned ;
---
>        ;
199c199
<    DState;
---
>    ;
152c152
<       unsigned ;
---
>        
199c199
<    DState;
---
>    ;
152c152
<       unsigned ;
---
>        ;
198,199c198,199
<    }
<    DState;
---
>    
>    ;
152c152
<       unsigned ;
---
>        
198,199c198,199
<    }
<    DState;
---
>    
>    ;
152c152
<       unsigned ;
---
>       unsigned 
152c152
<       unsigned ;
---
>       unsigned 
198c198
<    }
---
>    
152c152
<       unsigned ;
---
>       unsigned 
199c199
<    DState;
---
>    ;
152c152
<       unsigned ;
---
>       unsigned 
198,199c198,199
<    }
<    DState;
---
>    
>    ;
152c152
<       unsigned ;
---
>       unsigned 
199c199
<    DState;
---
>    DState
152c152
<       unsigned ;
---
>       unsigned 
198,199c198,199
<    }
<    DState;
---
>    
>    DState
152c152
<       unsigned ;
---
>       unsigned 
199c199
<    DState;
---
>    
152c152
<       unsigned ;
---
>       unsigned 
198,199c198,199
<    }
<    DState;
---
>    
>    
198c198
<    }
---
>    
198,199c198,199
<    }
<    DState;
---
>    
>    ;
198,199c198,199
<    }
<    DState;
---
>    
>    DState
198,199c198,199
<    }
<    DState;
---
>    
>    
198c198
<    }
---
>    
205c205
< makeMaps_e ( void )
---
>  ( void )
198,199c198,199
<    }
<    DState;
---
>    
>    ;
205c205
< makeMaps_e ( void )
---
>  ( void )
198,199c198,199
<    }
<    DState;
---
>    
>    DState
205c205
< makeMaps_e ( void )
---
>  ( void )
198,199c198,199
<    }
<    DState;
---
>    
>    
205c205
< makeMaps_e ( void )
---
>  ( void )
199c199
<    DState;
---
>    ;
199c199
<    DState;
---
>    
199c199
<    DState;
---
>    ;
205c205
< makeMaps_e ( void )
---
>  ( void )
199c199
<    DState;
---
>    
205c205
< makeMaps_e ( void )
---
>  ( void )
199c199
<    DState;
---
>    ;
205c205
< makeMaps_e ( void )
---
> makeMaps_e  void )
199c199
<    DState;
---
>    
205c205
< makeMaps_e ( void )
---
> makeMaps_e  void )
199c199
<    DState;
---
>    ;
205c205
< makeMaps_e ( void )
---
>   void )
199c199
<    DState;
---
>    
205c205
< makeMaps_e ( void )
---
>   void )
199c199
<    DState;
---
>    DState
199c199
<    DState;
---
>    DState
205c205
< makeMaps_e ( void )
---
>  ( void )
199c199
<    DState;
---
>    DState
205c205
< makeMaps_e ( void )
---
> makeMaps_e  void )
199c199
<    DState;
---
>    DState
205c205
< makeMaps_e ( void )
---
>   void )
199c199
<    DState;
---
>    DState
205c205
< makeMaps_e ( void )
---
> makeMaps_e (  )
199c199
<    DState;
---
>    DState
205c205
< makeMaps_e ( void )
---
>  (  )
(97.2 %, 5738 bytes)
205c205
<  ( void )
---
>    )
205c205
<  ( void )
---
>   void 
205c205
<  ( void )
---
>    
205,206c205,206
<  ( void )
< {
---
>   void )
> 
205,206c205,206
<  ( void )
< {
---
>    )
> 
205,206c205,206
<  ( void )
< {
---
>   void 
> 
205,206c205,206
<  ( void )
< {
---
>    
> 
205c205
<  ( void )
---
>  (  )
205c205
<  ( void )
---
>  (  
205,206c205,206
<  ( void )
< {
---
>  (  )
> 
205,206c205,206
<  ( void )
< {
---
>  (  
> 
205c205
<  ( void )
---
>  (  )
207c207
<    EState * s ;
---
>     * s ;
205c205
<  ( void )
---
>  (  
207c207
<    EState * s ;
---
>     * s ;
205,207c205,207
<  ( void )
< {
<    EState * s ;
---
>  (  )
> 
>     * s ;
205,207c205,207
<  ( void )
< {
<    EState * s ;
---
>  (  
> 
>     * s ;
(97.2 %, 5734 bytes)
205c205
<  (  )
---
>  (  
205,206c205,206
<  (  )
< {
---
>  (  
> 
205c205
<  (  )
---
>  (  
207c207
<    EState * s ;
---
>     * s ;
205,207c205,207
<  (  )
< {
<    EState * s ;
---
>  (  
> 
>     * s ;
205c205
<  (  )
---
>  (  
207c207
<    EState * s ;
---
>    EState  s ;
205,207c205,207
<  (  )
< {
<    EState * s ;
---
>  (  
> 
>    EState  s ;
205c205
<  (  )
---
>  (  
207c207
<    EState * s ;
---
>      s ;
205,207c205,207
<  (  )
< {
<    EState * s ;
---
>  (  
> 
>      s ;
206c206
< {
---
> 
206,207c206,207
< {
<    EState * s ;
---
> 
>     * s ;
206,207c206,207
< {
<    EState * s ;
---
> 
>    EState  s ;
206,207c206,207
< {
<    EState * s ;
---
> 
>      s ;
206,207c206,207
< {
<    EState * s ;
---
> 
>    EState *  ;
206,207c206,207
< {
<    EState * s ;
---
> 
>     *  ;
206,207c206,207
< {
<    EState * s ;
---
> 
>    EState   ;
206,207c206,207
< {
<    EState * s ;
---
> 
>       ;
207c207
<    EState * s ;
---
>     * s ;
207c207
<    EState * s ;
---
>      s ;
207c207
<    EState * s ;
---
>     *  ;
207c207
<    EState * s ;
---
>       ;
207c207
<    EState * s ;
---
>     * s 
207c207
<    EState * s ;
---
>      s 
207c207
<    EState * s ;
---
>     *  
207c207
<    EState * s ;
---
>       
(97.2 %, 5726 bytes)
207,209c207,209
<       ;
<    ;
<    Int32   j;
---
>       
>    
>       j;
207c207
<       ;
---
>       
209c209
<    Int32   j;
---
>    Int32   ;
207,209c207,209
<       ;
<    ;
<    Int32   j;
---
>       
>    
>    Int32   ;
(97.2 %, 5724 bytes)
208c208
<    ;
---
>    
210c210
<    Int32   zPend;
---
>       zPend;
208,210c208,210
<    ;
<    Int32   ;
<    Int32   zPend;
---
>    
>       ;
>       zPend;
208,210c208,210
<    ;
<    Int32   ;
<    Int32   zPend;
---
>    
>    Int32   
>       zPend;
208,210c208,210
<    ;
<    Int32   ;
<    Int32   zPend;
---
>    
>       
>       zPend;
209c209
<    Int32   ;
---
>       ;
(97.2 %, 5717 bytes)
209,211c209,211
<    Int32   
<       zPend;
<    ;
---
>       
>       zPend
>    
209,211c209,211
<    Int32   
<       zPend;
<    ;
---
>       
>       
>    
210c210
<       zPend;
---
>       ;
210c210
<       zPend;
---
>       
(97.2 %, 5705 bytes)
213,214c213,214
<    {
<       ;
---
>    
>       
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           (0) 
214c214
<       ;
---
>       
214c214
<       ;
---
>       
216c216
<       {
---
>       
214c214
<       ;
---
>       
218c218
<          if (0) 
---
>           (0) 
214c214
<       ;
---
>       
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           (0) 
214c214
<       ;
---
>       
218c218
<          if (0) 
---
>          if 0) 
214c214
<       ;
---
>       
216c216
<       {
---
>       
218c218
<          if (0) 
---
>          if 0) 
214c214
<       ;
---
>       
218c218
<          if (0) 
---
>           0) 
214c214
<       ;
---
>       
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           0) 
216c216
<       {
---
>       
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           (0) 
(97.2 %, 5704 bytes)
216c216
<       {
---
>       
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           (0) 
216c216
<       {
---
>       
218c218
<          if (0) 
---
>          if 0) 
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           0) 
216c216
<       {
---
>       
218c218
<          if (0) 
---
>          if () 
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           () 
216c216
<       {
---
>       
218c218
<          if (0) 
---
>          if ) 
216c216
<       {
---
>       
218c218
<          if (0) 
---
>           ) 
218c218
<          if (0) 
---
>           (0) 
218c218
<          if (0) 
---
>           0) 
218c218
<          if (0) 
---
>           () 
218c218
<          if (0) 
---
>           ) 
218c218
<          if (0) 
---
>           (0 
218c218
<          if (0) 
---
>           0 
218c218
<          if (0) 
---
>           ( 
218c218
<          if (0) 
---
>            
218c218
<          if (0) 
---
>          if 0) 
218c218
<          if (0) 
---
>          if ) 
218c218
<          if (0) 
---
>          if 0 
218c218
<          if (0) 
---
>          if  
218,219c218,219
<          if (0) 
<          {
---
>          if 0) 
>          
218,219c218,219
<          if (0) 
<          {
---
>          if ) 
>          
218,219c218,219
<          if (0) 
<          {
---
>          if 0 
>          
218,219c218,219
<          if (0) 
<          {
---
>          if  
>          
218c218
<          if (0) 
---
>          if () 
(97.2 %, 5699 bytes)
219,221c219,221
<          {
<             ;
<          }
---
>          
>             
>          
223c223
<       }
---
>       
220c220
<             ;
---
>             
220,221c220,221
<             ;
<          }
---
>             
>          
220c220
<             ;
---
>             
223c223
<       }
---
>       
220,221c220,221
<             ;
<          }
---
>             
>          
223c223
<       }
---
>       
220c220
<             ;
---
>             
224c224
<    }
---
>    
220,221c220,221
<             ;
<          }
---
>             
>          
224c224
<    }
---
>    
220c220
<             ;
---
>             
223,224c223,224
<       }
<    }
---
>       
>    
220,221c220,221
<             ;
<          }
---
>             
>          
223,224c223,224
<       }
<    }
---
>       
>    
221c221
<          }
---
>          
(97.2 %, 5698 bytes)
221c221
<          }
---
>          
221c221
<          }
---
>          
223c223
<       }
---
>       
221c221
<          }
---
>          
224c224
<    }
---
>    
221c221
<          }
---
>          
223,224c223,224
<       }
<    }
---
>       
>    
221c221
<          }
---
>          
226c226
<    }
---
>    
221c221
<          }
---
>          
223c223
<       }
---
>       
226c226
<    }
---
>    
221c221
<          }
---
>          
224c224
<    }
---
>    
226c226
<    }
---
>    
221c221
<          }
---
>          
223,224c223,224
<       }
<    }
---
>       
>    
226c226
<    }
---
>    
223c223
<       }
---
>       
223,224c223,224
<       }
<    }
---
>       
>    
223c223
<       }
---
>       
226c226
<    }
---
>    
223,224c223,224
<       }
<    }
---
>       
>    
226c226
<    }
---
>    
223c223
<       }
---
>       
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
223,224c223,224
<       }
<    }
---
>       
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
223c223
<       }
---
>       
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
223,224c223,224
<       }
<    }
---
>       
>    
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
224c224
<    }
---
>    
224c224
<    }
---
>    
226c226
<    }
---
>    
224c224
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
224c224
<    }
---
>    
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
224c224
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ_APIBZ2_bzCompressInit) 
224c224
<    }
---
>    
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ_APIBZ2_bzCompressInit) 
224c224
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
224c224
<    }
---
>    
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
226c226
<    }
---
>    
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ_APIBZ2_bzCompressInit) 
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ_API() 
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> () 
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ_API) 
226c226
<    }
---
>    
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> ) 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> () 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> ) 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit 
230c230
< BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit 
(97.2 %, 5692 bytes)
230c230
< (BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
230c230
< (BZ2_bzCompressInit) 
---
> ) 
230c230
< (BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit 
230c230
< (BZ2_bzCompressInit) 
---
>  
230,231c230,231
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> BZ2_bzCompressInit) 
>                      bz_stream* strm, 
230,231c230,231
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> ) 
>                      bz_stream* strm, 
230,231c230,231
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> BZ2_bzCompressInit 
>                      bz_stream* strm, 
230,231c230,231
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>  
>                      bz_stream* strm, 
230c230
< (BZ2_bzCompressInit) 
---
> () 
230c230
< (BZ2_bzCompressInit) 
---
> ( 
230,231c230,231
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> () 
>                      bz_stream* strm, 
(97.2 %, 5690 bytes)
230,231c230,231
< BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  
>                     ( * strm, 
230,231c230,231
< BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  
>                      * strm, 
230,231c230,231
< BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  
>                     ( bz_stream strm, 
230,231c230,231
< BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  
>                      bz_stream strm, 
230,231c230,231
< BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  
>                     (  strm, 
230,231c230,231
< BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>  
>                       strm, 
231c231
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
231c231
<                     ( bz_stream* strm, 
---
>                      * strm, 
231c231
<                     ( bz_stream* strm, 
---
>                      bz_stream strm, 
231c231
<                     ( bz_stream* strm, 
---
>                       strm, 
231c231
<                     ( bz_stream* strm, 
---
>                      bz_stream* , 
231c231
<                     ( bz_stream* strm, 
---
>                      * , 
231c231
<                     ( bz_stream* strm, 
---
>                      bz_stream , 
231c231
<                     ( bz_stream* strm, 
---
>                       , 
231c231
<                     ( bz_stream* strm, 
---
>                     ( * strm, 
231c231
<                     ( bz_stream* strm, 
---
>                     (  strm, 
231c231
<                     ( bz_stream* strm, 
---
>                     ( * , 
231c231
<                     ( bz_stream* strm, 
---
>                     (  , 
231c231
<                     ( bz_stream* strm, 
---
>                     ( * strm 
231c231
<                     ( bz_stream* strm, 
---
>                     (  strm 
231c231
<                     ( bz_stream* strm, 
---
>                     ( *  
231c231
<                     ( bz_stream* strm, 
---
>                     (   
231c231
<                     ( bz_stream* strm, 
---
>                     ( bz_stream strm, 
231c231
<                     ( bz_stream* strm, 
---
>                     ( bz_stream , 
231c231
<                     ( bz_stream* strm, 
---
>                     ( bz_stream strm 
231c231
<                     ( bz_stream* strm, 
---
>                     ( bz_stream  
231,232c231,232
<                     ( bz_stream* strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm, 
>                              blockSize100kverbosityworkFactor )
231,232c231,232
<                     ( bz_stream* strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream , 
>                              blockSize100kverbosityworkFactor )
231,232c231,232
<                     ( bz_stream* strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                              blockSize100kverbosityworkFactor )
231,232c231,232
<                     ( bz_stream* strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream  
>                              blockSize100kverbosityworkFactor )
(97.2 %, 5689 bytes)
231c231
<                     ( bz_stream strm, 
---
>                     ( bz_stream , 
231c231
<                     ( bz_stream strm, 
---
>                     ( bz_stream  
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream , 
>                              blockSize100kverbosityworkFactor )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream  
>                              blockSize100kverbosityworkFactor )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream , 
>                      int         )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream  
>                      int         )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream , 
>                               )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream  
>                               )
231c231
<                     ( bz_stream strm, 
---
>                     ( bz_stream strm 
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                              blockSize100kverbosityworkFactor )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                      int         )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                               )
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                      int        blockSize100kverbosityworkFactor 
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                              blockSize100kverbosityworkFactor 
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                      int         
231,232c231,232
<                     ( bz_stream strm, 
<                      int        blockSize100kverbosityworkFactor )
---
>                     ( bz_stream strm 
>                               
232c232
<                      int        blockSize100kverbosityworkFactor )
---
>                              blockSize100kverbosityworkFactor )
232c232
<                      int        blockSize100kverbosityworkFactor )
---
>                               )
232c232
<                      int        blockSize100kverbosityworkFactor )
---
>                              blockSize100kverbosityworkFactor 
232c232
<                      int        blockSize100kverbosityworkFactor )
---
>                               
(97.2 %, 5653 bytes)
232,234c232,234
<                               )
< {
<    Int32   n;
---
>                               
> 
>       n;
232c232
<                               )
---
>                               
234c234
<    Int32   n;
---
>    Int32   ;
232,234c232,234
<                               )
< {
<    Int32   n;
---
>                               
> 
>    Int32   ;
232c232
<                               )
---
>                               
234c234
<    Int32   n;
---
>       ;
232,234c232,234
<                               )
< {
<    Int32   n;
---
>                               
> 
>       ;
233c233
< {
---
> 
233,234c233,234
< {
<    Int32   n;
---
> 
>       n;
233,234c233,234
< {
<    Int32   n;
---
> 
>    Int32   ;
233,234c233,234
< {
<    Int32   n;
---
> 
>       ;
233,234c233,234
< {
<    Int32   n;
---
> 
>    Int32   n
233,234c233,234
< {
<    Int32   n;
---
> 
>       n
233,234c233,234
< {
<    Int32   n;
---
> 
>    Int32   
233,234c233,234
< {
<    Int32   n;
---
> 
>       
234c234
<    Int32   n;
---
>       n;
234c234
<    Int32   n;
---
>       ;
234c234
<    Int32   n;
---
>       n
234c234
<    Int32   n;
---
>       
(97.2 %, 5647 bytes)
234,235c234,235
<       ;
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       
>    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
234,235c234,235
<       ;
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       
>    EStatesBZALLOCBZALLOC (BZ_N_OVERSHOOT) * sizeof(UInt32) );
234,235c234,235
<       ;
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       
>     (BZ_N_OVERSHOOT) * sizeof(UInt32) );
234,235c234,235
<       ;
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       
>    EStatesBZALLOCBZALLOC( BZ_N_OVERSHOOT) * sizeof(UInt32) );
234,235c234,235
<       ;
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       
>    ( BZ_N_OVERSHOOT) * sizeof(UInt32) );
234,235c234,235
<       ;
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       
>    EStatesBZALLOCBZALLOC BZ_N_OVERSHOOT) * sizeof(UInt32) );
234,235c234,235
<       ;
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       
>     BZ_N_OVERSHOOT) * sizeof(UInt32) );
235c235
<    EStatesBZALLOCBZALLOC( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
(97.3 %, 5625 bytes)
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     BZ_N_OVERSHOOT) * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     () * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     ) * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     (BZ_N_OVERSHOOT * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     BZ_N_OVERSHOOT * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     ( * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ( BZ_N_OVERSHOOT) * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ( ) * sizeof(UInt32) );
235c235
<    ( (BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ( BZ_N_OVERSHOOT * sizeof(UInt32) );
(97.3 %, 5623 bytes)
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     BZ_N_OVERSHOOT * (UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      * (UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     BZ_N_OVERSHOOT  (UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>       (UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     ( * sizeof(UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     (  sizeof(UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     ( * (UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     (  (UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     ( * sizeofUInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     (  sizeofUInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     ( * UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     (  UInt32) );
235c235
<     (BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>     (BZ_N_OVERSHOOT  sizeof(UInt32) );
(97.3 %, 5608 bytes)
235c235
<     (  sizeof(UInt32) );
---
>     (  UInt32) );
235c235
<     (  sizeof(UInt32) );
---
>     (  () );
235c235
<     (  sizeof(UInt32) );
---
>     (  ) );
235c235
<     (  sizeof(UInt32) );
---
>     (  (UInt32 );
235c235
<     (  sizeof(UInt32) );
---
>     (  UInt32 );
235c235
<     (  sizeof(UInt32) );
---
>     (  ( );
235c235
<     (  sizeof(UInt32) );
---
>     (   );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeofUInt32) );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof) );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeofUInt32 );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeofUInt32) ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof) ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeofUInt32 ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof() );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof( );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof() ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof( ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof() )
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof( )
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof() 
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof( 
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32 );
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32 ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32 )
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32 
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32 );
>    
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32 ;
>    
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32 )
>    
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32 
>    
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32) ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32) 
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32) ;
>    
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32) 
>    
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32) ;
238c238
<    strm;
---
>    ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32) 
238c238
<    strm;
---
>    ;
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32) ;
>    
238c238
<    strm;
---
>    ;
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32) 
>    
238c238
<    strm;
---
>    ;
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32) )
235,236c235,236
<     (  sizeof(UInt32) );
<    ;
---
>     (  sizeof(UInt32) )
>    
235c235
<     (  sizeof(UInt32) );
---
>     (  sizeof(UInt32) )
238c238
<    strm;
---
>    ;
(97.3 %, 5607 bytes)
236c236
<    ;
---
>    
236c236
<    ;
---
>    
238c238
<    strm;
---
>    ;
236c236
<    ;
---
>    
238c238
<    strm;
---
>    strm
236c236
<    ;
---
>    
238c238
<    strm;
---
>    
(97.3 %, 5602 bytes)
238,239c238,239
<    ;
<    ;
---
>    
>    
237a238
>    
239,240c240
<    ;
< }
---
> 
238,240c238,240
<    ;
<    ;
< }
---
>    
>    
> 
238c238
<    ;
---
>    
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strmaction )
---
> (BZ2_bzCompress) ( bz_stream *strmaction )
238,239c238,239
<    ;
<    ;
---
>    
>    
252c252
< BZ_API(BZ2_bzCompress) ( bz_stream *strmaction )
---
> (BZ2_bzCompress) ( bz_stream *strmaction )
237a238
>    
239,240d239
<    ;
< }
252c251,252
< BZ_API(BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> (BZ2_bzCompress) ( bz_stream *strmaction )
238,240c238,239
<    ;
<    ;
< }
---
>    
>    
252c251,252
< BZ_API(BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> (BZ2_bzCompress) ( bz_stream *strmaction )
239c239
<    ;
---
>    
(97.3 %, 5595 bytes)
239c239
<    ;
---
>    
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> () ( bz_stream *strmaction )
239,240c239
<    ;
< }
---
>    
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> () ( bz_stream *strmaction )
239c239
<    ;
---
>    
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> ) ( bz_stream *strmaction )
239,240c239
<    ;
< }
---
>    
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> ) ( bz_stream *strmaction )
240c240
< }
---
> 
240d239
< }
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> BZ2_bzCompress) ( bz_stream *strmaction )
240d239
< }
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> () ( bz_stream *strmaction )
240d239
< }
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> ) ( bz_stream *strmaction )
240d239
< }
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> (BZ2_bzCompress ( bz_stream *strmaction )
240d239
< }
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> BZ2_bzCompress ( bz_stream *strmaction )
240d239
< }
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
> ( ( bz_stream *strmaction )
240d239
< }
252c251,252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> 
>  ( bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> BZ2_bzCompress) ( bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> ) ( bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> BZ2_bzCompress ( bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
>  ( bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> BZ2_bzCompress)  bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> )  bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> BZ2_bzCompress  bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
>   bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> () ( bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> ( ( bz_stream *strmaction )
252c252
< (BZ2_bzCompress) ( bz_stream *strmaction )
---
> ()  bz_stream *strmaction )
(97.3 %, 5593 bytes)
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
>  (  *strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
>    *strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
>  ( bz_stream strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
>   bz_stream strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
>  (  strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
>    strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress  bz_stream *strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress   *strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress  bz_stream strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress   strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress  bz_stream * )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress   * )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress  bz_stream  )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress    )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress (  *strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress (  strmaction )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress (  * )
252c252
< BZ2_bzCompress ( bz_stream *strmaction )
---
> BZ2_bzCompress (   )
(97.3 %, 5583 bytes)
252c252
< BZ2_bzCompress (  strmaction )
---
> BZ2_bzCompress (   
252,253c252,253
< BZ2_bzCompress (  strmaction )
< {
---
> BZ2_bzCompress (   )
> 
252,253c252,253
< BZ2_bzCompress (  strmaction )
< {
---
> BZ2_bzCompress (   
> 
252c252
< BZ2_bzCompress (  strmaction )
---
> BZ2_bzCompress (   )
255c255
<    EState;
---
>    ;
252c252
< BZ2_bzCompress (  strmaction )
---
> BZ2_bzCompress (   
255c255
<    EState;
---
>    ;
252,253c252,253
< BZ2_bzCompress (  strmaction )
< {
---
> BZ2_bzCompress (   )
> 
255c255
<    EState;
---
>    ;
252,253c252,253
< BZ2_bzCompress (  strmaction )
< {
---
> BZ2_bzCompress (   
> 
255c255
<    EState;
---
>    ;
252c252
< BZ2_bzCompress (  strmaction )
---
> BZ2_bzCompress (  strmaction 
252,253c252,253
< BZ2_bzCompress (  strmaction )
< {
---
> BZ2_bzCompress (  strmaction 
> 
252c252
< BZ2_bzCompress (  strmaction )
---
> BZ2_bzCompress (  strmaction 
255c255
<    EState;
---
>    ;
252,253c252,253
< BZ2_bzCompress (  strmaction )
< {
---
> BZ2_bzCompress (  strmaction 
> 
255c255
<    EState;
---
>    ;
(97.3 %, 5567 bytes)
252c252
< BZ2_bzCompress (   )
---
> BZ2_bzCompress (   
256c256
< }
---
> 
252,253c252,253
< BZ2_bzCompress (   )
< {
---
> BZ2_bzCompress (   
> 
256c256
< }
---
> 
252c252
< BZ2_bzCompress (   )
---
> BZ2_bzCompress (   
255,256c255,256
<    ;
< }
---
>    
> 
252,253c252,253
< BZ2_bzCompress (   )
< {
---
> BZ2_bzCompress (   
> 
255,256c255,256
<    ;
< }
---
>    
> 
253c253
< {
---
> 
253c253,254
< {
---
> 
>    
255d255
<    ;
253c253
< {
---
> 
256c256
< }
---
> 
253c253
< {
---
> 
255,256c255,256
<    ;
< }
---
>    
> 
253c253
< {
---
> 
264c264
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit) 
253c253,254
< {
---
> 
>    
255d255
<    ;
264c264
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit) 
253c253
< {
---
> 
256d255
< }
264c263,264
< (BZ2_bzDecompressInit) 
---
> 
> BZ2_bzDecompressInit) 
253c253,254
< {
---
> 
>    
255,256d255
<    ;
< }
264c263,264
< (BZ2_bzDecompressInit) 
---
> 
> BZ2_bzDecompressInit) 
255c255
<    ;
---
>    
(97.3 %, 5565 bytes)
255c255
<    ;
---
>    
264c264
< (BZ2_bzDecompressInit) 
---
> () 
255c255
<    ;
---
>    
264c264
< (BZ2_bzDecompressInit) 
---
> ) 
255c255
<    ;
---
>    
264c264
< (BZ2_bzDecompressInit) 
---
> (BZ2_bzDecompressInit 
255c255
<    ;
---
>    
264c264
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit 
255c255
<    ;
---
>    
264c264
< (BZ2_bzDecompressInit) 
---
> ( 
255c255
<    ;
---
>    
264c264
< (BZ2_bzDecompressInit) 
---
>  
264c264
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit) 
264c264
< (BZ2_bzDecompressInit) 
---
> ) 
264c264
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit 
264c264
< (BZ2_bzDecompressInit) 
---
>  
264,265c264,265
< (BZ2_bzDecompressInit) 
<                      ( small )
---
> BZ2_bzDecompressInit) 
>                       small )
264,265c264,265
< (BZ2_bzDecompressInit) 
<                      ( small )
---
> ) 
>                       small )
264,265c264,265
< (BZ2_bzDecompressInit) 
<                      ( small )
---
> BZ2_bzDecompressInit 
>                       small )
264,265c264,265
< (BZ2_bzDecompressInit) 
<                      ( small )
---
>  
>                       small )
264c264
< (BZ2_bzDecompressInit) 
---
> () 
264c264
< (BZ2_bzDecompressInit) 
---
> ( 
264,265c264,265
< (BZ2_bzDecompressInit) 
<                      ( small )
---
> () 
>                       small )
(97.3 %, 5563 bytes)
264,265c264,265
< BZ2_bzDecompressInit 
<                      ( small )
---
>  
>                      (  )
264,265c264,265
< BZ2_bzDecompressInit 
<                      ( small )
---
>  
>                        )
264,265c264,265
< BZ2_bzDecompressInit 
<                      ( small )
---
>  
>                      ( small 
264,265c264,265
< BZ2_bzDecompressInit 
<                      ( small )
---
>  
>                       small 
264,265c264,265
< BZ2_bzDecompressInit 
<                      ( small )
---
>  
>                      (  
264,265c264,265
< BZ2_bzDecompressInit 
<                      ( small )
---
>  
>                        
265c265
<                      ( small )
---
>                       small )
265c265
<                      ( small )
---
>                        )
265c265
<                      ( small )
---
>                       small 
265c265
<                      ( small )
---
>                        
265,266c265,266
<                      ( small )
< {
---
>                       small )
> 
265,266c265,266
<                      ( small )
< {
---
>                        )
> 
265,266c265,266
<                      ( small )
< {
---
>                       small 
> 
265,266c265,266
<                      ( small )
< {
---
>                        
> 
265c265
<                      ( small )
---
>                      (  )
265c265
<                      ( small )
---
>                      (  
265,266c265,266
<                      ( small )
< {
---
>                      (  )
> 
265,266c265,266
<                      ( small )
< {
---
>                      (  
> 
265c265
<                      ( small )
---
>                      (  )
267c267
<    DState;
---
>    ;
(97.3 %, 5558 bytes)
265c265
<                      (  )
---
>                      (  
265,266c265,266
<                      (  )
< {
---
>                      (  
> 
265c265
<                      (  )
---
>                      (  
267c267
<    DState;
---
>    ;
265,267c265,267
<                      (  )
< {
<    DState;
---
>                      (  
> 
>    ;
265c265
<                      (  )
---
>                      (  
267c267
<    DState;
---
>    DState
265,267c265,267
<                      (  )
< {
<    DState;
---
>                      (  
> 
>    DState
265c265
<                      (  )
---
>                      (  
267c267
<    DState;
---
>    
265,267c265,267
<                      (  )
< {
<    DState;
---
>                      (  
> 
>    
266c266
< {
---
> 
266,267c266,267
< {
<    DState;
---
> 
>    ;
266,267c266,267
< {
<    DState;
---
> 
>    DState
266,267c266,267
< {
<    DState;
---
> 
>    
266c266
< {
---
> 
268c268
< ;
---
> 
266,268c266,268
< {
<    DState;
< ;
---
> 
>    ;
> 
266,268c266,268
< {
<    DState;
< ;
---
> 
>    DState
> 
266,268c266,268
< {
<    DState;
< ;
---
> 
>    
> 
267c267
<    DState;
---
>    ;
267c267
<    DState;
---
>    
(97.3 %, 5552 bytes)
267c267
<    ;
---
>    
267,268c267,268
<    ;
< ;
---
>    
> 
267c267
<    ;
---
>    
269c269
< }
---
> 
(97.3 %, 5551 bytes)
268c268
< ;
---
> 
268,269c268,269
< ;
< }
---
> 
> 
268c268
< ;
---
> 
276c276
< #define BZ_SETERR(e)                    \
---
> define BZ_SETERR(e)                    \
268,269d267
< ;
< }
276c274,276
< #define BZ_SETERR(e)                    \
---
> 
> 
> define BZ_SETERR(e)                    \
268c268
< ;
---
> 
276c276
< #define BZ_SETERR(e)                    \
---
> # BZ_SETERR(e)                    \
268,269d267
< ;
< }
276c274,276
< #define BZ_SETERR(e)                    \
---
> 
> 
> # BZ_SETERR(e)                    \
268c268
< ;
---
> 
276c276
< #define BZ_SETERR(e)                    \
---
>  BZ_SETERR(e)                    \
268,269d267
< ;
< }
276c274,276
< #define BZ_SETERR(e)                    \
---
> 
> 
>  BZ_SETERR(e)                    \
269c269
< }
---
> 
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
> define BZ_SETERR(e)                    \
(97.3 %, 5550 bytes)
269c269
< }
---
> 
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
> define BZ_SETERR(e)                    \
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
> # BZ_SETERR(e)                    \
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
>  BZ_SETERR(e)                    \
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
> #define (e)                    \
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
> define (e)                    \
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
> # (e)                    \
269d268
< }
276c275,276
< #define BZ_SETERR(e)                    \
---
> 
>  (e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> define BZ_SETERR(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
>  BZ_SETERR(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> define (e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
>  (e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> define BZ_SETERRe)                    \
276c276
< #define BZ_SETERR(e)                    \
---
>  BZ_SETERRe)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> define e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
>  e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # BZ_SETERR(e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # (e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # BZ_SETERRe)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # BZ_SETERR()                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # ()                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # BZ_SETERR)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> # )                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define (e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define e)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define ()                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define )                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define (e                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define e                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define (                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define                     \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR)                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe)                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR)                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR()                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR()                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR()                    \
279c279
< typedef 
---
>  
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(                    \
279c279
< typedef 
---
>  
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR()                    
279c279
< typedef 
---
>  
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(                    
279c279
< typedef 
---
>  
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    \
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    \
279c279
< typedef 
---
>  
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    
279c279
< typedef 
---
>  
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    \
280c280
<    struct {
---
>     {
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    
280c280
<    struct {
---
>     {
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    \
279,280c279,280
< typedef 
<    struct {
---
>  
>     {
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e                    
279,280c279,280
< typedef 
<    struct {
---
>  
>     {
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
279c279
< typedef 
---
>  
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
280c280
<    struct {
---
>     {
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
279,280c279,280
< typedef 
<    struct {
---
>  
>     {
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
280c280
<    struct {
---
>    struct 
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
279,280c279,280
< typedef 
<    struct {
---
>  
>    struct 
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
280c280
<    struct {
---
>     
276c276
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERR(e)                    
279,280c279,280
< typedef 
<    struct {
---
>  
>     
279c279
< typedef 
---
>  
(97.3 %, 5549 bytes)
279c279
< typedef 
---
>  
279,280c279,280
< typedef 
<    struct {
---
>  
>     {
279,280c279,280
< typedef 
<    struct {
---
>  
>    struct 
279,280c279,280
< typedef 
<    struct {
---
>  
>     
279c279
< typedef 
---
>  
281c281
<       FILE*     handle;
---
>       *     handle;
279,281c279,281
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     {
>       *     handle;
279,281c279,281
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>    struct 
>       *     handle;
279,281c279,281
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     
>       *     handle;
280c280
<    struct {
---
>     {
280c280
<    struct {
---
>     
280,281c280,281
<    struct {
<       FILE*     handle;
---
>     {
>       *     handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>     
>       *     handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>     {
>       FILE     handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>     
>       FILE     handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>     {
>            handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>     
>            handle;
280c280
<    struct {
---
>    struct 
280,281c280,281
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>    struct 
>            handle;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE*     ;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     ;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     ;
280,281c280,281
<    struct {
<       FILE*     handle;
---
>    struct 
>            ;
281c281
<       FILE*     handle;
---
>       *     handle;
281c281
<       FILE*     handle;
---
>            handle;
281c281
<       FILE*     handle;
---
>       *     ;
281c281
<       FILE*     handle;
---
>            ;
281c281
<       FILE*     handle;
---
>       *     handle
281c281
<       FILE*     handle;
---
>            handle
281c281
<       FILE*     handle;
---
>       *     
281c281
<       FILE*     handle;
---
>            
(97.3 %, 5538 bytes)
281,282c281,282
<            ;
<       char      buf[BZ_MAX_UNUSED];
---
>            
>             [BZ_MAX_UNUSED];
281,282c281,282
<            ;
<       char      buf[BZ_MAX_UNUSED];
---
>            
>       char      bufBZ_MAX_UNUSED];
281,282c281,282
<            ;
<       char      buf[BZ_MAX_UNUSED];
---
>            
>             bufBZ_MAX_UNUSED];
281,282c281,282
<            ;
<       char      buf[BZ_MAX_UNUSED];
---
>            
>       char      BZ_MAX_UNUSED];
281,282c281,282
<            ;
<       char      buf[BZ_MAX_UNUSED];
---
>            
>             BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             buf[BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             [BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             bufBZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             buf[];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             [];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             buf];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>             ];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      BZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      ];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [BZ_MAX_UNUSED;
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      BZ_MAX_UNUSED;
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      [;
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      ;
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      bufBZ_MAX_UNUSED];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      buf];
282c282
<       char      buf[BZ_MAX_UNUSED];
---
>       char      bufBZ_MAX_UNUSED;
(97.3 %, 5520 bytes)
282,283c282,283
<       char      ;
<       Int32     bufN;
---
>       char      
>            
283c283
<       Int32     bufN;
---
>            bufN;
283c283
<       Int32     bufN;
---
>            ;
(97.3 %, 5509 bytes)
284,286c284,286
<       ;
<       ;
<       Int32     lastErr;
---
>       
>       
>            ;
285c285
<       ;
---
>       
285,286c285,286
<       ;
<       Int32     lastErr;
---
>       
>            lastErr;
(97.3 %, 5495 bytes)
286,289c286,289
<            ;
<       ;
<    }
<    bzFile;
---
>            
>       
>    
>    ;
287c287
<       ;
---
>       
287,288c287,288
<       ;
<    }
---
>       
>    
287c287
<       ;
---
>       
289c289
<    bzFile;
---
>    ;
287,289c287,289
<       ;
<    }
<    bzFile;
---
>       
>    
>    ;
287c287
<       ;
---
>       
289c289
<    bzFile;
---
>    bzFile
287,289c287,289
<       ;
<    }
<    bzFile;
---
>       
>    
>    bzFile
287c287
<       ;
---
>       
289c289
<    bzFile;
---
>    
287,289c287,289
<       ;
<    }
<    bzFile;
---
>       
>    
>    
(97.3 %, 5494 bytes)
288c288
<    }
---
>    
288,289c288,289
<    }
<    bzFile;
---
>    
>    ;
288,289c288,289
<    }
<    bzFile;
---
>    
>    bzFile
288,289c288,289
<    }
<    bzFile;
---
>    
>    
288c288
<    }
---
>    
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
288,289c288,289
<    }
<    bzFile;
---
>    
>    ;
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
288,289c288,289
<    }
<    bzFile;
---
>    
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
288,289c288,289
<    }
<    bzFile;
---
>    
>    
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    ;
289c289
<    bzFile;
---
>    
289c289
<    bzFile;
---
>    ;
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    ;
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    ;
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    bzFile
289c289
<    bzFile;
---
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* (BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * (BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE (BZ2_bzWriteOpen) 
289c289
<    bzFile;
---
>    bzFile
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  (BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * (BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  (BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_APIBZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_APIBZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE (BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_APIBZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API() 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE () 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE ) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* (BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* () 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* ) 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* (BZ2_bzWriteOpen 
297c297
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen 
(97.3 %, 5488 bytes)
297c297
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen) 
297c297
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* ) 
297c297
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* BZ2_bzWriteOpen 
297c297
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE*  
297,298c297,298
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen) 
>                      int*  bzerror,      
297,298c297,298
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* ) 
>                      int*  bzerror,      
297,298c297,298
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ2_bzWriteOpen 
>                      int*  bzerror,      
297,298c297,298
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                      int*  bzerror,      
297c297
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* () 
297c297
< BZFILE* (BZ2_bzWriteOpen) 
---
> BZFILE* ( 
297,298c297,298
< BZFILE* (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* () 
>                      int*  bzerror,      
(97.3 %, 5486 bytes)
297,298c297,298
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                     ( *  bzerror,      
297,298c297,298
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                      *  bzerror,      
297,298c297,298
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                     ( int  bzerror,      
297,298c297,298
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                      int  bzerror,      
297,298c297,298
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                     (   bzerror,      
297,298c297,298
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> BZFILE*  
>                        bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                      *  bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                      int  bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                        bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                      int*  ,      
298c298
<                     ( int*  bzerror,      
---
>                      *  ,      
298c298
<                     ( int*  bzerror,      
---
>                      int  ,      
298c298
<                     ( int*  bzerror,      
---
>                        ,      
298c298
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                     (   bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                     ( *  ,      
298c298
<                     ( int*  bzerror,      
---
>                     (   ,      
298c298
<                     ( int*  bzerror,      
---
>                     ( *  bzerror      
298c298
<                     ( int*  bzerror,      
---
>                     (   bzerror      
298c298
<                     ( int*  bzerror,      
---
>                     ( *        
298c298
<                     ( int*  bzerror,      
---
>                     (         
298c298
<                     ( int*  bzerror,      
---
>                     ( int  bzerror,      
298c298
<                     ( int*  bzerror,      
---
>                     ( int  ,      
298c298
<                     ( int*  bzerror,      
---
>                     ( int  bzerror      
298c298
<                     ( int*  bzerror,      
---
>                     ( int        
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror,      
>                       * f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  ,      
>                       * f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror      
>                       * f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int        
>                       * f, 
298c298
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
298c298
<                     ( int*  bzerror,      
---
>                     ( int*        
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       * f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       FILE f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                        f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
298c298
<                     ( int*  bzerror,      
---
>                     ( int*  bzerror      
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        f, 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE* , 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * , 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE , 
298,299c298,299
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        , 
299c299
<                       FILE* f, 
---
>                       * f, 
299c299
<                       FILE* f, 
---
>                        f, 
299c299
<                       FILE* f, 
---
>                       * , 
299c299
<                       FILE* f, 
---
>                        , 
299c299
<                       FILE* f, 
---
>                       * f 
299c299
<                       FILE* f, 
---
>                        f 
299c299
<                       FILE* f, 
---
>                       *  
299c299
<                       FILE* f, 
---
>                         
299c299
<                       FILE* f, 
---
>                       FILE f, 
299c299
<                       FILE* f, 
---
>                       FILE , 
299c299
<                       FILE* f, 
---
>                       FILE f 
299c299
<                       FILE* f, 
---
>                       FILE  
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f, 
>                          blockSize100k, 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE , 
>                          blockSize100k, 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f 
>                          blockSize100k, 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE  
>                          blockSize100k, 
299c299
<                       FILE* f, 
---
>                       FILE* , 
299c299
<                       FILE* f, 
---
>                       FILE*  
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          blockSize100k, 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                       int   , 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   , 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          , 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          , 
299c299
<                       FILE* f, 
---
>                       FILE* f 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k, 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   , 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          , 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   blockSize100k 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k 
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int    
299,300c299,300
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                           
300c300
<                       int   blockSize100k, 
---
>                          blockSize100k, 
300c300
<                       int   blockSize100k, 
---
>                          , 
300c300
<                       int   blockSize100k, 
---
>                          blockSize100k 
300c300
<                       int   blockSize100k, 
---
>                           
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k, 
>                          verbosity,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          , 
>                          verbosity,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k 
>                          verbosity,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                           
>                          verbosity,
300c300
<                       int   blockSize100k, 
---
>                       int   , 
300c300
<                       int   blockSize100k, 
---
>                       int    
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          verbosity,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                       int   ,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                       int   ,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          ,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          ,
300c300
<                       int   blockSize100k, 
---
>                       int   blockSize100k 
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   ,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          ,
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   verbosity
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   
300,301c300,301
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          
301c301
<                       int   verbosity,
---
>                          verbosity,
301c301
<                       int   verbosity,
---
>                          ,
301c301
<                       int   verbosity,
---
>                          verbosity
301c301
<                       int   verbosity,
---
>                          
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity,
>                          workFactor )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                          ,
>                          workFactor )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity
>                          workFactor )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                          
>                          workFactor )
301c301
<                       int   verbosity,
---
>                       int   ,
301c301
<                       int   verbosity,
---
>                       int   
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                          workFactor )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                       int    )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                       int    )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                           )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                           )
301c301
<                       int   verbosity,
---
>                       int   verbosity
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           )
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int   workFactor 
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor 
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    
301,302c301,302
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           
302c302
<                       int   workFactor )
---
>                          workFactor )
302c302
<                       int   workFactor )
---
>                           )
302c302
<                       int   workFactor )
---
>                          workFactor 
302c302
<                       int   workFactor )
---
>                           
302,303c302,303
<                       int   workFactor )
< {
---
>                          workFactor )
> 
302,303c302,303
<                       int   workFactor )
< {
---
>                           )
> 
302,303c302,303
<                       int   workFactor )
< {
---
>                          workFactor 
> 
302,303c302,303
<                       int   workFactor )
< {
---
>                           
> 
302c302
<                       int   workFactor )
---
>                       int    )
302c302
<                       int   workFactor )
---
>                       int    
302,303c302,303
<                       int   workFactor )
< {
---
>                       int    )
> 
302,303c302,303
<                       int   workFactor )
< {
---
>                       int    
> 
302c302
<                       int   workFactor )
---
>                       int    )
304c304
<    ;
---
>    
302c302
<                       int   workFactor )
---
>                       int    
304c304
<    ;
---
>    
302,304c302,304
<                       int   workFactor )
< {
<    ;
---
>                       int    )
> 
>    
302,304c302,304
<                       int   workFactor )
< {
<    ;
---
>                       int    
> 
>    
302c302
<                       int   workFactor )
---
>                       int   workFactor 
302,303c302,303
<                       int   workFactor )
< {
---
>                       int   workFactor 
> 
302c302
<                       int   workFactor )
---
>                       int   workFactor 
304c304
<    ;
---
>    
302,304c302,304
<                       int   workFactor )
< {
<    ;
---
>                       int   workFactor 
> 
>    
302c302
<                       int   workFactor )
---
>                       int   workFactor 
305c305
<    bzFile* bzf ;
---
>    * bzf ;
302,303c302,303
<                       int   workFactor )
< {
---
>                       int   workFactor 
> 
305c305
<    bzFile* bzf ;
---
>    * bzf ;
302c302
<                       int   workFactor )
---
>                       int   workFactor 
304,305c304,305
<    ;
<    bzFile* bzf ;
---
>    
>    * bzf ;
302,305c302,305
<                       int   workFactor )
< {
<    ;
<    bzFile* bzf ;
---
>                       int   workFactor 
> 
>    
>    * bzf ;
303c303
< {
---
> 
303,304c303,304
< {
<    ;
---
> 
>    
303c303
< {
---
> 
305c305
<    bzFile* bzf ;
---
>    * bzf ;
303,305c303,305
< {
<    ;
<    bzFile* bzf ;
---
> 
>    
>    * bzf ;
303c303
< {
---
> 
305c305
<    bzFile* bzf ;
---
>    bzFile bzf ;
303,305c303,305
< {
<    ;
<    bzFile* bzf ;
---
> 
>    
>    bzFile bzf ;
303c303
< {
---
> 
305c305
<    bzFile* bzf ;
---
>     bzf ;
303,305c303,305
< {
<    ;
<    bzFile* bzf ;
---
> 
>    
>     bzf ;
304c304
<    ;
---
>    
304,305c304,305
<    ;
<    bzFile* bzf ;
---
>    
>    * bzf ;
304,305c304,305
<    ;
<    bzFile* bzf ;
---
>    
>    bzFile bzf ;
(97.3 %, 5485 bytes)
305c305
<    bzFile* bzf ;
---
>    * bzf ;
305c305
<    bzFile* bzf ;
---
>     bzf ;
305c305
<    bzFile* bzf ;
---
>    *  ;
305c305
<    bzFile* bzf ;
---
>      ;
305c305
<    bzFile* bzf ;
---
>    * bzf 
305c305
<    bzFile* bzf ;
---
>     bzf 
305c305
<    bzFile* bzf ;
---
>    *  
305c305
<    bzFile* bzf ;
---
>      
(97.3 %, 5475 bytes)
305c305
<      ;
---
>      
307c307
<    BZ_SETERR(||
---
>    ||
305c305
<      ;
---
>      
307c307
<    BZ_SETERR(||
---
>    BZ_SETERR(
305c305
<      ;
---
>      
307c307
<    BZ_SETERR(||
---
>    (
(97.3 %, 5472 bytes)
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    (
>        ())
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    
>        ())
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    (
>        ))
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    
>        ))
307c307
<    BZ_SETERR(
---
>    BZ_SETERR
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    BZ_SETERR
>        4))
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    BZ_SETERR
>        ())
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    BZ_SETERR
>        ))
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    BZ_SETERR
>        (4)
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    BZ_SETERR
>        4)
307,308c307,308
<    BZ_SETERR(
<        (4))
---
>    BZ_SETERR
>        ()
(97.3 %, 5470 bytes)
308,309c308,309
<        (4)
<       ;   
---
>        4)
>          
308,309c308,309
<        (4)
<       ;   
---
>        )
>          
308,309c308,309
<        (4)
<       ;   
---
>        4
>          
308,309c308,309
<        (4)
<       ;   
---
>        
>          
308c308
<        (4)
---
>        ()
308c308
<        (4)
---
>        (
308,309c308,309
<        (4)
<       ;   
---
>        ()
>          
(97.3 %, 5469 bytes)
308c308
<        ()
---
>        (
308,309c308,309
<        ()
<       ;   
---
>        (
>          
308c308
<        ()
---
>        (
310c310
< }
---
> 
308,310c308,310
<        ()
<       ;   
< }
---
>        (
>          
> 
308c308
<        ()
---
>        (
315c315
< (BZ2_bzWrite)
---
> BZ2_bzWrite)
308,309c308,309
<        ()
<       ;   
---
>        (
>          
315c315
< (BZ2_bzWrite)
---
> BZ2_bzWrite)
308c308
<        ()
---
>        (
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> BZ2_bzWrite)
308,310c308,309
<        ()
<       ;   
< }
---
>        (
>          
315c314,315
< (BZ2_bzWrite)
---
> 
> BZ2_bzWrite)
309c309
<       ;   
---
>          
309,310c309,310
<       ;   
< }
---
>          
> 
309c309
<       ;   
---
>          
315c315
< (BZ2_bzWrite)
---
> BZ2_bzWrite)
309,310c309
<       ;   
< }
---
>          
315c314,315
< (BZ2_bzWrite)
---
> 
> BZ2_bzWrite)
309c309
<       ;   
---
>          
315c315
< (BZ2_bzWrite)
---
> ()
309,310c309
<       ;   
< }
---
>          
315c314,315
< (BZ2_bzWrite)
---
> 
> ()
309c309
<       ;   
---
>          
315c315
< (BZ2_bzWrite)
---
> )
309,310c309
<       ;   
< }
---
>          
315c314,315
< (BZ2_bzWrite)
---
> 
> )
310c310
< }
---
> 
(97.3 %, 5468 bytes)
310c310
< }
---
> 
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> BZ2_bzWrite)
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> ()
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> )
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> (BZ2_bzWrite
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> BZ2_bzWrite
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> (
310d309
< }
315c314,315
< (BZ2_bzWrite)
---
> 
> 
315c315
< (BZ2_bzWrite)
---
> BZ2_bzWrite)
315c315
< (BZ2_bzWrite)
---
> )
315c315
< (BZ2_bzWrite)
---
> BZ2_bzWrite
315c315
< (BZ2_bzWrite)
---
> 
315,316c315,316
< (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> BZ2_bzWrite)
>               int*    bzerror, 
315,316c315,316
< (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> )
>               int*    bzerror, 
315,316c315,316
< (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> BZ2_bzWrite
>               int*    bzerror, 
315,316c315,316
< (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> 
>               int*    bzerror, 
315c315
< (BZ2_bzWrite)
---
> ()
(97.3 %, 5466 bytes)
315,316c315,316
< BZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>              ( *    bzerror, 
315,316c315,316
< BZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>               *    bzerror, 
315,316c315,316
< BZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>              ( int    bzerror, 
315,316c315,316
< BZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>               int    bzerror, 
315,316c315,316
< BZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>              (     bzerror, 
315,316c315,316
< BZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>                   bzerror, 
316c316
<              ( int*    bzerror, 
---
>               int*    bzerror, 
316c316
<              ( int*    bzerror, 
---
>               *    bzerror, 
316c316
<              ( int*    bzerror, 
---
>               int    bzerror, 
316c316
<              ( int*    bzerror, 
---
>                   bzerror, 
316c316
<              ( int*    bzerror, 
---
>               int*    , 
316c316
<              ( int*    bzerror, 
---
>               *    , 
316c316
<              ( int*    bzerror, 
---
>               int    , 
316c316
<              ( int*    bzerror, 
---
>                   , 
316c316
<              ( int*    bzerror, 
---
>              ( *    bzerror, 
316c316
<              ( int*    bzerror, 
---
>              (     bzerror, 
316c316
<              ( int*    bzerror, 
---
>              ( *    , 
316c316
<              ( int*    bzerror, 
---
>              (     , 
316c316
<              ( int*    bzerror, 
---
>              ( *    bzerror 
316c316
<              ( int*    bzerror, 
---
>              (     bzerror 
316c316
<              ( int*    bzerror, 
---
>              ( *     
316c316
<              ( int*    bzerror, 
---
>              (      
316c316
<              ( int*    bzerror, 
---
>              ( int    bzerror, 
(97.3 %, 5454 bytes)
317c317
<                BZFILE* b, 
---
>                  
317c317
<                BZFILE* b, 
---
>                BZFILE b, 
317c317
<                BZFILE* b, 
---
>                BZFILE , 
317c317
<                BZFILE* b, 
---
>                BZFILE b 
317c317
<                BZFILE* b, 
---
>                BZFILE  
317,318c317,318
<                BZFILE* b, 
<                void*   buflen )
---
>                BZFILE b, 
>                *   buflen )
317,318c317,318
<                BZFILE* b, 
<                void*   buflen )
---
>                BZFILE , 
>                *   buflen )
317,318c317,318
<                BZFILE* b, 
<                void*   buflen )
---
>                BZFILE b 
>                *   buflen )
317,318c317,318
<                BZFILE* b, 
<                void*   buflen )
---
>                BZFILE  
>                *   buflen )
(97.3 %, 5453 bytes)
317c317
<                BZFILE b, 
---
>                BZFILE , 
317c317
<                BZFILE b, 
---
>                BZFILE  
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE , 
>                *   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE  
>                *   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE , 
>                void   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE  
>                void   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE , 
>                   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE  
>                   buflen )
317c317
<                BZFILE b, 
---
>                BZFILE b 
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE b 
>                *   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE b 
>                void   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE b 
>                   buflen )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE b 
>                void*    )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE b 
>                *    )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE b 
>                void    )
317,318c317,318
<                BZFILE b, 
<                void*   buflen )
---
>                BZFILE b 
>                    )
318c318
<                void*   buflen )
---
>                *   buflen )
318c318
<                void*   buflen )
---
>                   buflen )
318c318
<                void*   buflen )
---
>                *    )
318c318
<                void*   buflen )
---
>                    )
318c318
<                void*   buflen )
---
>                *   buflen 
318c318
<                void*   buflen )
---
>                   buflen 
318c318
<                void*   buflen )
---
>                *    
318c318
<                void*   buflen )
---
>                    
(97.3 %, 5441 bytes)
318,321c318,321
<                    )
< {
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>                    
> 
>    
>    * bzf = (bzFile*)b;
319c319
< {
---
> 
319,320c319,320
< {
<    ;
---
> 
>    
319c319
< {
---
> 
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
319,321c319,321
< {
<    ;
<    bzFile* bzf = (bzFile*)b;
---
> 
>    
>    * bzf = (bzFile*)b;
319c319
< {
---
> 
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
319,321c319,321
< {
<    ;
<    bzFile* bzf = (bzFile*)b;
---
> 
>    
>    bzFile bzf = (bzFile*)b;
319c319
< {
---
> 
321c321
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
319,321c319,321
< {
<    ;
<    bzFile* bzf = (bzFile*)b;
---
> 
>    
>     bzf = (bzFile*)b;
320c320
<    ;
---
>    
320,321c320,321
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    
>    * bzf = (bzFile*)b;
320,321c320,321
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    
>    bzFile bzf = (bzFile*)b;
320,321c320,321
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    
>     bzf = (bzFile*)b;
320,321c320,321
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    
>    bzFile*  = (bzFile*)b;
320,321c320,321
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    
>    *  = (bzFile*)b;
320,321c320,321
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    
>    bzFile  = (bzFile*)b;
320,321c320,321
<    ;
<    bzFile* bzf = (bzFile*)b;
---
>    
>      = (bzFile*)b;
(97.3 %, 5440 bytes)
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>     bzf = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    *  = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>      = (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    * bzf  (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>     bzf  (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    *   (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>       (bzFile*)b;
321c321
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = (bzFile*)b;
(97.4 %, 5430 bytes)
321c321
<    *   (bzFile*)b;
---
>       ()b;
321c321
<    *   (bzFile*)b;
---
>       )b;
321c321
<    *   (bzFile*)b;
---
>    *   bzFile*)b;
321c321
<    *   (bzFile*)b;
---
>    *   *)b;
321c321
<    *   (bzFile*)b;
---
>    *   bzFile)b;
321c321
<    *   (bzFile*)b;
---
>    *   )b;
321c321
<    *   (bzFile*)b;
---
>    *   bzFile*b;
321c321
<    *   (bzFile*)b;
---
>    *   *b;
321c321
<    *   (bzFile*)b;
---
>    *   bzFileb;
321c321
<    *   (bzFile*)b;
---
>    *   b;
(97.4 %, 5422 bytes)
321c321
<    *   *b;
---
>    *   ;
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferror(handle)) }
321c321
<    *   *b;
---
>    *   b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferror(handle)) }
321c321
<    *   *b;
---
>    *   
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferror(handle)) }
321c321
<    *   *b;
---
>    *   *;
321c321
<    *   *b;
---
>    *   *
321c321
<    *   *b;
---
>    *   *;
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferror(handle)) }
321c321
<    *   *b;
---
>    *   *
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferror(handle)) }
321c321
<    *   *b;
---
>    *   *;
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRferror(handle)) }
321c321
<    *   *b;
---
>    *   *
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRferror(handle)) }
321c321
<    *   *b;
---
>    *   *;
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    ferror(handle)) }
321c321
<    *   *b;
---
>    *   *
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    ferror(handle)) }
321c321
<    *   *b;
---
>    *   *b
321c321
<    *   *b;
---
>    *   *b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferror(handle)) }
321c321
<    *   *b;
---
>    *   *b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRferror(handle)) }
321c321
<    *   *b;
---
>    *   *b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    ferror(handle)) }
321c321
<    *   *b;
---
>    *   *b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR((handle)) }
321c321
<    *   *b;
---
>    *   *b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    ((handle)) }
321c321
<    *   *b;
---
>    *   *b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR(handle)) }
321c321
<    *   *b;
---
>    *   *b
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferror(handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    ferror(handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    ((handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (ferrorhandle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    ferrorhandle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    (handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRferror(handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR(handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRferrorhandle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRhandle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRferror()) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR()) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERRferror)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR((handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR(handle)) }
323c323
<    BZ_SETERR(ferror(handle)) }
---
>    BZ_SETERR(()) }
(97.4 %, 5416 bytes)
323c323
<    BZ_SETERR((handle)) }
---
>    BZ_SETERR(handle)) }
323c323
<    BZ_SETERR((handle)) }
---
>    BZ_SETERR()) }
323c323
<    BZ_SETERR((handle)) }
---
>    BZ_SETERR(handle) }
323c323
<    BZ_SETERR((handle)) }
---
>    BZ_SETERR() }
(97.4 %, 5414 bytes)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR() 
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR( 
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR() }
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR( }
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR() 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR( 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle }
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle 
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle }
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle }
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle }
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  (BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  (BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  (BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_APIBZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose)
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERR(handle) 
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API(BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  (BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_APIBZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API()
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  ()
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  BZ_API)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
>  )
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose)
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void ()
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void )
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose
327c327
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose
(97.4 %, 5408 bytes)
327c327
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose)
327c327
< void (BZ2_bzWriteClose)
---
> void )
327c327
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose
327c327
< void (BZ2_bzWriteClose)
---
> void 
327,328c327,328
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose)
>                    int*          bzerror, 
327,328c327,328
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void )
>                    int*          bzerror, 
327,328c327,328
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose
>                    int*          bzerror, 
327,328c327,328
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
327c327
< void (BZ2_bzWriteClose)
---
> void ()
327c327
< void (BZ2_bzWriteClose)
---
> void (
327,328c327,328
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void ()
>                    int*          bzerror, 
(97.4 %, 5406 bytes)
327,328c327,328
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
327,328c327,328
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
327,328c327,328
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
327,328c327,328
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
327,328c327,328
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
327,328c327,328
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                              bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                    int*          , 
328c328
<                   ( int*          bzerror, 
---
>                    *          , 
328c328
<                   ( int*          bzerror, 
---
>                    int          , 
328c328
<                   ( int*          bzerror, 
---
>                              , 
328c328
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                   ( *          , 
328c328
<                   ( int*          bzerror, 
---
>                   (           , 
328c328
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
328c328
<                   ( int*          bzerror, 
---
>                   (           bzerror 
328c328
<                   ( int*          bzerror, 
---
>                   ( *           
328c328
<                   ( int*          bzerror, 
---
>                   (            
328c328
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
328c328
<                   ( int*          bzerror, 
---
>                   ( int          , 
328c328
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
328c328
<                   ( int*          bzerror, 
---
>                   ( int           
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
328c328
<                   ( int*          bzerror, 
---
>                   ( int*          , 
328c328
<                   ( int*          bzerror, 
---
>                   ( int*           
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
328c328
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            b, 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE*       , 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       , 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       , 
328,329c328,329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            , 
329c329
<                     BZFILE*       b, 
---
>                     *       b, 
329c329
<                     BZFILE*       b, 
---
>                            b, 
329c329
<                     BZFILE*       b, 
---
>                     *       , 
329c329
<                     BZFILE*       b, 
---
>                            , 
329c329
<                     BZFILE*       b, 
---
>                     *       b 
329c329
<                     BZFILE*       b, 
---
>                            b 
329c329
<                     BZFILE*       b, 
---
>                     *        
329c329
<                     BZFILE*       b, 
---
>                             
329c329
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
329c329
<                     BZFILE*       b, 
---
>                     BZFILE       , 
329c329
<                     BZFILE*       b, 
---
>                     BZFILE       b 
329c329
<                     BZFILE*       b, 
---
>                     BZFILE        
329,330c329,330
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
329,330c329,330
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
329,330c329,330
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
329,330c329,330
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
329c329
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
(97.4 %, 5405 bytes)
329c329
<                     BZFILE       b, 
---
>                     BZFILE       , 
329c329
<                     BZFILE       b, 
---
>                     BZFILE        
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                     int           ,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                     int           ,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                ,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                ,
329c329
<                     BZFILE       b, 
---
>                     BZFILE       b 
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           ,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                ,
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           abandon
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           
329,330c329,330
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                
330c330
<                     int           abandon,
---
>                                abandon,
330c330
<                     int           abandon,
---
>                                ,
330c330
<                     int           abandon,
---
>                                abandon
330c330
<                     int           abandon,
---
>                                
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon,
>                      int* nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                ,
>                      int* nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon
>                      int* nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                
>                      int* nbytes_in,
330c330
<                     int           abandon,
---
>                     int           ,
330c330
<                     int           abandon,
---
>                     int           
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                      int* nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      int* nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                     unsigned * nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                     unsigned * nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                      * nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      * nbytes_in,
330c330
<                     int           abandon,
---
>                     int           abandon
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      int* nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned * nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      * nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned int nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      int nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned  nbytes_in,
330,331c330,331
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                       nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                      int* nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                      * nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                      int nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                       nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                      int* ,
331c331
<                     unsigned int* nbytes_in,
---
>                      * ,
331c331
<                     unsigned int* nbytes_in,
---
>                      int ,
331c331
<                     unsigned int* nbytes_in,
---
>                       ,
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned  nbytes_in,
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned * ,
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned  ,
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned  nbytes_in
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned * 
331c331
<                     unsigned int* nbytes_in,
---
>                     unsigned  
(97.4 %, 5402 bytes)
331c331
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in,
331c331
<                     unsigned * nbytes_in,
---
>                     unsigned  ,
331c331
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in
331c331
<                     unsigned * nbytes_in,
---
>                     unsigned  
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in,
>                      int* nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  ,
>                      int* nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in
>                      int* nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  
>                      int* nbytes_out )
331c331
<                     unsigned * nbytes_in,
---
>                     unsigned * ,
331c331
<                     unsigned * nbytes_in,
---
>                     unsigned * 
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                      int* nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      int* nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                     unsigned * nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                     unsigned * nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                      * nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      * nbytes_out )
331c331
<                     unsigned * nbytes_in,
---
>                     unsigned * nbytes_in
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      int* nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned * nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      * nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned int nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      int nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned  nbytes_out )
331,332c331,332
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                       nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                      int* nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                      * nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                      int nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                       nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                      int*  )
332c332
<                     unsigned int* nbytes_out )
---
>                      *  )
332c332
<                     unsigned int* nbytes_out )
---
>                      int  )
332c332
<                     unsigned int* nbytes_out )
---
>                        )
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_out )
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned *  )
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned   )
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out 
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_out 
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned *  
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned   
332c332
<                     unsigned int* nbytes_out )
---
>                     unsigned int nbytes_out )
(97.4 %, 5399 bytes)
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out )
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned   )
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out 
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned   
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out )
> 
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   )
> 
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out 
> 
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   
> 
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned *  
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  )
> 
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  
> 
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
334c334
<    }
---
>    
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned *  
334c334
<    }
---
>    
332,334c332,334
<                     unsigned * nbytes_out )
< {
<    }
---
>                     unsigned *  )
> 
>    
332,334c332,334
<                     unsigned * nbytes_out )
< {
<    }
---
>                     unsigned *  
> 
>    
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * nbytes_out 
> 
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
334c334
<    }
---
>    
332,334c332,334
<                     unsigned * nbytes_out )
< {
<    }
---
>                     unsigned * nbytes_out 
> 
>    
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API(BZ2_bzWriteClose64)
332,333c332,333
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * nbytes_out 
> 
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API(BZ2_bzWriteClose64)
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API(BZ2_bzWriteClose64)
332,334c332
<                     unsigned * nbytes_out )
< {
<    }
---
>                     unsigned * nbytes_out 
335a334
>    
337c336,337
< void BZ_API(BZ2_bzWriteClose64)
---
> 
>  BZ_API(BZ2_bzWriteClose64)
333c333
< {
---
> 
333,334c333,334
< {
<    }
---
> 
>    
333c333
< {
---
> 
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API(BZ2_bzWriteClose64)
333,334d332
< {
<    }
335a334
>    
337c336,337
< void BZ_API(BZ2_bzWriteClose64)
---
> 
>  BZ_API(BZ2_bzWriteClose64)
333c333
< {
---
> 
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64)
333,334d332
< {
<    }
335a334
>    
337c336,337
< void BZ_API(BZ2_bzWriteClose64)
---
> 
> void (BZ2_bzWriteClose64)
333c333
< {
---
> 
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  (BZ2_bzWriteClose64)
333,334d332
< {
<    }
335a334
>    
337c336,337
< void BZ_API(BZ2_bzWriteClose64)
---
> 
>  (BZ2_bzWriteClose64)
334c334
<    }
---
>    
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API(BZ2_bzWriteClose64)
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64)
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  (BZ2_bzWriteClose64)
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64)
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_APIBZ2_bzWriteClose64)
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
334c334
<    }
---
>    
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API(BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  (BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_APIBZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API()
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  ()
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
>  )
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void ()
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void )
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64
337c337
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64
(97.4 %, 5393 bytes)
337c337
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
337c337
< void (BZ2_bzWriteClose64)
---
> void )
337c337
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64
337c337
< void (BZ2_bzWriteClose64)
---
> void 
337,338c337,338
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose64)
>                    int*          bzerror, 
337,338c337,338
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void )
>                    int*          bzerror, 
337,338c337,338
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose64
>                    int*          bzerror, 
337,338c337,338
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
337c337
< void (BZ2_bzWriteClose64)
---
> void ()
(97.4 %, 5391 bytes)
337,338c337,338
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
337,338c337,338
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
337,338c337,338
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
337,338c337,338
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
337,338c337,338
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
337,338c337,338
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                              bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                    int*          , 
338c338
<                   ( int*          bzerror, 
---
>                    *          , 
338c338
<                   ( int*          bzerror, 
---
>                    int          , 
338c338
<                   ( int*          bzerror, 
---
>                              , 
338c338
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                   ( *          , 
338c338
<                   ( int*          bzerror, 
---
>                   (           , 
338c338
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
338c338
<                   ( int*          bzerror, 
---
>                   (           bzerror 
338c338
<                   ( int*          bzerror, 
---
>                   ( *           
338c338
<                   ( int*          bzerror, 
---
>                   (            
338c338
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
338c338
<                   ( int*          bzerror, 
---
>                   ( int          , 
338c338
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
338c338
<                   ( int*          bzerror, 
---
>                   ( int           
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
338c338
<                   ( int*          bzerror, 
---
>                   ( int*          , 
338c338
<                   ( int*          bzerror, 
---
>                   ( int*           
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
338c338
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            b, 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE*       , 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       , 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       , 
338,339c338,339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            , 
339c339
<                     BZFILE*       b, 
---
>                     *       b, 
339c339
<                     BZFILE*       b, 
---
>                            b, 
339c339
<                     BZFILE*       b, 
---
>                     *       , 
339c339
<                     BZFILE*       b, 
---
>                            , 
339c339
<                     BZFILE*       b, 
---
>                     *       b 
339c339
<                     BZFILE*       b, 
---
>                            b 
339c339
<                     BZFILE*       b, 
---
>                     *        
339c339
<                     BZFILE*       b, 
---
>                             
339c339
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
339c339
<                     BZFILE*       b, 
---
>                     BZFILE       , 
339c339
<                     BZFILE*       b, 
---
>                     BZFILE       b 
339c339
<                     BZFILE*       b, 
---
>                     BZFILE        
339,340c339,340
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
339,340c339,340
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
339,340c339,340
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
339,340c339,340
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
(97.4 %, 5390 bytes)
339c339
<                     BZFILE       b, 
---
>                     BZFILE       , 
339c339
<                     BZFILE       b, 
---
>                     BZFILE        
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                     int           ,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                     int           ,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                ,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                ,
339c339
<                     BZFILE       b, 
---
>                     BZFILE       b 
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           ,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                ,
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           abandon
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           
339,340c339,340
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                
340c340
<                     int           abandon,
---
>                                abandon,
340c340
<                     int           abandon,
---
>                                ,
340c340
<                     int           abandon,
---
>                                abandon
340c340
<                     int           abandon,
---
>                                
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                abandon,
>                      int* nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                ,
>                      int* nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                abandon
>                      int* nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                
>                      int* nbytes_in_lo32,
340c340
<                     int           abandon,
---
>                     int           ,
340c340
<                     int           abandon,
---
>                     int           
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                      int* nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      int* nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                     unsigned * nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                     unsigned * nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                      * nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      * nbytes_in_lo32,
340c340
<                     int           abandon,
---
>                     int           abandon
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      int* nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned * nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      * nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned int nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      int nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned  nbytes_in_lo32,
340,341c340,341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                       nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                      int* nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                      * nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                      int nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                       nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                      int* ,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                      * ,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                      int ,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                       ,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * ,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  ,
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * 
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  
341c341
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned int nbytes_in_lo32,
(97.4 %, 5387 bytes)
341c341
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32,
341c341
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  ,
341c341
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32
341c341
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32,
>                      int* nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  ,
>                      int* nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32
>                      int* nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  
>                      int* nbytes_in_hi32,
341c341
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * ,
341c341
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * 
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                      int* nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      int* nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                     unsigned * nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                     unsigned * nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                      * nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      * nbytes_in_hi32,
341c341
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      int* nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned * nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      * nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned int nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      int nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned  nbytes_in_hi32,
341,342c341,342
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                       nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                      * nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                      int nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                       nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                      int* ,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                      * ,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                      int ,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                       ,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  ,
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  
342c342
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int nbytes_in_hi32,
(97.4 %, 5384 bytes)
342c342
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32,
342c342
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  ,
342c342
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32
342c342
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32,
>                      int* nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  ,
>                      int* nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32
>                      int* nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  
>                      int* nbytes_out_lo32,
342c342
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
342c342
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * 
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                      int* nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      int* nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                     unsigned * nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                     unsigned * nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                      * nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      * nbytes_out_lo32,
342c342
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      int* nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned * nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      * nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned int nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      int nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned  nbytes_out_lo32,
342,343c342,343
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                       nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                      * nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                      int nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                       nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                      int* ,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                      * ,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                      int ,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                       ,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  ,
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  
343c343
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int nbytes_out_lo32,
(97.4 %, 5381 bytes)
343c343
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32,
343c343
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  ,
343c343
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32
343c343
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32,
>                      int* nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  ,
>                      int* nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32
>                      int* nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  
>                      int* nbytes_out_hi32 )
343c343
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
343c343
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * 
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                      int* nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      int* nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                     unsigned * nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                     unsigned * nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                      * nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      * nbytes_out_hi32 )
343c343
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      int* nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned * nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      * nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned int nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      int nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned  nbytes_out_hi32 )
343,344c343,344
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                       nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                      int nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                       nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                      int*  )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                      *  )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                      int  )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                        )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned *  )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned   )
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned *  
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned   
344c344
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int nbytes_out_hi32 )
(97.4 %, 5378 bytes)
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 )
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   )
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned  nbytes_out_hi32 )
> 
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned   )
> 
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned  nbytes_out_hi32 
> 
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned   
> 
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  )
> 
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  
> 
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
347c347
<    }
---
>    
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  
347c347
<    }
---
>    
344,345c344,346
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  )
> 
>    
347d347
<    }
344,345c344,346
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  
> 
>    
347d347
<    }
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
347c347
<    }
---
>    
344,345c344,346
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
>    
347d347
<    }
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
344,345c344,345
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
344,345c344,346
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
>    
347d347
<    }
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
345c345
< {
---
> 
345c345,346
< {
---
> 
>    
347d347
<    }
345c345
< {
---
> 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
345c345,346
< {
---
> 
>    
347d347
<    }
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
345c345
< {
---
> 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ_APIBZ2_bzReadOpen) 
345c345,346
< {
---
> 
>    
347d347
<    }
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ_APIBZ2_bzReadOpen) 
345c345
< {
---
> 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
345c345,346
< {
---
> 
>    
347d347
<    }
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
347c347
<    }
---
>    
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ_APIBZ2_bzReadOpen) 
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ_API() 
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> () 
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ_API) 
347c347
<    }
---
>    
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> ) 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen) 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> () 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> ) 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> (BZ2_bzReadOpen 
351c351
< BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen 
(97.4 %, 5372 bytes)
351c351
< (BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
351c351
< (BZ2_bzReadOpen) 
---
> ) 
351c351
< (BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen 
351c351
< (BZ2_bzReadOpen) 
---
>  
351,352c351,352
< (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZ2_bzReadOpen) 
>                     int*  bzerror, 
351,352c351,352
< (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> ) 
>                     int*  bzerror, 
351,352c351,352
< (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZ2_bzReadOpen 
>                     int*  bzerror, 
351,352c351,352
< (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>  
>                     int*  bzerror, 
351c351
< (BZ2_bzReadOpen) 
---
> () 
351c351
< (BZ2_bzReadOpen) 
---
> ( 
351,352c351,352
< (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> () 
>                     int*  bzerror, 
(97.4 %, 5370 bytes)
351,352c351,352
< BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  
>                    ( *  bzerror, 
351,352c351,352
< BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  
>                     *  bzerror, 
351,352c351,352
< BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  
>                    ( int  bzerror, 
351,352c351,352
< BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  
>                     int  bzerror, 
351,352c351,352
< BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  
>                    (   bzerror, 
351,352c351,352
< BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  
>                       bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                     int  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                       bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                     int*  , 
352c352
<                    ( int*  bzerror, 
---
>                     *  , 
352c352
<                    ( int*  bzerror, 
---
>                     int  , 
352c352
<                    ( int*  bzerror, 
---
>                       , 
352c352
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                    (   bzerror, 
352c352
<                    ( int*  bzerror, 
---
>                    ( *  , 
352c352
<                    ( int*  bzerror, 
---
>                    (   , 
352c352
<                    ( int*  bzerror, 
---
>                    ( *  bzerror 
352c352
<                    ( int*  bzerror, 
---
>                    (   bzerror 
352c352
<                    ( int*  bzerror, 
---
>                    ( *   
352c352
<                    ( int*  bzerror, 
---
>                    (    
352c352
<                    ( int*  bzerror, 
---
>                    ( int  bzerror, 
(97.4 %, 5358 bytes)
353c353
<                      FILE* f, 
---
>                        
353c353
<                      FILE* f, 
---
>                      FILE f, 
(97.4 %, 5351 bytes)
354,355c354,355
<                      int   verbositysmall,
<                      void* unused,
---
>                         
>                      * unused,
354c354
<                      int   verbositysmall,
---
>                      int   ,
354c354
<                      int   verbositysmall,
---
>                      int   
354,355c354,355
<                      int   verbositysmall,
<                      void* unused,
---
>                      int   ,
>                      * unused,
354,355c354,355
<                      int   verbositysmall,
<                      void* unused,
---
>                      int   
>                      * unused,
354,355c354,355
<                      int   verbositysmall,
<                      void* unused,
---
>                      int   ,
>                      void unused,
354,355c354,355
<                      int   verbositysmall,
<                      void* unused,
---
>                      int   
>                      void unused,
354,355c354,355
<                      int   verbositysmall,
<                      void* unused,
---
>                      int   ,
>                       unused,
354,355c354,355
<                      int   verbositysmall,
<                      void* unused,
---
>                      int   
>                       unused,
(97.4 %, 5332 bytes)
355c355
<                      * unused,
---
>                       
355,356c355,356
<                      * unused,
<                      int   nUnused )
---
>                       unused,
>                         nUnused )
355,356c355,356
<                      * unused,
<                      int   nUnused )
---
>                       ,
>                         nUnused )
355,356c355,356
<                      * unused,
<                      int   nUnused )
---
>                       unused
>                         nUnused )
355,356c355,356
<                      * unused,
<                      int   nUnused )
---
>                       
>                         nUnused )
355c355
<                      * unused,
---
>                      * ,
355c355
<                      * unused,
---
>                      * 
355,356c355,356
<                      * unused,
<                      int   nUnused )
---
>                      * ,
>                         nUnused )
355,356c355,356
<                      * unused,
<                      int   nUnused )
---
>                      * 
>                         nUnused )
(97.4 %, 5321 bytes)
356,358c356,358
<                         nUnused )
< {
<    bzFile* bzf ;
---
>                          
> 
>    * bzf ;
356c356
<                         nUnused )
---
>                         nUnused 
356,357c356,357
<                         nUnused )
< {
---
>                         nUnused 
> 
356c356
<                         nUnused )
---
>                         nUnused 
358c358
<    bzFile* bzf ;
---
>    * bzf ;
356,358c356,358
<                         nUnused )
< {
<    bzFile* bzf ;
---
>                         nUnused 
> 
>    * bzf ;
356c356
<                         nUnused )
---
>                         nUnused 
358c358
<    bzFile* bzf ;
---
>    bzFile bzf ;
356,358c356,358
<                         nUnused )
< {
<    bzFile* bzf ;
---
>                         nUnused 
> 
>    bzFile bzf ;
356c356
<                         nUnused )
---
>                         nUnused 
358c358
<    bzFile* bzf ;
---
>     bzf ;
356,358c356,358
<                         nUnused )
< {
<    bzFile* bzf ;
---
>                         nUnused 
> 
>     bzf ;
357c357
< {
---
> 
357,358c357,358
< {
<    bzFile* bzf ;
---
> 
>    * bzf ;
357,358c357,358
< {
<    bzFile* bzf ;
---
> 
>    bzFile bzf ;
357,358c357,358
< {
<    bzFile* bzf ;
---
> 
>     bzf ;
357,358c357,358
< {
<    bzFile* bzf ;
---
> 
>    bzFile*  ;
357,358c357,358
< {
<    bzFile* bzf ;
---
> 
>    *  ;
357,358c357,358
< {
<    bzFile* bzf ;
---
> 
>    bzFile  ;
357,358c357,358
< {
<    bzFile* bzf ;
---
> 
>      ;
358c358
<    bzFile* bzf ;
---
>    * bzf ;
358c358
<    bzFile* bzf ;
---
>     bzf ;
358c358
<    bzFile* bzf ;
---
>    *  ;
358c358
<    bzFile* bzf ;
---
>      ;
358c358
<    bzFile* bzf ;
---
>    * bzf 
358c358
<    bzFile* bzf ;
---
>     bzf 
358c358
<    bzFile* bzf ;
---
>    *  
358c358
<    bzFile* bzf ;
---
>      
358c358
<    bzFile* bzf ;
---
>    bzFile bzf ;
358c358
<    bzFile* bzf ;
---
>    bzFile  ;
358c358
<    bzFile* bzf ;
---
>    bzFile bzf 
358c358
<    bzFile* bzf ;
---
>    bzFile  
358c358
<    bzFile* bzf ;
---
>    bzFile bzf ;
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
358c358
<    bzFile* bzf ;
---
>    bzFile  ;
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
358c358
<    bzFile* bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
358c358
<    bzFile* bzf ;
---
>    bzFile  
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
(97.4 %, 5320 bytes)
358c358
<    bzFile bzf ;
---
>    bzFile  ;
358c358
<    bzFile bzf ;
---
>    bzFile  
358c358
<    bzFile bzf ;
---
>    bzFile  ;
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile  
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile  ;
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile  
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile  ;
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile  
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     ((BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (BZ_MAX_UNUSED)))
358c358
<    bzFile bzf ;
---
>    bzFile bzf 
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (((BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     ((BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     ((BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     ((BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     (BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>     BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (()))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ()))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ()))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if )))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (()))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ()))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (BZ_MAX_UNUSED))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (())
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ())
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED)))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if (()))
360c360
<    if (((BZ_MAX_UNUSED)))
---
>    if ((BZ_MAX_UNUSED))
(97.4 %, 5318 bytes)
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if (BZ_MAX_UNUSED)
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if ()
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if (BZ_MAX_UNUSED
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if (
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if (())
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if (()
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if (()
360c360
<    if ((BZ_MAX_UNUSED))
---
>    if ((
360,361c360,361
<    if ((BZ_MAX_UNUSED))
<       bzf;
---
>    if (())
>       ;
(97.4 %, 5316 bytes)
360,361c360,361
<    if (BZ_MAX_UNUSED)
<       bzf;
---
>    if ()
>       bzf
360,361c360,361
<    if (BZ_MAX_UNUSED)
<       bzf;
---
>    if (
>       bzf
360,361c360,361
<    if (BZ_MAX_UNUSED)
<       bzf;
---
>    if ()
>       
360,361c360,361
<    if (BZ_MAX_UNUSED)
<       bzf;
---
>    if (
>       
360c360
<    if (BZ_MAX_UNUSED)
---
>    if (BZ_MAX_UNUSED
360,361c360,361
<    if (BZ_MAX_UNUSED)
<       bzf;
---
>    if (BZ_MAX_UNUSED
>       ;
360,361c360,361
<    if (BZ_MAX_UNUSED)
<       bzf;
---
>    if (BZ_MAX_UNUSED
>       bzf
360,361c360,361
<    if (BZ_MAX_UNUSED)
<       bzf;
---
>    if (BZ_MAX_UNUSED
>       
360c360
<    if (BZ_MAX_UNUSED)
---
>    if (BZ_MAX_UNUSED
362c362
<    }
---
>    
360,362c360,362
<    if (BZ_MAX_UNUSED)
<       bzf;
<    }
---
>    if (BZ_MAX_UNUSED
>       ;
>    
360,362c360,362
<    if (BZ_MAX_UNUSED)
<       bzf;
<    }
---
>    if (BZ_MAX_UNUSED
>       bzf
>    
360,362c360,362
<    if (BZ_MAX_UNUSED)
<       bzf;
<    }
---
>    if (BZ_MAX_UNUSED
>       
>    
361c361
<       bzf;
---
>       ;
361c361
<       bzf;
---
>       
361,362c361,362
<       bzf;
<    }
---
>       ;
>    
361,362c361,362
<       bzf;
<    }
---
>       
>    
361c361
<       bzf;
---
>       ;
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
361c361
<       bzf;
---
>       
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
361,362c361,362
<       bzf;
<    }
---
>       ;
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
361,362c361,362
<       bzf;
<    }
---
>       
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
361c361
<       bzf;
---
>       bzf
(97.4 %, 5313 bytes)
361c361
<       ;
---
>       
361,362c361,362
<       ;
<    }
---
>       
>    
361c361
<       ;
---
>       
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
361,362c361,362
<       ;
<    }
---
>       
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
361c361
<       ;
---
>       
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> () ( int *bzerror, BZFILE *b )
361,362c361,362
<       ;
<    }
---
>       
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> () ( int *bzerror, BZFILE *b )
361c361
<       ;
---
>       
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ) ( int *bzerror, BZFILE *b )
361,362c361,362
<       ;
<    }
---
>       
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ) ( int *bzerror, BZFILE *b )
362c362
<    }
---
>    
362c362
<    }
---
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
362c362
<    }
---
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> () ( int *bzerror, BZFILE *b )
362c362
<    }
---
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ) ( int *bzerror, BZFILE *b )
362c362
<    }
---
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> (BZ2_bzReadClose ( int *bzerror, BZFILE *b )
362c362
<    }
---
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose ( int *bzerror, BZFILE *b )
362c362
<    }
---
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ( ( int *bzerror, BZFILE *b )
362c362
<    }
---
>    
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>  ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ) ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>  ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose)  int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> )  int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose  int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>   int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> () ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ( ( int *bzerror, BZFILE *b )
366c366
< (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ()  int *bzerror, BZFILE *b )
(97.4 %, 5311 bytes)
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  (  *bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>    *bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  ( int bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>   int bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>  (  bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>    bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose  int *bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose   *bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose  int bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose   bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose  int *, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose   *, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose  int , BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose   , BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (  *bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (  bzerror, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (  *, BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (  , BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (  *bzerror BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (  bzerror BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (  * BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose (   BZFILE *b )
366c366
< BZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> BZ2_bzReadClose ( int bzerror, BZFILE *b )
(97.4 %, 5299 bytes)
366c366
< BZ2_bzReadClose (   BZFILE *b )
---
> BZ2_bzReadClose (     
366c366
< BZ2_bzReadClose (   BZFILE *b )
---
> BZ2_bzReadClose (   BZFILE b )
366c366
< BZ2_bzReadClose (   BZFILE *b )
---
> BZ2_bzReadClose (   BZFILE  )
366c366
< BZ2_bzReadClose (   BZFILE *b )
---
> BZ2_bzReadClose (   BZFILE b 
366c366
< BZ2_bzReadClose (   BZFILE *b )
---
> BZ2_bzReadClose (   BZFILE  
366,367c366,367
< BZ2_bzReadClose (   BZFILE *b )
< {
---
> BZ2_bzReadClose (   BZFILE b )
> 
366,367c366,367
< BZ2_bzReadClose (   BZFILE *b )
< {
---
> BZ2_bzReadClose (   BZFILE  )
> 
366,367c366,367
< BZ2_bzReadClose (   BZFILE *b )
< {
---
> BZ2_bzReadClose (   BZFILE b 
> 
366,367c366,367
< BZ2_bzReadClose (   BZFILE *b )
< {
---
> BZ2_bzReadClose (   BZFILE  
> 
366c366
< BZ2_bzReadClose (   BZFILE *b )
---
> BZ2_bzReadClose (   BZFILE * )
(97.4 %, 5298 bytes)
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE  )
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE  
366,367c366,367
< BZ2_bzReadClose (   BZFILE b )
< {
---
> BZ2_bzReadClose (   BZFILE  )
> 
366,367c366,367
< BZ2_bzReadClose (   BZFILE b )
< {
---
> BZ2_bzReadClose (   BZFILE  
> 
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE  )
368c368
<    }
---
>    
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE  
368c368
<    }
---
>    
366,368c366,368
< BZ2_bzReadClose (   BZFILE b )
< {
<    }
---
> BZ2_bzReadClose (   BZFILE  )
> 
>    
366,368c366,368
< BZ2_bzReadClose (   BZFILE b )
< {
<    }
---
> BZ2_bzReadClose (   BZFILE  
> 
>    
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE b 
366,367c366,367
< BZ2_bzReadClose (   BZFILE b )
< {
---
> BZ2_bzReadClose (   BZFILE b 
> 
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE b 
368c368
<    }
---
>    
366,368c366,368
< BZ2_bzReadClose (   BZFILE b )
< {
<    }
---
> BZ2_bzReadClose (   BZFILE b 
> 
>    
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE b 
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
366,367c366,367
< BZ2_bzReadClose (   BZFILE b )
< {
---
> BZ2_bzReadClose (   BZFILE b 
> 
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose (   BZFILE b 
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
366,368c366
< BZ2_bzReadClose (   BZFILE b )
< {
<    }
---
> BZ2_bzReadClose (   BZFILE b 
369a368
>    
372c371,372
< (BZ2_bzRead) 
---
> 
> BZ2_bzRead) 
367c367
< {
---
> 
367,368c367,368
< {
<    }
---
> 
>    
367c367
< {
---
> 
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
367,368d366
< {
<    }
369a368
>    
372c371,372
< (BZ2_bzRead) 
---
> 
> BZ2_bzRead) 
367c367
< {
---
> 
372c372
< (BZ2_bzRead) 
---
> () 
367,368d366
< {
<    }
369a368
>    
372c371,372
< (BZ2_bzRead) 
---
> 
> () 
367c367
< {
---
> 
372c372
< (BZ2_bzRead) 
---
> ) 
367,368d366
< {
<    }
369a368
>    
372c371,372
< (BZ2_bzRead) 
---
> 
> ) 
368c368
<    }
---
>    
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
> () 
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
> ) 
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
> (BZ2_bzRead 
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead 
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
> ( 
368c368
<    }
---
>    
372c372
< (BZ2_bzRead) 
---
>  
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
372c372
< (BZ2_bzRead) 
---
> ) 
372c372
< (BZ2_bzRead) 
---
> BZ2_bzRead 
372c372
< (BZ2_bzRead) 
---
>  
372,373c372,373
< (BZ2_bzRead) 
<            ( void*   buflen )
---
> BZ2_bzRead) 
>             void*   buflen )
372,373c372,373
< (BZ2_bzRead) 
<            ( void*   buflen )
---
> ) 
>             void*   buflen )
372,373c372,373
< (BZ2_bzRead) 
<            ( void*   buflen )
---
> BZ2_bzRead 
>             void*   buflen )
372,373c372,373
< (BZ2_bzRead) 
<            ( void*   buflen )
---
>  
>             void*   buflen )
372c372
< (BZ2_bzRead) 
---
> () 
372c372
< (BZ2_bzRead) 
---
> ( 
(97.4 %, 5296 bytes)
372,373c372,373
< BZ2_bzRead 
<            ( void*   buflen )
---
>  
>            ( *   buflen )
372,373c372,373
< BZ2_bzRead 
<            ( void*   buflen )
---
>  
>             *   buflen )
372,373c372,373
< BZ2_bzRead 
<            ( void*   buflen )
---
>  
>            ( void   buflen )
372,373c372,373
< BZ2_bzRead 
<            ( void*   buflen )
---
>  
>             void   buflen )
372,373c372,373
< BZ2_bzRead 
<            ( void*   buflen )
---
>  
>            (    buflen )
372,373c372,373
< BZ2_bzRead 
<            ( void*   buflen )
---
>  
>                buflen )
373c373
<            ( void*   buflen )
---
>             void*   buflen )
373c373
<            ( void*   buflen )
---
>             *   buflen )
373c373
<            ( void*   buflen )
---
>             void   buflen )
373c373
<            ( void*   buflen )
---
>                buflen )
373c373
<            ( void*   buflen )
---
>             void*    )
373c373
<            ( void*   buflen )
---
>             *    )
373c373
<            ( void*   buflen )
---
>             void    )
373c373
<            ( void*   buflen )
---
>                 )
373c373
<            ( void*   buflen )
---
>            ( *   buflen )
373c373
<            ( void*   buflen )
---
>            (    buflen )
373c373
<            ( void*   buflen )
---
>            ( *    )
373c373
<            ( void*   buflen )
---
>            (     )
373c373
<            ( void*   buflen )
---
>            ( *   buflen 
373c373
<            ( void*   buflen )
---
>            (    buflen 
(97.4 %, 5291 bytes)
373c373
<            (    buflen )
---
>            (     
373,374c373,374
<            (    buflen )
< {
---
>            (     )
> 
373,374c373,374
<            (    buflen )
< {
---
>            (     
> 
373c373
<            (    buflen )
---
>            (     )
376c376
<    ; 
---
>     
373c373
<            (    buflen )
---
>            (     
376c376
<    ; 
---
>     
373,374c373,374
<            (    buflen )
< {
---
>            (     )
> 
376c376
<    ; 
---
>     
373,374c373,374
<            (    buflen )
< {
---
>            (     
> 
376c376
<    ; 
---
>     
373c373
<            (    buflen )
---
>            (    buflen 
373,374c373,374
<            (    buflen )
< {
---
>            (    buflen 
> 
373c373
<            (    buflen )
---
>            (    buflen 
376c376
<    ; 
---
>     
373,374c373,374
<            (    buflen )
< {
---
>            (    buflen 
> 
376c376
<    ; 
---
>     
373c373
<            (    buflen )
---
>            (    buflen 
377c377
< }
---
> 
(97.4 %, 5284 bytes)
373c373
<            (     )
---
>            (     
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
373,374c373,374
<            (     )
< {
---
>            (     
> 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
373c373
<            (     )
---
>            (     
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_API(BZ2_bzReadGetUnused) 
373,374c373,374
<            (     )
< {
---
>            (     
> 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_API(BZ2_bzReadGetUnused) 
374c374
< {
---
> 
374c374
< {
---
> 
377c377
< }
---
> 
374c374
< {
---
> 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
374c374
< {
---
> 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_API(BZ2_bzReadGetUnused) 
374c374
< {
---
> 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused) 
374c374
< {
---
> 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
> void (BZ2_bzReadGetUnused) 
374c374
< {
---
> 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  (BZ2_bzReadGetUnused) 
374c374
< {
---
> 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  (BZ2_bzReadGetUnused) 
377c377
< }
---
> 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_API(BZ2_bzReadGetUnused) 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
> void (BZ2_bzReadGetUnused) 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  (BZ2_bzReadGetUnused) 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
> void BZ_APIBZ2_bzReadGetUnused) 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_APIBZ2_bzReadGetUnused) 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
> void BZ2_bzReadGetUnused) 
377d376
< }
381c380,381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  (BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_APIBZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API() 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  () 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  ) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void () 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void ) 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused 
381c381
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused 
(97.4 %, 5278 bytes)
381c381
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
381c381
< void (BZ2_bzReadGetUnused) 
---
> void ) 
381c381
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused 
381c381
< void (BZ2_bzReadGetUnused) 
---
> void  
381,382c381,382
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ2_bzReadGetUnused) 
>                       int*    bzerror, 
381,382c381,382
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void ) 
>                       int*    bzerror, 
381,382c381,382
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ2_bzReadGetUnused 
>                       int*    bzerror, 
381,382c381,382
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void  
>                       int*    bzerror, 
381c381
< void (BZ2_bzReadGetUnused) 
---
> void () 
381c381
< void (BZ2_bzReadGetUnused) 
---
> void ( 
381,382c381,382
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void () 
>                       int*    bzerror, 
381,382c381,382
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void ( 
>                       int*    bzerror, 
(97.4 %, 5276 bytes)
381,382c381,382
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( *    bzerror, 
381,382c381,382
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       *    bzerror, 
381,382c381,382
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( int    bzerror, 
381,382c381,382
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int    bzerror, 
381,382c381,382
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      (     bzerror, 
381,382c381,382
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                           bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                       *    bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                       int    bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                           bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                       int*    , 
382c382
<                      ( int*    bzerror, 
---
>                       *    , 
382c382
<                      ( int*    bzerror, 
---
>                       int    , 
382c382
<                      ( int*    bzerror, 
---
>                           , 
382c382
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                      (     bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                      ( *    , 
382c382
<                      ( int*    bzerror, 
---
>                      (     , 
382c382
<                      ( int*    bzerror, 
---
>                      ( *    bzerror 
382c382
<                      ( int*    bzerror, 
---
>                      (     bzerror 
382c382
<                      ( int*    bzerror, 
---
>                      ( *     
382c382
<                      ( int*    bzerror, 
---
>                      (      
382c382
<                      ( int*    bzerror, 
---
>                      ( int    bzerror, 
382c382
<                      ( int*    bzerror, 
---
>                      ( int    , 
382c382
<                      ( int*    bzerror, 
---
>                      ( int    bzerror 
382c382
<                      ( int*    bzerror, 
---
>                      ( int     
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror, 
>                        * b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    , 
>                        * b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror 
>                        * b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int     
>                        * b, 
382c382
<                      ( int*    bzerror, 
---
>                      ( int*    , 
382c382
<                      ( int*    bzerror, 
---
>                      ( int*     
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        * b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        * b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        BZFILE b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                         b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                         b, 
382c382
<                      ( int*    bzerror, 
---
>                      ( int*    bzerror 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         b, 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE* , 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * , 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE , 
382,383c382,383
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         , 
383c383
<                        BZFILE* b, 
---
>                        * b, 
383c383
<                        BZFILE* b, 
---
>                         b, 
383c383
<                        BZFILE* b, 
---
>                        * , 
383c383
<                        BZFILE* b, 
---
>                         , 
383c383
<                        BZFILE* b, 
---
>                        * b 
383c383
<                        BZFILE* b, 
---
>                         b 
383c383
<                        BZFILE* b, 
---
>                        *  
383c383
<                        BZFILE* b, 
---
>                          
383c383
<                        BZFILE* b, 
---
>                        BZFILE b, 
383c383
<                        BZFILE* b, 
---
>                        BZFILE , 
383c383
<                        BZFILE* b, 
---
>                        BZFILE b 
383c383
<                        BZFILE* b, 
---
>                        BZFILE  
383,384c383,384
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b, 
>                        **  unused, 
383,384c383,384
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        **  unused, 
383,384c383,384
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        **  unused, 
383,384c383,384
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        **  unused, 
(97.4 %, 5275 bytes)
383c383
<                        BZFILE b, 
---
>                        BZFILE , 
383c383
<                        BZFILE b, 
---
>                        BZFILE  
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        **  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        **  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        void*  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        void*  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        *  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        *  unused, 
383c383
<                        BZFILE b, 
---
>                        BZFILE b 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        **  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        void*  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        *  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        void*  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        *  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        void  unused, 
383,384c383,384
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                          unused, 
384c384
<                        void**  unused, 
---
>                        **  unused, 
384c384
<                        void**  unused, 
---
>                        *  unused, 
384c384
<                        void**  unused, 
---
>                        *  unused, 
384c384
<                        void**  unused, 
---
>                          unused, 
384c384
<                        void**  unused, 
---
>                        **  , 
384c384
<                        void**  unused, 
---
>                        *  , 
384c384
<                        void**  unused, 
---
>                        *  , 
384c384
<                        void**  unused, 
---
>                          , 
384c384
<                        void**  unused, 
---
>                        void*  unused, 
384c384
<                        void**  unused, 
---
>                        void  unused, 
384c384
<                        void**  unused, 
---
>                        void*  , 
384c384
<                        void**  unused, 
---
>                        void  , 
384c384
<                        void**  unused, 
---
>                        void*  unused 
384c384
<                        void**  unused, 
---
>                        void  unused 
384c384
<                        void**  unused, 
---
>                        void*   
384c384
<                        void**  unused, 
---
>                        void   
384c384
<                        void**  unused, 
---
>                        void*  unused, 
384c384
<                        void**  unused, 
---
>                        void*  , 
384c384
<                        void**  unused, 
---
>                        void*  unused 
384c384
<                        void**  unused, 
---
>                        void*   
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused, 
>                        *    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  , 
>                        *    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused 
>                        *    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*   
>                        *    nUnused )
384c384
<                        void**  unused, 
---
>                        void**  , 
384c384
<                        void**  unused, 
---
>                        void**   
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        *    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        *    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        int    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        int    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                            nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                            nUnused )
384c384
<                        void**  unused, 
---
>                        void**  unused 
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int    nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                            nUnused )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int*     )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *     )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int     )
384,385c384,385
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                             )
385c385
<                        int*    nUnused )
---
>                        *    nUnused )
385c385
<                        int*    nUnused )
---
>                            nUnused )
385c385
<                        int*    nUnused )
---
>                        *     )
385c385
<                        int*    nUnused )
---
>                             )
385c385
<                        int*    nUnused )
---
>                        *    nUnused 
385c385
<                        int*    nUnused )
---
>                            nUnused 
385c385
<                        int*    nUnused )
---
>                        *     
385c385
<                        int*    nUnused )
---
>                             
385c385
<                        int*    nUnused )
---
>                        int    nUnused )
385c385
<                        int*    nUnused )
---
>                        int     )
385c385
<                        int*    nUnused )
---
>                        int    nUnused 
385c385
<                        int*    nUnused )
---
>                        int     
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int    nUnused )
> 
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int     )
> 
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int    nUnused 
> 
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int     
> 
385c385
<                        int*    nUnused )
---
>                        int*     )
385c385
<                        int*    nUnused )
---
>                        int*     
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int*     )
> 
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int*     
> 
385c385
<                        int*    nUnused )
---
>                        int*     )
387c387
<    }
---
>    
385c385
<                        int*    nUnused )
---
>                        int*     
387c387
<    }
---
>    
385,387c385,387
<                        int*    nUnused )
< {
<    }
---
>                        int*     )
> 
>    
385,387c385,387
<                        int*    nUnused )
< {
<    }
---
>                        int*     
> 
>    
385c385
<                        int*    nUnused )
---
>                        int*    nUnused 
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int*    nUnused 
> 
385c385
<                        int*    nUnused )
---
>                        int*    nUnused 
387c387
<    }
---
>    
385,387c385,387
<                        int*    nUnused )
< {
<    }
---
>                        int*    nUnused 
> 
>    
385c385
<                        int*    nUnused )
---
>                        int*    nUnused 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
385,386c385,386
<                        int*    nUnused )
< {
---
>                        int*    nUnused 
> 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
385c385
<                        int*    nUnused )
---
>                        int*    nUnused 
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
385,387c385
<                        int*    nUnused )
< {
<    }
---
>                        int*    nUnused 
388a387
>    
395c394,395
< (BZ2_bzBuffToBuffCompress) 
---
> 
> BZ2_bzBuffToBuffCompress) 
386c386
< {
---
> 
386,387c386,387
< {
<    }
---
> 
>    
386c386
< {
---
> 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
386,387d385
< {
<    }
388a387
>    
395c394,395
< (BZ2_bzBuffToBuffCompress) 
---
> 
> BZ2_bzBuffToBuffCompress) 
386c386
< {
---
> 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> () 
386,387d385
< {
<    }
388a387
>    
395c394,395
< (BZ2_bzBuffToBuffCompress) 
---
> 
> () 
386c386
< {
---
> 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> ) 
386,387d385
< {
<    }
388a387
>    
395c394,395
< (BZ2_bzBuffToBuffCompress) 
---
> 
> ) 
387c387
<    }
---
>    
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> () 
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> ) 
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> (BZ2_bzBuffToBuffCompress 
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress 
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> ( 
387c387
<    }
---
>    
395c395
< (BZ2_bzBuffToBuffCompress) 
---
>  
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> ) 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
>  
395,396c395,396
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> BZ2_bzBuffToBuffCompress) 
>                           char*         dest, 
395,396c395,396
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> ) 
>                           char*         dest, 
395,396c395,396
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> BZ2_bzBuffToBuffCompress 
>                           char*         dest, 
395,396c395,396
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>  
>                           char*         dest, 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> () 
395c395
< (BZ2_bzBuffToBuffCompress) 
---
> ( 
395,396c395,396
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> () 
>                           char*         dest, 
(97.4 %, 5273 bytes)
395,396c395,396
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                          ( *         dest, 
395,396c395,396
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                           *         dest, 
395,396c395,396
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                          ( char         dest, 
395,396c395,396
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                           char         dest, 
395,396c395,396
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                          (          dest, 
395,396c395,396
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                                    dest, 
396c396
<                          ( char*         dest, 
---
>                           char*         dest, 
396c396
<                          ( char*         dest, 
---
>                           *         dest, 
396c396
<                          ( char*         dest, 
---
>                           char         dest, 
396c396
<                          ( char*         dest, 
---
>                                    dest, 
396c396
<                          ( char*         dest, 
---
>                           char*         , 
396c396
<                          ( char*         dest, 
---
>                           *         , 
396c396
<                          ( char*         dest, 
---
>                           char         , 
396c396
<                          ( char*         dest, 
---
>                                    , 
396c396
<                          ( char*         dest, 
---
>                          ( *         dest, 
396c396
<                          ( char*         dest, 
---
>                          (          dest, 
396c396
<                          ( char*         dest, 
---
>                          ( *         , 
396c396
<                          ( char*         dest, 
---
>                          (          , 
396c396
<                          ( char*         dest, 
---
>                          ( *         dest 
396c396
<                          ( char*         dest, 
---
>                          (          dest 
396c396
<                          ( char*         dest, 
---
>                          ( *          
396c396
<                          ( char*         dest, 
---
>                          (           
396c396
<                          ( char*         dest, 
---
>                          ( char         dest, 
396c396
<                          ( char*         dest, 
---
>                          ( char         , 
396c396
<                          ( char*         dest, 
---
>                          ( char         dest 
396c396
<                          ( char*         dest, 
---
>                          ( char          
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest, 
>                             int* destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         , 
>                             int* destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest 
>                             int* destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char          
>                             int* destLen,
396c396
<                          ( char*         dest, 
---
>                          ( char*         , 
396c396
<                          ( char*         dest, 
---
>                          ( char*          
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                             int* destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             int* destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                            unsigned * destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                            unsigned * destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                             * destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             * destLen,
396c396
<                          ( char*         dest, 
---
>                          ( char*         dest 
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             int* destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned * destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             * destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned int destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             int destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned  destLen,
396,397c396,397
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                              destLen,
397c397
<                            unsigned int* destLen,
---
>                             int* destLen,
397c397
<                            unsigned int* destLen,
---
>                             * destLen,
397c397
<                            unsigned int* destLen,
---
>                             int destLen,
397c397
<                            unsigned int* destLen,
---
>                              destLen,
397c397
<                            unsigned int* destLen,
---
>                             int* ,
397c397
<                            unsigned int* destLen,
---
>                             * ,
397c397
<                            unsigned int* destLen,
---
>                             int ,
397c397
<                            unsigned int* destLen,
---
>                              ,
397c397
<                            unsigned int* destLen,
---
>                            unsigned * destLen,
397c397
<                            unsigned int* destLen,
---
>                            unsigned  destLen,
397c397
<                            unsigned int* destLen,
---
>                            unsigned * ,
397c397
<                            unsigned int* destLen,
---
>                            unsigned  ,
397c397
<                            unsigned int* destLen,
---
>                            unsigned * destLen
397c397
<                            unsigned int* destLen,
---
>                            unsigned  destLen
397c397
<                            unsigned int* destLen,
---
>                            unsigned * 
397c397
<                            unsigned int* destLen,
---
>                            unsigned  
397c397
<                            unsigned int* destLen,
---
>                            unsigned int destLen,
(97.4 %, 5270 bytes)
397c397
<                            unsigned * destLen,
---
>                            unsigned  destLen,
397c397
<                            unsigned * destLen,
---
>                            unsigned  ,
397c397
<                            unsigned * destLen,
---
>                            unsigned  destLen
397c397
<                            unsigned * destLen,
---
>                            unsigned  
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen,
>                            *         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  ,
>                            *         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen
>                            *         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  
>                            *         source, 
397c397
<                            unsigned * destLen,
---
>                            unsigned * ,
397c397
<                            unsigned * destLen,
---
>                            unsigned * 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            *         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            *         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            char         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            char         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                                     source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                                     source, 
397c397
<                            unsigned * destLen,
---
>                            unsigned * destLen
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     source, 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char*         , 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         , 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         , 
397,398c397,398
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     , 
398c398
<                            char*         source, 
---
>                            *         source, 
398c398
<                            char*         source, 
---
>                                     source, 
398c398
<                            char*         source, 
---
>                            *         , 
398c398
<                            char*         source, 
---
>                                     , 
398c398
<                            char*         source, 
---
>                            *         source 
398c398
<                            char*         source, 
---
>                                     source 
398c398
<                            char*         source, 
---
>                            *          
398c398
<                            char*         source, 
---
>                                      
398c398
<                            char*         source, 
---
>                            char         source, 
398c398
<                            char*         source, 
---
>                            char         , 
398c398
<                            char*         source, 
---
>                            char         source 
398c398
<                            char*         source, 
---
>                            char          
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source, 
>                             int  sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         , 
>                             int  sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source 
>                             int  sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char          
>                             int  sourceLen,
398c398
<                            char*         source, 
---
>                            char*         , 
398c398
<                            char*         source, 
---
>                            char*          
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                             int  sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                             int  sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                            unsigned   sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                            unsigned   sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                               sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                               sourceLen,
398c398
<                            char*         source, 
---
>                            char*         source 
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                             int  sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned   sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                               sourceLen,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned int  ,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                             int  ,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned   ,
398,399c398,399
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                               ,
399c399
<                            unsigned int  sourceLen,
---
>                             int  sourceLen,
399c399
<                            unsigned int  sourceLen,
---
>                               sourceLen,
399c399
<                            unsigned int  sourceLen,
---
>                             int  ,
399c399
<                            unsigned int  sourceLen,
---
>                               ,
399c399
<                            unsigned int  sourceLen,
---
>                             int  sourceLen
399c399
<                            unsigned int  sourceLen,
---
>                               sourceLen
399c399
<                            unsigned int  sourceLen,
---
>                             int  
399c399
<                            unsigned int  sourceLen,
---
>                               
399c399
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen,
399c399
<                            unsigned int  sourceLen,
---
>                            unsigned   ,
399c399
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen
399c399
<                            unsigned int  sourceLen,
---
>                            unsigned   
399,400c399,400
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen,
>                                       blockSize100k, 
399,400c399,400
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       blockSize100k, 
399,400c399,400
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k, 
399,400c399,400
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
(97.4 %, 5267 bytes)
399c399
<                            unsigned   sourceLen,
---
>                            unsigned   ,
399c399
<                            unsigned   sourceLen,
---
>                            unsigned   
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       blockSize100k, 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                            int           , 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                            int           , 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       , 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       , 
399c399
<                            unsigned   sourceLen,
---
>                            unsigned   sourceLen
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k, 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int           , 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       , 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int           blockSize100k 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k 
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int            
399,400c399,400
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                        
400c400
<                            int           blockSize100k, 
---
>                                       blockSize100k, 
400c400
<                            int           blockSize100k, 
---
>                                       , 
400c400
<                            int           blockSize100k, 
---
>                                       blockSize100k 
400c400
<                            int           blockSize100k, 
---
>                                        
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k, 
>                                       verbosity, 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       , 
>                                       verbosity, 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k 
>                                       verbosity, 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                        
>                                       verbosity, 
400c400
<                            int           blockSize100k, 
---
>                            int           , 
400c400
<                            int           blockSize100k, 
---
>                            int            
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       verbosity, 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       verbosity, 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                            int           , 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                            int           , 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       , 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       , 
400c400
<                            int           blockSize100k, 
---
>                            int           blockSize100k 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity, 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           , 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       , 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           verbosity 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity 
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int            
400,401c400,401
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                        
401c401
<                            int           verbosity, 
---
>                                       verbosity, 
401c401
<                            int           verbosity, 
---
>                                       , 
401c401
<                            int           verbosity, 
---
>                                       verbosity 
401c401
<                            int           verbosity, 
---
>                                        
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity, 
>                                       workFactor )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       , 
>                                       workFactor )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity 
>                                       workFactor )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                                        
>                                       workFactor )
401c401
<                            int           verbosity, 
---
>                            int           , 
401c401
<                            int           verbosity, 
---
>                            int            
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                       workFactor )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                       workFactor )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                            int            )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                            int            )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                        )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                        )
401c401
<                            int           verbosity, 
---
>                            int           verbosity 
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        )
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int           workFactor 
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor 
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            
401,402c401,402
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        
402c402
<                            int           workFactor )
---
>                                       workFactor )
402c402
<                            int           workFactor )
---
>                                        )
402c402
<                            int           workFactor )
---
>                                       workFactor 
402c402
<                            int           workFactor )
---
>                                        
402,403c402,403
<                            int           workFactor )
< {
---
>                                       workFactor )
> 
402,403c402,403
<                            int           workFactor )
< {
---
>                                        )
> 
402,403c402,403
<                            int           workFactor )
< {
---
>                                       workFactor 
> 
402,403c402,403
<                            int           workFactor )
< {
---
>                                        
> 
402c402
<                            int           workFactor )
---
>                            int            )
402c402
<                            int           workFactor )
---
>                            int            
402,403c402,403
<                            int           workFactor )
< {
---
>                            int            )
> 
402,403c402,403
<                            int           workFactor )
< {
---
>                            int            
> 
402c402
<                            int           workFactor )
---
>                            int            )
404c404
<    ;
---
>    
402c402
<                            int           workFactor )
---
>                            int            
404c404
<    ;
---
>    
402,404c402,404
<                            int           workFactor )
< {
<    ;
---
>                            int            )
> 
>    
402,404c402,404
<                            int           workFactor )
< {
<    ;
---
>                            int            
> 
>    
402c402
<                            int           workFactor )
---
>                            int           workFactor 
402,403c402,403
<                            int           workFactor )
< {
---
>                            int           workFactor 
> 
402c402
<                            int           workFactor )
---
>                            int           workFactor 
404c404
<    ;
---
>    
402,404c402,404
<                            int           workFactor )
< {
<    ;
---
>                            int           workFactor 
> 
>    
402c402
<                            int           workFactor )
---
>                            int           workFactor 
405c405
<    int retret;
---
>     retret;
402,403c402,403
<                            int           workFactor )
< {
---
>                            int           workFactor 
> 
405c405
<    int retret;
---
>     retret;
402c402
<                            int           workFactor )
---
>                            int           workFactor 
404,405c404,405
<    ;
<    int retret;
---
>    
>     retret;
402,405c402,405
<                            int           workFactor )
< {
<    ;
<    int retret;
---
>                            int           workFactor 
> 
>    
>     retret;
403c403
< {
---
> 
403,404c403,404
< {
<    ;
---
> 
>    
403c403
< {
---
> 
405c405
<    int retret;
---
>     retret;
403,405c403,405
< {
<    ;
<    int retret;
---
> 
>    
>     retret;
403c403
< {
---
> 
405c405
<    int retret;
---
>    int ;
403,405c403,405
< {
<    ;
<    int retret;
---
> 
>    
>    int ;
403c403
< {
---
> 
405c405
<    int retret;
---
>     ;
403,405c403,405
< {
<    ;
<    int retret;
---
> 
>    
>     ;
404c404
<    ;
---
>    
404,405c404,405
<    ;
<    int retret;
---
>    
>     retret;
404,405c404,405
<    ;
<    int retret;
---
>    
>    int ;
(97.4 %, 5266 bytes)
405c405
<    int retret;
---
>     retret;
405c405
<    int retret;
---
>     ;
405c405
<    int retret;
---
>     retret
405c405
<    int retret;
---
>     
(97.4 %, 5257 bytes)
405,406c405,406
<     ;
< }
---
>     
> 
405c405
<     ;
---
>     
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
405,406c405
<     ;
< }
---
>     
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress) 
405c405
<     ;
---
>     
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> () 
405,406c405
<     ;
< }
---
>     
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> () 
405c405
<     ;
---
>     
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> ) 
405,406c405
<     ;
< }
---
>     
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> ) 
406c406
< }
---
> 
406d405
< }
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress) 
406d405
< }
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> () 
406d405
< }
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> ) 
406d405
< }
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> (BZ2_bzBuffToBuffDecompress 
406d405
< }
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> BZ2_bzBuffToBuffDecompress 
406d405
< }
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
> ( 
406d405
< }
410c409,410
< (BZ2_bzBuffToBuffDecompress) 
---
> 
>  
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> ) 
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress 
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
>  
410,411c410,411
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ2_bzBuffToBuffDecompress) 
>                             char*         dest, 
410,411c410,411
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ) 
>                             char*         dest, 
410,411c410,411
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ2_bzBuffToBuffDecompress 
>                             char*         dest, 
410,411c410,411
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>  
>                             char*         dest, 
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> () 
410c410
< (BZ2_bzBuffToBuffDecompress) 
---
> ( 
410,411c410,411
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> () 
>                             char*         dest, 
(97.4 %, 5255 bytes)
410,411c410,411
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            ( *         dest, 
410,411c410,411
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             *         dest, 
410,411c410,411
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            ( char         dest, 
410,411c410,411
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             char         dest, 
410,411c410,411
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            (          dest, 
410,411c410,411
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                                      dest, 
411c411
<                            ( char*         dest, 
---
>                             char*         dest, 
411c411
<                            ( char*         dest, 
---
>                             *         dest, 
411c411
<                            ( char*         dest, 
---
>                             char         dest, 
411c411
<                            ( char*         dest, 
---
>                                      dest, 
411c411
<                            ( char*         dest, 
---
>                             char*         , 
411c411
<                            ( char*         dest, 
---
>                             *         , 
411c411
<                            ( char*         dest, 
---
>                             char         , 
411c411
<                            ( char*         dest, 
---
>                                      , 
411c411
<                            ( char*         dest, 
---
>                            ( *         dest, 
411c411
<                            ( char*         dest, 
---
>                            (          dest, 
411c411
<                            ( char*         dest, 
---
>                            ( *         , 
411c411
<                            ( char*         dest, 
---
>                            (          , 
411c411
<                            ( char*         dest, 
---
>                            ( *         dest 
411c411
<                            ( char*         dest, 
---
>                            (          dest 
411c411
<                            ( char*         dest, 
---
>                            ( *          
411c411
<                            ( char*         dest, 
---
>                            (           
411c411
<                            ( char*         dest, 
---
>                            ( char         dest, 
411c411
<                            ( char*         dest, 
---
>                            ( char         , 
411c411
<                            ( char*         dest, 
---
>                            ( char         dest 
411c411
<                            ( char*         dest, 
---
>                            ( char          
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest, 
>                               int* destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         , 
>                               int* destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest 
>                               int* destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char          
>                               int* destLen,
411c411
<                            ( char*         dest, 
---
>                            ( char*         , 
411c411
<                            ( char*         dest, 
---
>                            ( char*          
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               int* destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int* destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                              unsigned * destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned * destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               * destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               * destLen,
411c411
<                            ( char*         dest, 
---
>                            ( char*         dest 
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               int* destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned * destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               * destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned int destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               int destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned  destLen,
411,412c411,412
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                                destLen,
412c412
<                              unsigned int* destLen,
---
>                               int* destLen,
412c412
<                              unsigned int* destLen,
---
>                               * destLen,
412c412
<                              unsigned int* destLen,
---
>                               int destLen,
412c412
<                              unsigned int* destLen,
---
>                                destLen,
412c412
<                              unsigned int* destLen,
---
>                               int* ,
412c412
<                              unsigned int* destLen,
---
>                               * ,
412c412
<                              unsigned int* destLen,
---
>                               int ,
412c412
<                              unsigned int* destLen,
---
>                                ,
412c412
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
412c412
<                              unsigned int* destLen,
---
>                              unsigned  destLen,
412c412
<                              unsigned int* destLen,
---
>                              unsigned * ,
412c412
<                              unsigned int* destLen,
---
>                              unsigned  ,
412c412
<                              unsigned int* destLen,
---
>                              unsigned * destLen
412c412
<                              unsigned int* destLen,
---
>                              unsigned  destLen
412c412
<                              unsigned int* destLen,
---
>                              unsigned * 
412c412
<                              unsigned int* destLen,
---
>                              unsigned  
(97.4 %, 5252 bytes)
412c412
<                              unsigned * destLen,
---
>                              unsigned  destLen,
412c412
<                              unsigned * destLen,
---
>                              unsigned  ,
412c412
<                              unsigned * destLen,
---
>                              unsigned  destLen
412c412
<                              unsigned * destLen,
---
>                              unsigned  
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen,
>                              *         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  ,
>                              *         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen
>                              *         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  
>                              *         source, 
412c412
<                              unsigned * destLen,
---
>                              unsigned * ,
412c412
<                              unsigned * destLen,
---
>                              unsigned * 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              *         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              char         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                                       source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
412c412
<                              unsigned * destLen,
---
>                              unsigned * destLen
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       source, 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char*         , 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         , 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         , 
412,413c412,413
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       , 
413c413
<                              char*         source, 
---
>                              *         source, 
413c413
<                              char*         source, 
---
>                                       source, 
413c413
<                              char*         source, 
---
>                              *         , 
413c413
<                              char*         source, 
---
>                                       , 
413c413
<                              char*         source, 
---
>                              *         source 
413c413
<                              char*         source, 
---
>                                       source 
413c413
<                              char*         source, 
---
>                              *          
413c413
<                              char*         source, 
---
>                                        
413c413
<                              char*         source, 
---
>                              char         source, 
413c413
<                              char*         source, 
---
>                              char         , 
413c413
<                              char*         source, 
---
>                              char         source 
413c413
<                              char*         source, 
---
>                              char          
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source, 
>                               int  sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         , 
>                               int  sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source 
>                               int  sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char          
>                               int  sourceLen,
413c413
<                              char*         source, 
---
>                              char*         , 
413c413
<                              char*         source, 
---
>                              char*          
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                               int  sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                               int  sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                              unsigned   sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                              unsigned   sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                                 sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                                 sourceLen,
413c413
<                              char*         source, 
---
>                              char*         source 
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                               int  sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned   sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                                 sourceLen,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned int  ,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                               int  ,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned   ,
413,414c413,414
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                                 ,
414c414
<                              unsigned int  sourceLen,
---
>                               int  sourceLen,
414c414
<                              unsigned int  sourceLen,
---
>                                 sourceLen,
414c414
<                              unsigned int  sourceLen,
---
>                               int  ,
414c414
<                              unsigned int  sourceLen,
---
>                                 ,
414c414
<                              unsigned int  sourceLen,
---
>                               int  sourceLen
414c414
<                              unsigned int  sourceLen,
---
>                                 sourceLen
414c414
<                              unsigned int  sourceLen,
---
>                               int  
414c414
<                              unsigned int  sourceLen,
---
>                                 
414c414
<                              unsigned int  sourceLen,
---
>                              unsigned   sourceLen,
414c414
<                              unsigned int  sourceLen,
---
>                              unsigned   ,
414c414
<                              unsigned int  sourceLen,
---
>                              unsigned   sourceLen
414c414
<                              unsigned int  sourceLen,
---
>                              unsigned   
414,415c414,415
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen,
>                                         small,
414,415c414,415
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         small,
414,415c414,415
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small,
414,415c414,415
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         small,
(97.4 %, 5249 bytes)
414c414
<                              unsigned   sourceLen,
---
>                              unsigned   ,
414c414
<                              unsigned   sourceLen,
---
>                              unsigned   
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         small,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         small,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                              int           ,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                              int           ,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         ,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         ,
414c414
<                              unsigned   sourceLen,
---
>                              unsigned   sourceLen
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           ,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         ,
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           small
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           
414,415c414,415
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         
415c415
<                              int           small,
---
>                                         small,
415c415
<                              int           small,
---
>                                         ,
415c415
<                              int           small,
---
>                                         small
415c415
<                              int           small,
---
>                                         
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                                         small,
>                                         verbosity )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                                         ,
>                                         verbosity )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                                         small
>                                         verbosity )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                                         
>                                         verbosity )
415c415
<                              int           small,
---
>                              int           ,
415c415
<                              int           small,
---
>                              int           
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                         verbosity )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                              int            )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                              int            )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                          )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                          )
415c415
<                              int           small,
---
>                              int           small
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          )
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int           verbosity 
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity 
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            
415,416c415,416
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          
416c416
<                              int           verbosity )
---
>                                         verbosity )
416c416
<                              int           verbosity )
---
>                                          )
416c416
<                              int           verbosity )
---
>                                         verbosity 
416c416
<                              int           verbosity )
---
>                                          
416,417c416,417
<                              int           verbosity )
< {
---
>                                         verbosity )
> 
416,417c416,417
<                              int           verbosity )
< {
---
>                                          )
> 
416,417c416,417
<                              int           verbosity )
< {
---
>                                         verbosity 
> 
416,417c416,417
<                              int           verbosity )
< {
---
>                                          
> 
416c416
<                              int           verbosity )
---
>                              int            )
416c416
<                              int           verbosity )
---
>                              int            
416,417c416,417
<                              int           verbosity )
< {
---
>                              int            )
> 
416,417c416,417
<                              int           verbosity )
< {
---
>                              int            
> 
416c416
<                              int           verbosity )
---
>                              int            )
418c418
<    ;
---
>    
416c416
<                              int           verbosity )
---
>                              int            
418c418
<    ;
---
>    
416,418c416,418
<                              int           verbosity )
< {
<    ;
---
>                              int            )
> 
>    
416,418c416,418
<                              int           verbosity )
< {
<    ;
---
>                              int            
> 
>    
416c416
<                              int           verbosity )
---
>                              int           verbosity 
416,417c416,417
<                              int           verbosity )
< {
---
>                              int           verbosity 
> 
416c416
<                              int           verbosity )
---
>                              int           verbosity 
418c418
<    ;
---
>    
416,418c416,418
<                              int           verbosity )
< {
<    ;
---
>                              int           verbosity 
> 
>    
416c416
<                              int           verbosity )
---
>                              int           verbosity 
419c419
<    int retret ;
---
>     retret ;
416,417c416,417
<                              int           verbosity )
< {
---
>                              int           verbosity 
> 
419c419
<    int retret ;
---
>     retret ;
416c416
<                              int           verbosity )
---
>                              int           verbosity 
418,419c418,419
<    ;
<    int retret ;
---
>    
>     retret ;
416,419c416,419
<                              int           verbosity )
< {
<    ;
<    int retret ;
---
>                              int           verbosity 
> 
>    
>     retret ;
417c417
< {
---
> 
417,418c417,418
< {
<    ;
---
> 
>    
417c417
< {
---
> 
419c419
<    int retret ;
---
>     retret ;
417,419c417,419
< {
<    ;
<    int retret ;
---
> 
>    
>     retret ;
417c417
< {
---
> 
419c419
<    int retret ;
---
>    int  ;
417,419c417,419
< {
<    ;
<    int retret ;
---
> 
>    
>    int  ;
417c417
< {
---
> 
419c419
<    int retret ;
---
>      ;
417,419c417,419
< {
<    ;
<    int retret ;
---
> 
>    
>      ;
418c418
<    ;
---
>    
418,419c418,419
<    ;
<    int retret ;
---
>    
>     retret ;
418,419c418,419
<    ;
<    int retret ;
---
>    
>    int  ;
(97.4 %, 5248 bytes)
419c419
<    int retret ;
---
>     retret ;
419c419
<    int retret ;
---
>      ;
419c419
<    int retret ;
---
>     retret 
419c419
<    int retret ;
---
>      
(97.4 %, 5239 bytes)
419,420c419,420
<      ;
< }
---
>      
> 
419c419
<      ;
---
>      
425c425
< * bzopen_or_bzdopen
---
>  bzopen_or_bzdopen
419,420c419
<      ;
< }
---
>      
425c424,425
< * bzopen_or_bzdopen
---
> 
>  bzopen_or_bzdopen
419c419
<      ;
---
>      
425c425
< * bzopen_or_bzdopen
---
> * 
419,420c419
<      ;
< }
---
>      
425c424,425
< * bzopen_or_bzdopen
---
> 
> * 
419c419
<      ;
---
>      
425c425
< * bzopen_or_bzdopen
---
>  
(97.4 %, 5237 bytes)
420c420
< }
---
> 
426c426
<                ;
---
>                
420d419
< }
425,426c424,426
<  bzopen_or_bzdopen
<                ;
---
> 
>  
>                
420c420
< }
---
> 
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ_API(BZ2_bzopen)
420d419
< }
425c424,425
<  bzopen_or_bzdopen
---
> 
>  
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ_API(BZ2_bzopen)
420c420
< }
---
> 
426c426
<                ;
---
>                
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ_API(BZ2_bzopen)
420d419
< }
425,426d423
<  bzopen_or_bzdopen
<                ;
427a425,426
>  
>                
431c430,431
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
>  * BZ_API(BZ2_bzopen)
425c425
<  bzopen_or_bzdopen
---
>  
425,426c425,426
<  bzopen_or_bzdopen
<                ;
---
>  
>                
(97.5 %, 5220 bytes)
426c426
<                ;
---
>                
426c426
<                ;
---
>                
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ_API(BZ2_bzopen)
426c426
<                ;
---
>                
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  BZ_API(BZ2_bzopen)
426c426
<                ;
---
>                
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>   BZ_API(BZ2_bzopen)
426c426
<                ;
---
>                
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * (BZ2_bzopen)
(97.5 %, 5219 bytes)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ_API(BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>   BZ_API(BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * (BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>   (BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ_APIBZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>   BZ_APIBZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
>   BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  BZ_API(BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  (BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  BZ_APIBZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  BZ_API()
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  ()
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  BZ_API)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE  )
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * (BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ2_bzopen)
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * ()
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * )
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * (BZ2_bzopen
431c431
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ2_bzopen
(97.5 %, 5213 bytes)
431c431
< BZFILE * (BZ2_bzopen)
---
> BZFILE * BZ2_bzopen)
431c431
< BZFILE * (BZ2_bzopen)
---
> BZFILE * )
431c431
< BZFILE * (BZ2_bzopen)
---
> BZFILE * BZ2_bzopen
431c431
< BZFILE * (BZ2_bzopen)
---
> BZFILE * 
431,432c431,432
< BZFILE * (BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ2_bzopen)
>                 const char *path,
431,432c431,432
< BZFILE * (BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * )
>                 const char *path,
431,432c431,432
< BZFILE * (BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ2_bzopen
>                 const char *path,
431,432c431,432
< BZFILE * (BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * 
>                 const char *path,
431c431
< BZFILE * (BZ2_bzopen)
---
> BZFILE * ()
431c431
< BZFILE * (BZ2_bzopen)
---
> BZFILE * (
431,432c431,432
< BZFILE * (BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * ()
>                 const char *path,
(97.5 %, 5211 bytes)
431,432c431,432
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> BZFILE * 
>                (  char *path,
431,432c431,432
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> BZFILE * 
>                  char *path,
431,432c431,432
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> BZFILE * 
>                ( const  *path,
431,432c431,432
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> BZFILE * 
>                 const  *path,
431,432c431,432
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> BZFILE * 
>                (   *path,
431,432c431,432
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> BZFILE * 
>                   *path,
432c432
<                ( const char *path,
---
>                 const char *path,
432c432
<                ( const char *path,
---
>                  char *path,
432c432
<                ( const char *path,
---
>                 const  *path,
432c432
<                ( const char *path,
---
>                   *path,
432c432
<                ( const char *path,
---
>                 const char path,
432c432
<                ( const char *path,
---
>                  char path,
432c432
<                ( const char *path,
---
>                 const  path,
432c432
<                ( const char *path,
---
>                   path,
432c432
<                ( const char *path,
---
>                (  char *path,
432c432
<                ( const char *path,
---
>                (   *path,
432c432
<                ( const char *path,
---
>                (  char path,
432c432
<                ( const char *path,
---
>                (   path,
432c432
<                ( const char *path,
---
>                (  char *,
432c432
<                ( const char *path,
---
>                (   *,
432c432
<                ( const char *path,
---
>                (  char ,
432c432
<                ( const char *path,
---
>                (   ,
432c432
<                ( const char *path,
---
>                ( const  *path,
432c432
<                ( const char *path,
---
>                ( const  path,
432c432
<                ( const char *path,
---
>                ( const  *,
432c432
<                ( const char *path,
---
>                ( const  ,
432c432
<                ( const char *path,
---
>                ( const  *path
432c432
<                ( const char *path,
---
>                ( const  path
432c432
<                ( const char *path,
---
>                ( const  *
432c432
<                ( const char *path,
---
>                ( const  
432c432
<                ( const char *path,
---
>                ( const char path,
432c432
<                ( const char *path,
---
>                ( const char ,
432c432
<                ( const char *path,
---
>                ( const char path
432c432
<                ( const char *path,
---
>                ( const char 
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char path,
>                   char *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char ,
>                   char *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char path
>                   char *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char 
>                   char *mode )
432c432
<                ( const char *path,
---
>                ( const char *,
432c432
<                ( const char *path,
---
>                ( const char *
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *,
>                   char *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *
>                   char *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *,
>                  const  *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *
>                  const  *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *,
>                    *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *
>                    *mode )
432c432
<                ( const char *path,
---
>                ( const char *path
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                   char *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                  const  *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                    *mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                  const char mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                   char mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                  const  mode )
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path
>                    mode )
433c433
<                  const char *mode )
---
>                   char *mode )
433c433
<                  const char *mode )
---
>                    *mode )
433c433
<                  const char *mode )
---
>                   char mode )
433c433
<                  const char *mode )
---
>                    mode )
433c433
<                  const char *mode )
---
>                   char * )
433c433
<                  const char *mode )
---
>                    * )
433c433
<                  const char *mode )
---
>                   char  )
433c433
<                  const char *mode )
---
>                     )
433c433
<                  const char *mode )
---
>                  const  *mode )
433c433
<                  const char *mode )
---
>                  const  mode )
433c433
<                  const char *mode )
---
>                  const  * )
433c433
<                  const char *mode )
---
>                  const   )
433c433
<                  const char *mode )
---
>                  const  *mode 
433c433
<                  const char *mode )
---
>                  const  mode 
433c433
<                  const char *mode )
---
>                  const  * 
433c433
<                  const char *mode )
---
>                  const   
433c433
<                  const char *mode )
---
>                  const char mode )
433c433
<                  const char *mode )
---
>                  const char  )
433c433
<                  const char *mode )
---
>                  const char mode 
433c433
<                  const char *mode )
---
>                  const char  
433,434c433,434
<                  const char *mode )
< {
---
>                  const char mode )
> 
433,434c433,434
<                  const char *mode )
< {
---
>                  const char  )
> 
433,434c433,434
<                  const char *mode )
< {
---
>                  const char mode 
> 
433,434c433,434
<                  const char *mode )
< {
---
>                  const char  
> 
433c433
<                  const char *mode )
---
>                  const char * )
433c433
<                  const char *mode )
---
>                  const char * 
433,434c433,434
<                  const char *mode )
< {
---
>                  const char * )
> 
433,434c433,434
<                  const char *mode )
< {
---
>                  const char * 
> 
433c433
<                  const char *mode )
---
>                  const char * )
435c435
<    ;
---
>    
433c433
<                  const char *mode )
---
>                  const char * 
435c435
<    ;
---
>    
433,435c433,435
<                  const char *mode )
< {
<    ;
---
>                  const char * )
> 
>    
433,435c433,435
<                  const char *mode )
< {
<    ;
---
>                  const char * 
> 
>    
433c433
<                  const char *mode )
---
>                  const char *mode 
433,434c433,434
<                  const char *mode )
< {
---
>                  const char *mode 
> 
433c433
<                  const char *mode )
---
>                  const char *mode 
435c435
<    ;
---
>    
433,435c433,435
<                  const char *mode )
< {
<    ;
---
>                  const char *mode 
> 
>    
433c433
<                  const char *mode )
---
>                  const char *mode 
436c436
< }
---
> 
433,434c433,434
<                  const char *mode )
< {
---
>                  const char *mode 
> 
436c436
< }
---
> 
433c433
<                  const char *mode )
---
>                  const char *mode 
435,436c435,436
<    ;
< }
---
>    
> 
433,436c433,436
<                  const char *mode )
< {
<    ;
< }
---
>                  const char *mode 
> 
>    
> 
434c434
< {
---
> 
434,435c434,435
< {
<    ;
---
> 
>    
434c434
< {
---
> 
436c436
< }
---
> 
434,436c434,436
< {
<    ;
< }
---
> 
>    
> 
434c434
< {
---
> 
440c440
< BZ_API(BZ2_bzdopen)
---
> (BZ2_bzdopen)
434,435c434,435
< {
<    ;
---
> 
>    
440c440
< BZ_API(BZ2_bzdopen)
---
> (BZ2_bzdopen)
434c434
< {
---
> 
436d435
< }
440c439,440
< BZ_API(BZ2_bzdopen)
---
> 
> (BZ2_bzdopen)
(97.5 %, 5209 bytes)
435c435
<    ;
---
>    
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ_APIBZ2_bzdopen)
435c435
<    ;
---
>    
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ2_bzdopen)
435c435
<    ;
---
>    
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ_API()
435c435
<    ;
---
>    
440c440
< BZ_API(BZ2_bzdopen)
---
> ()
435c435
<    ;
---
>    
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ_API)
435c435
<    ;
---
>    
440c440
< BZ_API(BZ2_bzdopen)
---
> )
440c440
< BZ_API(BZ2_bzdopen)
---
> (BZ2_bzdopen)
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ2_bzdopen)
440c440
< BZ_API(BZ2_bzdopen)
---
> ()
440c440
< BZ_API(BZ2_bzdopen)
---
> )
440c440
< BZ_API(BZ2_bzdopen)
---
> (BZ2_bzdopen
440c440
< BZ_API(BZ2_bzdopen)
---
> BZ2_bzdopen
(97.5 %, 5203 bytes)
440c440
< (BZ2_bzdopen)
---
> BZ2_bzdopen)
440c440
< (BZ2_bzdopen)
---
> )
440c440
< (BZ2_bzdopen)
---
> BZ2_bzdopen
440c440
< (BZ2_bzdopen)
---
> 
440,441c440,441
< (BZ2_bzdopen)
<                ( int fd,
---
> BZ2_bzdopen)
>                 int fd,
440,441c440,441
< (BZ2_bzdopen)
<                ( int fd,
---
> )
>                 int fd,
440,441c440,441
< (BZ2_bzdopen)
<                ( int fd,
---
> BZ2_bzdopen
>                 int fd,
440,441c440,441
< (BZ2_bzdopen)
<                ( int fd,
---
> 
>                 int fd,
440c440
< (BZ2_bzdopen)
---
> ()
(97.5 %, 5201 bytes)
440,441c440,441
< BZ2_bzdopen
<                ( int fd,
---
> 
>                (  fd,
440,441c440,441
< BZ2_bzdopen
<                ( int fd,
---
> 
>                  fd,
440,441c440,441
< BZ2_bzdopen
<                ( int fd,
---
> 
>                ( int ,
440,441c440,441
< BZ2_bzdopen
<                ( int fd,
---
> 
>                 int ,
440,441c440,441
< BZ2_bzdopen
<                ( int fd,
---
> 
>                (  ,
440,441c440,441
< BZ2_bzdopen
<                ( int fd,
---
> 
>                  ,
441c441
<                ( int fd,
---
>                 int fd,
441c441
<                ( int fd,
---
>                  fd,
441c441
<                ( int fd,
---
>                 int ,
441c441
<                ( int fd,
---
>                  ,
441c441
<                ( int fd,
---
>                 int fd
441c441
<                ( int fd,
---
>                  fd
441c441
<                ( int fd,
---
>                 int 
441c441
<                ( int fd,
---
>                  
441c441
<                ( int fd,
---
>                (  fd,
441c441
<                ( int fd,
---
>                (  ,
441c441
<                ( int fd,
---
>                (  fd
441c441
<                ( int fd,
---
>                (  
441,442c441,442
<                ( int fd,
<                  const mode )
---
>                (  fd,
>                   mode )
(97.5 %, 5195 bytes)
442c442
<                  const mode )
---
>                    
442,443c442,443
<                  const mode )
< {
---
>                   mode )
> 
442,443c442,443
<                  const mode )
< {
---
>                    )
> 
442,443c442,443
<                  const mode )
< {
---
>                   mode 
> 
442,443c442,443
<                  const mode )
< {
---
>                    
> 
442c442
<                  const mode )
---
>                  const  )
442c442
<                  const mode )
---
>                  const  
442,443c442,443
<                  const mode )
< {
---
>                  const  )
> 
442,443c442,443
<                  const mode )
< {
---
>                  const  
> 
442c442
<                  const mode )
---
>                  const  )
444c444
<    }
---
>    
442c442
<                  const mode )
---
>                  const  
444c444
<    }
---
>    
442,444c442,444
<                  const mode )
< {
<    }
---
>                  const  )
> 
>    
442,444c442,444
<                  const mode )
< {
<    }
---
>                  const  
> 
>    
442c442
<                  const mode )
---
>                  const mode 
442,443c442,443
<                  const mode )
< {
---
>                  const mode 
> 
442c442
<                  const mode )
---
>                  const mode 
444c444
<    }
---
>    
442,444c442,444
<                  const mode )
< {
<    }
---
>                  const mode 
> 
>    
442c442
<                  const mode )
---
>                  const mode 
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
442,443c442,443
<                  const mode )
< {
---
>                  const mode 
> 
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
442c442
<                  const mode )
---
>                  const mode 
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
442,444c442
<                  const mode )
< {
<    }
---
>                  const mode 
445a444
>    
448c447,448
< (BZ2_bzread) ()
---
> 
> BZ2_bzread) ()
443c443
< {
---
> 
443,444c443,444
< {
<    }
---
> 
>    
443c443
< {
---
> 
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
443,444d442
< {
<    }
445a444
>    
448c447,448
< (BZ2_bzread) ()
---
> 
> BZ2_bzread) ()
443c443
< {
---
> 
448c448
< (BZ2_bzread) ()
---
> () ()
443,444d442
< {
<    }
445a444
>    
448c447,448
< (BZ2_bzread) ()
---
> 
> () ()
443c443
< {
---
> 
448c448
< (BZ2_bzread) ()
---
> ) ()
443,444d442
< {
<    }
445a444
>    
448c447,448
< (BZ2_bzread) ()
---
> 
> ) ()
444c444
<    }
---
>    
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
> () ()
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
> ) ()
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
> (BZ2_bzread ()
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread ()
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
> ( ()
444c444
<    }
---
>    
448c448
< (BZ2_bzread) ()
---
>  ()
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
448c448
< (BZ2_bzread) ()
---
> ) ()
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread ()
448c448
< (BZ2_bzread) ()
---
>  ()
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread) )
448c448
< (BZ2_bzread) ()
---
> ) )
448c448
< (BZ2_bzread) ()
---
> BZ2_bzread )
448c448
< (BZ2_bzread) ()
---
>  )
448c448
< (BZ2_bzread) ()
---
> () ()
448c448
< (BZ2_bzread) ()
---
> ( ()
448c448
< (BZ2_bzread) ()
---
> () )
(97.5 %, 5193 bytes)
448c448
< BZ2_bzread ()
---
>  (
448c448
< BZ2_bzread ()
---
>  
448,449c448,449
< BZ2_bzread ()
< {
---
>  ()
> 
448,449c448,449
< BZ2_bzread ()
< {
---
>  )
> 
448,449c448,449
< BZ2_bzread ()
< {
---
>  (
> 
448,449c448,449
< BZ2_bzread ()
< {
---
>  
> 
448c448
< BZ2_bzread ()
---
> BZ2_bzread )
448c448
< BZ2_bzread ()
---
> BZ2_bzread 
448,449c448,449
< BZ2_bzread ()
< {
---
> BZ2_bzread )
> 
448,449c448,449
< BZ2_bzread ()
< {
---
> BZ2_bzread 
> 
448c448
< BZ2_bzread ()
---
> BZ2_bzread )
450c450
<    int bzerr, nread;
---
>     bzerr, nread;
448c448
< BZ2_bzread ()
---
> BZ2_bzread 
450c450
<    int bzerr, nread;
---
>     bzerr, nread;
448,450c448,450
< BZ2_bzread ()
< {
<    int bzerr, nread;
---
> BZ2_bzread )
> 
>     bzerr, nread;
448,450c448,450
< BZ2_bzread ()
< {
<    int bzerr, nread;
---
> BZ2_bzread 
> 
>     bzerr, nread;
448c448
< BZ2_bzread ()
---
> BZ2_bzread (
448,449c448,449
< BZ2_bzread ()
< {
---
> BZ2_bzread (
> 
448c448
< BZ2_bzread ()
---
> BZ2_bzread (
450c450
<    int bzerr, nread;
---
>     bzerr, nread;
448,450c448,450
< BZ2_bzread ()
< {
<    int bzerr, nread;
---
> BZ2_bzread (
> 
>     bzerr, nread;
448c448
< BZ2_bzread ()
---
> BZ2_bzread (
450c450
<    int bzerr, nread;
---
>    int , nread;
448,450c448,450
< BZ2_bzread ()
< {
<    int bzerr, nread;
---
> BZ2_bzread (
> 
>    int , nread;
448c448
< BZ2_bzread ()
---
> BZ2_bzread (
450c450
<    int bzerr, nread;
---
>     , nread;
448,450c448,450
< BZ2_bzread ()
< {
<    int bzerr, nread;
---
> BZ2_bzread (
> 
>     , nread;
449c449
< {
---
> 
449,450c449,450
< {
<    int bzerr, nread;
---
> 
>     bzerr, nread;
449,450c449,450
< {
<    int bzerr, nread;
---
> 
>    int , nread;
449,450c449,450
< {
<    int bzerr, nread;
---
> 
>     , nread;
449,450c449,450
< {
<    int bzerr, nread;
---
> 
>    int bzerr nread;
449,450c449,450
< {
<    int bzerr, nread;
---
> 
>     bzerr nread;
449,450c449,450
< {
<    int bzerr, nread;
---
> 
>    int  nread;
449,450c449,450
< {
<    int bzerr, nread;
---
> 
>      nread;
450c450
<    int bzerr, nread;
---
>     bzerr, nread;
450c450
<    int bzerr, nread;
---
>     , nread;
450c450
<    int bzerr, nread;
---
>     bzerr nread;
450c450
<    int bzerr, nread;
---
>      nread;
450c450
<    int bzerr, nread;
---
>     bzerr, ;
450c450
<    int bzerr, nread;
---
>     , ;
450c450
<    int bzerr, nread;
---
>     bzerr ;
450c450
<    int bzerr, nread;
---
>      ;
450c450
<    int bzerr, nread;
---
>    int , nread;
450c450
<    int bzerr, nread;
---
>    int  nread;
450c450
<    int bzerr, nread;
---
>    int , ;
450c450
<    int bzerr, nread;
---
>    int  ;
450c450
<    int bzerr, nread;
---
>    int , nread
450c450
<    int bzerr, nread;
---
>    int  nread
450c450
<    int bzerr, nread;
---
>    int , 
450c450
<    int bzerr, nread;
---
>    int  
450c450
<    int bzerr, nread;
---
>    int bzerr nread;
450c450
<    int bzerr, nread;
---
>    int bzerr ;
450c450
<    int bzerr, nread;
---
>    int bzerr nread
450c450
<    int bzerr, nread;
---
>    int bzerr 
450,451c450,451
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr nread;
>     (bzerr == BZ_STREAM_END) {
450,451c450,451
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr ;
>     (bzerr == BZ_STREAM_END) {
450,451c450,451
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr nread
>     (bzerr == BZ_STREAM_END) {
450,451c450,451
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     (bzerr == BZ_STREAM_END) {
450c450
<    int bzerr, nread;
---
>    int bzerr, ;
(97.5 %, 5187 bytes)
450,451c450,451
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     (bzerr == BZ_STREAM_END) {
450,451c450,451
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if bzerr == BZ_STREAM_END) {
450,451c450,451
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     bzerr == BZ_STREAM_END) {
450,451c450,451
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if ( == BZ_STREAM_END) {
450,451c450,451
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     ( == BZ_STREAM_END) {
450,451c450,451
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if  == BZ_STREAM_END) {
450,451c450,451
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>      == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>     (bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>     ( == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>      == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>     (bzerr  BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr  BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>     (  BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>       BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if  == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr  BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if   BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if  == ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr  ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if   ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_STREAM_END {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  BZ_STREAM_END {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( ==  {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (   {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr   {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END) 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  ) 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr   
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr ==  {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr ==  
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == ) {
>       
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr ==  {
>       
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == ) 
>       
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr ==  
>       
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END {
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END 
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END {
>       
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END 
>       
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END {
453c453
< }
---
> 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END 
453c453
< }
---
> 
451,453c451,453
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END {
>       
> 
451,453c451,453
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END 
>       
> 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
>       
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
453c453
< }
---
> 
451,453c451,453
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END) 
>       
> 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> BZ2_bzwrite) (BZFILE* b, void* buflen )
451,452c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
>       
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> BZ2_bzwrite) (BZFILE* b, void* buflen )
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> BZ2_bzwrite) (BZFILE* b, void* buflen )
451,453c451,452
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END) 
>       
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> BZ2_bzwrite) (BZFILE* b, void* buflen )
452c452
<       }
---
>       
452,453c452,453
<       }
< }
---
>       
> 
452c452
<       }
---
>       
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> BZ2_bzwrite) (BZFILE* b, void* buflen )
452,453c452
<       }
< }
---
>       
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> BZ2_bzwrite) (BZFILE* b, void* buflen )
452c452
<       }
---
>       
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> () (BZFILE* b, void* buflen )
452,453c452
<       }
< }
---
>       
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> () (BZFILE* b, void* buflen )
452c452
<       }
---
>       
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> ) (BZFILE* b, void* buflen )
452,453c452
<       }
< }
---
>       
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> ) (BZFILE* b, void* buflen )
453c453
< }
---
> 
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> BZ2_bzwrite) (BZFILE* b, void* buflen )
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> () (BZFILE* b, void* buflen )
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> ) (BZFILE* b, void* buflen )
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> (BZ2_bzwrite (BZFILE* b, void* buflen )
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> BZ2_bzwrite (BZFILE* b, void* buflen )
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
> ( (BZFILE* b, void* buflen )
453d452
< }
457c456,457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> 
>  (BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> BZ2_bzwrite) (BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> ) (BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
>  (BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> BZ2_bzwrite) BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> ) BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> BZ2_bzwrite BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
>  BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> () (BZFILE* b, void* buflen )
457c457
< (BZ2_bzwrite) (BZFILE* b, void* buflen )
---
> ( (BZFILE* b, void* buflen )
(97.5 %, 5185 bytes)
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
>  (* b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
>  * b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
>  (BZFILE b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
>  BZFILE b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
>  ( b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
>   b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite BZFILE* b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite * b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite BZFILE b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite  b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite BZFILE* , void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite * , void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite BZFILE , void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite  , void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (* b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite ( b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (* , void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite ( , void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (* b void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite ( b void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (*  void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (  void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE b, void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE , void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE b void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE  void* buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE b, * buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE , * buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE b * buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE  * buflen )
457c457
< BZ2_bzwrite (BZFILE* b, void* buflen )
---
> BZ2_bzwrite (BZFILE* , void* buflen )
(97.5 %, 5184 bytes)
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE , void* buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE  void* buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE , * buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE  * buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE , void buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE  void buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE ,  buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE   buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b void* buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b * buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b void buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b  buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b void*  )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b *  )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b void  )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b   )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b, * buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b,  buflen )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b, *  )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b,   )
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b, * buflen 
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b,  buflen 
457c457
< BZ2_bzwrite (BZFILE b, void* buflen )
---
> BZ2_bzwrite (BZFILE b, *  
(97.5 %, 5172 bytes)
457,459c457
< BZ2_bzwrite (BZFILE b   )
< {
<    ;
---
> BZ2_bzwrite (BZFILE b   
461c459,461
<    {
---
>    
> 
>    
458c458
< {
---
> 
458,459c458,459
< {
<    ;
---
> 
>    
458c458
< {
---
> 
461c461
<    {
---
>    
458,459d457
< {
<    ;
461c459,461
<    {
---
>    
> 
>    
458c458
< {
---
> 
462c462
<       }
---
>       
458,459c458,459
< {
<    ;
---
> 
>    
462c462
<       }
---
>       
458c458
< {
---
> 
461,462c461,462
<    {
<       }
---
>    
>       
458,459d457
< {
<    ;
461,462c459,462
<    {
<       }
---
>    
> 
>    
>       
459c459
<    ;
---
>    
(97.5 %, 5169 bytes)
461c461
<    {
---
>    
463c463
< FILE *fp = ((bzFile *)b);
---
>  * = ((bzFile *)b);
461c461
<    {
---
>    
463c463
< FILE *fp = ((bzFile *)b);
---
> FILE  = ((bzFile *)b);
461c461
<    {
---
>    
463c463
< FILE *fp = ((bzFile *)b);
---
>   = ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>  *fp = ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>  fp = ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>  * = ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>   = ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>  *fp  ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>  fp  ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>  *  ((bzFile *)b);
463c463
< FILE *fp = ((bzFile *)b);
---
>    ((bzFile *)b);
(97.5 %, 5163 bytes)
463c463
<  fp  ((bzFile *)b);
---
>    ( *)b);
463c463
<  fp  ((bzFile *)b);
---
>    ( *)b);
463c463
<  fp  ((bzFile *)b);
---
>     *)b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  (bzFile *)b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  bzFile *)b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  ( *)b);
463c463
<  fp  ((bzFile *)b);
---
>  fp   *)b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  (bzFile )b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  bzFile )b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  ( )b);
463c463
<  fp  ((bzFile *)b);
---
>  fp   )b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  (bzFile *)b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  ( *)b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  (bzFile )b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  ( )b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  (bzFile *b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  ( *b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  (bzFile b);
463c463
<  fp  ((bzFile *)b);
---
>  fp  ( b);
(97.5 %, 5155 bytes)
463c463
<  fp  ( *b);
---
>  fp  ( )
463c463
<  fp  ( *b);
---
>  fp  ( b
463c463
<  fp  ( *b);
---
>  fp  ( 
463c463
<  fp  ( *b);
---
>  fp  ( *);
463c463
<  fp  ( *b);
---
>  fp  ( *;
463c463
<  fp  ( *b);
---
>  fp  ( *)
463c463
<  fp  ( *b);
---
>  fp  ( *
463c463
<  fp  ( *b);
---
>  fp  ( *);
465c465
<    if (NULL){
---
>     (NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *;
465c465
<    if (NULL){
---
>     (NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *)
465c465
<    if (NULL){
---
>     (NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *
465c465
<    if (NULL){
---
>     (NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b;
463c463
<  fp  ( *b);
---
>  fp  ( *b
463c463
<  fp  ( *b);
---
>  fp  ( *b;
465c465
<    if (NULL){
---
>     (NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b
465c465
<    if (NULL){
---
>     (NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b;
465c465
<    if (NULL){
---
>    if NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b
465c465
<    if (NULL){
---
>    if NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b;
465c465
<    if (NULL){
---
>     NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b
465c465
<    if (NULL){
---
>     NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b)
463c463
<  fp  ( *b);
---
>  fp  ( *b)
465c465
<    if (NULL){
---
>     (NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b)
465c465
<    if (NULL){
---
>    if NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b)
465c465
<    if (NULL){
---
>     NULL){
463c463
<  fp  ( *b);
---
>  fp  ( *b)
465c465
<    if (NULL){
---
>    if (){
463c463
<  fp  ( *b);
---
>  fp  ( *b)
465c465
<    if (NULL){
---
>     (){
463c463
<  fp  ( *b);
---
>  fp  ( *b)
465c465
<    if (NULL){
---
>    if ){
463c463
<  fp  ( *b);
---
>  fp  ( *b)
465c465
<    if (NULL){
---
>     ){
465c465
<    if (NULL){
---
>     (NULL){
465c465
<    if (NULL){
---
>     NULL){
465c465
<    if (NULL){
---
>     (){
465c465
<    if (NULL){
---
>     ){
465c465
<    if (NULL){
---
>     (NULL{
465c465
<    if (NULL){
---
>     NULL{
465c465
<    if (NULL){
---
>     ({
465c465
<    if (NULL){
---
>     {
465c465
<    if (NULL){
---
>    if NULL){
465c465
<    if (NULL){
---
>    if ){
465c465
<    if (NULL){
---
>    if NULL{
(97.5 %, 5147 bytes)
465,467c465,466
<     {
<       }
< }
---
>     
>       
472c471,472
< *bzerrorstrings= {
---
> 
> bzerrorstrings= {
466c466
<       }
---
>       
466,467c466,467
<       }
< }
---
>       
> 
466c466
<       }
---
>       
472c472
< *bzerrorstrings= {
---
> bzerrorstrings= {
466,467c466
<       }
< }
---
>       
472c471,472
< *bzerrorstrings= {
---
> 
> bzerrorstrings= {
466c466
<       }
---
>       
472c472
< *bzerrorstrings= {
---
> *= {
466,467c466
<       }
< }
---
>       
472c471,472
< *bzerrorstrings= {
---
> 
> *= {
466c466
<       }
---
>       
472c472
< *bzerrorstrings= {
---
> = {
466,467c466
<       }
< }
---
>       
472c471,472
< *bzerrorstrings= {
---
> 
> = {
467c467
< }
---
> 
467d466
< }
472c471,472
< *bzerrorstrings= {
---
> 
> bzerrorstrings= {
467d466
< }
472c471,472
< *bzerrorstrings= {
---
> 
> *= {
467d466
< }
472c471,472
< *bzerrorstrings= {
---
> 
> = {
467d466
< }
472c471,472
< *bzerrorstrings= {
---
> 
> *bzerrorstrings {
467d466
< }
472c471,472
< *bzerrorstrings= {
---
> 
> bzerrorstrings {
467d466
< }
472c471,472
< *bzerrorstrings= {
---
> 
> * {
467d466
< }
472c471,472
< *bzerrorstrings= {
---
> 
>  {
472c472
< *bzerrorstrings= {
---
> bzerrorstrings= {
472c472
< *bzerrorstrings= {
---
> = {
472c472
< *bzerrorstrings= {
---
> bzerrorstrings {
472c472
< *bzerrorstrings= {
---
>  {
472c472
< *bzerrorstrings= {
---
> bzerrorstrings= 
472c472
< *bzerrorstrings= {
---
> = 
472c472
< *bzerrorstrings= {
---
> bzerrorstrings 
472c472
< *bzerrorstrings= {
---
>  
472c472
< *bzerrorstrings= {
---
> *= {
472c472
< *bzerrorstrings= {
---
> * {
472c472
< *bzerrorstrings= {
---
> *= 
472c472
< *bzerrorstrings= {
---
> * 
472,473c472,473
< *bzerrorstrings= {
<        "OK"
---
> *= {
>        
472,473c472,473
< *bzerrorstrings= {
<        "OK"
---
> * {
>        
472,473c472,473
< *bzerrorstrings= {
<        "OK"
---
> *= 
>        
472,473c472,473
< *bzerrorstrings= {
<        "OK"
---
> * 
>        
472c472
< *bzerrorstrings= {
---
> *bzerrorstrings {
472c472
< *bzerrorstrings= {
---
> *bzerrorstrings 
472,473c472,473
< *bzerrorstrings= {
<        "OK"
---
> *bzerrorstrings {
>        
472,473c472,473
< *bzerrorstrings= {
<        "OK"
---
> *bzerrorstrings 
>        
472c472
< *bzerrorstrings= {
---
> *bzerrorstrings {
474c474
<       };
---
>       ;
472c472
< *bzerrorstrings= {
---
> *bzerrorstrings 
474c474
<       };
---
>       ;
472,474c472,474
< *bzerrorstrings= {
<        "OK"
<       };
---
> *bzerrorstrings {
>        
>       ;
472,474c472,474
< *bzerrorstrings= {
<        "OK"
<       };
---
> *bzerrorstrings 
>        
>       ;
472c472
< *bzerrorstrings= {
---
> *bzerrorstrings= 
472,473c472,473
< *bzerrorstrings= {
<        "OK"
---
> *bzerrorstrings= 
>        
472c472
< *bzerrorstrings= {
---
> *bzerrorstrings= 
474c474
<       };
---
>       ;
(97.5 %, 5140 bytes)
474c474
<       ;
---
>       
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
>  (BZFILE *b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> BZ2_bzerror) (BZFILE *b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> ) (BZFILE *b, int *errnum)
477c477
< (BZ2_bzerror) (BZFILE *b, int *errnum)
---
> BZ2_bzerror (BZFILE *b, int *errnum)
(97.5 %, 5126 bytes)
477c477
<  (BZFILE *b, int *errnum)
---
>   , int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  ( *b, int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  ( b, int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  ( *, int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  ( , int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  ( *b int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  ( b int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  ( * int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  (  int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  (BZFILE b, int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  (BZFILE , int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  (BZFILE b int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  (BZFILE  int *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  (BZFILE b,  *errnum)
477c477
<  (BZFILE *b, int *errnum)
---
>  (BZFILE ,  *errnum)
(97.5 %, 5125 bytes)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE , int *errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE  int *errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE ,  *errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE   *errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE , int errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE  int errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE ,  errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE   errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b int *errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b  *errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b int errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b  errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b int *)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b  *)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b int )
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b  )
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b,  *errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b,  errnum)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b,  *)
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b,  )
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b,  *errnum
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b,  errnum
477c477
<  (BZFILE b, int *errnum)
---
>  (BZFILE b,  *
(97.5 %, 5114 bytes)
477,479c477,479
<  (BZFILE b  )
< {
<    int err = ((bzFile *)b);
---
>  (BZFILE b  
> 
>      = ((bzFile *)b);
478c478
< {
---
> 
478,479c478,479
< {
<    int err = ((bzFile *)b);
---
> 
>     err = ((bzFile *)b);
478,479c478,479
< {
<    int err = ((bzFile *)b);
---
> 
>    int  = ((bzFile *)b);
478,479c478,479
< {
<    int err = ((bzFile *)b);
---
> 
>      = ((bzFile *)b);
478,479c478,479
< {
<    int err = ((bzFile *)b);
---
> 
>    int err  ((bzFile *)b);
478,479c478,479
< {
<    int err = ((bzFile *)b);
---
> 
>     err  ((bzFile *)b);
478,479c478,479
< {
<    int err = ((bzFile *)b);
---
> 
>    int   ((bzFile *)b);
478,479c478,479
< {
<    int err = ((bzFile *)b);
---
> 
>       ((bzFile *)b);
479c479
<    int err = ((bzFile *)b);
---
>     err = ((bzFile *)b);
479c479
<    int err = ((bzFile *)b);
---
>      = ((bzFile *)b);
479c479
<    int err = ((bzFile *)b);
---
>     err  ((bzFile *)b);
479c479
<    int err = ((bzFile *)b);
---
>       ((bzFile *)b);
(97.5 %, 5110 bytes)
479c479
<     err  ((bzFile *)b);
---
>       (bzFile *)b);
479c479
<     err  ((bzFile *)b);
---
>       bzFile *)b);
479c479
<     err  ((bzFile *)b);
---
>       (( *)b);
479c479
<     err  ((bzFile *)b);
---
>       ( *)b);
479c479
<     err  ((bzFile *)b);
---
>       ( *)b);
479c479
<     err  ((bzFile *)b);
---
>        *)b);
479c479
<     err  ((bzFile *)b);
---
>     err  (bzFile *)b);
479c479
<     err  ((bzFile *)b);
---
>     err  bzFile *)b);
479c479
<     err  ((bzFile *)b);
---
>     err  ( *)b);
479c479
<     err  ((bzFile *)b);
---
>     err   *)b);
479c479
<     err  ((bzFile *)b);
---
>     err  (bzFile )b);
479c479
<     err  ((bzFile *)b);
---
>     err  bzFile )b);
479c479
<     err  ((bzFile *)b);
---
>     err  ( )b);
479c479
<     err  ((bzFile *)b);
---
>     err   )b);
479c479
<     err  ((bzFile *)b);
---
>     err  (bzFile *)b);
479c479
<     err  ((bzFile *)b);
---
>     err  ( *)b);
479c479
<     err  ((bzFile *)b);
---
>     err  (bzFile )b);
479c479
<     err  ((bzFile *)b);
---
>     err  ( )b);
479c479
<     err  ((bzFile *)b);
---
>     err  (bzFile *b);
479c479
<     err  ((bzFile *)b);
---
>     err  ( *b);
479c479
<     err  ((bzFile *)b);
---
>     err  (bzFile b);
479c479
<     err  ((bzFile *)b);
---
>     err  ( b);
(97.5 %, 5102 bytes)
479c479
<     err  ( *b);
---
>     err  ( )
479c479
<     err  ( *b);
---
>     err  ( b
479c479
<     err  ( *b);
---
>     err  ( 
479c479
<     err  ( *b);
---
>     err  ( *);
479c479
<     err  ( *b);
---
>     err  ( *;
479c479
<     err  ( *b);
---
>     err  ( *)
479c479
<     err  ( *b);
---
>     err  ( *
479,480c479,480
<     err  ( *b);
<    ;
---
>     err  ( *);
>    
(97.5 %, 5099 bytes)
479,480c479,480
<     err  ( )
<    ;
---
>     err  ( 
>    
479c479
<     err  ( )
---
>     err  ( 
481c481
< }
---
> 
479,481c479,481
<     err  ( )
<    ;
< }
---
>     err  ( 
>    
> 
480c480
<    ;
---
>    
480,481c480,481
<    ;
< }
---
>    
> 
480c480
<    ;
---
>    
480,481c480,481
<    ;
< }
---
>    
> 
480c480
<    ;
---
>    
480,481c480,481
<    ;
< }
---
>    
> 
480c480
<    ;
---
>    
480,481c480,481
<    ;
< }
---
>    
> 
481c481
< }
---
> 
481c481
< }
---
> 
481c481
< }
---
> 
481c481
< }
---
> 
481c481
< }
---
> 
481c481
< }
---
> 
481c481
< }
---
> 
481c481
< }
---
> 
Termination check: size was 204936; now 5099
===< pass_ternary :: c >===
===< pass_balanced :: parens-only >===
17c17
<       void (*bzalloc)( )
---
>       void *bzalloc( )
509a510
>  
\ No newline at end of file
17c17
<       void (*bzalloc)( )
---
>       void (*bzalloc) 
509a510
>  
\ No newline at end of file
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  BZFILE 
>       BZ_EXTERN void BZ2_bzReadGetUnused ( 
509a510
>  
\ No newline at end of file
36c36
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
40c40
<       int*    )
---
>       int*    
509a510
>  
\ No newline at end of file
42c42
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
47c47
<       int   )
---
>       int   
509a510
>  
\ No newline at end of file
49c49
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ2_bzWriteClose  
55c55
<    )
---
>    
509a510
>  
\ No newline at end of file
57c57
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
65c65
<    );
---
>    ;
509a510
>  
\ No newline at end of file
70c70
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
78c78
<    );
---
>    ;
509a510
>  
\ No newline at end of file
(97.5 %, 5098 bytes)
35,36c35,36
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  BZFILE 
>       BZ_EXTERN void BZ2_bzReadGetUnused ( 
36c36
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused  
40c40
<       int*    )
---
>       int*    
42c42
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen  
47c47
<       int   )
---
>       int   
49c49
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ2_bzWriteClose  
55c55
<    )
---
>    
57c57
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
> BZ_EXTERN void BZ2_bzWriteClose64  
65c65
<    );
---
>    ;
70c70
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
78c78
<    );
---
>    ;
80c80
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
86c86
<       int           )
---
>       int           
88c88
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
> BZ_EXTERN BZFILE * BZ2_bzopen 
93c93
< BZ2_bzflush);
---
> BZ2_bzflush;
205c205
<  (  )
---
>    
231,232c231,232
<                     ( bz_stream strm 
<                               )
---
>                      bz_stream strm 
>                               
235c235
<     (  sizeof(UInt32) )
---
>       sizeof(UInt32) 
235c235
<     (  sizeof(UInt32) )
---
>     (  sizeofUInt32 )
252c252
< BZ2_bzCompress (   )
---
> BZ2_bzCompress    
(97.5 %, 5096 bytes)
235c235
<       sizeof(UInt32) 
---
>       sizeofUInt32 
252c252
< BZ2_bzCompress (   )
---
> BZ2_bzCompress    
265c265
<                      (  )
---
>                        
276c276
< #define BZ_SETERR(e)                    
---
> #define BZ_SETERRe                    
298c298
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
302c302
<                       int   workFactor )
---
>                       int   workFactor 
308c308
<        ()
---
>        
316c316
<              (      
---
>                    
318c318
<                    )
---
>                    
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERRhandle }
328c328
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
(97.5 %, 5094 bytes)
265c265
<                      (  )
---
>                        
276c276
< #define BZ_SETERR(e)                    
---
> #define BZ_SETERRe                    
298c298
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
302c302
<                       int   workFactor )
---
>                       int   workFactor 
308c308
<        ()
---
>        
316c316
<              (      
---
>                    
318c318
<                    )
---
>                    
323c323
<    BZ_SETERR(handle) }
---
>    BZ_SETERRhandle }
328c328
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
332c332
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
338c338
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
344c344
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
352c352
<                    (    
---
>                        
356c356
<                         nUnused )
---
>                         nUnused 
360c360
<    if (BZ_MAX_UNUSED)
---
>    if BZ_MAX_UNUSED
366c366
< BZ2_bzReadClose (   BZFILE b )
---
> BZ2_bzReadClose    BZFILE b 
373c373
<            (     )
---
>                 
382c382
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
385c385
<                        int*    nUnused )
---
>                        int*    nUnused 
396c396
<                          ( char*         dest, 
---
>                           char*         dest, 
402c402
<                            int           workFactor )
---
>                            int           workFactor 
411c411
<                            ( char*         dest, 
---
>                             char*         dest, 
416c416
<                              int           verbosity )
---
>                              int           verbosity 
432,433c432,433
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
441,442c441,442
<                (  
<                  const mode )
---
>                  
>                  const mode 
448c448
< BZ2_bzread ()
---
> BZ2_bzread 
451c451
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END {
457c457
< BZ2_bzwrite (BZFILE b   )
---
> BZ2_bzwrite BZFILE b   
463c463
<  fp  ( *b);
---
>  fp   *b;
477c477
<  (BZFILE b  )
---
>  BZFILE b  
479c479
<     err  ( )
---
>     err   
===< pass_clang :: param-to-global >===
37c37
<       int*    , 
---
>           , 
380a381
> int * BZ2_bzReadGetUnused_bzerror;
382c383
<                      ( int*    bzerror, 
---
>                      (  
38c38
<       BZFILE, 
---
>       , 
380a381
> BZFILE * BZ2_bzReadGetUnused_b;
383c384
<                        BZFILE b, 
---
>                         
39c39
<       void**  ,  
---
>         ,  
380a381
> void ** BZ2_bzReadGetUnused_unused;
384c385
<                        void**  unused, 
---
>                         
39,40c39
<       void**  ,  
<       int*    )
---
>       void**  *    )
380a380
> int * BZ2_bzReadGetUnused_nUnused;
384,385c384
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused )
50c50
<       int*          , 
---
>                 , 
326a327
> int * BZ2_bzWriteClose_bzerror;
328c329
<                   ( int*          bzerror, 
---
>                   (  
51c51
<       BZFILE, 
---
>       , 
326a327
> BZFILE * BZ2_bzWriteClose_b;
329c330
<                     BZFILE       b, 
---
>                      
52c52
<       int           , 
---
>                  , 
326a327
> int BZ2_bzWriteClose_abandon;
330c331
<                     int           abandon,
---
>                     
53c53
<       unsigned * , 
---
>        , 
326a327
> unsigned int * BZ2_bzWriteClose_nbytes_in;
331c332
<                     unsigned * nbytes_in,
---
>                     
53,54c53
<       unsigned * , 
<       unsigned *  
---
>       unsigned * *  
326a326
> unsigned int * BZ2_bzWriteClose_nbytes_out;
331,332c331
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in )
58c58
<       int*          , 
---
>                 , 
336a337
> int * BZ2_bzWriteClose64_bzerror;
338c339
<                   ( int*          bzerror, 
---
>                   (  
59c59
<       BZFILE, 
---
>       , 
336a337
> BZFILE * BZ2_bzWriteClose64_b;
339c340
<                     BZFILE       b, 
---
>                      
60c60
<       int           , 
---
>                  , 
336a337
> int BZ2_bzWriteClose64_abandon;
340c341
<                     int           abandon,
---
>                     
61c61
<       unsigned * , 
---
>        , 
336a337
> unsigned int * BZ2_bzWriteClose64_nbytes_in_lo32;
341c342
<                     unsigned * nbytes_in_lo32,
---
>                     
62c62
<       unsigned * , 
---
>        , 
336a337
> unsigned int * BZ2_bzWriteClose64_nbytes_in_hi32;
342c343
<                     unsigned * nbytes_in_hi32,
---
>                     
63c63
<       unsigned * , 
---
>        , 
336a337
> unsigned int * BZ2_bzWriteClose64_nbytes_out_lo32;
343c344
<                     unsigned * nbytes_out_lo32,
---
>                     
63,64c63
<       unsigned * , 
<       unsigned * 
---
>       unsigned * * 
336a336
> unsigned int * BZ2_bzWriteClose64_nbytes_out_hi32;
343,344c343
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32 )
71c71
<       char*         , 
---
>                , 
394a395
> char * BZ2_bzBuffToBuffCompress_dest;
396c397
<                          ( char*         dest, 
---
>                          (  
72c72
<       unsigned * ,
---
>        ,
394a395
> unsigned int * BZ2_bzBuffToBuffCompress_destLen;
397c398
<                            unsigned * destLen,
---
>                            
73c73
<       char*         , 
---
>                , 
394a395
> char * BZ2_bzBuffToBuffCompress_source;
398c399
<                            char*         source, 
---
>                             
74c74
<       unsigned ,
---
>        ,
394a395
> unsigned int BZ2_bzBuffToBuffCompress_sourceLen;
399c400
<                            unsigned   sourceLen,
---
>                            
75c75
<       int           , 
---
>                  , 
394a395
> int BZ2_bzBuffToBuffCompress_blockSize100k;
400c401
<                            int           blockSize100k, 
---
>                             
76c76
<       int           , 
---
>                  , 
394a395
> int BZ2_bzBuffToBuffCompress_verbosity;
401c402
<                            int           verbosity, 
---
>                             
76,77c76
<       int           , 
<       int            
---
>       int           t            
394a394
> int BZ2_bzBuffToBuffCompress_workFactor;
401,402c401
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity )
81c81
<       char*         , 
---
>                , 
409a410
> char * BZ2_bzBuffToBuffDecompress_dest;
411c412
<                            ( char*         dest, 
---
>                            (  
82c82
<       unsigned * ,
---
>        ,
409a410
> unsigned int * BZ2_bzBuffToBuffDecompress_destLen;
412c413
<                              unsigned * destLen,
---
>                              
83c83
<       char*         , 
---
>                , 
409a410
> char * BZ2_bzBuffToBuffDecompress_source;
413c414
<                              char*         source, 
---
>                               
84c84
<       unsigned ,
---
>        ,
409a410
> unsigned int BZ2_bzBuffToBuffDecompress_sourceLen;
414c415
<                              unsigned   sourceLen,
---
>                              
85c85
<       int           , 
---
>                  , 
409a410
> int BZ2_bzBuffToBuffDecompress_small;
415c416
<                              int           small,
---
>                              
(97.5 %, 5070 bytes)
80c80
<       char*         , 
---
>                , 
408a409
> char * BZ2_bzBuffToBuffDecompress_dest;
410c411
<                            ( char*         dest, 
---
>                            (  
81c81
<       unsigned * ,
---
>        ,
408a409
> unsigned int * BZ2_bzBuffToBuffDecompress_destLen;
411c412
<                              unsigned * destLen,
---
>                              
82c82
<       char*         , 
---
>                , 
408a409
> char * BZ2_bzBuffToBuffDecompress_source;
412c413
<                              char*         source, 
---
>                               
83c83
<       unsigned ,
---
>        ,
408a409
> unsigned int BZ2_bzBuffToBuffDecompress_sourceLen;
413c414
<                              unsigned   sourceLen,
---
>                              
84c84
<       int           , 
---
>                  , 
408a409
> int BZ2_bzBuffToBuffDecompress_small;
414c415
<                              int           small,
---
>                              
84,85c84
<       int           , 
<       int           )
---
>       int           t           )
408a408
> int BZ2_bzBuffToBuffDecompress_verbosity;
414,415c414
<                              int           small,
<                              int           verbosity )
---
>                              int           small )
88c88
<       const char *,
---
>       ,
431c431
<                ( const char *path,
---
>                ( 
228a229
> bz_stream BZ2_bzCompressInit_strm;
230c231
<                     ( bz_stream strm 
---
>                     ( void 
(97.5 %, 5047 bytes)
87c87
<       const char *,
---
>       ,
430c430
<                ( const char *path,
---
>                ( 
227a228
> bz_stream BZ2_bzCompressInit_strm;
229c230
<                     ( bz_stream strm 
---
>                     ( void 
312a313
> BZFILE * BZ2_bzWrite_b;
315c316
<                BZFILE b 
---
>                void 
319c320
<    *   *b;
---
>    *   *BZ2_bzWrite_b;
(97.5 %, 5072 bytes)
313a314
> BZFILE * BZ2_bzWrite_b;
316c317
<                BZFILE b 
---
>                void 
320c321
<    *   *b;
---
>    *   *BZ2_bzWrite_b;
349a350
> int BZ2_bzReadOpen_nUnused;
353,355c354
<                      int   
<                       
<                         nUnused )
---
>                      void )
365c365,366
< BZ2_bzReadClose (   BZFILE b )
---
> BZFILE * BZ2_bzReadClose_b;
> BZ2_bzReadClose (   void )
(97.5 %, 5104 bytes)
350a351
> int BZ2_bzReadOpen_nUnused;
354,356c355
<                      int   
<                       
<                         nUnused )
---
>                      void )
366c366,367
< BZ2_bzReadClose (   BZFILE b )
---
> BZFILE * BZ2_bzReadClose_b;
> BZ2_bzReadClose (   void )
(97.5 %, 5075 bytes)
365c365,366
< BZ2_bzReadClose (   BZFILE b )
---
> BZFILE * BZ2_bzReadClose_b;
> BZ2_bzReadClose (   void )
438a439
> const int BZ2_bzdopen_mode;
441c442
<                  const mode )
---
>                  void )
(97.5 %, 5099 bytes)
439a440
> const int BZ2_bzdopen_mode;
442c443
<                  const mode )
---
>                  void )
457c457,458
< BZ2_bzwrite (BZFILE b   )
---
> BZFILE * BZ2_bzwrite_b;
> BZ2_bzwrite (void   )
463c464
<  fp  ( *b);
---
>  fp  ( *BZ2_bzwrite_b);
(97.5 %, 5121 bytes)
458c458,459
< BZ2_bzwrite (BZFILE b   )
---
> BZFILE * BZ2_bzwrite_b;
> BZ2_bzwrite (void   )
464c465
<  fp  ( *b);
---
>  fp  ( *BZ2_bzwrite_b);
472a473
> BZFILE * bzerrorstrings_b;
478c479
<  (BZFILE b  )
---
>  (void  )
(97.5 %, 5153 bytes)
473a474
> BZFILE * bzerrorstrings_b;
479c480
<  (BZFILE b  )
---
>  (void  )
(97.5 %, 5176 bytes)
===< pass_clang :: simplify-callexpr >===
465c465
<  fp  ( *BZ2_bzwrite_b);
---
>  (0,0);
482c482
<     err  ( )
---
>     
(97.5 %, 5160 bytes)
482c482
<     err  ( )
---
>     
(97.5 %, 5152 bytes)
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: remove-unused-field >===
17,18c17
<       void (*bzalloc) 
<        ;
---
>       
(97.5 %, 5127 bytes)
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: empty-struct-to-int >===
13,18c13
<    struct {
<        
<        ;
< 
<       
<    } 
---
>    int  
115,128c115
<    struct {
<       
<       
<       
<       
<       
< 
<       
<       
<       Bool     ;
< 
<       
<       
<       }
---
>    int 
(97.5 %, 5093 bytes)
110,123c110
<    struct {
<       
<       
<       
<       
<       
< 
<       
<       
<       Bool     ;
< 
<       
<       
<       }
---
>    int 
141,190c141
<    struct {
<       
<        
<       unsigned ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>    int 
(97.6 %, 4999 bytes)
128,177c128
<    struct {
<       
<        
<       unsigned ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>    int 
260,268c260
<    struct {
<            ;
<       char      
<            
<       
<       
<            ;
<       
<    }
---
>    int 
(97.7 %, 4672 bytes)
211,219c211
<    struct {
<            ;
<       char      
<            
<       
<       
<            ;
<       
<    }
---
>    int 
(97.8 %, 4587 bytes)
===< pass_clang :: remove-addr-taken >===
===< pass_unifdef :: 0 >===
===< pass_peep :: a >===
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
10c10
< #define BZ_STREAM_END        -9
---
> #define BZ_STREAM_END        9
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
(97.8 %, 4586 bytes)
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
14c14
<    bz_stream;
---
>    bz_stream
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
18c18
< #include <stdio.h>
---
> #include 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
21c21
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
29,30c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  BZFILEBZ_EXTERN void BZ2_bzReadGetUnused ( 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
30,34c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
<       void**  ,  
<       int*    )
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
31c31
<       int*    , 
---
>       int*     
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
32c32
<       BZFILE, 
---
>       BZFILE 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
33c33
<       void**  ,  
---
>       void**    
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
36,41c36
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
37c37
<       int*  ,      
---
>       int*        
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
38c38
<       FILE* , 
---
>       FILE*  
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
39c39
<       int   , 
---
>       int    
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
40c40
<       int   , 
---
>       int    
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
43,49c43
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
---
> BZ_EXTERN void BZ2_bzWriteClose 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
44c44
<       int*          , 
---
>       int*           
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
45c45
<       BZFILE, 
---
>       BZFILE 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
46c46
<       int           , 
---
>       int            
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
47c47
<       unsigned * , 
---
>       unsigned *  
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
51,59c51
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
> BZ_EXTERN void BZ2_bzWriteClose64 ;
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
52c52
<       int*          , 
---
>       int*           
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
53c53
<       BZFILE, 
---
>       BZFILE 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
54c54
<       int           , 
---
>       int            
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
55c55
<       unsigned * , 
---
>       unsigned *  
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
56c56
<       unsigned * , 
---
>       unsigned *  
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
57c57
<       unsigned * , 
---
>       unsigned *  
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
59c59
<    );
---
>    )
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
64,71c64
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
<    );
---
> BZ2_bzBuffToBuffCompress ;
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
65c65
<       char*         , 
---
>       char*          
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
66c66
<       unsigned * ,
---
>       unsigned * 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
67c67
<       char*         , 
---
>       char*          
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
68c68
<       unsigned ,
---
>       unsigned 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
69c69
<       int           , 
---
>       int            
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
71c71
<    );
---
>    )
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
73,78c73
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
---
> BZ2_bzBuffToBuffDecompress 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
74c74
<       char*         , 
---
>       char*          
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
75c75
<       unsigned * ,
---
>       unsigned * 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
76c76
<       char*         , 
---
>       char*          
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
77c77
<       unsigned ,
---
>       unsigned 
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
80,85c80
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
> BZ_EXTERN BZFILE * BZ2_bzopen ;
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
81c81
<       const char *,
---
>       const char *
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
85c85
< BZ2_bzflush);
---
> BZ2_bzflush)
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
90c90
< typedef Bool;
---
> typedef Bool
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
92c92
< typedef              Int32;
---
> typedef              Int32
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
93c93
< typedef UInt32;
---
> typedef UInt32
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
111c111
<    EState;
---
>    EState
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
135c135
<  (  )
---
>  
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
136,141d135
< {
<       
<    
<       
<       
<    
143,156d136
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
< 
<    }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
143,154c143
<    {
<       
< 
<       {
< 
<            
<          {
<             
<          }
< 
<       }
<    }
---
>    
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
164,167d163
< {
<       
<       sizeof(UInt32) 
<    
169,171d164
<    
<    ;
< }
(97.8 %, 4507 bytes)
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
149c149
< bz_stream BZ2_bzCompressInit_strm;
---
> bz_stream BZ2_bzCompressInit_strm
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
151,152c151
<                     ( void 
<                               )
---
>                     
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
153,156d152
< {
<       
<       sizeof(UInt32) 
<    
158,160d153
<    
<    ;
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
155c155
<       sizeof(UInt32) 
---
>       sizeof 
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
159c159
<    ;
---
>    
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
175c175
<    ;
---
>    
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
185c185
<                      (  )
---
>                      
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
186,187d185
< {
<    
189d186
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
196c196
< #define BZ_SETERR(e)                    
---
> #define BZ_SETERR                    
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
201c201
<    bzFile;
---
>    bzFile
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
210,214c210
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
210c210
<                     ( int*  bzerror,      
---
>                     ( int*  bzerror      
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
211c211
<                       FILE* f, 
---
>                       FILE* f 
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
212c212
<                       int   blockSize100k, 
---
>                       int   blockSize100k 
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
213c213
<                       int   verbosity,
---
>                       int   verbosity
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
215,217d214
< {
<    
<      
219,222d215
<    BZ_SETERR
<        ()
<          
< }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
220c220
<        ()
---
>        
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
227c227
< BZFILE * BZ2_bzWrite_b;
---
> BZFILE * BZ2_bzWrite_b
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
229,231c229
<              (      
<                void 
<                    )
---
>              
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
232,234d231
< {
<    
<    *   *BZ2_bzWrite_b;
236d232
<    BZ_SETERR(handle) }
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
234c234
<    *   *BZ2_bzWrite_b;
---
>    *   *BZ2_bzWrite_b
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
236c236
<    BZ_SETERR(handle) }
---
>    BZ_SETERR }
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
241,245c241
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
241c241
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
242c242
<                     BZFILE       b, 
---
>                     BZFILE       b 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
243c243
<                     int           abandon,
---
>                     int           abandon
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
244c244
<                     unsigned * nbytes_in,
---
>                     unsigned * nbytes_in
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
246,247c246
< {
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
251,257c251
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                   
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
251c251
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
252c252
<                     BZFILE       b, 
---
>                     BZFILE       b 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
253c253
<                     int           abandon,
---
>                     int           abandon
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
254c254
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
255c255
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
256c256
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
258,260c258
< {
<    
<    }
---
> 
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
264c264
< int BZ2_bzReadOpen_nUnused;
---
> int BZ2_bzReadOpen_nUnused
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
266,268c266
<                    (    
<                        
<                      void )
---
>                    
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
269,270d268
< {
<    bzFile bzf ;
272,274d269
<    if (BZ_MAX_UNUSED)
<       ;
<    }
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
270c270
<    bzFile bzf ;
---
>    bzFile bzf 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
272c272
<    if (BZ_MAX_UNUSED)
---
>    
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
272c272
<    if (BZ_MAX_UNUSED)
---
>    if 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
(97.8 %, 4489 bytes)
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
273c273
<       ;
---
>       
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
(97.8 %, 4488 bytes)
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
278c278
< BZFILE * BZ2_bzReadClose_b;
---
> BZFILE * BZ2_bzReadClose_b
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
279c279
< BZ2_bzReadClose (   void )
---
> BZ2_bzReadClose 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
280,281c280
< {
<    }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
286c286
<            (     )
---
>            
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
287,290c287
< {
<    
<     
< }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
295,298c295
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
295c295
<                      ( int*    bzerror, 
---
>                      ( int*    bzerror 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
296c296
<                        BZFILE b, 
---
>                        BZFILE b 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
297c297
<                        void**  unused, 
---
>                        void**  unused 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
299,300c299
< {
<    }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
308c308
< int BZ2_bzBuffToBuffCompress_workFactor;
---
> int BZ2_bzBuffToBuffCompress_workFactor
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
310,315c310
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
---
>                          
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
310c310
<                          ( char*         dest, 
---
>                          ( char*         dest 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
311c311
<                            unsigned * destLen,
---
>                            unsigned * destLen
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
312c312
<                            char*         source, 
---
>                            char*         source 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
313c313
<                            unsigned   sourceLen,
---
>                            unsigned   sourceLen
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
314c314
<                            int           blockSize100k, 
---
>                            int           blockSize100k 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
316,319c316
< {
<    
<     ;
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
318c318
<     ;
---
>     
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
(97.8 %, 4487 bytes)
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
323c323
< int BZ2_bzBuffToBuffDecompress_verbosity;
---
> int BZ2_bzBuffToBuffDecompress_verbosity
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
325,329c325
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
---
>                            
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
325c325
<                            ( char*         dest, 
---
>                            ( char*         dest 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
326c326
<                              unsigned * destLen,
---
>                              unsigned * destLen
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
327c327
<                              char*         source, 
---
>                              char*         source 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
328c328
<                              unsigned   sourceLen,
---
>                              unsigned   sourceLen
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
330,333c330
< {
<    
<      
< }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
345,346c345
<                ( const char *path,
<                  const char *mode )
---
>                
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
345c345
<                ( const char *path,
---
>                ( const char *path
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
348c348
<    ;
---
>    
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
353c353
< const int BZ2_bzdopen_mode;
---
> const int BZ2_bzdopen_mode
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
355,356c355
<                (  
<                  void )
---
>                
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
357,358c357
< {
<    }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
362c362
< BZ2_bzread ()
---
> BZ2_bzread 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
363,367c363
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
364c364
<    int bzerr ;
---
>    int bzerr 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
365c365
<    if (bzerr == BZ_STREAM_END) {
---
>     {
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
365c365
<    if (bzerr == BZ_STREAM_END) {
---
>    if  {
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
365,366c365
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
371c371
< BZFILE * BZ2_bzwrite_b;
---
> BZFILE * BZ2_bzwrite_b
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
372c372
< BZ2_bzwrite (void   )
---
> BZ2_bzwrite 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
376,378d375
<    {
<       
<  (0,0);
380,382d376
<     {
<       }
< }
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
378c378
<  (0,0);
---
>  ;
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
378c378
<  (0,0);
---
>  (00);
(97.8 %, 4482 bytes)
394,397c394
< {
<     
<    ;
< }
---
> 
378c378
<  ;
---
>  
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
(97.8 %, 4481 bytes)
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
380,381c380
<     {
<       }
---
>     
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
394,397c394
< {
<     
<    ;
< }
---
> 
(97.8 %, 4472 bytes)
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
386c386
< BZFILE * bzerrorstrings_b;
---
> BZFILE * bzerrorstrings_b
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
392c392
<  (void  )
---
>  
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
393,396c393
< {
<     
<    ;
< }
---
> 
395c395
<    ;
---
>    
(97.8 %, 4471 bytes)
===< pass_ints :: a >===
===< pass_clex :: rm-toks-11 >===
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> stdio.h>
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #.h>
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define h>
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        >
12,19d11
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
13,20c13
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
>    define BZ_API 
14,20c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
>    BZ_API 
14,21c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
>    bz_stream#   define BZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> define BZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #BZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include ;
18,27c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <#define BZ_MAX_UNUSED 0
18,27c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdiodefine BZ_MAX_UNUSED 0
18,27c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.BZ_MAX_UNUSED 0
18,27c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.h0
20,28d19
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
20,29c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #   BZFILE( 
20,29c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #   define ( 
21,30c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> )BZ_EXTERN void BZ2_bzReadGetUnused ( 
21,30c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   BZ_EXTERN void BZ2_bzReadGetUnused ( 
21,30c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   define void BZ2_bzReadGetUnused ( 
21,30c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   define BZ_EXTERN BZ2_bzReadGetUnused ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> ( 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> #int*    , 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> #define *    , 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> #define BZ_MAX_UNUSED , 
29,32c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
---
> BZFILE, 
29,32c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
---
> typedef  , 
29,33c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
<       void**  ,  
---
> typedef  BZFILEvoid**  ,  
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
<       void**  ,  
---
>       **  ,  
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
<       void**  ,  
---
>       )*  ,  
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
<       void**  ,  
---
>       )BZ_EXTERN ,  
30,34c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
<       void**  ,  
<       int*    )
---
>       )BZ_EXTERN void int*    )
30,34c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE, 
<       void**  ,  
<       int*    )
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused *    )
31,34c31
<       int*    , 
<       BZFILE, 
<       void**  ,  
<       int*    )
---
>       )
31,36c31
<       int*    , 
<       BZFILE, 
<       void**  ,  
<       int*    )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       intBZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
31,36c31
<       int*    , 
<       BZFILE, 
<       void**  ,  
<       int*    )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       int*    BZFILE* BZ2_bzWriteOpen ( 
32,36c32
<       BZFILE, 
<       void**  ,  
<       int*    )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       * BZ2_bzWriteOpen ( 
32,36c32
<       BZFILE, 
<       void**  ,  
<       int*    )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       BZFILEBZ2_bzWriteOpen ( 
33,36c33
<       void**  ,  
<       int*    )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       ( 
33,37c33
<       void**  ,  
<       int*    )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       voidint*  ,      
33,37c33
<       void**  ,  
<       int*    )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       void**  ,      
(97.8 %, 4413 bytes)
31,35c31
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>       , 
33,36c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
---
> int   , 
33,36c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
---
> BZ_EXTERN , 
33,37c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
> BZ_EXTERN BZFILEint   , 
33,37c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
> BZ_EXTERN BZFILE* , 
33,38c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen int   )
34,38c34
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
---
>       )
34,40c34
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       intBZ_EXTERN void BZ2_bzWriteClose ( 
34,40c34
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       int*  void BZ2_bzWriteClose ( 
35,40c35
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       BZ2_bzWriteClose ( 
35,40c35
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       FILE( 
35,41c35
<       FILE* , 
<       int   , 
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
>       FILE* int*          , 
36,41c36
<       int   , 
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
>       *          , 
37,41d36
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
37,41d36
<       int   , 
<       int   )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
(97.9 %, 4342 bytes)
34,39c34
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
>       , 
36,40c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> unsigned * , 
36,40c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> BZ_EXTERN * , 
36,40c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> BZ_EXTERN void , 
36,41c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
> BZ_EXTERN void BZ2_bzWriteClose unsigned *  
37,41c37
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>       *  
37,42c37
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
---
>       int)
37,44c37
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       int*          BZ_EXTERN void BZ2_bzWriteClose64 ( 
38,44c38
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       void BZ2_bzWriteClose64 ( 
38,44c38
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       BZFILEBZ2_bzWriteClose64 ( 
39,44c39
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       ( 
39,45c39
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       int           int*          , 
40,45c40
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       *          , 
40,45c40
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       unsigned , 
40,46c40
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
---
>       unsigned * BZFILE, 
41,46c41
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
---
>       , 
41,47c41
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
>       unsigned int           , 
42,47c42
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
>    , 
44,48c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> unsigned * , 
44,48c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> BZ_EXTERN * , 
44,48c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> BZ_EXTERN void , 
44,49c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
> BZ_EXTERN void BZ2_bzWriteClose64 unsigned * , 
45,49c45
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       * , 
45,49c45
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       int, 
45,50c45
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int*          unsigned * , 
46,50c46
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       * , 
47,50d46
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
47,50d46
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
47,51c47
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       int           * 
48,52c48
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       );
48,52c48
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       unsigned ;
48,57c48
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       unsigned * BZ2_bzBuffToBuffCompress ( 
49,57c49
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       ( 
49,58c49
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned char*         , 
49,58c49
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned * *         , 
50,58c50
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       , 
50,59c50
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned unsigned * ,
50,59c50
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned * * ,
51,59c51
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       ,
51,60c51
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned char*         , 
52,60c52
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    *         , 
52,60c52
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    ), 
57,61c57
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
> unsigned ,
57,61c57
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
> BZ2_bzBuffToBuffCompress ,
58,61d57
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
58,62c58
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       char, 
58,63c58
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
---
>       char*         int           t            
59,63c59
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
---
>       t            
59,64c59
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
<    );
---
>       unsigned );
59,64c59
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
<    );
---
>       unsigned * ;
60,66c60
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
---
>       BZ2_bzBuffToBuffDecompress ( 
60,66c60
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
---
>       char( 
60,67c60
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       char*         char*         , 
61,67c61
<       unsigned ,
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       *         , 
61,67c61
<       unsigned ,
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       unsigned , 
62,67d61
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
62,68c62
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       int           * ,
63,68c63
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       ,
63,69c63
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       int           char*         , 
64,69c64
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    *         , 
64,69c64
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    ), 
66,70c66
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
> unsigned ,
66,70c66
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
> BZ2_bzBuffToBuffDecompress ,
67,70d66
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
67,71c67
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
---
>       chart           )
67,71c67
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
---
>       char*         )
68,73c68
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
>       BZ_EXTERN BZFILE * BZ2_bzopen (
68,73c68
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
>       unsigned BZFILE * BZ2_bzopen (
68,73c68
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
>       unsigned * * BZ2_bzopen (
69,73c69
<       char*         , 
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
>       BZ2_bzopen (
69,73c69
<       char*         , 
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
>       char(
69,74c69
<       char*         , 
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
---
>       char*         const char *,
70,74c70
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
---
>       char *,
70,74c70
<       unsigned ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
---
>       unsigned *,
71,74c71
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
---
>       ,
71,75c71
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
---
>       int           const char *
71,75c71
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
---
>       int           t           char *
73,75c73
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
---
> *
73,78c73
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
> BZ_EXTERN BZ2_bzflush);
73,78c73
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
> BZ_EXTERN BZFILE );
73,78c73
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
> BZ_EXTERN BZFILE * ;
73,83c73
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
---
> BZ_EXTERN BZFILE * BZ2_bzopen typedef Bool;
74,83c74
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
---
>       Bool;
74,83c74
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
---
>       const ;
74,85c74
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
---
>       const char typedef              Int32;
74,85c74
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
---
>       const char *Int32;
75,85c75
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
---
>       ;
75,86c75
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
---
>       const typedef UInt32;
75,86c75
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
---
>       const char UInt32;
78,86c78
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
---
> ;
78,90c78
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
---
> BZ2_bzflush#        
78,92c78
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
---
> BZ2_bzflush)#  
83,94d82
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
83,95c83
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
---
> typedef define BZ_N_OVERSHOOT 2
83,95c83
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
---
> typedef BoolBZ_N_OVERSHOOT 2
85,95c85
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
---
> 2
85,102c85
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
< 
< 
< 
< 
< 
< 
< typedef
---
> typedef              typedef
85,103c85
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
< 
< 
< 
< 
< 
< 
< typedef
<    int 
---
> typedef              Int32int 
86,104c86
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
< 
< 
< 
< 
< 
< 
< typedef
<    int 
<    EState;
---
> EState;
86,104c86
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
< 
< 
< 
< 
< 
< 
< typedef
<    int 
<    EState;
---
> typedef ;
86,114c86
< typedef UInt32;
< 
< 
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
< 
< 
< 
< 
< 
< 
< typedef
<    int 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #   
---
> typedef UInt32#   
90,121c90
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
< 
< 
< 
< 
< 
< 
< typedef
<    int 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #   
< 
< 
< 
< 
< 
< 
<    int 
---
> int 
92,122c92
< #  
<   
<   
< #define BZ_N_OVERSHOOT 2
< 
< 
< 
< 
< 
< 
< typedef
<    int 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #   
< 
< 
< 
< 
< 
< 
<    int 
<    DState
---
> DState
(97.9 %, 4240 bytes)
90,113c90
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
---
> void 
91,114c91
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
---
>    )
97,115c97
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
---
>  {
97,117c97
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
---
>  (  sizeof(UInt32) 
98,117c98
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
---
> (UInt32) 
107,117c107
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
---
>    UInt32) 
111,117c111
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
---
> ) 
111,121c111
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
<    
< 
<    
<    ;
---
> bz_stream ;
111,122c111
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
<    
< 
<    
<    ;
< }
---
> bz_stream BZ2_bzCompressInit_strm}
112,133d111
< BZ2_bzCompressInit 
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
<    
< 
<    
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
113,137c113
<                     ( void 
<                               )
< {
<       
<       sizeof(UInt32) 
<    
< 
<    
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress    
< 
<    
<    ;
---
>                     ;
(98.0 %, 4102 bytes)
112,136c112
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> e)                    
115,136c115
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>    )                    
124,138d123
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
125,140c125
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
---
>                      int 
125,141c125
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
---
>                      (  bzFile;
126,141c126
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
---
> ;
129,148d128
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
136,149c136
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> * BZ2_bzWriteOpen 
136,149c136
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> #BZ2_bzWriteOpen 
136,150c136
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define ( int*  bzerror,      
136,150c136
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define BZ_SETERRint*  bzerror,      
136,150c136
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define BZ_SETERR(*  bzerror,      
136,150c136
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define BZ_SETERR(ebzerror,      
139,150c139
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> ,      
140,151c140
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    FILE* f, 
141,151c141
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    * f, 
141,151c141
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFilef, 
149,151c149
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> , 
149,152c149
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILEint   blockSize100k, 
149,152c149
< BZFILE* BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* blockSize100k, 
150,152c150
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     , 
150,153c150
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int   verbosity,
150,153c150
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intverbosity,
150,153c150
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  ,
150,154c150
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerrorint   workFactor )
151,154c151
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       workFactor )
151,154c151
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE)
151,155c151
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       FILE* {
151,159c151
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
---
>                       FILE* fBZ_SETERR
(98.1 %, 3983 bytes)
150,164c150
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                     ( BZFILE * BZ2_bzWrite_b;
150,164c150
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                     ( int   * BZ2_bzWrite_b;
150,164c150
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                     ( int   verbosityBZ2_bzWrite_b;
151,164c151
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                       ;
151,165c151
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
---
>                       int   BZ2_bzWrite
151,166c151
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
---
>                       int   workFactor (      
152,167c152
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
---
> void 
156,168c156
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
---
>    )
157,169c157
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
---
>        {
157,171c157
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
>        (*   *BZ2_bzWrite_b;
159,171c159
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
> *BZ2_bzWrite_b;
164,171c164
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
> BZ2_bzWrite_b;
164,171c164
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
> BZFILE ;
164,173c164
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
> BZFILE * BZ_SETERR(handle) }
164,173c164
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
> BZFILE * BZ2_bzWrite_b(handle) }
165,173c165
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
> handle) }
166,173c166
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
>              ) }
167,173c167
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
>                }
168,177c168
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
---
>                    void BZ2_bzWriteClose
169,177c169
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
---
> BZ2_bzWriteClose
171,178c171
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    ( int*          bzerror, 
171,178c171
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    *   int*          bzerror, 
171,178c171
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    *   **          bzerror, 
171,178c171
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    *   *BZ2_bzWrite_bbzerror, 
173,178c173
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    , 
173,179c173
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>    BZ_SETERRBZFILE       b, 
173,179c173
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>    BZ_SETERR(b, 
173,179c173
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>    BZ_SETERR(handle, 
173,180c173
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>    BZ_SETERR(handle) int           abandon,
177,180c177
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> abandon,
177,180c177
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> void ,
178,181c178
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   unsigned * nbytes_in,
178,181c178
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( * nbytes_in,
178,181c178
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( intnbytes_in,
178,181c178
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( int*          ,
178,182c178
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( int*          bzerrorunsigned * nbytes_out )
179,182c179
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     * nbytes_out )
179,182c179
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     BZFILE       nbytes_out )
179,182c179
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     BZFILE       b)
180,183c180
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
---
>                     {
180,184c180
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
---
>                     int           }
180,187c180
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     int           abandonvoid BZ2_bzWriteClose64
181,187c181
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     BZ2_bzWriteClose64
181,188c181
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned ( int*          bzerror, 
181,188c181
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * int*          bzerror, 
181,188c181
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * nbytes_in*          bzerror, 
182,188c182
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     bzerror, 
182,188c182
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned , 
182,189c182
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                     unsigned * BZFILE       b, 
182,189c182
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                     unsigned * nbytes_out b, 
183,189c183
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> , 
184,190c184
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>    int           abandon,
187,190c187
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> abandon,
187,190c187
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> void ,
188,191c188
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   unsigned * nbytes_in_lo32,
188,191c188
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( * nbytes_in_lo32,
188,191c188
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( intnbytes_in_lo32,
188,191c188
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( int*          ,
188,192c188
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                   ( int*          bzerrorunsigned * nbytes_in_hi32,
189,192c189
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     * nbytes_in_hi32,
189,192c189
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     BZFILE       nbytes_in_hi32,
189,192c189
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     BZFILE       b,
190,192d189
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
190,193c190
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int           * nbytes_out_lo32,
190,193c190
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int           abandonnbytes_out_lo32,
191,193c191
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     ,
191,194c191
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned unsigned * nbytes_out_hi32 )
191,194c191
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * * nbytes_out_hi32 )
191,194c191
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_in_lo32nbytes_out_hi32 )
192,194c192
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     )
192,195c192
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned {
192,197c192
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
---
>                     unsigned * }
192,201c192
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
---
>                     unsigned * nbytes_in_hi32int BZ2_bzReadOpen_nUnused;
193,201c193
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
---
>                     BZ2_bzReadOpen_nUnused;
193,201c193
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
---
>                     unsigned ;
193,202c193
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
---
>                     unsigned * BZ2_bzReadOpen 
193,203c193
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
---
>                     unsigned * nbytes_out_lo32(    
194,205c194
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
---
>                     void )
194,205c194
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
---
>                     unsigned )
194,206c194
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
---
>                     unsigned * {
194,207c194
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
<    bzFile bzf ;
---
>                     unsigned * nbytes_out_hi32 bzFile bzf ;
195,207c195
< {
<    
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
<    bzFile bzf ;
---
> bzf ;
197,207c197
<    }
< 
< 
< 
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
<    bzFile bzf ;
---
>    ;
201,211c201
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
<    bzFile bzf ;
< 
<    
<       
<    }
---
> }
201,215c201
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
<    bzFile bzf ;
< 
<    
<       
<    }
< 
< 
< 
< BZFILE * BZ2_bzReadClose_b;
---
> int BZFILE * BZ2_bzReadClose_b;
201,215c201
< int BZ2_bzReadOpen_nUnused;
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
<    bzFile bzf ;
< 
<    
<       
<    }
< 
< 
< 
< BZFILE * BZ2_bzReadClose_b;
---
> int BZ2_bzReadOpen_nUnused* BZ2_bzReadClose_b;
202,215c202
< BZ2_bzReadOpen 
<                    (    
<                        
<                      void )
< {
<    bzFile bzf ;
< 
<    
<       
<    }
< 
< 
< 
< BZFILE * BZ2_bzReadClose_b;
---
> BZ2_bzReadClose_b;
(98.1 %, 3841 bytes)
197,207d196
<    ;
< 
<    
<       
<    }
< 
< 
< 
< BZFILE * BZ2_bzReadClose_b;
< BZ2_bzReadClose (   void )
< {
201,212c201
<    }
< 
< 
< 
< BZFILE * BZ2_bzReadClose_b;
< BZ2_bzReadClose (   void )
< {
<    }
< 
< 
< 
< BZ2_bzRead 
---
>    BZ2_bzRead 
205,213c205
< BZFILE * BZ2_bzReadClose_b;
< BZ2_bzReadClose (   void )
< {
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
---
> (     )
205,213c205
< BZFILE * BZ2_bzReadClose_b;
< BZ2_bzReadClose (   void )
< {
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
---
> BZFILE )
205,214c205
< BZFILE * BZ2_bzReadClose_b;
< BZ2_bzReadClose (   void )
< {
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
---
> BZFILE * {
205,217c205
< BZFILE * BZ2_bzReadClose_b;
< BZ2_bzReadClose (   void )
< {
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
---
> BZFILE * BZ2_bzReadClose_b}
206,220d205
< BZ2_bzReadClose (   void )
< {
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
(98.2 %, 3759 bytes)
197,211c197
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    bzerror, 
201,211c201
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> , 
202,212c202
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE b, 
---
>            BZFILE b, 
202,212c202
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE b, 
---
>            (     b, 
203,212c203
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE b, 
---
> , 
206,213c206
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
---
> void**  unused, 
210,213c210
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
---
> **  unused, 
210,213c210
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
---
> void *  unused, 
211,213c211
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
---
>                      unused, 
211,213c211
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
---
>                      ( , 
211,214c211
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( intint*    nUnused )
211,214c211
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    *    nUnused )
211,214c211
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerrornUnused )
(98.2 %, 3649 bytes)
211,223c211
<                      ( int*    *    nUnused )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< int BZ2_bzBuffToBuffCompress_workFactor;
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                      ( int*    *         dest, 
211,223c211
<                      ( int*    *    nUnused )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< int BZ2_bzBuffToBuffCompress_workFactor;
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                      ( int*    *    dest, 
211,223c211
<                      ( int*    *    nUnused )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< int BZ2_bzBuffToBuffCompress_workFactor;
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                      ( int*    *    nUnused , 
(98.3 %, 3522 bytes)
211,214c211
<                      ( int*    *         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
---
>                      ( int*    unsigned   sourceLen,
211,214c211
<                      ( int*    *         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
---
>                      ( int*    *         sourceLen,
211,214c211
<                      ( int*    *         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
---
>                      ( int*    *         dest,
(98.4 %, 3380 bytes)
211,221c211
<                      ( int*    *         sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
---
>                      ( int*    *         BZ2_bzBuffToBuffDecompress_verbosity;
211,221c211
<                      ( int*    *         sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
---
>                      ( int*    *         sourceLen;
212,222c212
<                            int           blockSize100k, 
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
---
>                            BZ2_bzBuffToBuffDecompress 
212,223c212
<                            int           blockSize100k, 
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           ( char*         dest, 
212,223c212
<                            int           blockSize100k, 
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           blockSize100kchar*         dest, 
213,223c213
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            *         dest, 
213,223c213
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           dest, 
213,223c213
<                            int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           verbosity , 
214,224c214
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> unsigned * destLen,
217,224c217
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> * destLen,
221,224c221
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> destLen,
221,224c221
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> int ,
221,225c221
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
> int BZ2_bzBuffToBuffDecompress_verbositychar*         source, 
222,225c222
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
> *         source, 
223,225c223
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            source, 
223,225c223
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            ( , 
223,226c223
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            ( charunsigned   sourceLen,
223,226c223
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            ( char*         sourceLen,
223,226c223
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            ( char*         dest,
224,226d223
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
224,227c224
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
---
>                              unsigned small )
224,227c224
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
---
>                              unsigned * )
224,228c224
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
< {
---
>                              unsigned * destLen{
225,231c225
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
---
>                              }
225,242c225
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
---
>                              charBZFILE * BZ2_bzopen
225,242c225
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
---
>                              char*         * BZ2_bzopen
225,242c225
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
---
>                              char*         sourceBZ2_bzopen
226,243c226
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              ( const char *path,
226,243c226
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              unsigned   const char *path,
226,243c226
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              unsigned   sourceLenchar *path,
227,243c227
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              *path,
227,243c227
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              int           path,
227,243c227
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              int           small ,
228,244c228
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
231,244c231
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
> char *mode )
242,244c242
< BZFILE * BZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
> *mode )
242,244c242
< BZFILE * BZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
> BZFILE mode )
242,244c242
< BZFILE * BZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * )
243,246c243
<                ( const char *path,
<                  const char *mode )
< 
<    ;
---
>                ;
243,251c243
<                ( const char *path,
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
---
>                ( const int BZ2_bzdopen_mode;
243,251c243
<                ( const char *path,
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
---
>                ( const int BZ2_bzdopen_mode;
243,251c243
<                ( const char *path,
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
---
>                ( const char BZ2_bzdopen_mode;
243,251c243
<                ( const char *path,
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
---
>                ( const char *;
243,252c243
<                ( const char *path,
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
---
>                ( const char *pathBZ2_bzdopen
244,253c244
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
---
>                  (  
244,254c244
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
---
>                  const void )
244,254c244
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
---
>                  const char )
244,255c244
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
---
>                  const char *{
244,256c244
<                  const char *mode )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
---
>                  const char *mode }
246,260c246
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
---
>    BZ2_bzread ()
251,260c251
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
---
> ()
251,260c251
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
---
> const )
251,261c251
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
< {
---
> const int {
251,262c251
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
> const int BZ2_bzdopen_modeint bzerr ;
252,262c252
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
> bzerr ;
253,262c253
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
>                ;
254,263c254
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                  if (bzerr == BZ_STREAM_END) {
254,263c254
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                  void (bzerr == BZ_STREAM_END) {
255,263c255
< {
<    }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
256,263c256
<    }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    == BZ_STREAM_END) {
260,263c260
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ_STREAM_END) {
260,263c260
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzread ) {
260,263c260
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzread ({
261,264c261
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
> }
262,265c262
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    }
262,269c262
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
---
>    int BZFILE * BZ2_bzwrite_b;
262,269c262
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
---
>    int bzerr * BZ2_bzwrite_b;
263,269c263
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
---
>    BZ2_bzwrite_b;
263,269c263
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
---
>    if ;
263,270c263
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
---
>    if (BZ2_bzwrite (void   )
263,270c263
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
---
>    if (bzerr (void   )
263,270c263
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
---
>    if (bzerr == void   )
263,270c263
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
---
>    if (bzerr == BZ_STREAM_END)
264,274d263
<       }
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
< 
<    
< 
<    {
265,279d264
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
< 
<    
< 
<    {
<       
<  
<    
<     
< }
265,283d264
< }
< 
< 
< 
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
< 
<    
< 
<    {
<       
<  
<    
<     
< }
< 
< 
< 
< 
269,284c269
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
< 
<    
< 
<    {
<       
<  
<    
<     
< }
< 
< 
< 
< 
< BZFILE * bzerrorstrings_b;
---
> * bzerrorstrings_b;
269,284c269
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
< 
<    
< 
<    {
<       
<  
<    
<     
< }
< 
< 
< 
< 
< BZFILE * bzerrorstrings_b;
---
> BZFILE bzerrorstrings_b;
269,284c269
< BZFILE * BZ2_bzwrite_b;
< BZ2_bzwrite (void   )
< 
<    
< 
<    {
<       
<  
<    
<     
< }
< 
< 
< 
< 
< BZFILE * bzerrorstrings_b;
---
> BZFILE * ;
(98.4 %, 3292 bytes)
269,308d268
< * bzerrorstrings_b;
< *bzerrorstrings 
<        
<       
< 
< 
<  (void  )
< {
<     
<    
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
269,308c269
< * bzerrorstrings_b;
< *bzerrorstrings 
<        
<       
< 
< 
<  (void  )
< {
<     
<    
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> * 
\ No newline at end of file
269,308c269
< * bzerrorstrings_b;
< *bzerrorstrings 
<        
<       
< 
< 
<  (void  )
< {
<     
<    
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> * bzerrorstrings_b
\ No newline at end of file
270,308d269
< *bzerrorstrings 
<        
<       
< 
< 
<  (void  )
< {
<     
<    
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
(98.4 %, 3186 bytes)
===< pass_clex :: rm-toks-8 >===
10,17d9
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
10,17d9
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define <stdio.h>
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        stdio.h>
12,18c12
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> .h>
13,18c13
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    h>
14,18c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
14,20c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
>    bz_stream#   define BZ_API 
18,20c18
< #include <stdio.h>
< 
< #   define BZ_API 
---
> define BZ_API 
18,20c18
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #BZ_API 
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include #   define BZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include <define BZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include <stdioBZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include <stdio.;
18,27c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.h#define BZ_MAX_UNUSED 0
20,27c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
20,27c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   BZ_MAX_UNUSED 0
20,27c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define 0
21,28d20
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
21,29c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #   BZFILE( 
21,29c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #   define ( 
21,30c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   define BZ_EXTERN )BZ_EXTERN void BZ2_bzReadGetUnused ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void BZ2_bzReadGetUnused ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #void BZ2_bzReadGetUnused ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #define BZ2_bzReadGetUnused ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #define BZ_MAX_UNUSED ( 
29,31c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
---
> )
29,33c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
> typedef  BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
29,33c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
> typedef  BZFILEBZFILE* BZ2_bzWriteOpen ( 
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       * BZ2_bzWriteOpen ( 
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       )BZ2_bzWriteOpen ( 
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       )BZ_EXTERN ( 
30,34c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
---
>       )BZ_EXTERN void )
30,36c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused BZ_EXTERN void BZ2_bzWriteClose ( 
31,36c31
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       void BZ2_bzWriteClose ( 
33,36c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> BZ2_bzWriteClose ( 
33,36c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> BZ_EXTERN ( 
33,37c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> BZ_EXTERN BZFILEint*          , 
33,37c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> BZ_EXTERN BZFILE* *          , 
33,37c33
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> BZ_EXTERN BZFILE* BZ2_bzWriteOpen , 
34,37d33
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
36,38c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
---
> , 
36,39c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
> BZ_EXTERN int           , 
36,39c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
> BZ_EXTERN void , 
36,40c36
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> BZ_EXTERN void BZ2_bzWriteClose unsigned * , 
37,40c37
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       * , 
37,40c37
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       int, 
37,41c37
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>       int*          unsigned *  
38,41c38
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>       *  
38,42c38
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
---
>       BZFILE)
39,44c39
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       BZ_EXTERN void BZ2_bzWriteClose64 ( 
39,44c39
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       int           void BZ2_bzWriteClose64 ( 
40,44c40
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       BZ2_bzWriteClose64 ( 
40,44c40
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       unsigned ( 
40,45c40
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       unsigned * int*          , 
41,45c41
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       *          , 
41,45c41
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       unsigned , 
42,46c42
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
---
>    BZFILE, 
44,46c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
---
> , 
44,47c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
> BZ_EXTERN int           , 
44,47c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
> BZ_EXTERN void , 
44,48c44
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> BZ_EXTERN void BZ2_bzWriteClose64 unsigned * , 
45,48c45
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       * , 
45,48c45
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       int, 
45,49c45
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       int*          unsigned * , 
46,49c46
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       * , 
47,49d46
<       int           , 
<       unsigned * , 
<       unsigned * , 
47,49d46
<       int           , 
<       unsigned * , 
<       unsigned * , 
47,50c47
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int           * , 
48,50c48
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
48,51c48
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       unsigned unsigned * 
48,51c48
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       unsigned * * 
49,52c49
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       );
49,52c49
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       unsigned ;
49,57c49
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       unsigned * BZ2_bzBuffToBuffCompress ( 
50,57c50
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       ( 
50,58c50
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned char*         , 
50,58c50
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned * *         , 
51,58c51
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       , 
51,59c51
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned unsigned * ,
52,59c52
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>    * ,
52,59c52
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>    ),
57,60c57
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
> char*         , 
57,60c57
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
> BZ2_bzBuffToBuffCompress *         , 
58,60c58
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       , 
58,61c58
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       charunsigned ,
58,61c58
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       char*         ,
59,61d58
<       unsigned * ,
<       char*         , 
<       unsigned ,
59,62c59
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       unsigned , 
(98.5 %, 3126 bytes)
58,63c58
<       char*         ,
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
---
>       char*         ( 
59,63d58
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
59,64c59
<       int           , 
<       int           t            
<    );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       int           *         , 
(98.5 %, 3032 bytes)
59,61c59
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       , 
59,62c59
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       charunsigned ,
59,62c59
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       char*         ,
60,62d59
<       unsigned * ,
<       char*         , 
<       unsigned ,
(98.5 %, 2972 bytes)
59,62c59
<       char*         ,
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
---
>       char*         (
60,62d59
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
60,63c60
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
---
>       int           char *,
60,63c60
<       int           t           )
< 
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
---
>       int           t           *,
62,63c62
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
---
> ,
62,64c62
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
---
> BZ_EXTERN const char *
62,64c62
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
---
> BZ_EXTERN BZFILE char *
62,64c62
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
---
> BZ_EXTERN BZFILE * *
62,67c62
< BZ_EXTERN BZFILE * BZ2_bzopen (
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
> BZ_EXTERN BZFILE * BZ2_bzopen BZ2_bzflush);
63,67c63
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
>       );
(98.6 %, 2905 bytes)
60,64c60
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
>       );
60,64c60
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
>       const ;
60,69c60
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
---
>       const char typedef Bool;
60,69c60
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
---
>       const char *Bool;
61,69c61
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
---
>       ;
61,71c61
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
---
>       const typedef              Int32;
61,71c61
<       const char *
<    
< 
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
---
>       const char Int32;
64,71c64
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
---
> ;
64,72c64
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
---
> BZ2_bzflushtypedef UInt32;
64,72c64
< BZ2_bzflush);
< 
<    
< 
< 
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
---
> BZ2_bzflush)UInt32;
69,72c69
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
---
> ;
69,76c69
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< int 
---
> typedef int 
69,77c69
< typedef Bool;
< 
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< int 
<    DState
---
> typedef BoolDState
71,83c71
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
---
> (  )
71,83c71
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
---
> typedef              )
71,84c71
< typedef              Int32;
< typedef UInt32;
< 
< 
< 
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
---
> typedef              Int32{
72,93c72
< typedef UInt32;
< 
< 
< 
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
---
> }
72,97c72
< typedef UInt32;
< 
< 
< 
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
---
> typedef bz_stream BZ2_bzCompressInit_strm;
(98.6 %, 2848 bytes)
69,94c69
< ;
< 
< 
< 
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
---
> BZ2_bzCompressInit_strm;
73,94c73
< int 
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
---
> ;
74,95c74
<    DState
< 
< 
< 
< 
< 
<  (  )
< {
<       
<    
<       
<       
<    
< 
<    
< 
<    }
< 
< 
< 
< bz_stream BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
---
>    BZ2_bzCompress    
(98.7 %, 2762 bytes)
69,86d68
< BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
69,94c69
< BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> BZ2_bzCompressInit_strm#define BZ_SETERR(e)                    
70,94c70
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> define BZ_SETERR(e)                    
73,94c73
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>    BZ_SETERR(e)                    
82,94c82
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> (e)                    
83,94c83
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>                      e)                    
83,94c83
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>                      (  )                    
84,96d83
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
87,98c87
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
---
> int 
94,99c94
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
---
> bzFile;
94,99c94
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
---
> #;
94,107c94
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> #define BZFILE* BZ2_bzWriteOpen 
94,107c94
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> #define BZ_SETERR* BZ2_bzWriteOpen 
94,107c94
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> #define BZ_SETERR(BZ2_bzWriteOpen 
94,108c94
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
> #define BZ_SETERR(e( int   verbosity,
97,108c97
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
> int   verbosity,
98,108c98
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
>    verbosity,
99,108c99
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
>    ,
99,109c99
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
<                       int   workFactor )
---
>    bzFileint   workFactor )
107,109c107
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
<                       int   workFactor )
---
> workFactor )
107,109c107
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
<                       int   workFactor )
---
> BZFILE)
107,110c107
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
<                       int   workFactor )
< {
---
> BZFILE* {
108,114c108
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
---
>                     BZ_SETERR
108,115c108
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
>                     ( ()
108,115c108
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
>                     ( int   )
108,117c108
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
---
>                     ( int   verbosity}
109,122c109
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                       BZFILE * BZ2_bzWrite_b;
109,122c109
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                       int   * BZ2_bzWrite_b;
109,122c109
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                       int   workFactor BZ2_bzWrite_b;
110,122c110
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
> ;
114,123c114
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
---
>    BZ2_bzWrite
115,124c115
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
---
>        (      
115,125c115
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
---
>        (void 
117,126c117
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
---
> )
122,126d121
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
122,129c122
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
> BZFILE *   *BZ2_bzWrite_b;
122,129c122
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
> BZFILE * *BZ2_bzWrite_b;
122,129c122
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
> BZFILE * BZ2_bzWrite_bBZ2_bzWrite_b;
123,129c123
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
---
> ;
124,131c124
<              (      
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
>              BZ_SETERR(handle) }
125,131c125
<                void 
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
>                (handle) }
126,131c126
<                    )
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
>                    handle) }
127,131c127
< {
<    
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
> ) }
129,131c129
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
---
>    }
129,135c129
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
---
>    *   void BZ2_bzWriteClose
129,135c129
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
---
>    *   *BZ2_bzWriteClose
129,136c129
<    *   *BZ2_bzWrite_b;
< 
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    *   *BZ2_bzWrite_b( int*          bzerror, 
131,136c131
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    int*          bzerror, 
131,136c131
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    BZ_SETERR*          bzerror, 
131,136c131
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    BZ_SETERR(bzerror, 
131,136c131
<    BZ_SETERR(handle) }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    BZ_SETERR(handle, 
(98.7 %, 2720 bytes)
129,135c129
<    }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>    BZFILE       b, 
133,135c133
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> b, 
133,135c133
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> void , 
134,136c134
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   int           abandon,
134,136c134
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( abandon,
134,136c134
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int,
134,137c134
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( int*          unsigned * nbytes_in,
134,137c134
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( int*          bzerror* nbytes_in,
135,137c135
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     nbytes_in,
135,137c135
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     BZFILE       ,
135,138c135
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     BZFILE       bunsigned * nbytes_out )
136,138c136
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     * nbytes_out )
136,138c136
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     int           nbytes_out )
136,138c136
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     int           abandon)
137,139c137
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
---
>                     {
137,140c137
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
---
>                     unsigned }
137,143c137
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     unsigned * void BZ2_bzWriteClose64
137,143c137
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     unsigned * nbytes_inBZ2_bzWriteClose64
138,144c138
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     ( int*          bzerror, 
138,144c138
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int*          bzerror, 
138,144c138
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * *          bzerror, 
138,144c138
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * nbytes_out bzerror, 
139,144c139
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> , 
140,145c140
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>    BZFILE       b, 
143,145c143
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> b, 
143,145c143
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> void , 
144,146c144
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   int           abandon,
144,146c144
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( abandon,
144,146c144
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int,
144,147c144
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( int*          unsigned * nbytes_in_lo32,
144,147c144
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( int*          bzerror* nbytes_in_lo32,
145,147c145
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     nbytes_in_lo32,
145,147c145
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     BZFILE       ,
145,148c145
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     BZFILE       bunsigned * nbytes_in_hi32,
146,148c146
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     * nbytes_in_hi32,
146,148c146
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int           nbytes_in_hi32,
147,148d146
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
147,148d146
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
147,148d146
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
147,148d146
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
148,149d147
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
148,149d147
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
148,149d147
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
148,149d147
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
148,150c148
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_in_hi32)
149,151c149
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     {
149,153c149
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
---
>                     unsigned }
149,157c149
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
---
>                     unsigned * BZ2_bzRead 
149,158c149
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
---
>                     unsigned * nbytes_out_lo32(     )
150,158c150
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
---
>                     )
150,159c150
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
---
>                     unsigned {
150,162c150
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
---
>                     unsigned * }
150,166c150
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
---
>                     unsigned * nbytes_out_hi32 void BZ2_bzReadGetUnused 
151,166c151
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
---
> BZ2_bzReadGetUnused 
153,167c153
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
---
>    ( int*    *         sourceLen,
157,167c157
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
---
> int*    *         sourceLen,
158,167c158
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
---
>            *    *         sourceLen,
158,167c158
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
---
>            (     *         sourceLen,
159,167c159
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
---
> sourceLen,
162,167c162
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
---
> ,
166,168c166
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
<                            int           blockSize100k, 
---
> int           blockSize100k, 
166,168c166
< void BZ2_bzReadGetUnused 
<                      ( int*    *         sourceLen,
<                            int           blockSize100k, 
---
> void blockSize100k, 
167,168c167
<                      ( int*    *         sourceLen,
<                            int           blockSize100k, 
---
>                      , 
167,169c167
<                      ( int*    *         sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
---
>                      ( int           verbosity )
167,169c167
<                      ( int*    *         sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
---
>                      ( intverbosity )
(98.7 %, 2607 bytes)
167,176c167
<                      ( int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
---
>                      ( BZ2_bzBuffToBuffDecompress 
167,177c167
<                      ( int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                      ( int           ( char*         dest, 
167,177c167
<                      ( int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                      ( int           verbosity char*         dest, 
168,177c168
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> *         dest, 
171,177c171
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> dest, 
175,177c175
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> , 
175,178c175
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> int unsigned * destLen,
175,178c175
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> int BZ2_bzBuffToBuffDecompress_verbosity* destLen,
176,178c176
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> destLen,
177,178c177
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ,
177,179c177
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            ( char*         source, 
177,179c177
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            ( char*         source, 
(98.8 %, 2508 bytes)
177,179c177
<                            ( char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
---
>                            ( small )
177,179c177
<                            ( char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
---
>                            ( char)
177,180c177
<                            ( char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
< {
---
>                            ( char*         {
177,183c177
<                            ( char*         source, 
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
---
>                            ( char*         source}
178,194c178
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
---
>                              BZFILE * BZ2_bzopen
178,194c178
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
---
>                              unsigned   * BZ2_bzopen
178,194c178
<                              unsigned   sourceLen,
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
---
>                              unsigned   sourceLenBZ2_bzopen
179,195c179
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              ( const char *path,
179,195c179
<                              int           small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                              int           const char *path,
(98.8 %, 2391 bytes)
177,193c177
<                            ( small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                            ( const char *path,
177,193c177
<                            ( small )
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
>                            ( small char *path,
178,193c178
< {
<    
<      
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> *path,
181,193c181
< }
< 
< 
< 
< 
<  
<                
< 
< 
< 
< 
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> path,
192,193c192
< BZFILE * BZ2_bzopen
<                ( const char *path,
---
> ,
192,194c192
< BZFILE * BZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
> BZFILE const char *mode )
192,194c192
< BZFILE * BZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * char *mode )
193,194c193
<                ( const char *path,
<                  const char *mode )
---
>                *mode )
193,194c193
<                ( const char *path,
<                  const char *mode )
---
>                ( mode )
(98.9 %, 2306 bytes)
177,178c177
<                            ( const char *path,
<                  const char *mode )
---
>                            ( mode )
177,178c177
<                            ( const char *path,
<                  const char *mode )
---
>                            ( const )
177,180c177
<                            ( const char *path,
<                  const char *mode )
< 
<    ;
---
>                            ( const char ;
(98.9 %, 2260 bytes)
177,187c177
<                            ( const )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
---
>                            ( const void )
179,187c179
<    ;
< 
< 
< 
< 
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
---
>    )
184,187d183
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
184,189c184
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
---
> const }
184,193c184
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
---
> const int BZ2_bzread ()
184,193c184
< const int BZ2_bzdopen_mode;
< BZ2_bzdopen
<                (  
<                  void )
< {
<    }
< 
< 
< 
< BZ2_bzread ()
---
> const int BZ2_bzdopen_mode()
(98.9 %, 2177 bytes)
184,187c184
< const int BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> const int (bzerr == BZ_STREAM_END) {
184,187c184
< const int BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> const int BZ2_bzread bzerr == BZ_STREAM_END) {
184,187c184
< const int BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> const int BZ2_bzread (== BZ_STREAM_END) {
185,187c185
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ_STREAM_END) {
186,187c186
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    ) {
186,187c186
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int {
186,188c186
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    int bzerr }
187,189c187
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    }
187,192c187
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
187,192c187
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
187,192c187
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
187,192c187
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
187,192c187
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
187,192c187
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
188,192c188
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
189,192d188
< }
< 
< 
< 
===< pass_clex :: rm-toks-6 >===
10,14c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
---
> bz_stream;
10,14c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
---
> #;
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
10,18c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        include <stdio.h>
12,18c12
< typedef 
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> <stdio.h>
13,18c13
<    int  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
14,18c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
14,18c14
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streamh>
18c18
< #include <stdio.h>
---
> >
18,20c18
< #include <stdio.h>
< 
< #   define BZ_API 
---
> ##   define BZ_API 
18,20c18
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include define BZ_API 
18,20c18
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include <BZ_API 
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include <stdio#   define BZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include <stdio.define BZ_EXTERN ;
18,21c18
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #include <stdio.hBZ_EXTERN ;
20,21c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> ;
20,27c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   #define BZ_MAX_UNUSED 0
20,27c20
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define define BZ_MAX_UNUSED 0
21,27c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_MAX_UNUSED 0
21,27c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   0
21,29c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #   define typedef  BZFILE( 
21,29c21
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #   define BZ_EXTERN BZFILE( 
27,29c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #)BZ_EXTERN void BZ2_bzReadGetUnused ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #define BZ_EXTERN void BZ2_bzReadGetUnused ( 
27,30c27
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #define BZ_MAX_UNUSED void BZ2_bzReadGetUnused ( 
29,30c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> BZ2_bzReadGetUnused ( 
29,30c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  ( 
29,31c29
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
---
> typedef  BZFILE)
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       )BZFILE* BZ2_bzWriteOpen ( 
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       )BZ_EXTERN * BZ2_bzWriteOpen ( 
30,33c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
---
>       )BZ_EXTERN void BZ2_bzWriteOpen ( 
33,35d32
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
33,35d32
< BZ_EXTERN BZFILE* BZ2_bzWriteOpen ( 
<       )
< 
(99.0 %, 2131 bytes)
30,34c30
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused int*          , 
31,34c31
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
>       *          , 
33,34c33
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> , 
33,35c33
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
---
> BZ_EXTERN BZFILE, 
33,35c33
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
---
> BZ_EXTERN void , 
33,36c33
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
> BZ_EXTERN void BZ2_bzWriteClose int           , 
34,36c34
<       int*          , 
<       BZFILE, 
<       int           , 
---
>       , 
34,37c34
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       intunsigned * , 
34,37c34
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       int*          * , 
35,37c35
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       , 
35,38c35
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>       BZFILEunsigned *  
36,38c36
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>       *  
36,39c36
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
---
>       int           )
37,41c37
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       BZ_EXTERN void BZ2_bzWriteClose64 ( 
37,41c37
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       unsigned void BZ2_bzWriteClose64 ( 
37,41c37
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       unsigned * BZ2_bzWriteClose64 ( 
38,41c38
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       ( 
38,42c38
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       unsigned int*          , 
39,42c39
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>    *          , 
41,42c41
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> , 
41,43c41
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
---
> BZ_EXTERN BZFILE, 
41,43c41
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
---
> BZ_EXTERN void , 
41,44c41
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
> BZ_EXTERN void BZ2_bzWriteClose64 int           , 
42,44c42
<       int*          , 
<       BZFILE, 
<       int           , 
---
>       , 
42,45c42
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       intunsigned * , 
42,45c42
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       int*          * , 
43,45c43
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
>       , 
43,46c43
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       BZFILEunsigned * , 
44,46c44
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       * , 
46,47d45
<       unsigned * , 
<       unsigned * , 
46,47d45
<       unsigned * , 
<       unsigned * , 
46,47d45
<       unsigned * , 
<       unsigned * , 
46,47d45
<       unsigned * , 
<       unsigned * , 
46,47d45
<       unsigned * , 
<       unsigned * , 
46,47d45
<       unsigned * , 
<       unsigned * , 
46,49c46
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       unsigned * );
47,49c47
<       unsigned * , 
<       unsigned * 
<    );
---
>       ;
47,54c47
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       unsigned BZ2_bzBuffToBuffCompress ( 
47,54c47
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       unsigned * ( 
48,54d47
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
48,55c48
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         ,
---
>       unsigned *         ,
49,55c49
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         ,
---
>    ,
49,56c49
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         ,
<       char*         ,
---
>    )char*         ,
54,56c54
< BZ2_bzBuffToBuffCompress ( 
<       char*         ,
<       char*         ,
---
> *         ,
54,56c54
< BZ2_bzBuffToBuffCompress ( 
<       char*         ,
<       char*         ,
---
> BZ2_bzBuffToBuffCompress ,
55,56d54
<       char*         ,
<       char*         ,
55,57c55
<       char*         ,
<       char*         ,
<       const char *,
---
>       charchar *,
55,57c55
<       char*         ,
<       char*         ,
<       const char *,
---
>       char*         *,
(99.0 %, 2087 bytes)
55,56c55
<       const char *,
<       const char *
---
>       *
55,59c55
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
>       const BZ2_bzflush);
55,59c55
<       const char *,
<       const char *
<    
< 
< BZ2_bzflush);
---
>       const char );
(99.0 %, 2055 bytes)
55,64c55
<       const BZ2_bzflush);
< 
<    
< 
< 
< BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
< 
<    
<    ;
---
>       const ;
55,73c55
<       const BZ2_bzflush);
< 
<    
< 
< 
< BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
---
>       const BZ2_bzflushBZ2_bzDecompressInit 
55,74c55
<       const BZ2_bzflush);
< 
<    
< 
< 
< BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
---
>       const BZ2_bzflush)(  )
60,74c60
< BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
---
> )
60,75c60
< BZ2_bzCompressInit_strm;
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
---
> BZ2_bzCompressInit_strm{
61,77d60
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
64,85c64
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>    #define BZ_SETERR(e)                    
73,85c73
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> define BZ_SETERR(e)                    
74,85c74
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>                      BZ_SETERR(e)                    
74,85c74
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>                      (  (e)                    
75,85c75
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> e)                    
78,85c78
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> )                    
85,87d84
< #define BZ_SETERR(e)                    
< 
< 
85,89c85
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
---
> #int 
85,90c85
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
---
> #define bzFile;
85,90c85
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
---
> #define BZ_SETERR;
85,98c85
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> #define BZ_SETERR(BZFILE* BZ2_bzWriteOpen 
85,98c85
< #define BZ_SETERR(e)                    
< 
< 
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> #define BZ_SETERR(e* BZ2_bzWriteOpen 
88,98c88
< typedef 
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
---
> BZ2_bzWriteOpen 
89,99c89
<    int 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
>    ( int   verbosity,
90,99c90
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
>    int   verbosity,
90,99c90
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
>    bzFileverbosity,
98,99c98
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
> ,
98,100c98
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
<                       int   workFactor )
---
> BZFILEint   workFactor )
98,100c98
< BZFILE* BZ2_bzWriteOpen 
<                     ( int   verbosity,
<                       int   workFactor )
---
> BZFILE* workFactor )
99,100c99
<                     ( int   verbosity,
<                       int   workFactor )
---
>                     )
(99.0 %, 2012 bytes)
88,90c88
< BZ2_bzWriteOpen 
<                     ( int   verbosity,
<                       int   workFactor )
---
> workFactor )
89,90c89
<                     ( int   verbosity,
<                       int   workFactor )
---
>                     )
89,91c89
<                     ( int   verbosity,
<                       int   workFactor )
< {
---
>                     ( {
89,95c89
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
---
>                     ( int   BZ_SETERR
89,96c89
<                     ( int   verbosity,
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
>                     ( int   verbosity()
90,96c90
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
>                       )
90,98c90
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
---
>                       int   }
90,103c90
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>                       int   workFactor BZFILE * BZ2_bzWrite_b;
91,103c91
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
> * BZ2_bzWrite_b;
95,103c95
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>    BZ2_bzWrite_b;
96,103c96
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>        ;
96,104c96
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
---
>        (BZ2_bzWrite
98,105c98
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
---
> (      
103,106c103
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
---
> void 
103,107c103
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
---
> BZFILE )
103,108c103
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
---
> BZFILE * {
103,110c103
< BZFILE * BZ2_bzWrite_b;
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    }
---
> BZFILE * BZ2_bzWrite_b}
104,113d103
< BZ2_bzWrite
<              (      
<                void 
<                    )
< {
<    
<    }
< 
< 
< 
105,114c105
<              (      
<                void 
<                    )
< {
<    
<    }
< 
< 
< 
< void BZ2_bzWriteClose
---
>              BZ2_bzWriteClose
106,115c106
<                void 
<                    )
< {
<    
<    }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                ( int*          bzerror, 
107,115c107
<                    )
< {
<    
<    }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
108,115c108
< {
<    
<    }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> *          bzerror, 
110,115c110
<    }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    bzerror, 
114,115c114
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> , 
114,116c114
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> void BZFILE       b, 
115,116c115
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   b, 
(99.1 %, 1923 bytes)
104,105c104
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> , 
104,106c104
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> void BZFILE       b, 
105,106c105
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   b, 
105,106c105
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   ( , 
105,107c105
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
105,107c105
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
105,107c105
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
106,107d105
<                     BZFILE       b, 
<                     int           abandon,
106,108c106
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     BZFILE       * nbytes_in,
106,108c106
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     BZFILE       bnbytes_in,
107,108c107
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     ,
107,109c107
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     int           unsigned * nbytes_out )
107,109c107
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     int           abandon* nbytes_out )
108,109c108
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     nbytes_out )
108,109c108
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned )
108,110c108
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * {
108,111c108
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
---
>                     unsigned * nbytes_in}
109,114c109
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     void BZ2_bzWriteClose64
109,114c109
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     unsigned BZ2_bzWriteClose64
109,115c109
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * ( int*          bzerror, 
109,115c109
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * nbytes_out int*          bzerror, 
110,115c110
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> *          bzerror, 
111,115c111
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>    bzerror, 
114,115c114
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> , 
114,116c114
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> void BZFILE       b, 
115,116c115
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   b, 
115,116c115
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   ( , 
115,117c115
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
115,117c115
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
115,117c115
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
116,117d115
<                     BZFILE       b, 
<                     int           abandon,
116,118c116
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     BZFILE       * nbytes_in_lo32,
116,118c116
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     BZFILE       bnbytes_in_lo32,
117,118c117
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     ,
117,119c117
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int           unsigned * nbytes_in_hi32,
117,119c117
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int           abandon* nbytes_in_hi32,
118,119c118
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     nbytes_in_hi32,
118,119c118
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned ,
118,120c118
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * unsigned * nbytes_out_lo32,
118,120c118
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_lo32* nbytes_out_lo32,
119,120c119
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     nbytes_out_lo32,
119,120c119
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned ,
119,121c119
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * unsigned * nbytes_out_hi32 )
119,121c119
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_in_hi32* nbytes_out_hi32 )
120,121c120
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
120,121c120
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned )
120,122c120
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * {
120,124c120
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
---
>                     unsigned * nbytes_out_lo32}
121,128c121
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
---
>                     BZ2_bzRead 
121,129c121
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
---
>                     unsigned (     )
121,129c121
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
---
>                     unsigned * )
121,130c121
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
---
>                     unsigned * nbytes_out_hi32 {
122,132d121
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
124,137c124
<    }
< 
< 
< 
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
---
>    void BZ2_bzReadGetUnused 
128,137c128
< BZ2_bzRead 
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
---
> BZ2_bzReadGetUnused 
129,138c129
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int           verbosity )
---
>            ( int           verbosity )
129,138c129
<            (     )
< {
<    
<     
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int           verbosity )
---
>            (     int           verbosity )
(99.1 %, 1852 bytes)
129,137c129
<            ( int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
---
>            int BZ2_bzBuffToBuffDecompress_verbosity;
129,137c129
<            ( int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
---
>            ( BZ2_bzBuffToBuffDecompress_verbosity;
129,137c129
<            ( int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
---
>            ( int           ;
129,138c129
<            ( int           verbosity )
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
---
>            ( int           verbosity BZ2_bzBuffToBuffDecompress 
130,139c130
< {
<    
<     
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( const )
---
> ( const )
133,139c133
< }
< 
< 
< 
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( const )
---
> const )
137,139c137
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( const )
---
> )
137,141c137
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( const )
< 
<    ;
---
> int ;
137,146c137
< int BZ2_bzBuffToBuffDecompress_verbosity;
< BZ2_bzBuffToBuffDecompress 
<                            ( const )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzread ()
---
> int BZ2_bzBuffToBuffDecompress_verbosityconst int BZ2_bzread ()
138,146c138
< BZ2_bzBuffToBuffDecompress 
<                            ( const )
< 
<    ;
< 
< 
< 
< 
< const int BZ2_bzread ()
---
> int BZ2_bzread ()
(99.1 %, 1745 bytes)
137,143c137
< int ;
< 
< 
< 
< 
< const int BZ2_bzread ()
< {
---
> int {
142,144c142
< const int BZ2_bzread ()
< {
<    int bzerr ;
---
> int bzerr ;
142,144c142
< const int BZ2_bzread ()
< {
<    int bzerr ;
---
> const bzerr ;
142,144c142
< const int BZ2_bzread ()
< {
<    int bzerr ;
---
> const int ;
142,145c142
< const int BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> const int BZ2_bzread if (bzerr == BZ_STREAM_END) {
142,145c142
< const int BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> const int BZ2_bzread ((bzerr == BZ_STREAM_END) {
143,145c143
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
144,145c144
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    == BZ_STREAM_END) {
144,145c144
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int BZ_STREAM_END) {
144,145c144
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr ) {
145c145
<    if (bzerr == BZ_STREAM_END) {
---
>    {
145,146c145
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if }
145,147c145
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (}
145,150c145
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
145,150c145
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
145,150c145
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
145,150c145
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
146,150c146
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
147,150d146
< }
< 
< 
< 
===< pass_clex :: rm-toks-2 >===
10c10
< #define BZ_STREAM_END        9
---
> BZ_STREAM_END        9
10c10
< #define BZ_STREAM_END        9
---
> #9
10,12c10
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #define typedef 
10,13c10
< #define BZ_STREAM_END        9
< 
< typedef 
<    int  
---
> #define BZ_STREAM_END        int  
12,14c12
< typedef 
<    int  
<    bz_stream;
---
> bz_stream;
13,14c13
<    int  
<    bz_stream;
---
>    ;
(99.2 %, 1724 bytes)
12,15d11
< bz_stream;
< 
< 
< 
12,16c12
< bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> bz_streaminclude <stdio.h>
16c16
< #include <stdio.h>
---
> <stdio.h>
16c16
< #include <stdio.h>
---
> #stdio.h>
16c16
< #include <stdio.h>
---
> #include .h>
16c16
< #include <stdio.h>
---
> #include <h>
(99.2 %, 1710 bytes)
12c12
< #include <stdio.h>
---
> <stdio.h>
12c12
< #include <stdio.h>
---
> #stdio.h>
12c12
< #include <stdio.h>
---
> #include .h>
12c12
< #include <stdio.h>
---
> #include <h>
12c12
< #include <stdio.h>
---
> #include <stdio>
12,14c12
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include <stdio.#   define BZ_API 
12,14c12
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include <stdio.hdefine BZ_API 
14c14
< #   define BZ_API 
---
> BZ_API 
14,15c14
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #   #   define BZ_EXTERN ;
14,15c14
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #   define define BZ_EXTERN ;
15c15
< #   define BZ_EXTERN ;
---
> BZ_EXTERN ;
15c15
< #   define BZ_EXTERN ;
---
> #   ;
15,21c15
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define #define BZ_MAX_UNUSED 0
15,21c15
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_EXTERN define BZ_MAX_UNUSED 0
21c21
< #define BZ_MAX_UNUSED 0
---
> BZ_MAX_UNUSED 0
21c21
< #define BZ_MAX_UNUSED 0
---
> #0
21,23c21
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #define typedef  BZFILE( 
21,23c21
< #define BZ_MAX_UNUSED 0
< 
< typedef  BZFILE( 
---
> #define BZ_MAX_UNUSED BZFILE( 
23c23
< typedef  BZFILE( 
---
> ( 
23,24c23
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  )BZ_EXTERN void BZ2_bzReadGetUnused ( 
23,24c23
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  BZFILEBZ_EXTERN void BZ2_bzReadGetUnused ( 
24c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       void BZ2_bzReadGetUnused ( 
24c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       )BZ2_bzReadGetUnused ( 
(99.2 %, 1689 bytes)
21,23c21
< #0
< 
< typedef  BZFILE( 
---
> #BZFILE( 
23c23
< typedef  BZFILE( 
---
> ( 
23,24c23
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  )BZ_EXTERN void BZ2_bzReadGetUnused ( 
23,24c23
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> typedef  BZFILEBZ_EXTERN void BZ2_bzReadGetUnused ( 
24c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       void BZ2_bzReadGetUnused ( 
24c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       )BZ2_bzReadGetUnused ( 
24c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
>       )BZ_EXTERN ( 
24,25c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
---
>       )BZ_EXTERN void )
24,27c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused BZ_EXTERN void BZ2_bzWriteClose ( 
25,27c25
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
>       void BZ2_bzWriteClose ( 
27c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> BZ2_bzWriteClose ( 
27c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> BZ_EXTERN ( 
27,28c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> BZ_EXTERN void int*          , 
27,28c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> BZ_EXTERN void BZ2_bzWriteClose *          , 
28c28
<       int*          , 
---
>       , 
28,29c28
<       int*          , 
<       BZFILE, 
---
>       intBZFILE, 
29d28
<       BZFILE, 
29d28
<       BZFILE, 
30d29
<       int           , 
30d29
<       int           , 
30,31c30
<       int           , 
<       unsigned * , 
---
>       int           * , 
31c31
<       unsigned * , 
---
>       , 
31,32c31
<       unsigned * , 
<       unsigned *  
---
>       unsigned unsigned *  
31,32c31
<       unsigned * , 
<       unsigned *  
---
>       unsigned * *  
32,33c32
<       unsigned *  
<    )
---
>       )
32,35c32
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>       unsigned BZ_EXTERN void BZ2_bzWriteClose64 ( 
33,35c33
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
>    void BZ2_bzWriteClose64 ( 
35c35
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
> BZ2_bzWriteClose64 ( 
35c35
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
---
> BZ_EXTERN ( 
35,36c35
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> BZ_EXTERN void int*          , 
35,36c35
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> BZ_EXTERN void BZ2_bzWriteClose64 *          , 
36c36
<       int*          , 
---
>       , 
36,37c36
<       int*          , 
<       BZFILE, 
---
>       intBZFILE, 
37d36
<       BZFILE, 
37d36
<       BZFILE, 
38d37
<       int           , 
38d37
<       int           , 
38,39c38
<       int           , 
<       unsigned * , 
---
>       int           * , 
39c39
<       unsigned * , 
---
>       , 
39,40c39
<       unsigned * , 
<       unsigned * , 
---
>       unsigned unsigned * , 
39,40c39
<       unsigned * , 
<       unsigned * , 
---
>       unsigned * * , 
40c40
<       unsigned * , 
---
>       , 
40,41c40
<       unsigned * , 
<       unsigned * , 
---
>       unsigned unsigned * , 
40,41c40
<       unsigned * , 
<       unsigned * , 
---
>       unsigned * * , 
41c41
<       unsigned * , 
---
>       , 
41,42c41
<       unsigned * , 
<       unsigned * 
---
>       unsigned unsigned * 
41,42c41
<       unsigned * , 
<       unsigned * 
---
>       unsigned * * 
42,43c42
<       unsigned * 
<    );
---
>       );
42,43c42
<       unsigned * 
<    );
---
>       unsigned ;
43,48c43
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>    BZ2_bzBuffToBuffCompress ( 
43,48c43
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>    )( 
48,49c48
< BZ2_bzBuffToBuffCompress ( 
<       const BZ2_bzflush);
---
> const BZ2_bzflush);
48,49c48
< BZ2_bzBuffToBuffCompress ( 
<       const BZ2_bzflush);
---
> BZ2_bzBuffToBuffCompress BZ2_bzflush);
49c49
<       const BZ2_bzflush);
---
>       );
49c49
<       const BZ2_bzflush);
---
>       const ;
49,54c49
<       const BZ2_bzflush);
< 
<    
< 
< 
< BZ2_bzCompressInit_strm;
---
>       const BZ2_bzflushBZ2_bzCompressInit_strm;
50,54d49
< 
<    
< 
< 
< BZ2_bzCompressInit_strm;
(99.2 %, 1672 bytes)
49,54c49
<       );
< 
<    
< 
< 
< BZ2_bzCompressInit_strm;
---
>       BZ2_bzCompressInit_strm;
50,54d49
< 
<    
< 
< 
< BZ2_bzCompressInit_strm;
54d53
< BZ2_bzCompressInit_strm;
(99.2 %, 1640 bytes)
50,53d49
< BZ2_bzCompress    
< 
<    
<    ;
50,61d49
< BZ2_bzCompress    
< 
<    
<    ;
< 
< 
< 
< 
< 
< 
< 
< 
(99.2 %, 1611 bytes)
49,59c49
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
---
>       )(  )
58,59c58
< BZ2_bzDecompressInit 
<                      (  )
---
> )
59,60c59
<                      (  )
< {
---
>                      {
59,63c59
<                      (  )
< {
<    
< 
< }
---
>                      (  }
60,69d59
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
63,70c63
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> define BZ_SETERR(e)                    
70c70
< #define BZ_SETERR(e)                    
---
> BZ_SETERR(e)                    
70c70
< #define BZ_SETERR(e)                    
---
> #(e)                    
70c70
< #define BZ_SETERR(e)                    
---
> #define e)                    
70c70
< #define BZ_SETERR(e)                    
---
> #define BZ_SETERR)                    
70,73c70
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
---
> #define BZ_SETERR(BZ2_bzWriteOpen 
70,74c70
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
> #define BZ_SETERR(e( int   verbosity,
73,74c73
< BZ2_bzWriteOpen 
<                     ( int   verbosity,
---
> int   verbosity,
74c74
<                     ( int   verbosity,
---
>                     verbosity,
74c74
<                     ( int   verbosity,
---
>                     ( ,
74,75c74
<                     ( int   verbosity,
<                       int   workFactor )
---
>                     ( int   int   workFactor )
74,75c74
<                     ( int   verbosity,
<                       int   workFactor )
---
>                     ( int   verbosityworkFactor )
75c75
<                       int   workFactor )
---
>                       )
75,76c75
<                       int   workFactor )
< {
---
>                       int   {
75,80c75
<                       int   workFactor )
< {
<    
<      
< 
<    BZ_SETERR
---
>                       int   workFactor BZ_SETERR
76,81c76
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
> ()
80,81c80
<    BZ_SETERR
<        ()
---
>    )
81,83c81
<        ()
<          
< }
---
>        }
81,88c81
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>        (BZFILE * BZ2_bzWrite_b;
83,88c83
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
> * BZ2_bzWrite_b;
(99.2 %, 1581 bytes)
74,79c74
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
---
>                     ( int   verbosityworkFactor BZ_SETERR
75,80c75
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
> ()
79,80c79
<    BZ_SETERR
<        ()
---
>    )
80,82c80
<        ()
<          
< }
---
>        }
80,87c80
<        ()
<          
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
>        (BZFILE * BZ2_bzWrite_b;
82,87c82
< }
< 
< 
< 
< 
< BZFILE * BZ2_bzWrite_b;
---
> * BZ2_bzWrite_b;
87c87
< BZFILE * BZ2_bzWrite_b;
---
> BZ2_bzWrite_b;
87c87
< BZFILE * BZ2_bzWrite_b;
---
> BZFILE ;
(99.2 %, 1572 bytes)
87d86
< BZ2_bzWrite_b;
87,88c87
< BZ2_bzWrite_b;
< void BZ2_bzWriteClose
---
> BZ2_bzWrite_bBZ2_bzWriteClose
(99.2 %, 1557 bytes)
87,88c87
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
87,88c87
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void int*          bzerror, 
88c88
<                   ( int*          bzerror, 
---
>                   *          bzerror, 
88c88
<                   ( int*          bzerror, 
---
>                   ( bzerror, 
88c88
<                   ( int*          bzerror, 
---
>                   ( int, 
88,89c88
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   ( int*          BZFILE       b, 
88,89c88
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   ( int*          bzerrorb, 
89c89
<                     BZFILE       b, 
---
>                     , 
89,90c89
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       int           abandon,
89,90c89
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       babandon,
90c90
<                     int           abandon,
---
>                     ,
90,91c90
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           unsigned * nbytes_in,
90,91c90
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon* nbytes_in,
91c91
<                     unsigned * nbytes_in,
---
>                     nbytes_in,
91c91
<                     unsigned * nbytes_in,
---
>                     unsigned ,
91,92c91
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * unsigned * nbytes_out )
91,92c91
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in* nbytes_out )
92c92
<                     unsigned * nbytes_out )
---
>                     nbytes_out )
92c92
<                     unsigned * nbytes_out )
---
>                     unsigned )
92,93c92
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * {
92,94c92
<                     unsigned * nbytes_out )
< {
<    }
---
>                     unsigned * nbytes_out }
93,96d92
< {
<    }
< 
< 
94,97c94
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>    BZ2_bzWriteClose64
97,98c97
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
97,98c97
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void int*          bzerror, 
98c98
<                   ( int*          bzerror, 
---
>                   *          bzerror, 
98c98
<                   ( int*          bzerror, 
---
>                   ( bzerror, 
98c98
<                   ( int*          bzerror, 
---
>                   ( int, 
98,99c98
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   ( int*          BZFILE       b, 
98,99c98
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   ( int*          bzerrorb, 
99c99
<                     BZFILE       b, 
---
>                     , 
99,100c99
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       int           abandon,
99,100c99
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       babandon,
100c100
<                     int           abandon,
---
>                     ,
100,101c100
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           unsigned * nbytes_in_lo32,
100,101c100
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon* nbytes_in_lo32,
101c101
<                     unsigned * nbytes_in_lo32,
---
>                     nbytes_in_lo32,
101c101
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned ,
101,102c101
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * unsigned * nbytes_in_hi32,
101,102c101
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32* nbytes_in_hi32,
102c102
<                     unsigned * nbytes_in_hi32,
---
>                     nbytes_in_hi32,
102c102
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned ,
102,103c102
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * unsigned * nbytes_out_lo32,
102,103c102
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32* nbytes_out_lo32,
103c103
<                     unsigned * nbytes_out_lo32,
---
>                     nbytes_out_lo32,
103c103
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned ,
103,104c103
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * unsigned * nbytes_out_hi32 )
103,104c103
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32* nbytes_out_hi32 )
104c104
<                     unsigned * nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
104c104
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned )
104,105c104
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * {
104,107c104
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
---
>                     unsigned * nbytes_out_hi32 }
105,110d104
< {
<    
<    }
< 
< 
< 
107,112c107
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( int           verbosity )
---
>    ( int           verbosity )
111,112c111
< BZ2_bzRead 
<            ( int           verbosity )
---
> int           verbosity )
112c112
<            ( int           verbosity )
---
>            verbosity )
112c112
<            ( int           verbosity )
---
>            ( )
112,113c112
<            ( int           verbosity )
< {
---
>            ( int           {
112,116c112
<            ( int           verbosity )
< {
<    
<     
< }
---
>            ( int           verbosity }
113,119d112
< {
<    
<     
< }
< 
< 
< 
116,120c116
< }
< 
< 
< 
< int ;
---
> ;
120,124d119
< int ;
< 
< 
< 
< 
(99.3 %, 1533 bytes)
112,116c112
<            ( )
< {
<    
<     
< }
---
>            ( }
113,119d112
< {
<    
<     
< }
< 
< 
< 
116,120c116
< }
< 
< 
< 
< int ;
---
> ;
120,124d119
< int ;
< 
< 
< 
< 
120,125c120
< int ;
< 
< 
< 
< 
< const int BZ2_bzread ()
---
> int int BZ2_bzread ()
125c125
< const int BZ2_bzread ()
---
> BZ2_bzread ()
(99.3 %, 1523 bytes)
120c120
< const int BZ2_bzread ()
---
> BZ2_bzread ()
120c120
< const int BZ2_bzread ()
---
> const ()
120c120
< const int BZ2_bzread ()
---
> const int )
120,121c120
< const int BZ2_bzread ()
< {
---
> const int BZ2_bzread {
120,122c120
< const int BZ2_bzread ()
< {
<    int bzerr ;
---
> const int BZ2_bzread (int bzerr ;
121,122c121
< {
<    int bzerr ;
---
> bzerr ;
122c122
<    int bzerr ;
---
>    ;
122,123c122
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int if (bzerr == BZ_STREAM_END) {
122,123c122
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr (bzerr == BZ_STREAM_END) {
(99.3 %, 1513 bytes)
120c120
< BZ2_bzread ()
---
> )
120,121c120
< BZ2_bzread ()
< {
---
> BZ2_bzread {
120,122c120
< BZ2_bzread ()
< {
<    int bzerr ;
---
> BZ2_bzread (int bzerr ;
121,122c121
< {
<    int bzerr ;
---
> bzerr ;
122c122
<    int bzerr ;
---
>    ;
122,123c122
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int if (bzerr == BZ_STREAM_END) {
122,123c122
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr (bzerr == BZ_STREAM_END) {
123c123
<    if (bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_STREAM_END) {
123c123
<    if (bzerr == BZ_STREAM_END) {
---
>    if == BZ_STREAM_END) {
123c123
<    if (bzerr == BZ_STREAM_END) {
---
>    if (BZ_STREAM_END) {
123c123
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr ) {
123c123
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == {
123,124c123
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END}
123,125c123
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END) }
124,128c124
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
125,128d124
< }
< 
< 
< 
Termination check: size was 5099; now 1513
===< pass_ternary :: c >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: simplify-if >===
123c123,125
<    if (bzerr == BZ_STREAM_END) {
---
>    ;
>    
>     {
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: replace-undefined-function >===
===< pass_special :: b >===
===< pass_clex :: rm-toks-12 >===
10,14c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> define BZ_API 
10,14c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #BZ_API 
10,15c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #define #   define BZ_EXTERN ;
10,15c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #define BZ_STREAM_END        define BZ_EXTERN ;
12,15c12
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> BZ_EXTERN ;
12,15c12
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #;
12,21c12
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
---
> #include #0
12,21c12
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
---
> #include <0
12,23c12
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #include <stdiotypedef  BZFILE( 
12,23c12
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #include <stdio.BZFILE( 
12,23c12
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #include <stdio.h( 
14,24c14
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> )BZ_EXTERN void BZ2_bzReadGetUnused ( 
14,24c14
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   BZ_EXTERN void BZ2_bzReadGetUnused ( 
14,24c14
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   define void BZ2_bzReadGetUnused ( 
15,24c15
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> BZ2_bzReadGetUnused ( 
15,24c15
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   ( 
15,25c15
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
---
> #   define )
15,27c15
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> #   define BZ_EXTERN BZ_EXTERN void BZ2_bzWriteClose ( 
21,27c21
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> void BZ2_bzWriteClose ( 
21,27c21
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> #BZ2_bzWriteClose ( 
23,27c23
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
---
> ( 
23,28c23
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> typedef  int*          , 
23,28c23
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
> typedef  BZFILE*          , 
24,28c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
---
>       , 
24,29c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
---
>       )BZFILE, 
24,29c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
---
>       )BZ_EXTERN , 
24,30c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
>       )BZ_EXTERN void int           , 
24,30c24
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
---
>       )BZ_EXTERN void BZ2_bzReadGetUnused , 
25,30d24
<       )
< 
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
27,31c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> * , 
27,31c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
---
> BZ_EXTERN , 
27,32c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
> BZ_EXTERN void unsigned *  
27,32c27
< BZ_EXTERN void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
> BZ_EXTERN void BZ2_bzWriteClose *  
28,33c28
<       int*          , 
<       BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    )
---
>       )
(99.3 %, 1408 bytes)
25,30c25
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       , 
25,31c25
<       unsigned * , 
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
---
>       unsigned BZFILE, 
26,31d25
<       unsigned *  
<    )
< 
< BZ_EXTERN void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE, 
(99.4 %, 1312 bytes)
25,29c25
<       unsigned BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       unsigned , 
25,30c25
<       unsigned BZFILE, 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       unsigned BZFILEunsigned * 
26,30c26
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       * 
26,31c26
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       int           );
(99.4 %, 1223 bytes)
25,44c25
<       unsigned , 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
---
>       unsigned {
26,47c26
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
---
>       }
26,54c26
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>       unsigned #define BZ_SETERR(e)                    
27,54c27
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>    define BZ_SETERR(e)                    
27,54c27
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>    )BZ_SETERR(e)                    
32,54c32
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> (e)                    
32,54c32
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
> BZ2_bzBuffToBuffCompress e)                    
33,54c33
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
---
>       )                    
33,57c33
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
---
>       )BZ2_bzWriteOpen 
42,58c42
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
---
> ( int   verbosityworkFactor )
43,58c43
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
---
>                      int   verbosityworkFactor )
43,58c43
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
---
>                      (  verbosityworkFactor )
44,58c44
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
---
> )
47,58d46
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
54,63c54
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
---
> BZ_SETERR
54,64c54
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
> #()
54,64c54
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
---
> #define )
54,66c54
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
---
> #define BZ_SETERR}
54,71c54
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< void BZ2_bzWriteClose
---
> #define BZ_SETERR(void BZ2_bzWriteClose
54,71c54
< #define BZ_SETERR(e)                    
< 
< 
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< void BZ2_bzWriteClose
---
> #define BZ_SETERR(eBZ2_bzWriteClose
57,72c57
< BZ2_bzWriteOpen 
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
58,72c58
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                     int*          bzerror, 
58,72c58
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                     ( *          bzerror, 
58,72c58
<                     ( int   verbosityworkFactor )
< {
<    
<      
< 
<    BZ_SETERR
<        ()
<          
< }
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                     ( int   bzerror, 
(99.5 %, 1084 bytes)
54,62c54
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> #define BZ_SETERRabandon,
59,62c59
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> ,
59,63c59
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
> void unsigned * nbytes_in,
60,63c60
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   * nbytes_in,
60,63c60
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( nbytes_in,
60,63c60
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( int,
60,64c60
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( int*          unsigned * nbytes_out )
60,64c60
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( int*          bzerror* nbytes_out )
61,64c61
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     nbytes_out )
61,64c61
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     BZFILE       )
61,65c61
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
---
>                     BZFILE       b{
62,66c62
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
---
>                     }
62,69c62
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     int           void BZ2_bzWriteClose64
62,69c62
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                     int           abandonBZ2_bzWriteClose64
63,70c63
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     ( int*          bzerror, 
63,70c63
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int*          bzerror, 
63,70c63
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * *          bzerror, 
63,70c63
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned * nbytes_inbzerror, 
64,70c64
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     , 
64,71c64
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                     unsigned BZFILE       b, 
64,71c64
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                     unsigned * b, 
64,71c64
<                     unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                     unsigned * nbytes_out , 
65,72c65
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> int           abandon,
66,72c66
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>    abandon,
69,72c69
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
> ,
69,73c69
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
> void unsigned * nbytes_in_lo32,
70,73c70
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   * nbytes_in_lo32,
70,73c70
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( nbytes_in_lo32,
70,73c70
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( int,
70,74c70
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                   ( int*          unsigned * nbytes_in_hi32,
70,74c70
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                   ( int*          bzerror* nbytes_in_hi32,
71,74c71
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     nbytes_in_hi32,
71,74c71
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     BZFILE       ,
71,75c71
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     BZFILE       bunsigned * nbytes_out_lo32,
72,75c72
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
72,75c72
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int           nbytes_out_lo32,
73,75d72
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
(99.5 %, 950 bytes)
72,85c72
<                     int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
---
>                     int           }
72,89c72
<                     int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
---
>                     int           nbytes_out_lo32BZ2_bzread ()
73,89c73
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
---
>                     ()
73,89c73
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
---
>                     unsigned )
73,90c73
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
---
>                     unsigned * {
73,91c73
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
>                     unsigned * nbytes_out_hi32 int bzerr ;
74,91c74
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
> bzerr ;
76,91c76
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
>    ;
80,92c80
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
81,92c81
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>            (bzerr == BZ_STREAM_END) {
81,92c81
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>            ( bzerr == BZ_STREAM_END) {
82,92c82
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
85,92c85
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ_STREAM_END) {
89,92c89
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> ) {
89,92c89
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzread {
89,93c89
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
> BZ2_bzread (}
90,93d89
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
91,97c91
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
91,97c91
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int 
\ No newline at end of file
91,97c91
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int bzerr 
\ No newline at end of file
92,97c92
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
92,97c92
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
92,97c92
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
92,97c92
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
92,97c92
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
92,97c92
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
92,97c92
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
93,97c93
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
94,97d93
< }
< 
< 
< 
===< pass_clex :: rm-toks-7 >===
10,12c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> stdio.h>
10,12c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #.h>
10,12c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define h>
10,12c10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        >
12,13d11
< #include <stdio.h>
< 
12,14c12
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_API 
12,14c12
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include BZ_API 
(99.5 %, 930 bytes)
12,18d11
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
12,19c12
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
---
> #   0
12,21c12
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #   define typedef  BZFILE( 
13,21c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> BZFILE( 
13,21c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #   ( 
13,22c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   define )BZ_EXTERN void BZ2_bzReadGetUnused ( 
13,22c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #   define BZ_EXTERN BZ_EXTERN void BZ2_bzReadGetUnused ( 
19,22c19
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> void BZ2_bzReadGetUnused ( 
19,22c19
< #0
< 
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> #BZ2_bzReadGetUnused ( 
21,22c21
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
---
> ( 
21,23c21
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       unsigned , 
---
> typedef  unsigned , 
21,23c21
< typedef  BZFILE( 
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       unsigned , 
---
> typedef  BZFILE, 
22,23d21
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       unsigned , 
22,24c22
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       unsigned , 
<       unsigned * 
---
>       )* 
22,25c22
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       unsigned , 
<       unsigned * 
<    );
---
>       )BZ_EXTERN );
22,25c22
<       )BZ_EXTERN void BZ2_bzReadGetUnused ( 
<       unsigned , 
<       unsigned * 
<    );
---
>       )BZ_EXTERN void ;
(99.6 %, 867 bytes)
22,29c22
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
---
>       ;
22,38c22
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
---
>       unsigned BZ2_bzDecompressInit 
23,39c23
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
---
>    (  )
23,39c23
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
---
>    ))
28,39d27
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
28,43c28
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
---
> BZ2_bzBuffToBuffCompress }
29,50c29
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
---
>       #define BZ_SETERR}
29,50c29
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
---
>       )define BZ_SETERR}
38,50c38
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
---
> BZ_SETERR}
39,50c39
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
---
>                      }
39,55c39
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
---
>                      (  void BZ2_bzWriteClose
40,55c40
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
---
> BZ2_bzWriteClose
43,56c43
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
50,56c50
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> int*          bzerror, 
50,56c50
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> #*          bzerror, 
50,56c50
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> #define bzerror, 
50,56c50
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> #define BZ_SETERR, 
55,57c55
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> BZFILE       b, 
55,57c55
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> void b, 
56,57c56
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   , 
56,58c56
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int           abandon,
56,58c56
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( intabandon,
56,58c56
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
---
>                   ( int*          ,
56,59c56
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( int*          bzerrorunsigned * nbytes_in,
57,59c57
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     * nbytes_in,
57,59c57
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     BZFILE       nbytes_in,
(99.6 %, 786 bytes)
56,58c56
<                   ( int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( unsigned * nbytes_out )
56,58c56
<                   ( int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( int           * nbytes_out )
(99.7 %, 701 bytes)
56,61c56
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                   ( BZ2_bzWriteClose64
56,62c56
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                   ( unsigned ( int*          bzerror, 
56,62c56
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                   ( unsigned * int*          bzerror, 
56,62c56
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                   ( unsigned * nbytes_out *          bzerror, 
57,62c57
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> bzerror, 
58,62c58
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>    , 
61,63c61
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> BZFILE       b, 
61,63c61
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
> void b, 
62,63c62
<                   ( int*          bzerror, 
<                     BZFILE       b, 
---
>                   , 
62,64c62
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           nbytes_out_lo32,
---
>                   ( int           nbytes_out_lo32,
62,64c62
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           nbytes_out_lo32,
---
>                   ( intnbytes_out_lo32,
62,64c62
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           nbytes_out_lo32,
---
>                   ( int*          ,
62,65c62
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                   ( int*          bzerrorunsigned * nbytes_out_hi32 )
63,65c63
<                     BZFILE       b, 
<                     int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
63,65c63
<                     BZFILE       b, 
<                     int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     BZFILE       nbytes_out_hi32 )
(99.7 %, 620 bytes)
62,64c62
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                   ( {
62,66c62
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
---
>                   ( int           }
62,70c62
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
---
>                   ( int           nbytes_out_lo32BZ2_bzRead 
63,71c63
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
---
>                     ( )
63,71c63
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
---
>                     unsigned )
63,72c63
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
---
>                     unsigned * {
63,75c63
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
---
>                     unsigned * nbytes_out_hi32 }
64,78d63
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
66,79c66
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
---
>    ()
70,79c70
< BZ2_bzRead 
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
---
> )
71,80c71
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
---
>            {
71,81c71
<            ( )
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
>            ( int bzerr ;
72,81c72
< {
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
> bzerr ;
75,81c75
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
> ;
79,82c79
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
79,82c79
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzread (bzerr == BZ_STREAM_END) {
79,82c79
< BZ2_bzread ()
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzread (bzerr == BZ_STREAM_END) {
80,82c80
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
81,82c81
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    BZ_STREAM_END) {
81,82c81
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int ) {
81,82c81
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr {
82,83c82
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    }
82,84c82
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if }
82,87c82
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
82,87c82
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
82,87c82
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
82,87c82
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
82,87c82
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
83,87c83
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
84,87d83
< }
< 
< 
< 
===< pass_clex :: rm-toks-5 >===
10,12c10
< #define BZ_STREAM_END        9
< 
< #   define BZ_API 
---
> define BZ_API 
10,12c10
< #define BZ_STREAM_END        9
< 
< #   define BZ_API 
---
> #BZ_API 
10,13c10
< #define BZ_STREAM_END        9
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #define #   define BZ_EXTERN ;
10,13c10
< #define BZ_STREAM_END        9
< 
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #define BZ_STREAM_END        define BZ_EXTERN ;
12,13c12
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> BZ_EXTERN ;
12,13c12
< #   define BZ_API 
< #   define BZ_EXTERN ;
---
> #   ;
12,19c12
< #   define BZ_API 
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
---
> #   define #0
13,19c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
---
> 0
13,21c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #   typedef  BZFILE( 
13,21c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #   define BZFILE( 
13,21c13
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> #   define BZ_EXTERN ( 
19,22c19
< #0
< 
< typedef  BZFILE( 
<       unsigned * 
---
> unsigned * 
19,22c19
< #0
< 
< typedef  BZFILE( 
<       unsigned * 
---
> #* 
(99.7 %, 590 bytes)
12,20c12
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> BZFILE( 
12,20c12
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #0
< 
< typedef  BZFILE( 
---
> BZ_EXTERN ( 
18,21c18
< #0
< 
< typedef  BZFILE( 
<       unsigned * 
---
> unsigned * 
(99.7 %, 560 bytes)
12,14c12
< BZFILE( 
<       unsigned * 
<    );
---
> ;
12,19c12
< BZFILE( 
<       unsigned * 
<    );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
> BZFILEBZ2_bzBuffToBuffCompress ( 
(99.7 %, 529 bytes)
12,26d11
< ;
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
17,28c17
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
---
> (  )
17,28c17
< BZ2_bzBuffToBuffCompress ( 
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
---
> BZ2_bzBuffToBuffCompress )
18,29c18
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
---
>       {
18,32c18
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
---
>       )}
27,38d26
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
(99.8 %, 478 bytes)
12,23d11
< BZ2_bzDecompressInit 
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
13,24c13
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
---
>                      define BZ_SETERR}
13,24c13
<                      (  )
< {
<    
< 
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
---
>                      (  BZ_SETERR}
14,16d13
< {
<    
< 
18,24d14
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
17,28d16
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR}
< 
< 
< 
< 
24,29c24
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
---
> BZ2_bzWriteClose
(99.8 %, 415 bytes)
12,17c12
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
---
> BZ2_bzWriteClose
12,18c12
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> #( unsigned * nbytes_out )
12,18c12
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> #define unsigned * nbytes_out )
12,18c12
< #define BZ_SETERR}
< 
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> #define BZ_SETERR* nbytes_out )
17,18c17
< void BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> nbytes_out )
17,18c17
< void BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> void )
18,19c18
<                   ( unsigned * nbytes_out )
< {
---
>                   {
18,20c18
<                   ( unsigned * nbytes_out )
< {
<    }
---
>                   ( }
18,23c18
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                   ( unsigned void BZ2_bzWriteClose64
18,23c18
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                   ( unsigned * BZ2_bzWriteClose64
(99.8 %, 387 bytes)
12,13c12
< BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> )
13,14c13
<                   ( unsigned * nbytes_out )
< {
---
>                   {
13,15c13
<                   ( unsigned * nbytes_out )
< {
<    }
---
>                   ( }
13,18c13
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                   ( unsigned void BZ2_bzWriteClose64
13,18c13
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                   ( unsigned * BZ2_bzWriteClose64
13,19c13
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int           nbytes_out_lo32,
---
>                   ( unsigned * nbytes_out ( int           nbytes_out_lo32,
14,19c14
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int           nbytes_out_lo32,
---
> int           nbytes_out_lo32,
15,19c15
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int           nbytes_out_lo32,
---
>    nbytes_out_lo32,
18,19c18
< void BZ2_bzWriteClose64
<                   ( int           nbytes_out_lo32,
---
> ,
18,20c18
< void BZ2_bzWriteClose64
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
> void unsigned * nbytes_out_hi32 )
19,20c19
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                   * nbytes_out_hi32 )
19,20c19
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                   ( nbytes_out_hi32 )
19,20c19
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                   ( int           )
19,21c19
<                   ( int           nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                   ( int           nbytes_out_lo32{
20,23c20
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
---
>                     }
20,27c20
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
---
>                     unsigned BZ2_bzRead 
20,28c20
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
---
>                     unsigned * ( )
23,30d22
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
(99.8 %, 325 bytes)
19,27c19
<                   ( nbytes_out_hi32 )
< {
<    
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
---
>                   ( ( )
22,29d21
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
22,29d21
<    }
< 
< 
< 
< BZ2_bzRead 
<            ( )
< {
<    
(99.9 %, 284 bytes)
21,28d20
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
21,28d20
<    
<     
< }
< 
< 
< 
< BZ2_bzread ()
< {
23,29c23
< }
< 
< 
< 
< BZ2_bzread ()
< {
<    int bzerr ;
---
> int bzerr ;
(99.9 %, 254 bytes)
19,22c19
<                   ( nbytes_out_hi32 )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( nbytes_out_hi32 if (bzerr == BZ_STREAM_END) {
20,22c20
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if {
22,23c22
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (}
22,24c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr }
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
23,27c23
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
24,27d23
< }
< 
< 
< 
===< pass_clex :: rm-toks-4 >===
10,11d9
< #define BZ_STREAM_END        9
< 
10,13c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> #( unsigned * nbytes_out )
10,13c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> #define unsigned * nbytes_out )
10,13c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> #define BZ_STREAM_END        * nbytes_out )
12,13c12
< BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> nbytes_out )
13c13
<                   ( unsigned * nbytes_out )
---
>                   )
13,14c13
<                   ( unsigned * nbytes_out )
< {
---
>                   ( {
13,15c13
<                   ( unsigned * nbytes_out )
< {
<    }
---
>                   ( unsigned }
13,18c13
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                   ( unsigned * void BZ2_bzWriteClose64
13,18c13
<                   ( unsigned * nbytes_out )
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>                   ( unsigned * nbytes_out BZ2_bzWriteClose64
14,19c14
< {
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( nbytes_out_hi32 )
---
> ( nbytes_out_hi32 )
15,19c15
<    }
< 
< 
< void BZ2_bzWriteClose64
<                   ( nbytes_out_hi32 )
---
>    nbytes_out_hi32 )
18,19c18
< void BZ2_bzWriteClose64
<                   ( nbytes_out_hi32 )
---
> )
18,20c18
< void BZ2_bzWriteClose64
<                   ( nbytes_out_hi32 )
< {
---
> void {
19,21c19
<                   ( nbytes_out_hi32 )
< {
<    int bzerr ;
---
>                   int bzerr ;
19,21c19
<                   ( nbytes_out_hi32 )
< {
<    int bzerr ;
---
>                   ( bzerr ;
19,21c19
<                   ( nbytes_out_hi32 )
< {
<    int bzerr ;
---
>                   ( nbytes_out_hi32 ;
20,22c20
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    (bzerr == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if ({
22,23c22
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr }
22,24c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == }
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
23,27c23
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
24,27d23
< }
< 
< 
< 
===< pass_clex :: rm-toks-1 >===
10c10
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        9
10c10
< #define BZ_STREAM_END        9
---
> #BZ_STREAM_END        9
10c10
< #define BZ_STREAM_END        9
---
> #define 9
10,12c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
---
> #define BZ_STREAM_END        BZ2_bzWriteClose
12,13c12
< BZ2_bzWriteClose
<                   ( unsigned * nbytes_out )
---
> ( unsigned * nbytes_out )
13c13
<                   ( unsigned * nbytes_out )
---
>                   unsigned * nbytes_out )
13c13
<                   ( unsigned * nbytes_out )
---
>                   ( * nbytes_out )
13c13
<                   ( unsigned * nbytes_out )
---
>                   ( unsigned nbytes_out )
13c13
<                   ( unsigned * nbytes_out )
---
>                   ( unsigned * )
13,14c13
<                   ( unsigned * nbytes_out )
< {
---
>                   ( unsigned * nbytes_out {
14,15c14
< {
<    }
---
> }
15,18c15
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>    void BZ2_bzWriteClose64
18c18
< void BZ2_bzWriteClose64
---
> BZ2_bzWriteClose64
(99.9 %, 252 bytes)
13c13
<                   ( unsigned nbytes_out )
---
>                   ( unsigned )
13,14c13
<                   ( unsigned nbytes_out )
< {
---
>                   ( unsigned nbytes_out {
14,15c14
< {
<    }
---
> }
15,18c15
<    }
< 
< 
< void BZ2_bzWriteClose64
---
>    void BZ2_bzWriteClose64
18c18
< void BZ2_bzWriteClose64
---
> BZ2_bzWriteClose64
18,19c18
< void BZ2_bzWriteClose64
<                   ( nbytes_out_hi32 )
---
> void ( nbytes_out_hi32 )
19c19
<                   ( nbytes_out_hi32 )
---
>                   nbytes_out_hi32 )
19c19
<                   ( nbytes_out_hi32 )
---
>                   ( )
(99.9 %, 247 bytes)
18,19c18
< BZ2_bzWriteClose64
<                   ( nbytes_out_hi32 )
---
> ( nbytes_out_hi32 )
19c19
<                   ( nbytes_out_hi32 )
---
>                   nbytes_out_hi32 )
19c19
<                   ( nbytes_out_hi32 )
---
>                   ( )
19,20c19
<                   ( nbytes_out_hi32 )
< {
---
>                   ( nbytes_out_hi32 {
20,21c20
< {
<    int bzerr ;
---
> int bzerr ;
21c21
<    int bzerr ;
---
>    bzerr ;
21c21
<    int bzerr ;
---
>    int ;
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr if (bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    (bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (== BZ_STREAM_END) {
(99.9 %, 231 bytes)
19,20c19
<                   ( )
< {
---
>                   ( {
20,21c20
< {
<    int bzerr ;
---
> int bzerr ;
21c21
<    int bzerr ;
---
>    bzerr ;
21c21
<    int bzerr ;
---
>    int ;
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr if (bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    (bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (== BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END{
22,23c22
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) }
24d23
< }
24,27d23
< }
< 
< 
< 
Termination check: size was 1513; now 231
===< pass_balanced :: curly-only >===
14,15c14,15
< {
<    }
---
> 
>    
27a28
>  
\ No newline at end of file
20c20
< {
---
> 
24d23
< }
27a27,28
> 
>  
\ No newline at end of file
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
>       
27a28
>  
\ No newline at end of file
===< pass_clang :: param-to-local >===
13c13
<                   ( unsigned nbytes_out )
---
>                   ( void )
14a15
>     unsigned int nbytes_out = 0;
(99.9 %, 249 bytes)
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-6 >===
10,13c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
<                   ( void )
---
> void )
10,13c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
<                   ( void )
---
> #)
10,14c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
<                   ( void )
< {
---
> #define {
10,15c10
< #define BZ_STREAM_END        9
< 
< BZ2_bzWriteClose
<                   ( void )
< {
<     unsigned int nbytes_out = 0;
---
> #define BZ_STREAM_END        unsigned int nbytes_out = 0;
12,15c12
< BZ2_bzWriteClose
<                   ( void )
< {
<     unsigned int nbytes_out = 0;
---
> int nbytes_out = 0;
13,15c13
<                   ( void )
< {
<     unsigned int nbytes_out = 0;
---
>                   nbytes_out = 0;
13,15c13
<                   ( void )
< {
<     unsigned int nbytes_out = 0;
---
>                   ( = 0;
13,15c13
<                   ( void )
< {
<     unsigned int nbytes_out = 0;
---
>                   ( void 0;
14,15c14
< {
<     unsigned int nbytes_out = 0;
---
> ;
15,16c15
<     unsigned int nbytes_out = 0;
<    }
---
>     }
15,19c15
<     unsigned int nbytes_out = 0;
<    }
< 
< 
< BZ2_bzWriteClose64
---
>     unsigned BZ2_bzWriteClose64
15,20c15
<     unsigned int nbytes_out = 0;
<    }
< 
< 
< BZ2_bzWriteClose64
<                   ( )
---
>     unsigned int ( )
15,20c15
<     unsigned int nbytes_out = 0;
<    }
< 
< 
< BZ2_bzWriteClose64
<                   ( )
---
>     unsigned int nbytes_out )
15,21c15
<     unsigned int nbytes_out = 0;
<    }
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
---
>     unsigned int nbytes_out = {
15,22c15
<     unsigned int nbytes_out = 0;
<    }
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
>     unsigned int nbytes_out = 0int bzerr ;
16,22c16
<    }
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
>    bzerr ;
19,22c19
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> ;
20,23c20
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   if (bzerr == BZ_STREAM_END) {
(99.9 %, 217 bytes)
15,21c15
<     }
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
>     bzerr ;
18,21c18
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> ;
19,22c19
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   if (bzerr == BZ_STREAM_END) {
19,22c19
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( (bzerr == BZ_STREAM_END) {
20,22c20
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    == BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int BZ_STREAM_END) {
21,22c21
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    {
22,23c22
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if }
22,24c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (}
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
22,27c22
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
23,27c23
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
24,27d23
< }
< 
< 
< 
===< pass_clex :: rm-tok-pattern-4 >===
10c10
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        9
10c10
< #define BZ_STREAM_END        9
---
>  BZ_STREAM_END        9
10c10
< #define BZ_STREAM_END        9
---
> define         9
10c10
< #define BZ_STREAM_END        9
---
>          9
10c10
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        
10c10
< #define BZ_STREAM_END        9
---
>  BZ_STREAM_END        
10c10
< #define BZ_STREAM_END        9
---
> define         
10c10
< #define BZ_STREAM_END        9
---
>          
10c10
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        9
10c10
< #define BZ_STREAM_END        9
---
> #         9
10c10
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        
10c10
< #define BZ_STREAM_END        9
---
> #         
10c10,11
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        9
> 
12d12
< BZ2_bzWriteClose
10c10,11
< #define BZ_STREAM_END        9
---
> #         9
> 
12d12
< BZ2_bzWriteClose
10c10,11
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        
> 
12d12
< BZ2_bzWriteClose
10c10,11
< #define BZ_STREAM_END        9
---
> #         
> 
12d12
< BZ2_bzWriteClose
10c10
< #define BZ_STREAM_END        9
---
> #define         9
10c10
< #define BZ_STREAM_END        9
---
> #define         
10c10,11
< #define BZ_STREAM_END        9
---
> #define         9
> 
12d12
< BZ2_bzWriteClose
10c10,11
< #define BZ_STREAM_END        9
---
> #define         
> 
12d12
< BZ2_bzWriteClose
10c10
< #define BZ_STREAM_END        9
---
> #define         9
13c13
<                   ( void )
---
>                    void )
10c10
< #define BZ_STREAM_END        9
---
> #define         
13c13
<                   ( void )
---
>                    void )
10c10
< #define BZ_STREAM_END        9
---
> #define         9
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                    void )
10c10
< #define BZ_STREAM_END        9
---
> #define         
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                    void )
10c10
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
10c10,11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
> 
12d12
< BZ2_bzWriteClose
10c10
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
<                   ( void )
---
>                    void )
10c10
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                    void )
10c10
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
<                   ( void )
---
>                   (  )
10c10
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                   (  )
10c10
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
<                   ( void )
---
>                     )
10c10
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                     )
12c12
< BZ2_bzWriteClose
---
> 
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                    void )
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                   (  )
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                     )
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                   ( void 
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                    void 
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                   (  
12,13c12,13
< BZ2_bzWriteClose
<                   ( void )
---
> 
>                     
13c13
<                   ( void )
---
>                    void )
13c13
<                   ( void )
---
>                     )
13c13
<                   ( void )
---
>                    void 
13c13
<                   ( void )
---
>                     
13,14c13,14
<                   ( void )
< {
---
>                    void )
> 
13,14c13,14
<                   ( void )
< {
---
>                     )
> 
13,14c13,14
<                   ( void )
< {
---
>                    void 
> 
13,14c13,14
<                   ( void )
< {
---
>                     
> 
13c13
<                   ( void )
---
>                   (  )
13c13
<                   ( void )
---
>                   (  
13,14c13,14
<                   ( void )
< {
---
>                   (  )
> 
13,14c13,14
<                   ( void )
< {
---
>                   (  
> 
13c13
<                   ( void )
---
>                   (  )
15c15
<     }
---
>     
13c13
<                   ( void )
---
>                   (  
15c15
<     }
---
>     
13,15c13,15
<                   ( void )
< {
<     }
---
>                   (  )
> 
>     
13,15c13,15
<                   ( void )
< {
<     }
---
>                   (  
> 
>     
13c13
<                   ( void )
---
>                   ( void 
13,14c13,14
<                   ( void )
< {
---
>                   ( void 
> 
(99.9 %, 213 bytes)
13c13
<                   (  )
---
>                   (  
13,14c13,14
<                   (  )
< {
---
>                   (  
> 
13c13
<                   (  )
---
>                   (  
15c15
<     }
---
>     
13,15c13,15
<                   (  )
< {
<     }
---
>                   (  
> 
>     
13c13
<                   (  )
---
>                   (  
18c18
< BZ2_bzWriteClose64
---
> 
13,14c13,14
<                   (  )
< {
---
>                   (  
> 
18c18
< BZ2_bzWriteClose64
---
> 
13c13
<                   (  )
---
>                   (  
15c15,16
<     }
---
>     
> 
18d18
< BZ2_bzWriteClose64
13,15c13,16
<                   (  )
< {
<     }
---
>                   (  
> 
>     
> 
18d18
< BZ2_bzWriteClose64
14c14
< {
---
> 
14,15c14,15
< {
<     }
---
> 
>     
14c14
< {
---
> 
18c18
< BZ2_bzWriteClose64
---
> 
14,15c14,16
< {
<     }
---
> 
>     
> 
18d18
< BZ2_bzWriteClose64
14c14
< {
---
> 
19c19
<                   ( )
---
>                    )
14,15c14,15
< {
<     }
---
> 
>     
19c19
<                   ( )
---
>                    )
14c14
< {
---
> 
18,19c18,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
>                    )
14,15d13
< {
<     }
16a15
>     
18,19c17,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
> 
>                    )
15c15
<     }
---
>     
15c15,16
<     }
---
>     
> 
18d18
< BZ2_bzWriteClose64
15c15
<     }
---
>     
19c19
<                   ( )
---
>                    )
15c15
<     }
---
>     
18,19c18,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
>                    )
15c15
<     }
---
>     
19c19
<                   ( )
---
>                   ( 
15c15
<     }
---
>     
18,19c18,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
>                   ( 
15c15
<     }
---
>     
19c19
<                   ( )
---
>                    
15c15
<     }
---
>     
18,19c18,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
>                    
18c18
< BZ2_bzWriteClose64
---
> 
18,19c18,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
>                    )
18,19c18,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
>                   ( 
18,19c18,19
< BZ2_bzWriteClose64
<                   ( )
---
> 
>                    
18c18
< BZ2_bzWriteClose64
---
> 
20c20
< {
---
> 
18,20c18,20
< BZ2_bzWriteClose64
<                   ( )
< {
---
> 
>                    )
> 
18,20c18,20
< BZ2_bzWriteClose64
<                   ( )
< {
---
> 
>                   ( 
> 
18,20c18,20
< BZ2_bzWriteClose64
<                   ( )
< {
---
> 
>                    
> 
19c19
<                   ( )
---
>                    )
19c19
<                   ( )
---
>                    
19,20c19,20
<                   ( )
< {
---
>                    )
> 
19,20c19,20
<                   ( )
< {
---
>                    
> 
19c19
<                   ( )
---
>                    )
21c21
<    int bzerr ;
---
>     bzerr ;
19c19
<                   ( )
---
>                    
21c21
<    int bzerr ;
---
>     bzerr ;
19,21c19,21
<                   ( )
< {
<    int bzerr ;
---
>                    )
> 
>     bzerr ;
19,21c19,21
<                   ( )
< {
<    int bzerr ;
---
>                    
> 
>     bzerr ;
19c19
<                   ( )
---
>                   ( 
19,20c19,20
<                   ( )
< {
---
>                   ( 
> 
19c19
<                   ( )
---
>                   ( 
21c21
<    int bzerr ;
---
>     bzerr ;
19,21c19,21
<                   ( )
< {
<    int bzerr ;
---
>                   ( 
> 
>     bzerr ;
19c19
<                   ( )
---
>                   ( 
21c21
<    int bzerr ;
---
>    int  ;
19,21c19,21
<                   ( )
< {
<    int bzerr ;
---
>                   ( 
> 
>    int  ;
19c19
<                   ( )
---
>                   ( 
21c21
<    int bzerr ;
---
>      ;
19,21c19,21
<                   ( )
< {
<    int bzerr ;
---
>                   ( 
> 
>      ;
20c20
< {
---
> 
20,21c20,21
< {
<    int bzerr ;
---
> 
>     bzerr ;
20,21c20,21
< {
<    int bzerr ;
---
> 
>    int  ;
20,21c20,21
< {
<    int bzerr ;
---
> 
>      ;
20,21c20,21
< {
<    int bzerr ;
---
> 
>    int bzerr 
20,21c20,21
< {
<    int bzerr ;
---
> 
>     bzerr 
20,21c20,21
< {
<    int bzerr ;
---
> 
>    int  
20,21c20,21
< {
<    int bzerr ;
---
> 
>      
21c21
<    int bzerr ;
---
>     bzerr ;
21c21
<    int bzerr ;
---
>      ;
21c21
<    int bzerr ;
---
>     bzerr 
21c21
<    int bzerr ;
---
>      
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr ;
>     (bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>      ;
>     (bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr 
>     (bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>      
>     (bzerr == BZ_STREAM_END) {
21c21
<    int bzerr ;
---
>    int  ;
21c21
<    int bzerr ;
---
>    int  
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int  ;
>     (bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int  
>     (bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int  ;
>    if bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int  
>    if bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int  ;
>     bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int  
>     bzerr == BZ_STREAM_END) {
21c21
<    int bzerr ;
---
>    int bzerr 
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     (bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     bzerr == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if ( == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     ( == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if  == BZ_STREAM_END) {
21,22c21,22
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>      == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>     (bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>     ( == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>      == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>     (bzerr  BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr  BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>     (  BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>       BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if  == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr  BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if   BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if  == ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr  ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if   ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_STREAM_END {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  BZ_STREAM_END {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( ==  {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (   {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr   {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END) 
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  ) 
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END 
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr   
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr ==  {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) 
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr ==  
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == ) {
>       
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr ==  {
>       
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == ) 
>       
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr ==  
>       
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END {
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END 
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END {
>       
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END 
>       
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END {
24c24
< }
---
> 
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END 
24c24
< }
---
> 
22,24c22,24
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END {
>       
> 
22,24c22,24
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END 
>       
> 
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
>       
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
24c24
< }
---
> 
22,24c22,24
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END) 
>       
> 
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
22,23c22,23
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
>       
22c22
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
24c24
< }
---
> 
22,24c22,24
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END) 
>       
> 
23c23
<       }
---
>       
23,24c23,24
<       }
< }
---
>       
> 
23c23
<       }
---
>       
23,24c23,24
<       }
< }
---
>       
> 
23c23
<       }
---
>       
23,24c23,24
<       }
< }
---
>       
> 
23c23
<       }
---
>       
23,24c23,24
<       }
< }
---
>       
> 
24c24
< }
---
> 
24c24
< }
---
> 
24c24
< }
---
> 
24c24
< }
---
> 
24c24
< }
---
> 
24c24
< }
---
> 
24c24
< }
---
> 
24c24
< }
---
> 
Termination check: size was 231; now 213
===< pass_balanced :: angles-only >===
===< pass_clang :: remove-namespace >===
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-function >===
12,15c12
< BZ2_bzWriteClose
<                   (  )
< {
<     }
---
> 
18,24c18
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
(99.9 %, 166 bytes)
15,21c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-array >===
===< pass_clang :: simplify-struct >===
===< pass_unifdef :: 0 >===
===< pass_clex :: rm-toks-16 >===
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> ) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #{
10,20c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
> #define }
10,21c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> #define BZ_STREAM_END        }
15,24d14
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
16,24c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>                   
\ No newline at end of file
16,24c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>                   ( 
\ No newline at end of file
17,24d16
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int 
\ No newline at end of file
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
===< pass_clex :: rm-toks-12 >===
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END        BZ_STREAM_END) {
15,19c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> ) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   {
16,20c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>                   ( }
17,20d16
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int 
\ No newline at end of file
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
===< pass_clex :: rm-toks-10 >===
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> ;
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #if (bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define (bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END        bzerr == BZ_STREAM_END) {
15,19c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( ) {
18,19d17
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
18,20c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    }
18,21c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    int }
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
===< pass_clex :: rm-toks-8 >===
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> int bzerr ;
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> #bzerr ;
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> #define ;
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END        if (bzerr == BZ_STREAM_END) {
15,19c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   bzerr == BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( == BZ_STREAM_END) {
17,19c17
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> BZ_STREAM_END) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    ) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int {
18,20c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    int bzerr }
19,21c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    }
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
===< pass_clex :: rm-toks-6 >===
10,16c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
---
> )
10,17c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
---
> #{
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> #define int bzerr ;
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> #define BZ_STREAM_END        bzerr ;
15,18c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> ;
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   if (bzerr == BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( (bzerr == BZ_STREAM_END) {
17,19c17
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    == BZ_STREAM_END) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int BZ_STREAM_END) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr ) {
19c19
<    if (bzerr == BZ_STREAM_END) {
---
>    {
19,20c19
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if }
19,21c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (}
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
Termination check: size was 213; now 166
===< pass_ternary :: c >===
===< pass_balanced :: parens >===
16c16
<                   ( )
---
>                   
24a25
>  
\ No newline at end of file
19c19
<    if (bzerr == BZ_STREAM_END) {
---
>    if  {
24a25
>  
\ No newline at end of file
===< pass_clang :: local-to-global >===
14a15
> int BZ2_bzWriteClose64_bzerr;
18,19c19,20
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    
>    if (BZ2_bzWriteClose64_bzerr == BZ_STREAM_END) {
===< pass_clang :: param-to-global >===
===< pass_clang :: copy-propagation >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-function >===
15,21c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
===< pass_clang :: remove-unused-var >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-undefined-function >===
===< pass_ints :: b >===
===< pass_ints :: c >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-12 >===
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END        BZ_STREAM_END) {
15,19c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> ) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   {
16,20c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>                   ( }
17,20d16
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int 
\ No newline at end of file
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
===< pass_clex :: rm-toks-10 >===
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> ;
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #if (bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define (bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END        bzerr == BZ_STREAM_END) {
15,19c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( ) {
18,19d17
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
18,20c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    }
18,21c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    int }
18,24c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    int bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
===< pass_clex :: rm-toks-9 >===
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> bzerr ;
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> #;
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define if (bzerr == BZ_STREAM_END) {
10,19c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END        (bzerr == BZ_STREAM_END) {
15,19c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   == BZ_STREAM_END) {
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( BZ_STREAM_END) {
17,19c17
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> ) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    {
18,20c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    int }
18,21c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    int bzerr }
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
===< pass_clex :: rm-toks-5 >===
10,16c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
---
> ( )
10,16c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
---
> #)
10,17c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
---
> #define {
10,18c10
< #define BZ_STREAM_END        9
< 
< 
< 
< 
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> #define BZ_STREAM_END        int bzerr ;
15,18c15
< BZ2_bzWriteClose64
<                   ( )
< {
<    int bzerr ;
---
> bzerr ;
16,18c16
<                   ( )
< {
<    int bzerr ;
---
>                   ;
16,19c16
<                   ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>                   ( if (bzerr == BZ_STREAM_END) {
17,19c17
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_STREAM_END) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int == BZ_STREAM_END) {
18,19c18
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr BZ_STREAM_END) {
19c19
<    if (bzerr == BZ_STREAM_END) {
---
>    ) {
19c19
<    if (bzerr == BZ_STREAM_END) {
---
>    if {
19,20c19
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (}
19,21c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr }
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
19,24c19
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
20,24c20
<       }
< }
< 
< 
< 
---
>       
\ No newline at end of file
21,24d20
< }
< 
< 
< 
Termination check: size was 166; now 166
===< pass_clang :: rename-fun >===
15c15
< BZ2_bzWriteClose64
---
> fn1
(99.9 %, 151 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
18,19c18,19
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int a ;
>    if (a == BZ_STREAM_END) {
(99.9 %, 143 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
1d0
<  
3,9d1
< 
< 
< 
< 
< 
< 
<                  
12,16c4
< 
< 
< 
< fn1
<                   ( )
---
> fn1 (  )
18,20c6,9
<    int a ;
<    if (a == BZ_STREAM_END) {
<       }
---
>   int a;
>   if ( a == BZ_STREAM_END )
>     {
>     }
22,24d10
< 
< 
< 
1d0
<  
9c8,9
<                  
---
> 
> 
16c16
<                   ( )
---
> ( )
18,20c18,20
<    int a ;
<    if (a == BZ_STREAM_END) {
<       }
---
>     int a ;
>     if (a == BZ_STREAM_END) {
>     }
(100.0 %, 95 bytes)
6,7c6,7
<   int a;
<   if ( a == BZ_STREAM_END )
---
>     int a;
>     if ( a == BZ_STREAM_END )
2c2
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END 9
4,5c4
< fn1 (  )
< {
---
> fn1() {
7,9c6,7
<   if ( a == BZ_STREAM_END )
<     {
<     }
---
>   if (a == BZ_STREAM_END) {
>   }
(100.0 %, 99 bytes)
2c2
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END 9
4,9c4,7
< fn1 (  )
< {
<     int a;
<     if ( a == BZ_STREAM_END )
<     {
<     }
---
> fn1() {
>   int a;
>   if (a == BZ_STREAM_END) {
>   }
(100.0 %, 77 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 0 times
  method pass_balanced :: angles-only worked 13 times and failed 33 times
  method pass_balanced :: curly worked 69 times and failed 50 times
  method pass_balanced :: curly-only worked 0 times and failed 3 times
  method pass_balanced :: parens worked 0 times and failed 2 times
  method pass_balanced :: parens-only worked 3 times and failed 35 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 23 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 4 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 1 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 9 times and failed 28 times
  method pass_clang :: param-to-local worked 16 times and failed 5 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 67 times and failed 1 times
  method pass_clang :: remove-unused-function worked 6 times and failed 3 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 38 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 6 times and failed 7 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 2 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 1 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 203 times and failed 4264 times
  method pass_clex :: rm-toks-1 worked 3 times and failed 27 times
  method pass_clex :: rm-toks-10 worked 0 times and failed 40 times
  method pass_clex :: rm-toks-11 worked 12 times and failed 341 times
  method pass_clex :: rm-toks-12 worked 41 times and failed 1599 times
  method pass_clex :: rm-toks-13 worked 54 times and failed 1881 times
  method pass_clex :: rm-toks-14 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-15 worked 213 times and failed 2582 times
  method pass_clex :: rm-toks-16 worked 0 times and failed 20 times
  method pass_clex :: rm-toks-2 worked 140 times and failed 1039 times
  method pass_clex :: rm-toks-3 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-4 worked 0 times and failed 30 times
  method pass_clex :: rm-toks-5 worked 9 times and failed 50 times
  method pass_clex :: rm-toks-6 worked 8 times and failed 241 times
  method pass_clex :: rm-toks-7 worked 5 times and failed 75 times
  method pass_clex :: rm-toks-8 worked 52 times and failed 1393 times
  method pass_clex :: rm-toks-9 worked 0 times and failed 20 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 0 times and failed 0 times
  method pass_ints :: a worked 155 times and failed 2 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 9 times and failed 4542 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 14 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454652256.17568/bzip2.c' reduced to:

#define BZ_STREAM_END 9

fn1() {
  int a;
  if (a == BZ_STREAM_END) {
  }
}
1749.54user 498.27system 25:35.11elapsed 146%CPU (0avgtext+0avgdata 60640maxresident)k
11176inputs+14150544outputs (75major+187591227minor)pagefaults 0swaps
